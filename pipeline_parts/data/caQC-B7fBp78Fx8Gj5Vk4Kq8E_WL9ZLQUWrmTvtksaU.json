"{\"content\":{\"body\":\"## 1. 解决痛点\\n\\n供应链金融的服务对象主要为中小企业，比较常见的是应收账款质押贷款或订单融资。\\n\\n作为应收账款付款人的核心企业，其资信好、付款能力强，违约风险较低，所以中小企业将应收账款或订单向银行作为还款保证，其授信额度和融资成本自然也会下降。\\n\\n供应链金融围绕三个主体：**供应商、核心企业和经销商**。\\n\\n它依托于产业供应链核心企业，对单个企业或上下游多个企业提供全面金融服务，以促进供应链上核心企业及上下游配套企业「产-供-销」链条的稳固和流转顺畅，降低整个供应链运作成本。并且，通过金融资本与实业经济的协作，能够构建银行、企业和供应链互利共存的产业生态。\\n\\n目前存在的问题是回款慢，导致下游的小的供应商不能及时拿到尾款导致资金断链。\\n\\n## 2. 设计理念\\n\\n基于区块链的供应链金融和贸易金融是基于分布式网络改造现有的大规模协作流程的典型。区块链可以缓解信息不对称的问题，十分适合供应链金融的发展。\\n\\n供应链中商品从卖家到买家伴随着货币支付活动，在高信贷成本和企业现金流需求的背景下，金融服务公司提供商品转移和货款支付保障。供应链溯源防伪、交易验真、及时清算的特点将解决现有贸易金融网络中的诸多痛点，塑造下一代供应链金融的基础设施。\\n\\n简单来说，供应链就是一系列交易节点，它连接着产品从供应端到销售端或终端的全过程。从生产到销售，产品历经了供应链的多个环节，有了区块链技术，交易就会被永久性、去中心化地记录，这降低了时间延误、成本和人工错误。\\n\\n### 新型的纯线上供应链金融服务模式：\\n\\n基于FISCO BCOS区块链技术，以核心企业为中心，以实际贸易背景为基础，为核心企业上下游提供融资金融服务。\\n\\n### 线上供应链金融生态圈：\\n\\n平台依托区块链一系列新型金融科技技术与产业经济的深度融合，通过核心企业汇聚1-N级供应商，引入合作银行等外部金融机构，共同构建及维护完整的线上供应链生态圈。\\n\\n### 本案例试用场景可在两个模式下进行探索\\n\\n#### 1）银行作为资金托管方\\n\\n银行作为一个节点机构加入联盟链组织，在供应链各方签名确认后，银行再根据比例分成将资金打到各级供应商账户（为主要模式）\\n\\n#### 2）普通C端用户消费商品\\n\\n普通C端用户也可以作为节点，对于消费产品之后，链上的各方签名确认以后，自动分成结算（还在探索业务模式中）\\n\\n## 3. 系统架构\\n\\n![供应链金融](https://user-images.githubusercontent.com/11324122/123046786-1c671080-d42f-11eb-9683-ac407d338e22.jpg)\\n\\n### 3.1 抽象系统层\\n\\n抽象系统层描述的是底层合约层，主要涉及两部分合约，第一部分合约是存证合约，用于存储新建一条完整供应链的信息，主要存储各级供应商分成比例信息，将这部分信息上链；\\n然后包括各方签名功能，多方签名确认后才可以进行分成，本案例模拟支付将由积分下发模式来进行演示。\\n第二部分合约是积分合约，主要作用是供应链多方确认完成，模拟支付的时候用来积分下发的，积分是预分配的模式来进行管理的。也就是需要在WeBASE管理平台编译部署好积分合约，然后\\n新建一个私钥账户，通过给该账户分配积分（比如999999999），然后在此案例中模拟支付的功能里，分配的积分就是从该账户里扣除下发到各级供应商的。\\n\\n### 3.2 具体业务层\\n\\n#### 新建供应链流程图\\n\\n![新建供应链](https://user-images.githubusercontent.com/11324122/123050128-f04d8e80-d432-11eb-9228-69acb6cc0478.jpg)\\n\\n#### 多方签名流程图\\n\\n![多方签名](https://user-images.githubusercontent.com/11324122/123050155-f8a5c980-d432-11eb-9427-322d25887e8c.jpg)\\n\\n#### 模拟支付流程图\\n\\n![积分下发](https://user-images.githubusercontent.com/11324122/123050170-fd6a7d80-d432-11eb-99ae-4495540bfb40.jpg)\\n\\n## 4. 程序运行\\n\\n### 4.1 前置工作\\n\\n首先需要搭建FISCO BCOS链与WeBASE服务，本案例通过WeBASE一键部署搭建4节点的链和WeBASE服务\\n\\n参考WeBASE官方提供的[文档](https://webasedoc.readthedocs.io/zh_CN/latest/docs/WeBASE/install.html)，详情请参见：<https://webasedoc.readthedocs.io/zh_CN/latest/docs/WeBASE/install.html>\\n\\n* **注**：部署WeBASE时注意修改一键部署的配置文件`common.properties`中修改`node.counts=4`来搭建4节点的链\\n\\n### 4.2 依赖安装\\n\\n#### maven安装\\n\\n```Bash\\n# 下载maven包\\nwget https://mirrors.bfsu.edu.cn/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz\\n# 解压\\ntar -zxvf apache-maven-3.8.1-bin.tar.gz\\n# 重命名\\nmv apache-maven-3.8.1-bin maven\\n# 查看当前路径\\ncd maven/\\npwd\\n\\t/data/home/webase/maven\\n\\n# 配置mvn环境变量\\nvi /etc/profile \\n\\n\\texport MAVEN_HOME=/data/home/webase/maven\\n\\texport PATH=$PATH:$MAVEN_HOME/bin\\n\\n# 更新环境变量\\nsource /etc/profile \\n# 检查mvn命令，正常输出版本号则安装成功\\nmvn -v\\n```\\n\\n#### npm安装\\n\\n```Bash\\n# 下载node包\\nwget https://npm.taobao.org/mirrors/node/v10.16.2/node-v10.16.2-linux-x64.tar.gz\\n# 解压\\ntar -zxvf node-v10.16.2-linux-x64.tar.gz\\n# 重命名\\nmv node-v10.16.2-linux-x64 node\\n# 查看路径\\ncd node/\\npwd\\n\\t/data/home/webase/node\\n\\n# 配置node环境变量\\nvi /etc/profile \\n\\n\\texport NODE_HOME=/data/home/webase/node\\n\\texport PATH=$PATH:$NODE_HOME/bin\\n\\n# 更新环境变量\\nsource /etc/profile \\n\\n# 检查npm命令，正常输出版本号则安装成功\\nnpm -v\\n```\\n\\n#### mysql创建数据库\\n\\n以mysql用户为root为例，创建`supplychain`的数据库\\n\\n```\\nmysql -uroot -p -e \\\"create database supplychain\\\"\\n```\\n\\n### 4.2 拉取代码\\n\\n1 拉取代码\\n\\n```\\ngit clone https://github.com/jiuyu-software/supply-chain-demo.git\\n## 网络失败时，使用gitee尝试\\ngit clone https://gitee.com/cattwo/supply-chain-demo.git\\n```\\n\\n项目源码中包含`frontend`前端代码和`backend`后端代码，目录结构如下\\n\\n```Bash\\ncd cd supply-chain-demo/\\nls\\n```\\n\\n```Bash\\n├── backend\\n│   └── supply-chain-demo\\n├── frontend\\n│   └── supplychain\\n└── README.md\\n```\\n\\n### 4.4 前端代码部署\\n\\n前端代码基于VUE编写\\n\\n#### 1 修改配置文件\\n\\n进入`frontend/supplychain`目录，修改配置文件`vue.config.js`中`proxy`，连接上文的backend后端服务\\n\\n```Bash\\ncd frontend/supplychain\\nvi vue.config.js\\n```\\n\\n```Bash\\n# 以同机运行为例，后端服务同机运行，IP为127.0.0.1，端口为8080\\n# 修改proxy.target的值为对应的IP:PORT\\n    proxy: {\\n      // change xxx-api/login => mock/login\\n      // detail: https://cli.vuejs.org/config/#devserver-proxy\\n      [process.env.VUE_APP_BASE_API]: {\\n//        target: \\\"http://**.**.**.**:**\\\",\\n        target: \\\"http://127.0.0.1:8080\\\",\\n        changeOrigin: true,\\n        pathRewrite: {\\n          [\\\"^\\\" + process.env.VUE_APP_BASE_API]: \\\"\\\",\\n        },\\n      },\\n    },\\n```\\n\\n#### 2 编译并运行\\n\\n```Bash\\n# 安装前端依赖包\\nnpm install\\n# 运行\\nnpm run dev\\n# 运行成功后显示\\n  App running at:\\n    - Local:   http://localhost:9528 \\n    - Network: http://127.0.0.2:9528 # 127.0.0.2为内网或公网IP\\n\\n    Note that the development build is not optimized.\\n    To create a production build, run npm run build.\\n```\\n\\n我们可以通过在浏览器中访问`http://127.0.0.2:9528`即可访问\\n\\n* **此处浏览器访问的URL和下文后端服务中配置的appLink需保持一致**\\n* 如果通过`npm build`构建静态文件 + nginx重定向的方式加载前端，需要修改nginx.conf中访问后端服务的IP端口，并对外暴露9528端口即可。\\n* 需要部署下文的后端服务后，才可正常操作页面。具体操作步骤可以参考下文的[运行演示](#demo)\\n\\n### 4.4 后端代码部署\\n\\n后端代码是基于SpringBoot工程\\n\\n#### 1 执行sql脚本\\n\\n```Bash\\ncd backend/supply-chain-demo/src/main/resources/db\\n# 通过mysql -e命令执行.sql脚本，以root用户，db名为supplychain为例\\nmysql -uroot -p  -D supplychain -e \\\"source ./supplychain.sql\\\"\\n```\\n\\nchain\\n\\n#### 2 部署erc20合约\\n\\n```Bash\\ncd backend/supply-chain-demo/src/main/resources/contract\\ncat erc20.sol\\n```\\n\\n将合约内容复制记录，随后到WeBASE中部署\\n\\n**进入WeBASE管理台**\\n\\n* 创建WeBASE私钥：在“私钥管理”中创建一个新的私钥用户，记录其signUserId，如：d0fb7d6c9fa04ef484e10f4bf5b34426\\n* WeBASE的“合约管理-合约IDE”中，创建erc20的合约，粘贴上文的erc20.sol内容，并编译，部署合约，记录合约地址，如：0xbbac4362f59a8ffe78ef4585460e9236c02b6c48\\n\\n#### 3 WeBASE应用接入\\n\\n![image](https://user-images.githubusercontent.com/11324122/123208054-fc982100-d4f0-11eb-8bb8-cc808ca9a591.png)\\n\\n#### 4 修改application.properties文件\\n\\n```Bash\\ncd backend/supply-chain-demo/src/main/resources/\\nvi application.properties\\n```\\n\\n* 修改配置文件的mysql连接配置\\n* 修改WeBASE-Front和WeBASE-Node-Manager的配置\\n* 修改本案例的前端访问URL配置\\n* 修改erc20合约的配置\\n\\n```Bash\\nspring.application.name=supply-chain-demo\\n# 服务默认端口，若修改，需要在前端访问后端时对应修改\\nserver.port=8080  \\n\\n# mysql用户\\nspring.datasource.username=dbUserName     \\n# mysql密码\\nspring.datasource.password=dbPassword     \\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/supplychain \\nspring.datasource.type=com.zaxxer.hikari.HikariDataSource\\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\\nspring.datasource.hikari.connection-timeout=30000\\nspring.datasource.hikari.minimum-idle=10\\nspring.datasource.hikari.maximum-pool-size=20\\nspring.datasource.hikari.auto-commit=true\\nspring.datasource.hikari.idle-timeout=600000\\nspring.datasource.hikari.pool-name=DateSourceHikariCP\\nspring.datasource.hikari.max-lifetime=1800000\\nspring.datasource.hikari.connection-test-query=SELECT 1\\n\\n\\n### 后端服务所连接的WeBASE子系统服务的配置\\n# webase前置服务 1.2. 合约部署接口（结合WeBASE-Sign）\\nwebase-front.contract.deploy.url=http://127.0.0.1:5002/WeBASE-Front/contract/deployWithSign\\n# webase前置服务 5.1. 交易处理接口（结合WeBASE-Sign）\\nwebase-front.trans.handle.url=http://127.0.0.1:5002/WeBASE-Front/trans/handleWithSign\\n\\n# webase-node-mgr的IP与端口\\nwebase.node.mgr.url=http://127.0.0.1:5001\\n# webase管理台-应用管理，创建自定义应用生成的appKey\\nwebase.node.mgr.appKey=Z5znCSmG\\n# webase管理台-应用管理，创建自定义应用生成的appSecret\\nwebase.node.mgr.appSecret=ch8ZT7wpDxpacDGSYQfjTQjWWeV4bTXt\\n# 是否加密传输\\nwebase.node.mgr.isTransferEncrypt=true\\n\\n### 对应上文前端服务的配置，需要确保前端服务存活（正在运行）\\n# 本案例的前端访问的IP，同机访问可以使用127.0.0.1，非同机访问应为内网或公网IP\\nsupplychain.node.mgr.appIp=127.0.0.1\\n# 本案例的前端访问端口\\nsupplychain.node.mgr.appPort=9528\\n# 本案例的在浏览器中访问的URL，若浏览器在非同机访问，则访问的是内网或公网IP(以127.0.0.2为例)。使用域名则访问的是域名。同机访问前端则可以使用127.0.0.1\\n# 需要与上文文前端服务的访问IP端口一致\\nsupplychain.node.mgr.appLink=https://127.0.0.2:9528\\n\\n\\n# erc20 合约初始化用户地址\\nerc20.supply.user.signUserId=d0fb7d6c9fa04ef484e10f4bf5b34426\\n# erc20 合约部署地址\\nerc20.contract.address=0xbbac4362f59a8ffe78ef4585460e9236c02b6c48\\n# erc20 合约名称\\nerc20.contract.name=erc20\\n\\n#pagehelper分页插件配置\\npagehelper.helperDialect=mysql\\npagehelper.reasonable=true\\npagehelper.supportMethodsArguments=true\\npagehelper.params=count=countSql\\n# page-size-zero：默认值为 false，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果\\n#pagehelper.page-size-zero=true\\n\\n# mybatis-plus 配置\\nmybatis-plus.mapper-locations=classpath:/mapper/**/*.xml\\n\\n# 日志配置\\nlogging.config=classpath:logback-boot.xml\\n\\n# 打印日志级别\\nlogging.level.root=DEBUG\\n\\n# 返回json的全局时间格式\\nspring.jackson.date-format=yyyy-MM-dd HH:mm:ss\\nspring.jackson.time-zone=GMT+8\\n```\\n\\n#### 5 编译打包\\n\\n编译项目，回到`backend/supply-chain-demo`目录，目录下有`pom.xml`的maven配置文件\\n\\n```Bash\\ncd backend/supply-chain-demo\\n# maven 编译\\nmvn clean package -Dmaven.test.skip=true\\n```\\n\\n打包完成后会得到`target`目录\\n\\n* 若修改了`application.properties`，需要重新打包并运行\\n\\n#### 6 运行\\n\\n运行得到的jar\\n\\n```Bash\\ncd target/\\nnohup java -jar supply-chain-demo-0.0.1-SNAPSHOT.jar &\\n```\\n\\n查看日志\\n\\n```Bash\\ntail -f logs/log/supply-chain-demo.log\\n```\\n\\n当我们看到日志持续输出日志时即运行成功，就可以访问上文中部署的前端页面(`{IP}:9528`)进行操作了\\n\\n### 4.5 运行演示\\n\\n演示地址: 基于区块链的供应链支付结算管理平台： <http://www.icoding721.com/>\\n\\n三个账户密码分别为(Alice/123456,Bob/123456,Tom/123456)\\n\\nWeBASE管理平台：<http://supplychain.icoding721.com:5000/>  账密：**admin/Abcd12345**\\n\\n演示新建一条供应链有三级供应商，然后模拟支付分账\\n\\n#### 进入首页\\n\\n![image](https://user-images.githubusercontent.com/11324122/123060742-98685500-d43d-11eb-9992-1541a3b849d7.png)\\n\\n#### 注册\\n\\n![image](https://user-images.githubusercontent.com/84694840/122876368-03475c80-d368-11eb-8f13-e3afe0ddf321.png)\\n\\n#### 登录 默认打开的是“自建链列表”，“参与链列表”是自己参与别人也包括自己的列表信息\\n\\n![image](https://user-images.githubusercontent.com/11324122/123061022-d36a8880-d43d-11eb-894e-89394fde2320.png)\\n\\n#### 建链,在“自建链列表”新建链\\n\\n![image](https://user-images.githubusercontent.com/84694840/122876594-46a1cb00-d368-11eb-9faf-5d708f68c710.png)\\n\\n#### 查看链状态&&链签名\\n\\n![image](https://user-images.githubusercontent.com/84694840/122876905-9da7a000-d368-11eb-8b37-5bcc2d626037.png)\\n\\n#### 模拟各方签名\\n\\n![image](https://user-images.githubusercontent.com/11324122/123061430-39571000-d43e-11eb-9200-c7db118c97c4.png)\\n\\n![image](https://user-images.githubusercontent.com/84694840/122877176-e65f5900-d368-11eb-851b-e20b31f15c40.png)\\n\\n#### 各方签名确认完成，模拟支付\\n\\n![image](https://user-images.githubusercontent.com/84694840/122877358-1c044200-d369-11eb-93b4-29420ecf4eb0.png)\\n\\n#### 查看WeBASE管理平台交易情况\\n\\n![image](https://user-images.githubusercontent.com/84694840/122877495-3e965b00-d369-11eb-9785-74ba8078d447.png)\\n\\n![image](https://user-images.githubusercontent.com/84694840/122877755-85845080-d369-11eb-93c8-0d439a41d22b.png)\\n\\n## 接入WeBASE过程介绍\\n\\n### 4.2 WeBASE接入原理\\n\\n本案例通过引入`webase-app-sdk`，并在项目的application.properties传入WeBASE应用管理中生成的配置信息即可。\\n\\n##### 引入webase-app-sdk\\n\\n本案例使用WeBASE提供的应用接入SDK`webase-app-sdk`接入WeBASE，在本案例的springboot pom.xml文件中已经集成\\n\\n```\\n<dependency>\\n\\t<groupId>com.webank</groupId>\\n\\t<artifactId>webase-app-sdk</artifactId>\\n\\t<version>1.5.1-SNAPSHOT</version>\\n</dependency>\\n```\\n\\n通过该SDK，我们可以在项目中调用WeBASE的接口，进行合约和私钥等数据的托管。如下文所示\\n\\n##### 获取WeBASE应用接入配置\\n\\n我们可以登录WeBASE 管理平台获取应用接入的配置信息\\n\\n![image](https://user-images.githubusercontent.com/11324122/123208054-fc982100-d4f0-11eb-8bb8-cc808ca9a591.png)\\n\\n在配置了上述信息后，只要启动本案例的前后端服务，即完成了供应链服务接入WeBASE的操作，在WeBASE的“应用管理”中访问本案例的管理页面\\n\\n### 通过WeBASE管理私钥与合约\\n\\n在上述的应用接入和引入WeBASE的SDK后后，本案例的供应链服务可以通过WeBASE进行私钥创建、托管，也可以通过WeBASE管理合约。\\n\\n#### 私钥管理\\n\\n该案例用户通过注册业务系统调用sdk的newUser方法在链上新建私钥用户，密钥默认WeBASE-Sign托管模式\\n\\n```\\nappClient.newUser(reqNewUser);\\n```\\n\\n![image](https://user-images.githubusercontent.com/84694840/122888084-195b1a00-d374-11eb-9332-90b3db59c98c.png)\\n\\n#### 合约同步和绑定\\n\\n合约部署调用的是WeBASE 前置服务的1.2. 合约部署接口（结合WeBASE-Sign）\\n\\n```\\n接口URL\\nhttp://localhost:5002/WeBASE-Front/contract/deployWithSign\\n\\n调用方法\\nHTTP POST\\n\\n请求参数\\n1）参数表\\n\\n序号\\t中文\\t参数名\\t类型\\t最大长度\\t必填\\t说明\\n1\\t所属群组\\tgroupId\\tint\\t\\t是\\t\\n2\\t用户编号\\tsignUserId\\tString\\t64\\t是\\tWeBASE-Sign中的用户编号，通过webase-sign创建私钥获取\\n3\\t合约名称\\tcontractName\\tString\\t\\t是\\t\\n4\\t合约abi\\tabiInfo\\tList\\t\\t是\\t合约编译后生成的abi文件内容\\n5\\t合约bin\\tbytecodeBin\\tString\\t\\t是\\t合约编译的bytecode(bin)，用于部署合约\\n6\\t构造函数参数\\tfuncParam\\tList\\t\\t否\\t合约构造函数所需参数，JSON数组，多个参数以逗号分隔（参数为数组时同理），如：[\\\"str1\\\",[\\\"arr1\\\",\\\"arr2\\\"]]\\n7\\t合约版本\\tversion\\tString\\t\\t否\\t用于指定合约在CNS中的版本\\n```\\n\\n然后调用sdk 同步合约和保存地址接口，将合约相关信息同步到WeBASE管理平台，在管理平台页面展示如下\\n\\n```\\n## 合约同步\\nappClient.contractSourceSave(reqContractSourceSave);\\n\\n## 合约地址绑定\\nappClient.contractAddressSave(reqContractAddressSave);\\n```\\n\\n![image](https://user-images.githubusercontent.com/11324122/123070553-71fae780-d446-11eb-89c7-743f5e70d3b5.png)\\n\\n![image](https://user-images.githubusercontent.com/84694840/122887592-a487e000-d373-11eb-858f-8c7819477913.png)\\n\\n#### 发交易\\n\\n业务系统通过调用WeBASE 前置服务的5.1. 交易处理接口（结合WeBASE-Sign）接口 将数据上链产生交易\\n\\n```\\n接口URL\\nhttp://localhost:5002/WeBASE-Front/trans/handleWithSign\\n\\n调用方法\\nHTTP POST\\n\\n请求参数\\n1）参数表\\n\\n序号\\t中文\\t参数名\\t类型\\t最大长度\\t必填\\t说明\\n1\\t用户编号\\tsignUserId\\tString\\t64\\t是\\tWeBASE-Sign用户编号（查询方法可不传）\\n2\\t合约名称\\tcontractName\\tString\\t\\t是\\t\\n3\\t合约地址\\tcontractAddress\\tString\\t\\t是\\t\\n4\\t方法名\\tfuncName\\tString\\t\\t是\\t\\n5\\t合约编译后生成的abi文件内容\\tcontractAbi\\tList\\t\\t是\\t合约中单个函数的ABI，若不存在同名函数可以传入整个合约ABI，格式：JSONArray\\n6\\t方法参数\\tfuncParam\\tList\\t\\t否\\tJSON数组，多个参数以逗号分隔（参数为数组时同理），如：[\\\"str1\\\",[\\\"arr1\\\",\\\"arr2\\\"]]\\n7\\t群组ID\\tgroupId\\tint\\t\\t是\\t默认为1\\n8\\t是否使用cns调用\\tuseCns\\tbool\\t\\t是\\t\\n9\\tcns名称\\tcnsName\\tString\\t\\t否\\tCNS名称，useCns为true时不能为空\\n10\\tcns版本\\tversion\\tString\\t\\t否\\tCNS版本，useCns为true时不能为空\\n```\\n\\n### 总结\\n\\n此供应链结算支付案例是基于fisco bcos平台开发的一个比较简单的DApp，后续扩展的功能包括\\n\\n#### 1.积分分成合约自动处理，即各方确认完成之后，自动分成到各自账户\\n\\n#### 2.用户登录token处理\\n\\n#### 3.部分功能需优化(持续开发中....)\",\"timestamp\":1638510770,\"title\":\"基于FISCO BCOS的供应链支付结算案例\"},\"digest\":\"0QEHNLjVk0zgEzU3q0FQ9tGVww0jPbdWnFMu_arqapU\",\"authorship\":{\"contributor\":\"0x8C5da2937C664882111FCfe717ca7AF02A6e6440\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"pr_tZtGV4HCmhmTkNNeLzKK-Gm2kWkdTdKSb0I8U3bg\\\",\\\"y\\\":\\\"o_6XusXB_ClOfLESZCuOlUv4V-tdytsqc3wHQpsq_mQ\\\"}\",\"signature\":\"5eUcNJqUJULxjJhCvoYBjkrpfmwJyEpW4q1BBYXUMDA7aPHjQyMDOzKb7QjH6_Mo_iK3vNlxFozqetEV1wAgjA\",\"signingKeySignature\":\"0x314e25824ae52bf3c8a8b9a2142b77e5fcf28e4e2cf49c7a530f65a151bbff0436b7ccdca81164a4f931ef392d4ad73cd437e793eea488b74553a51bcc81dd431b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"pr_tZtGV4HCmhmTkNNeLzKK-Gm2kWkdTdKSb0I8U3bg\\\",\\\"y\\\":\\\"o_6XusXB_ClOfLESZCuOlUv4V-tdytsqc3wHQpsq_mQ\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"VO_wVl290OV602dtlJwVsdVQxsYWLXV1WTCnzdkqLhU\"}"