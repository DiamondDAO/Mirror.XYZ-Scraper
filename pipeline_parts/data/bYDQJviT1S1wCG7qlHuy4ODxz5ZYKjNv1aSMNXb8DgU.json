"{\"content\":{\"body\":\"### Getting started\\n\\n* Create an AKS cluster in a existing VNET with advanced networking (aka Azure CNI plugin)\\n\\n```\\nrg=aksLab-rg\\nvnet=aksvnet\\nsubnet=akssubnet\\naksname=aksPacketWalkAzure\\naz group create -n $rg -l australiaeast\\naz network vnet create -g $rg -n $vnet --address-prefix 10.13.0.0/16 --subnet-name $subnet --subnet-prefix 10.13.76.0/24\\nsubnetid=$(az network vnet subnet show -g $rg --vnet-name $vnet -n $subnet --query id -o tsv)\\naz aks create -g $rg -n $aksname -c 1 --generate-ssh-keys -s Standard_B2ms -k 1.20.7 --network-plugin azure --vnet-subnet-id $subnetid\\naz aks get-credentials -g $rg -n $aksname\\n```\\n\\n* Create a VM what we will use as a jump host. Put it in a new subnet in the same Vnet.\\n\\n```\\nsubnet=vmsubnet\\nadmin_password=$uper$ecretPassw0rd\\nadmin_user=azureuser\\naz network vnet subnet create -g $rg-n $subnet --vnet-name $vnet --address-prefix 10.13.1.0/24\\naz vm create --image ubuntults -g $rg -n testvm --admin-password $admin_password --admin-username $admin_user --public-ip-address testvm-pip --vnet-name $vnet --subnet $subnet --os-disk-size 30 --storage-sku Standard_LRS --no-wait\\n```\\n\\nWhen the VM is ready, you will be able to SSH to its public IP address. In order to connect to the AKS nodes, you will need to generate a public/private SSH key pair. Add a public key into AKS VMSS nodes and Jump host node as well\\n\\n```\\n# generate authorized_key and push private key to jump host\\naksname=aksPacketWalkAzure\\nlocal_user=azureuser\\nvm=testvm\\naz vm user update -g $rg -n $vm --username $local_user --ssh-key-value ~/.ssh/id_rsa.pub\\n\\nscp ~/.ssh/id_rsa $vm:~/.ssh/\\n\\n# update aks nodes with public key\\naksname=aksPacketWalkAzure\\nlocal_user=azureuser\\nCLUSTER_RESOURCE_GROUP=$(az aks show --resource-group $rg --name $aksname --query nodeResourceGroup -o tsv)\\nSCALE_SET_NAME=$(az vmss list --resource-group $CLUSTER_RESOURCE_GROUP --query [0].name -o tsv)\\n\\naz vmss extension set  \\\\\\n    --resource-group $CLUSTER_RESOURCE_GROUP \\\\\\n    --vmss-name $SCALE_SET_NAME \\\\\\n    --name VMAccessForLinux \\\\\\n    --publisher Microsoft.OSTCExtensions \\\\\\n    --version 1.4 \\\\\\n    --protected-settings \\\"{\\\\\\\"username\\\\\\\":\\\\\\\"azureuser\\\\\\\", \\\\\\\"ssh_key\\\\\\\":\\\\\\\"$(cat ~/.ssh/id_rsa.pub)\\\\\\\"}\\\"\\n\\naz vmss update-instances --instance-ids '*' \\\\\\n    --resource-group $CLUSTER_RESOURCE_GROUP \\\\\\n    --name $SCALE_SET_NAME\\n\\n# test ssh\\nssh azureuser@nodename\\n```\\n\\n### Deploy an app\\n\\nFirst thing we need to do is finding out the Resource Group where AKS infrastructure (such as the node VMs and the Load Balancers) are deployed:\\n\\n```\\naksname=aksPacketWalkAzure\\nnoderg=$(az aks show -g akstest -n $aksname --query nodeResourceGroup -o tsv)\\n```\\n\\nI have deployed a simple service consisting of 2 pods and a LoadBalancer service:\\n\\n```\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: whereami\\nspec:\\n  replicas: 2\\n  selector:\\n    matchLabels:\\n      app: whereami\\n  strategy:\\n    rollingUpdate:\\n      maxSurge: 1\\n      maxUnavailable: 1\\n  minReadySeconds: 5\\n  template:\\n    metadata:\\n      labels:\\n        app: whereami\\n    spec:\\n      containers:\\n      - name: whereami\\n        image: erjosito/whereami:1.3\\n        ports:\\n        - containerPort: 80\\n---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: whereami\\nspec:\\n  type: LoadBalancer\\n  ports:\\n  - port: 80\\n  selector:\\n    app: whereami\\n```\\n\\nLet’s have a look at the items that have been created:\\n\\n```\\n$ kubectl get svc\\nNAME               TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)        AGE\\nazure-vote-back    ClusterIP      10.0.222.126   <none>          6379/TCP       139d\\nazure-vote-front   LoadBalancer   10.0.188.242   20.190.13.154   80:31669/TCP   139d\\nkubernetes         ClusterIP      10.0.0.1       <none>          443/TCP        181d\\nwhereami           LoadBalancer   10.0.28.247    20.72.240.37    80:31549/TCP   3h3m\\n\\n$ kubectl get ep whereami\\nNAME       ENDPOINTS                       AGE\\nwhereami   10.240.0.32:80,10.240.1.64:80   3h4m\\n\\n$ kubectl get po -l=app=whereami -o wide\\nNAME                        READY   STATUS    RESTARTS   AGE    IP            NODE                                NOMINATED NODE   READINESS GATES\\nwhereami-5b447d9df5-b8v5q   1/1     Running   0          3h6m   10.240.0.32   aks-nodepool1-42607778-vmss000004   <none>           <none>\\nwhereami-5b447d9df5-zsvt5   1/1     Running   0          3h6m   10.240.1.64   aks-nodepool1-42607778-vmss000002   <none>           <none>\\n```\\n\\n## Azure resources\\n\\nAs you can see, the service is of type LoadBalancer. That means that there should be an Azure Load Balancer in our resource group. Let’s have a look at it:\\n\\n```\\nlb=$(az network lb list -g $noderg -o tsv --query [0].name)\\naz network lb rule list -g $noderg --lb-name $lb -o table\\nMC_akstest_aksPacketWalkAzure_westeurope\\n```\\n\\nAs you can see, the probe is monitoring the NodePort’s TCP port, not port 80. The probes are configured for the best supported response time: they are sent every 5 seconds, and will flag endpoints as down after 2 failures.\\n\\nSomething important to note is the EnableFloatingIP (also known as Direct Server Return). This setting will make the load balancer not to replace the Virtual IP address with the real destination IP. This will be very relevant later.\\n\\nLet’s verify the IP addresses (a single one in this case, since our cluster only has one node) in the backend pool:\",\"timestamp\":1642493771,\"title\":\"AKS Networking Lab\"},\"digest\":\"KfSsbu9su32wwxpHCj2cmkZ8MuUuDagJ1arIDA4XXlc\",\"authorship\":{\"contributor\":\"0x0894B4a989F758cb318379D93C3b39907B2421dC\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"zJ7c6RYGOhveYhtB54CeFZamSU5vbWLXzIdq7ZibNYk\\\",\\\"y\\\":\\\"_ecH1vemJDWWH9t72ctmIWYkrMjajJ-tINWHGNc2dO4\\\"}\",\"signature\":\"PKvPLPH0pvblbTAbCCBVmVsZgRLOUVeO9atWXfqVoocxiL6YfzIO-yZKdb4gKjyMfJwPk9m3wM6xPE3ooocLzg\",\"signingKeySignature\":\"0x6db920deb715c47007d203368a84c8d1065e7efb75801ff78e3ff4206af7c56806b32be4d74a5dd912943a8917182cacfbd790dc8ebea7d3146b4343d97293c81b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"zJ7c6RYGOhveYhtB54CeFZamSU5vbWLXzIdq7ZibNYk\\\",\\\"y\\\":\\\"_ecH1vemJDWWH9t72ctmIWYkrMjajJ-tINWHGNc2dO4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"Anb_7OeEp6rUCB46GwemcmD0_tPFxR0bEZ-uDV5jR-U\"}"