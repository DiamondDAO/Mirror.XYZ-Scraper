"{\"content\":{\"body\":\"In PurposeHandler version 2.0, we learned to add permission control to functions via the `require` statement.\\n\\nNow we can add a real economy mechanism to it, so that the value of `purpose` is controlled by a real bidding auction mechanism!\\n\\n### 0x01 Add Owner\\n\\nTo get the owner of a contract `owner` is a must-learn operation for newbies.\\n\\nThe easiest way is to set a public `owner` variable and pass the `_owner` parameter in the constructor.\\n\\n```solidity\\npragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ncontract PurposeHandler {\\n\\n  string public purpose = \\\"Building Unstoppable Apps\\\";\\n  address public owner = owner;\\n  // fill in your own address (start with 0x) here\\n\\n  constructor(address _owner) {\\n    owner = _owner;\\n  }\\n\\n  function setPurpose(string memory newPurpose) public {\\n      // about msg.sender:\\n      // https://cryptozombies.io/en/lesson/2/chapter/3\\n      // about require:\\n      // https://cryptozombies.io/en/lesson/2/chapter/4\\n      require( msg.sender == owner, \\\"NOT THE OWNER!\\\");\\n\\n      purpose = newPurpose;\\n      console.log(msg.sender,\\\"set purpose to\\\",purpose);\\n  }\\n}\\n```\\n\\nIn production, this is generally achieved by importing `ownable.sol`.\\n\\n`ownable.sol` in OpenZepplin.\\n\\n> <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol>\\n\\n`ownable.sol`:\\n\\n```solidity\\npragma solidity ^0.4.25;\\n\\n  /**\\n  * @title Ownable\\n  * @dev The Ownable contract has an owner address, and provides basic authorization control\\n  * functions, this simplifies the implementation of \\\"user permissions\\\".\\n  */\\n  contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n      address indexed previousOwner,\\n      address indexed newOwner\\n    );\\n\\n    /**\\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n    * account.\\n    */\\n    constructor() internal {\\n      _owner = msg.sender;\\n      emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n    * @return the address of the owner.\\n    */\\n    function owner() public view returns(address) {\\n      return _owner;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the owner.\\n    */\\n    modifier onlyOwner() {\\n      require(isOwner());\\n      _;\\n    }\\n\\n    /**\\n    * @return true if `msg.sender` is the owner of the contract.\\n    */\\n    function isOwner() public view returns(bool) {\\n      return msg.sender == _owner;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to relinquish control of the contract.\\n    * @notice Renouncing to ownership will leave the contract without an owner.\\n    * It will not be possible to call the functions with the `onlyOwner`\\n    * modifier anymore.\\n    */\\n    function renounceOwnership() public onlyOwner {\\n      emit OwnershipTransferred(_owner, address(0));\\n      _owner = address(0);\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n      _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n    * @dev Transfers control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function _transferOwnership(address newOwner) internal {\\n      require(newOwner != address(0));\\n      emit OwnershipTransferred(_owner, newOwner);\\n      _owner = newOwner;\\n    }\\n  }\\n```\\n\\n### 0x02 Create `auction mechanism` by a require rule\\n\\nThe rule is that if the bid is higher than the current price, then the value of `set-purpose` can be modified; if it is not as high as the current price, then an error is thrown.\\n\\n```solidity\\npragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ncontract PurposeHandler {\\n\\n  string public purpose = \\\"Building Unstoppable Apps\\\";\\n  address public owner = owner;\\n  uint256 public price = 0.001 ether;\\n  // fill in your own address (start with 0x) here\\n\\n  constructor(address _owner) {\\n    owner = _owner;\\n  }\\n\\n  function setPurpose(string memory newPurpose) payable public {\\n      require( msg.value > price, \\\"NOT ENOUGH!\\\");\\n      purpose = newPurpose;\\n      // update price when guy set\\n      price = msg.value;\\n      console.log(msg.sender,\\\"set purpose to\\\",purpose);\\n  }\\n\\n}\\n```\\n\\n### 0x03 Withdrawal mechanism\\n\\nThe function `getBalance()` allows the `owner` to get the balance in the contract, and the function `getMyMoney` allows the balance in the contract to be withdrawn by.\\n\\n```solidity\\npragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ncontract PurposeHandler {\\n\\n  string public purpose = \\\"Building Unstoppable Apps\\\";\\n  address public owner;\\n  uint256 public price = 0.001 ether;\\n\\n  constructor(address _owner) {\\n    owner = _owner;\\n  }\\n\\n  function setPurpose(string memory newPurpose) payable public {\\n      require( msg.value > price, \\\"NOT ENOUGH!\\\");\\n      purpose = newPurpose;\\n      // update price when guy set\\n      price = msg.value;\\n  }\\n\\n  function getBalance() view public returns(uint256) {\\n      return address(this).balance;\\n  }\\n\\n  function getMyMoney(address _to, uint256 amount) public {\\n      \\trequire(msg.sender==owner);\\n      \\taddress payable receiver = payable(_to);\\n        receiver.transfer(amount);\\n  }\\n}\\n```\\n\\n### 0x04 Record logs of set purpose by Event\\n\\nWhat is an event?\\n\\n> A blockchain is a list of blocks - they are basically made up of transactions. Each transaction has a receipt attached to it, which contains zero or more log entries. These log entries represent the results generated when an event is triggered in a smart contract.\\n>\\n> In Solidity source code, to define an `event`, you need to mark it by prefixing it with the event keyword (similar to the usage of the `function` keyword). You can then call or trigger the event from within any function that you wish to generate the event. You can trigger events from any function using the `emit` keyword.\\n>\\n> Someone may want to add \\\"listen\\\" for events in the DAPP. It uses the filtering functionality of Web 3.0 ([filtering functionality of Web 3.0](https://github.com/ethcore/parity#eth_newfilter)).\\n>\\n> \\\\--<https://learnblockchain.cn/question/29>\\n\\nWe can add `event` to the setPurpose function to record the history of set purpose.\\n\\nTranslated with [www.DeepL.com/Translator](http://www.DeepL.com/Translator) (free version)\\n\\n```solidity\\npragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\ncontract PurposeHandler {\\n\\n  event SetPurpose(address sender, string purpose);\\n\\n  string public purpose = \\\"Building Unstoppable Apps\\\";\\n  address public owner;\\n  uint256 public price = 0.001 ether;\\n\\n  constructor(address _owner) {\\n    owner = _owner;\\n  }\\n\\n  function setPurpose(string memory newPurpose) payable public {\\n      require( msg.value > price, \\\"NOT ENOUGH!\\\");\\n      purpose = newPurpose;\\n      // update price when guy set\\n      price = msg.value;\\n      emit SetPurpose(msg.sender, purpose);\\n  }\\n\\n  function getBalance() view public returns(uint256) {\\n      return address(this).balance;\\n  }\\n\\n  function getMyMoney(address _to, uint256 amount) public {\\n      \\trequire(msg.sender==owner);\\n      \\taddress payable receiver = payable(_to);\\n        receiver.transfer(amount);\\n  }\\n}\\n```\\n\\n### Summary\\n\\nThat's it for Get & Set value series. Here are all the articles for Get & Set value series.\\n\\n> * [Eth.build  Quickstart | Web3.0 dApp Dev 0x01](https://twitter.com/Web3dAppCamp/status/1450618786436943874)\\n> * [Web3.0 dApp Developer Growth Path | Web3.0 dApp Dev 0x02](https://twitter.com/Web3dAppCamp/status/1452046900983570434)\\n> * [Scaffold-Eth Quickstart | web3.0 dApp Dev 0x03](https://twitter.com/Web3dAppCamp/status/1453378592050585604)\\n> * [Get & Set Value 1.0 | Web3.0 dApp Dev 0x04](https://twitter.com/Web3dAppCamp/status/1457505517606035459)\\n> * [Get & Set Value 2.0 | Web3.0 dApp Dev 0x05](https://twitter.com/Web3dAppCamp/status/1462976622152220673)\\n> * Get & Set Value 3.0 |  Web3.0 dApp Dev 0x06\\n\\nIn the next post, we move on to the next chapter - the design and implementation of the NFT dApp!\\n\\n**Authors:**\\n\\n![leeduckgo](https://noncegeek.com/namecards/leeduckgo.svg?display=iframe)\\n\\n![msfew](https://noncegeek.com/namecards/msfew.svg?display=iframe)\\n\\n\",\"timestamp\":1639288217,\"title\":\"Get & Set Value 3.0 |  Web3.0 dApp Dev 0x06\"},\"digest\":\"HvS9-pIa1raDuBUCaKGDZUpkFqElUX0fZpMkjoe5HQA\",\"authorship\":{\"contributor\":\"0x73c7448760517E3E6e416b2c130E3c6dB2026A1d\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"xM355yZvrGDDrd9FHvimKZ4T0zIuNh37m14z9SEmC28\\\",\\\"y\\\":\\\"wA9J4NE412n8oTP16_e35be7ePBM_O8AGPIiy5YqLws\\\"}\",\"signature\":\"8u_HSB0SJCtaqMYq15HuH3B9I4dg1baCDcrWT4pyDaP-fmAdLL31rT6ySVJD4GlnxyC4A06Z0gAzlvvPVcbfQg\",\"signingKeySignature\":\"0xbd87c0a4de9cc1d2ae43462e8e46ff134c00d73caa7a29b22509e9f8cea31c986c38deae03d015a5df96440ef7d8451d0eeda1daba371adc1935081444e7fea41b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"xM355yZvrGDDrd9FHvimKZ4T0zIuNh37m14z9SEmC28\\\",\\\"y\\\":\\\"wA9J4NE412n8oTP16_e35be7ePBM_O8AGPIiy5YqLws\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"HvS9-pIa1raDuBUCaKGDZUpkFqElUX0fZpMkjoe5HQA\"}"