"{\"content\":{\"body\":\"## Inventory\\n\\nSolana has a built in Governance program.  As such it’s not very usable, you need UI to interact with the contract conveniently. As such there is a Mango partnered instance of frontend, but anyone could build one (cf [Squads](https://squads.medium.com/) edit: they did write their own program actually!)\\n\\n* a back-office web app to create and manage DAO called [Oyster]() on GH, the [UI looks like this]().\\n* a use-facing web app to allow access for voting and seeing governance proposals, called [governance-ui]() on GH, the [UI looks like this](). It has been built w/ Mango Market people, that’s the Mango DAO we know.\\n\\nThe back office does not allow the creation of DAO by anyone right now, but I imagine they have a tiny vetting process as to who can interact and getting in touch with them should allow a “listing”.\\n\\n## The Governance Primitive on Solana\\n\\nBelow is the diagram of the governance program. I’ll go through the documentation and add some comments. This is a personal notes kind of document.\\n\\n![OCD level 120% at all the non-straight boxes and arrows](https://images.mirror-media.xyz/publication-images/GgoZbyTtxztDLkSE_hV2d.png?height=1451&width=1304)\\n\\n## Realm Account - The top level organisation\\n\\n> **Realm account** ties Community Token Mint and optional Council Token mint to create a realm for any governance pertaining to the community of the token holders. For example a trading protocol can issue a governance token and use it to create its governance realm.\\n\\nThis is a top level thing that is like an internal DAO for the team, it can use the governance token, or a separate TeamGovernance token. I think using the governance one is fine if you setup things manually pre IDO, else the TeamGovernance one can come handy. See the end of this doc for an example.\\n\\nIt represents the organisation, and from this you derive new `ProgramGovernance` instances, each of them managing ONE and only program.\\n\\n## Governance Accounts - The controllers\\n\\n### Program Governance Account - Program\\n\\n> The basic building block of governance to update programs is the ProgramGovernance account. It ties a governed Program ID and holds configuration options defining governance rules. The governed Program ID is used as the seed for a [Program Derived Address](https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses), and this program derived address is what is used as the address of the Governance account for your Program ID.\\n>\\n> What this means is that there can only ever be ONE Governance account for a given Program. The governance program validates at creation time of the Governance account that the current upgrade authority of the program taken under governance signed the transaction. Optionally `CreateProgramGovernance` instruction can also transfer `upgrade_authority` of the governed program to the Governance PDA at the creation time of the Governance account.\\n\\nYou deploy your program, and then transfer the authority to the governance account. (?)\\n\\nThis then provide an API for upgrades.\\n\\n*I wonder how the upgrade goes, what are the limitations like update size if it needs to fits CPI calls?*\\n\\n### Mint Governance account - Mint\\n\\n> A mint governance account allows a mint authority to setup governance over an SPL Mint account. The Governance program validates at creation time that the current mint authority signed the transaction to create the governance and optionally can transfer the authority to the Governance account. Once setup the Mint Governance allows governance participants to create Proposals which execute mint instructions for the governed Mint.\\n\\nSimilar logic as the Program Governance Account above, except the API is tailor to cater for Minting needs.\\n\\n### Token Governance account - SPL Token Account (wallet)\\n\\n> A token governance account allows a token account owner to setup governance over an SPL Token account. The Governance program validates at creation time the current owner signed the transaction to create the governance and optionally can transfer the owner to the Governance account. Once setup the Token Governance allows participants to create Proposals to execute transfer instructions from the governed token account.\\n\\nSimilar to the PGA and MGA above, except it’s a SPL wallet API this time.\\n\\n## Authority\\n\\n### Proposal accounts\\n\\n> A Proposal is an instance of a Governance created to vote on and execute given set of instructions. It is created by someone (Proposal Owner) and tied to a given Governance account and has a set of executable instructions to it, a name and a description. It goes through various states (draft, voting, executing, ...) and users can vote on it if they have relevant Community or Council tokens. Its rules are determined by the Governance account that it is tied to, and when it executes, it is only eligible to use the [Program Derived Address](https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses) authority given by the Governance account. So a Proposal for Sushi cannot for instance upgrade the Program for Uniswap.\\n\\nThis is the actual Proposal submitted to the public for voting. But before it goes live… ⤵️\\n\\n> When a Proposal is created by a user then the user becomes Proposal Owner and receives permission to edit the Proposal. With this power the Owner can edit the Proposal, add/remove Signatories to the Proposal and also cancel it. These Signatories can then show their approval of the Proposal by signing it off. Once all Signatories have signed off the Proposal the Proposal leaves Draft state and enters Voting state. Voting state lasts as long as the Governance has it configured to last, and during this time people holding Community (or Council) tokens may vote on the Proposal. Once the Proposal is \\\"tipped\\\" it either enters the Defeated or Succeeded state. If the vote can't be tipped automatically during the voting period but still reaches the required Yes vote threshold it can be manually transitioned to Succeeded state using FinalizeVote instruction. Once all Proposal instructions are executed the Proposal enters Completed state.\\n\\nThis explain the several stages of a proposal, it’s to prevent indirect rugs like team member X votes to transfer all the treasury to his wallet with lowest treshold and vote himself.\\n\\n> In the Executing state an instruction can be run by any one at any time after the `instruction_hold_up_time` period has transpired\\n\\nThis is for time-lock and vesting, nice.\\n\\n\\n_____\\n\\nTL:DR; for the last bits is that a `ProposalAccount` can have several `ProposalInstructions`, the actual pieces of work (send X tokens to Billy - Update the program with his patch). If that interest you I think you’ll go in [the doc]() and check the voting dynamic that I haven’t mentioned here. All what I talked about is from there anyway.\\n\\n![](https://images.mirror-media.xyz/publication-images/06rBmfJZt-Fh0Enc8H2W5.png?height=1490&width=1775)\\n\\n## Respect my authority, how does it all come together\\n\\nSo usually, a team would have control over the Program deployment, Minting of its IDO’d {gov/shit}coins, and control the wallet(s) (IDO profits, fees, community…).\\n\\nThis is a big responsibility, because upgrading the program on Solana means changing its behaviour silently. Any project with control of the Program Deployment can just send an TX to suck your NFT the next time you transact without doing a forensic analysis of the TX prompt if they want, and the confirmation UI/UX is not always super clear (quite good on Phantom now though)\\n\\nI won’t speak about Mint and Wallet unilateral control, which is straight forward about the involved risks.\\n\\n\\n_____\\n\\nTo overcome that, the governance above is a great tool, the important bit being :\\n\\n> Governance can handle arbitrary executions of code.\\n\\nIn the example above, let’s say the team delegates Program Deployment, Mint and Wallets to the DAO. Then is mean that the only way they have to interact with these is to to submit proposals and get them approved.\\n\\nLet’s say they want to pay a bug bounty, then they craft the TX with the amount and in/outs, then send it to the `TokenGovernanceAccount` (not sure about the exact flow but you get the idea) and it will be there waiting to reach a treshold of vote or the timeout for the program to decide wether it should pass (be signed by it's Authority) or be rejected.\\n\\nGov token holder go on the aforementioned UI and vote with their stake. On given proposals.\\n\\n\\n______\\n\\nIt’s an indirection layer that prevents bamboozles, with supplementary indirection-ception.\\n\\nIt can feel a bit useless, as usually the teams/investors/whales own a large chunk of the tokens, and could band up to do bad things? But it’s what a governance is, people who have stake decides. That’s the base rule.\\n\\nWhat’s valuable here is that least we got it fully transparent and immuable, thanks to the blockchain™️. We know who did what and when.\\n\\n## Real world examples\\n\\n### An IDO\\n\\nYou’r team want to do an IDO to kickstart a DAO/your governance token, you’ll need to :\\n\\n* deploy programs (at least the IDO one)\\n* pre mint the Governance Token and store securely until next step\\n* allocate x% to the IDO, send the remainder into several `GovernanceTokenAccount` (community, team growth, insurance w/e)\\n* allocate some to vesting (time-locked transactions) for team or investors\\n\\nYou could do the above manually, the stake is still “low” pre IDO.\\n\\nOR you could use the feature previously mentionned of `TeamGovernance tokens` from the RealAccount.\\n\\nYou would do kind of an internal DAO for the team to setup things, with internal valueless tokens that are just there to kick start things, maybe later on for more internal decisions, but at that stage you could use the IDO’ed governance token.\\n\\nOne thing that could be handy, is to have these `Community Token Mint` (*TeamGovernance token?)* behave like time-locked vested Governance token. That way it has no actual market value, but still allow the team the vote as if they had their stake.\\n\\n### An existing organisation that want to transition to better practices\\n\\nYou’r team has a nice Defi/NFT project, things are settling down, and now you have time to consider following better practices (that should have been done in the beginning but yea anyway).\\n\\nCurrent context :\\n\\n* you control existing wallets for your treasury, usually one wallet for anything with manual management of transactions. Team members controlling the distributed/duplicated secret key (#security)\\n* you have a community that would like to participate in the decision making\\n\\nWhat needs to be done :\\n\\n* instantiate a Governance program stack\\n* do an IDO for voting, or use a token if you have one already (might also use NFT not sure)\\n* delegate ownership of TokenWallets and Mint and ProgramDeployment to the GovernanceProgram accounts\\n* start the usual DAO process, where things happen when it’s voted\\n\\n## Conclusion\\n\\nI think it seem very spooky for teams to loose the direct control they had, but that’s the proper way.\\n\\nIt remove the weight of being able to fuck up the whole thing, maliciously, by stupidity, or by being tricked. We know how elaborate these things can be and nobody is safe. The only security is Zero Trust, decentralisation.\\n\\nDon’t forget that it’s not YOURs anymore once people have “invested in” by minting/IDOing etc. It’s normal that the control is shared, also the decision making.\\n\\nNot everybody will agree on this, but I think it’s an artefact from the old unfair real world.\\n\\nCheers thanks for reading\",\"timestamp\":1637256896,\"title\":\"Governance on Solana (DAO 🥲)\"},\"digest\":\"JtPdNxv2a4QLo4FoshDRudfvj6x9eVktZAriNKGH8nI\",\"authorship\":{\"contributor\":\"0x9fEcc73Da3f8bd2aC436547a72f8Dd32326D90dc\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"QPmiWAoYrDV29QNcejrTEW9Hln4eymRbREUClM0mpWA\\\",\\\"y\\\":\\\"TWcI-EhcntWuj8sxyUdjKFb_K7MgnXjTfE9bAegLIys\\\"}\",\"signature\":\"HDHRTBzHAycaIhyPhSW4GGgex0QbVt4Ldr1rpdcdMjk9bQuW3TkYuuUgtcK03PKBxtLmKaQ77XJHC4VFb34kYw\",\"signingKeySignature\":\"0xbcc9237e49540ea7caa15138f2f9047eaa2c02b8f8d340afdb340d6f80a290264789cb0c2e2b7ee823e105f49b37c6ae1f78fab131b9807dc2f492c26eafbd991b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"QPmiWAoYrDV29QNcejrTEW9Hln4eymRbREUClM0mpWA\\\",\\\"y\\\":\\\"TWcI-EhcntWuj8sxyUdjKFb_K7MgnXjTfE9bAegLIys\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"DO8UzlSPOfwVcQzEYeTcc1a5BAdAFa3Z2OGm7IY7Tes\"}"