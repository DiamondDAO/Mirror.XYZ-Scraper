"{\"content\":{\"body\":\"## Introduction\\n\\nThis is the second post within the series of Mina-Ethereum bridge-dedicated blog posts of ours. The first one is in [here](https://blog.nil.foundation/2021/09/30/mina-ethereum-bridge.html).\\n\\nThis time a description of how a Mina-Ethereum bridging application based on the in-EVM state proof verification of ours would work.\\n\\n## Didn’t you post such a description already?\\n\\nNot really. What we do is not the bridge itself, but a core mechanism, a crucial component to achieving such a bridging. Mina state verification on Ethereum. This will not bring the bridge functionality out of the box, but with proper applications on top of it, this can be used to build such a functionality.\\n\\n## Which applications?\\n\\nYeah. That is what I was about to tell.\\n\\nLet us consider a hypothetical Mina-Ethereum bridge based on a state proof verification mechanism. What would it consist of?\\n\\nWell, first of all, we gotta make sure that whatever happens in Mina can be proved to be valid on Ethereum. This can be done as follows:\\n\\n1. Retrieve Mina state proof.\\n2. Put it onto Ethereum.\\n3. Ethereum checks if the state proof is valid.\\n4. Ethereum accepts and stores the proof in case it is valid and rejects otherwise.\\n\\nNotice that there are no incentivized protocol participants which prove the state proof is valid. As there are no incentives at all. This means it is completely trustless. \\n \\n\\n![](https://images.mirror-media.xyz/publication-images/pJ7FYsn1aHbEa3K8lnTtr.jpg?height=541&width=1080)\\n\\n## Why is it so?\\n\\nMina’s state proof is self-validatable. Even in case a non-valid proof gets generated and submitted to Ethereum side, it will simply not pass the verification.\\n\\nBetter news is that the typical application using such a core internally wouldn’t need a state proof from every user, but at least from a single one. So it is enough for at least one user to submit the proof for the verification and all the others willing to prove the data which newly submitted proof contains, are good to go for free (in terms of paying the verification cost).\\n\\n## The most trivial application case. WMINA.\\n\\nNow lets consider the most trivial case this can be used for. Wrapped Mina on Ethereum. Or, how they usually call this kind of things - WMINA.\\n\\nThis would require implementing the in-EVM logic, which would issue WMINA according to the amount which was transferred on Mina side and that was verified to be true by state proof verification mechanism.\\n\\nSo the overall workflow now looks like this:\\n\\n1. Retrieve Mina state proof.\\n2. Put it onto Ethereum.\\n3. Ethereum checks if the state proof is valid.\\n4. Ethereum accepts and stores the proof in case it is valid and rejects otherwise.\\n5. Submit the amount of MINA on Mina side which should be transferred the in-EVM application.\\n6. In-EVM application issues the amount of WMINA which was proved to be truly submitted. \\n \\n\\n![](https://images.mirror-media.xyz/publication-images/GALac3_IqhZwI_c4H7o92.jpg?height=547&width=848)\\n\\n## What about something less trivial?\\n\\nThis can actually be generalized to proving various computations, done with Snapps on the Mina side, on Ethereum. The overall process is still going to be the same, the only thing which should be different is what in particular the in-EVM part does.\\n\\nProving that a particular trade order was filled on Uniswap with Mina without revealing the actual trade? Yes.\\n\\nProving the location with Mina with some transfer happening on Ethereum afterward? Yes.\\n\\nProving the identity with Mina and using it as a second factor to the Ethereum-based action authorization? Yes.\\n\\nLots of things can be brought in here. You name it.\\n\\n## Who is going to submit those proofs to Ethereum?\\n\\nAny user or application which is about to use the bridge. Since Mina state proof can be self-verified, there is no need to keep any set of trusted protocol participants to submit those proofs periodically. And, since the state proof verification is pretty cheap as well, there will be no significant overhead in Mina-Ethereum transaction cost.\\n\\nImportant nuance is that it is enough to submit only one valid proof of a particular Mina’s state to make all the applications using such a state proof verification core to be able to function. So, in the end, only one user (the least lucky one) will pay the verification cost to Ethereum, others will be able to re-use Mina’s state proof once verified for free.\\n\\n## Alright. Is there anything to try already?\\n\\nYes. We do have a work-in-progress interactive state proof preprocessing demo. Kind of a walkthrough those crucial 4 steps (state proof verification) of every bridge application there will be.\\n\\nIt is being prepared at [https://verify.mina.nil.foundation](https://verify.mina.nil.foundation/).\\n\\n## A browser? Don’t I need Mina and Ethereum nodes to do that?\\n\\nNo. The only thing you need is Mina’s state proof (which, thanks to [Chainsafe’s Mina protocol implementation](https://github.com/ChainSafe/mina-rs) is going to be possible to be retrieved right in the browser as well) and Ethereum RPC client library (there are plenty of those which run right inside the browser as well), connecting to any Ethereum node (even untrusted public one would work).\\n\\nSo. In the end. The only thing you (and anyone at all) need is your browser.\\n\\nThis means such a bridge could be introduced not only to mobile and desktop-based wallet applications, but to any web-based wallet (Metamask, anyone?) as well. \\n \\n\\n![](https://images.mirror-media.xyz/publication-images/pyoDg0-Fkeh9WeHLiDQkL.jpg?height=548&width=848)\\n\\n## Any updates regarding finalization timings?\\n\\nTimings are still pretty much the same. Q1 2022 will bring the production-ready version. The end of November 2021 have brought detailed design architecture description (<https://github.com/NilFoundation/evm-mina-verification/blob/master/docs/design/main.pdf>).\\n\\nStay tuned!\",\"timestamp\":1638285016,\"title\":\"Mina-Ethereum State Proof Verification Applications.\"},\"digest\":\"R7GPj5bwUKIxTSvW1StM0GgGexEvqI4mSTn_58GQMfc\",\"authorship\":{\"contributor\":\"0xe22cbcAA0324DfA1d83cB939239e11C306c9A03f\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"EmhXNLdw13mELT54AIwHjDpxUgdLOAtcjMQHcMt8434\\\",\\\"y\\\":\\\"H2fAo5Bp54UOB3SWsF1ZGlLArQn5vBPOg4cV00Xl3LY\\\"}\",\"signature\":\"pCsp9iFGj2LtsSkZuRPWtq_zdWkXLU2ZDXho91i2ywkJgNeSvzAjaz2YtNeTRxWU_3Zld3DWbp5Ra6BDVHzx_g\",\"signingKeySignature\":\"0x6ad3502378785d9cc0aef03f133b404fb5fede7aabddfdd082ba916f3cff05db2bdb29a3d2208da58ed7eed94b98c7c0a41abf5ddb7738e4d6b47fbbb72e63aa1c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"EmhXNLdw13mELT54AIwHjDpxUgdLOAtcjMQHcMt8434\\\",\\\"y\\\":\\\"H2fAo5Bp54UOB3SWsF1ZGlLArQn5vBPOg4cV00Xl3LY\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"R7GPj5bwUKIxTSvW1StM0GgGexEvqI4mSTn_58GQMfc\"}"