"{\"content\":{\"body\":\"Today we'll be going over the basic-1 anchor example, doing a deep dive of why everything is the way it is. This will cover new ground, including the addition of\\n\\nOther editions: [basic-0](https://mirror.xyz/0x840B1dC2abb99f1F86D549303719610F346B2aaF/w3-WcRd8aablvFf8Er5qH4H4b-x-8UVfhElMv6Uwick) deep dive.\\n\\nYou'll also need the [prerequisites found here](https://project-serum.github.io/anchor/getting-started/installation.html). I'm basically re-creating the tutorial found [here](https://project-serum.github.io/anchor/tutorials/tutorial-1.html).\\n\\n## Getting started\\n\\nTo get started, clone the repo and go to the example.\\n\\n    git clone https://github.com/project-serum/anchor\\n    cd anchor/examples/tutorial/basic-1\\n\\n## High-level components\\n\\nThis example has two high-level components, the program itself (at `programs/basic-1/src/lib.rs`) and the integration tests (found at `tests/basic-1.js`).\\n\\nWe'll be treating this example here as if we were doing local development, using the integration tests to iterate quickly.\\n\\n## Dive in\\n\\nLet's dive in immediately and run\\n\\n    # Ensure you don't have solana-test-validator running!\\n    anchor test\\n\\nWe should see the following output:\\n\\n      basic-1\\n        ✔ Creates and initializes an account in a single atomic transaction (simplified) (143ms)\\n        ✔ Updates a previously created account (411ms)\\n\\n\\n      2 passing (557ms)\\n\\nOur tests are currently passing, as expected!\\n\\nLet's dive in to the program and use the integration tests as a tool to see what changing different pieces of the program would do.\\n\\n## The account struct\\n\\n    #[account]\\n    pub struct MyAccount {\\n        pub data: u64,\\n    }\\n\\nThis struct defines what shape the account data will have. This specific account will be a struct with a field `data` of type `u64`.\\n\\nTry removing the `#[account]` attribute and re-running `anchor test`.\\n\\n    ... snip ...\\n\\n    error[E0277]: the trait bound `MyAccount: Clone` is not satisfied\\n      --> programs/basic-1/src/lib.rs:34:21\\n       |\\n    34 |     pub my_account: Account<'info, MyAccount>,\\n       |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `MyAccount`\\n       |\\n      ::: /home/camden/anchor/lang/src/account.rs:12:78\\n       |\\n    12 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {\\n       |                                                                              ----- required by this bound in `anchor_lang::Account`\\n\\nWhen we define an Account, the associated account data type must have these traits. The important thing here is that any account struct must have the `#[account]` attribute so Anchor knows how to work with that struct.\\n\\nAdd back the `#[account]` attribute before continuing.\\n\\n### Allocating space\\n\\nLet's add in a new field on the struct now:\\n\\n    #[account]\\n    pub struct MyAccount {\\n        pub data: u64,\\n        pub another_data: u64,\\n    }\\n\\nThen run `anchor test`\\n\\n    ... snip ...\\n\\n      logs: [\\n        'Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS invoke [1]',\\n        'Program 11111111111111111111111111111111 invoke [2]',\\n        'Program 11111111111111111111111111111111 success',\\n        'Program log: Custom program error: 0xa3',\\n        'Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS consumed 9553 of 200000 compute units',\\n        'Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS failed: custom program error: 0xa3'\\n      ]\\n    }\\n        1) Creates and initializes an account in a single atomic transaction (simplified)\\n        2) Updates a previously created account\\n\\n\\n      0 passing (67ms)\\n      2 failing\\n\\n    ... snip ...\\n\\nOur logs from invoking Solana aren't super helpul here. We definitely reached the system program (11....11) but we failed to initialize.\\n\\nThere aren't a ton of good clues here, but what did we actually change? We added another field to the struct, which ends up increasing the amount of space we need.\\n\\nThe fix here is to look above to where it says `space = 8 + 8`. We can change that to `space = 8 + 8 + 8`, and run `anchor test` again, which will pass.\\n\\nWhat did we learn? We have to be careful about the space we allocate for our account data and make sure that we allocate the right amount of space. We have to allocate 8 bytes for the discrimnator, 8 bytes for data, and 8 bytes for another_data.\\n\\nLet's revert the changes we've made up to this point.\\n\\n## The Initialize accounts\\n\\nThe initialize accounts are defined here:\\n\\n    #[derive(Accounts)]\\n    pub struct Initialize<'info> {\\n        #[account(init, payer = user, space = 8 + 8)]\\n        pub my_account: Account<'info, MyAccount>,\\n        #[account(mut)]\\n        pub user: Signer<'info>,\\n        pub system_program: Program<'info, System>,\\n    }\\n\\nSolana requires that we specify *all* the accounts that are used in the instruction handler because validators need to be able to operate on many accounts in parallel. Getting a mutable reference to an account will rqeuire blocking on any further changes to that account.\\n\\n## The system program account\\n\\nIf you look at the Initialize handler above, you'll notice that the system*program account is never explicitly used. However, try removing the system*program and the program won't compile. That's because we've defined, in this struct, `my_account` as an account that is to be initialized. As a result, anchor requires us to include the system*program because the system*program is the program capable of initializing accounts.\\n\\nIf we look at the Update accounts, we'll see that there is no system*program defined. That is because we are just updating that account's data and not initalizing it, so anchor doesn't require us to have access to the system*program.\\n\\n## The user account\\n\\nWe also don't explicitly use the user account in the instruction handler for Initialize. Let's try removing it (along with the `#[account(mut)])` attribute).\\n\\nThis won't compile either. That's because the account that's paying for the rent is the user, so we'll get a compilation error.\\n\\n#### Why does the user account have the mutable attribute?\\n\\nLet's re-add the user account line, but leave off the `#[account(mut)]` piece. This compiles, so let's run `anchor test`.\\n\\nThis actually works. I don't know if anchor test isn't testing all the constraints we expect, but I don't think this would work in a client setting. My expectation would be that this doesn't work because the user account needs to be mutable for the program to debit the account to pay for the space allocation.\\n\\n**Open question--don't quite get this...**\\n\\n#### The Signer struct\\n\\nThe Signer struct just tells anchor that the user account has signed the transaction. Anchor knows that it doesn't have to fetch or deserialize the data associated with this account.\\n\\n## my_account\\n\\nFinally, we have the account that actually holds the data for our program.\\n\\nWe've already covered the pieces of the attribute that this is tagged with, so let's look at the account itself.\\n\\n    pub my_account: Account<'info, MyAccount>\\n\\nThis tells anchor that we have an account here with data. Anchor should expect to deserialize the data into a MyAccount object, which we already went over.\\n\\n## The Update accounts\\n\\nVery simply, the Update instruction only requires one account, which is the original account that we stored the data in. This has the mutable attribute, because we want to be able to update the account data.\\n\\n## The instruction handlers\\n\\nFinally, we can move on to the instruction handlers!\\n\\nThese are virtually identical in how they are implemented in the code. They both take two parameters, take a mutable reference to my_account, and then update the data.\\n\\nWhat happens under the hood is very different though, and the differences are entirely because of the different account specifications.\\n\\nWhen we call initailize, anchor, under the hood, is making a call to the system program to initialize the account at my_account's address. Only after initializing the account does it update the data.\\n\\nThe update instruction takes an already initailized account with this type of data and just updates it.\\n\\nNote that we never have to \\\"commit\\\" our changes in any way. We use our mutable reference to the account's data and anchor will automatically update the account's data for us.\\n\\nThanks for reading this deep dive. I'll be continuing to do more deep dives on these anchor examples.\\n\",\"timestamp\":1635211046,\"title\":\"A deep dive into the basic-1 anchor example\"},\"digest\":\"-zx7o8b8a5-x8mgbnCjlau7VdmAmvqmR9kaMAhVg9ck\",\"authorship\":{\"contributor\":\"0x840B1dC2abb99f1F86D549303719610F346B2aaF\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"s9aTSHKQ7GJPeRXOc9cJ9-BKq2HGp1VDhjlpQHhh9Ig\\\",\\\"y\\\":\\\"Wbn8JXl5-NbC6xuldADl8Lt-1nX8jO0JtbdCFYezUDM\\\"}\",\"signature\":\"GU2M-PBGbAK4u3VuJ5eYvuO93i_8NKzKrigDPK2PbHAMIC0565r1a1pJrwzh1eAGrf7n6ZvvZJA8EynmUi_pSA\",\"signingKeySignature\":\"0x35fb1e6135a6c07a0ec9921e84b7d6da3870e099d98daadddff9f8d5efffa4870cb742c4d7457d1950a46875fa6556da40e5a8deed7e060b232f81fb4b12bdf01c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"s9aTSHKQ7GJPeRXOc9cJ9-BKq2HGp1VDhjlpQHhh9Ig\\\",\\\"y\\\":\\\"Wbn8JXl5-NbC6xuldADl8Lt-1nX8jO0JtbdCFYezUDM\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"-zx7o8b8a5-x8mgbnCjlau7VdmAmvqmR9kaMAhVg9ck\"}"