"{\"content\":{\"body\":\"这个程序帮助你在谷歌浏览器上自动做日常任务，区块链虚拟货币行业有很多的日常任务可以做，我们大部分人并没有足够的时间来应付这些任务，因此，我通过python+selenium实现了一个简单的GuildFi工会日常打卡脚本。只需要添加定时任务并设置好时间来执行该程序即可。同样，这套库也可以实现各种网页链游的自动战斗等功能，有兴趣的可以学习一下这个库，开发自己需要的工具。源码如下：\\n\\n```\\nfrom selenium import webdriver\\nfrom selenium.webdriver.common.by import By\\nfrom selenium.webdriver.support.ui import WebDriverWait\\nfrom selenium.webdriver.support import expected_conditions as EC\\nimport time,arrow\\n\\ndef findHub(driver,element,by=By.XPATH,timeout=5,times = 3):\\n    '''\\n    element为选择器表达式\\n    timeout为要素寻找超时时间，默认5秒\\n    times为寻找次数，默认3次\\n    by 可选参数\\n    ID = \\\"id\\\"\\n    XPATH = \\\"xpath\\\"\\n    LINK_TEXT = \\\"link text\\\"\\n    PARTIAL_LINK_TEXT = \\\"partial link text\\\"\\n    NAME = \\\"name\\\"\\n    TAG_NAME = \\\"tag name\\\"\\n    CLASS_NAME = \\\"class name\\\"\\n    CSS_SELECTOR = \\\"css selector\\\"\\n    '''\\n    try:\\n        ele = WebDriverWait(driver, timeout).until(\\n            EC.presence_of_element_located((by, element))\\n        )\\n        ele.click()\\n        return True\\n    except Exception as e:\\n        if times != 0:\\n            print(\\\"找不到要素\\\",element, \\\"。重试第\\\", 4-times, \\\"次。\\\")\\n            result = findHub(driver, element, by, timeout, times - 1)\\n        else :\\n            return False\\n        return result\\n\\n\\ndef unlockWallet(driver, password):\\n    driver.get(\\\"chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/popup.html\\\")\\n    time.sleep(5)\\n    driver.find_element_by_id('password').send_keys(password)\\n    findHub(driver, 'button', By.TAG_NAME)\\n\\ndef claim():\\n    # 钱包解锁密码\\n    password = ''\\n    # 浏览器驱动目录\\n    driverPath = r'D:\\\\bin\\\\chromedriver'\\n    # 浏览器缓存数据，包括收藏夹，扩展，记录的密码，cookies等\\n    # 最好单独拷贝出来，默认路径是C:\\\\Users\\\\用户\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\User Data\\n    userDataPath = r'user-data-dir=D:\\\\bin\\\\User Data'\\n    options = webdriver.ChromeOptions()\\n    options.add_argument(userDataPath)\\n    driver = webdriver.Chrome(executable_path=driverPath, options=options)\\n    unlockWallet(driver, password)\\n    driver.get(r\\\"https://guildfi.com/quest\\\")\\n    assert \\\"GuildFi\\\" in driver.title\\n    findHub(driver, \\\"//button[text()='Connect account']\\\")\\n    findHub(driver, \\\"//button/span[text()='MetaMask']\\\")\\n    findHub(driver,\\\"//button[text()='Claim']\\\")\\n    handles = driver.window_handles\\n    if len(handles) > 1:\\n        driver.switch_to.window(handles[1])\\n        time.sleep(5)\\n        findHub(driver, \\\"//button[text()='签名']\\\")\\n        driver.switch_to.window(handles[0])\\n    driver.close()\\n\\nif __name__ == '__main__':\\n    while True:\\n        now = arrow.now(\\\"Asia/Shanghai\\\").format(\\\"YYYYMMDDHH\\\")\\n        print(now)\\n        if now[8:10] == \\\"10\\\":\\n            claim()\\n            print(\\\"完成任务\\\")\\n        time.sleep(3600)\\n```\\n\\n具体的流程如下：\\n\\n### 1.安装python环境\\n\\n安装python环境比较简单，推荐使用miniconda下载安装\\n\\n[https://conda.io/en/latest/miniconda.html](https://conda.io/en/latest/miniconda.html)\\n\\n### 2.安装selenium环境\\n\\n安装好python环境后，使用pip命令安装[selenium](https://selenium-python-zh.readthedocs.io/en/latest/waits.html)库3.141.0版本，打开win命令行\\n\\n```\\npip install selenium==3.141.0\\n```\\n\\n安装好selenium后，需要安装一个浏览器驱动，根据自己目前的chrome版本，可以安装对应版本的浏览器驱动\\n\\n[https://chromedriver.storage.googleapis.com/index.html](https://chromedriver.storage.googleapis.com/index.html)\\n\\n驱动下载好后，可以放到一个指定的目录，然后在环境变量中添加该路径，在win命令行执行\\n\\n```\\n示例命令：\\nsetx PATH \\\"%PATH%;C:\\\\WebDriver\\\\bin\\\"\\nsetx PATH \\\"%PATH%;[您的路径]\\\"\\n把路径换成您指定的路径\\n```\\n\\n### 3.复制并设置chrome用户数据\\n\\n如果您要在单独的云服务器上跑该程序，可以不导出用户数据，但建议您先通过浏览器进行一次登录记录密码等操作，这样可以省去很多登录验证的代码。\\n\\n如果您要在自己的电脑上跑该程序，建议单独导出用户数据（因selenium提供的浏览器驱动和chrome一起启动的情况下，会出现用户数据目录被占用无法启动的情况）到一个目录，直接复制C:\\\\\\\\Users\\\\\\\\用户\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Google\\\\\\\\Chrome\\\\\\\\User Data的数据到一个目录即可。\\n\\n### 4.执行程序\\n\\n程序会每隔1小时检测一下时间，如果到了10点左右，就会直行领取任务，使用python 程序名.py直行程序\\n\\n至此，我们就完成了整个过程，可以有更多的时间去做其他事情了。\",\"timestamp\":1639319221,\"title\":\"auto daily task on chrome\"},\"digest\":\"wfbQAsBlsBce87kaJ5O0YqwKz9cSsIe6buRdToaG4u4\",\"authorship\":{\"contributor\":\"0x0055538df2360C8b600da7a82E2DC74F3890171F\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"oNR_dcz8iy91gLnkvtoPxl4TjV6X3x-8o4Js_BAqyrU\\\",\\\"y\\\":\\\"xvycc7T_QfAEXR4kf-s6V8Bsq6-NNItWqGrApFs4eR0\\\"}\",\"signature\":\"n1pv6pI_0wuKN7lsFPhzjUK-Gn0wDAqnCBWJFwRo6Vhuu_LLmyqJRMxldhVybmRjKTwEeyi-QqYDZkPWCmB_mA\",\"signingKeySignature\":\"0x0f3920b6024c3f5ea1a522ce9e9ecff75541ab46f592f700b249b4facda237346ee7f977e4ef4717990b45776b2fc50eeaa283c2ed8b7232c40c76e56243c4011c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"oNR_dcz8iy91gLnkvtoPxl4TjV6X3x-8o4Js_BAqyrU\\\",\\\"y\\\":\\\"xvycc7T_QfAEXR4kf-s6V8Bsq6-NNItWqGrApFs4eR0\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"3Aa9h_zEgho58nRn4PAswd-X1c3XBty3nlWJNrM3k5Y\"}"