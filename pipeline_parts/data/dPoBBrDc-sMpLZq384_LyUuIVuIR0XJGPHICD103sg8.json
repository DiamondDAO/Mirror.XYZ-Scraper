"{\"content\":{\"body\":\"revision of this document: R2\\n\\n* I. Introduction 简介\\n* II. Concept 概念\\n* III. Specifications (RFC) 规范(RFC)\\n* IV. Real world scenario 真实场景\\n* V. Planned improvements 增强计划\\n* VI. Contact 联系方式\\n\\n# I. 简介\\n\\n以太坊没有正式的stratum协议。它只支持GetWork，这是一个非常耗资源的问题，因为矿工需要不断的投票来获得可能的新工作。因此，GetWork会影响到矿工和矿池的性能。由于需要更专业的以太坊挖矿，出现了几个专为以太坊的“stratum”版本。这些“stratums”利用了服务器端(矿池端)的GetWork来获取工作，如果创建此类协议时采取仔细考虑因素和预防措施，这将是很好的。但这并没有完成。这些协议有以下问题:\\n\\n1. 每个矿工/工人都没有唯一的数据。Extranonce被忽略(但仍然被发送)。每一个矿工都获取seedhash(每30k块都是相同的)和headerhash(每个块都改变)。然后矿工使用这两个值和自己的Nonce来生成哈希。矿工可能在做重复的工作(如果他们选择了相同的Nonce)。\\n2. 难度冗余。难度在mining.notify消息中作为已命名目标的第三个参数被发送。这是不需要的，因为矿工们可以通过自己的困难来计算目标哈希。\\n3. 整体数据冗余。有几个字段不需要通过网络发送。首先, 如果未使用extranonce，则不必发送。其次,每隔30k个块更换一次seedhash，就没有必要每次挖矿都发送。第三,正如在第2条中指出的 - 当使用set_difficulty时, 在mining.notify中的目标是多余的。第四,mining.submit实际上只需要发送一次。矿池需要验证Nonce的有效性，并将计算哈希和混合哈希(mixhash)。如果删除所有提及的冗余，可以很容易地减少50%以上的带宽使用。\\n4. 与原有slush的stratum规范相比，有一些不一致的地方。其中一个是ids。Ids应该增加，以便矿池能够跟踪接收到的数据。另一件事是HEX标记'0x'从每个字符串字段开始。这也是多余的，如果不使用的话，我们将节省一些带宽。\\n5. 没有规范，只有有实现的解决方案项目。这通常会导致几个类似的协议版本;到底发生了什么。\\n\\n我们的目标是建立一个可靠的、无冗余的、刀枪不入的以太坊stratum挖矿协议, 它没有前面指出的这些问题。\\n\\n# II. 概念\\n\\n以太坊的GetWork给我们3个值:\\n\\n```json\\n{ ... \\\"result\\\":[\\n\\\"0x645cf20198c2f3861e947d4f67e3ab63b7b2e24dcc9095bd9123e7b33371f6cc\\\",\\n\\\"0xabad8f99f3918bf903c6a909d9bbc0fdfa5a2f4b9cb1196175ec825c6610126c\\\",\\n\\\"0x0000000394427b08175efa9a9eb59b9123e2969bf19bf272b20787ed022fbe6c\\\"\\n]}\\n```\\n\\n第一个值是headerhash,第二个是seedhash, 第三个是目标。 Seedhash用于识别DAG文件, headerhash和64为Nonce由我们的矿机给我们的哈希选择出, 如果低于提供的目标，则提供块/共享。\\n\\n由于Nonce的宽度为64位(8字节)，并且考虑到非常糟糕的可能情况，以太坊在5分钟内没有发现一个块，8个字节的Nonce能够提升矿机的速度到:\\n\\n```\\n\\t(2^64 / 300) / 1G ~ 61,489,147 GH/s\\n```\\n\\n这是一个非常大的数字，所以我们可以很容易地考虑为我们的stratum协议拿走一些字节。\\n\\n```\\n---------------------------------------\\n| Bytes | Max supported hashing speed |\\n|   8   |        ~61,489,147.000 GH/s |\\n|   7   |           ~240,192.000 GH/s |\\n|   6   |               ~938.000 GH/s |\\n|   5   |                 ~3.665 GH/s |\\n|   4   |                 ~0.014 GH/s |\\n---------------------------------------\\n```\\n\\n只有4个字节的Nonce不是一个选项，因为我们已经有了能够达到14 MH/s以上的矿工。5个字节的Nonce宽度允许最大速度为3.665 GH/s，在相当长的时间内是足够的，即使ASICs到达。\\n\\n矿工需要在矿池中得到seedhash、headerhash、难度和部分nonce(被称为extranonce)。矿工选择了它自己的第二部分(称为minernonce)。Extranonce与minernonce连接，它提供64位的Ethereum nonce。\\n\\n# III. 规范(RFC)\\n\\n\\n-------------------------\\n\\n在矿工到矿池建立TCP连接之后，就会发生握手。矿工首先发送数据:\\n\\n```json\\n{\\n  \\\"id\\\": 1,\\n  \\\"method\\\": \\\"mining.subscribe\\\",\\n  \\\"params\\\": [\\n    \\\"MinerName/1.0.0\\\", \\\"EthereumStratum/1.0.0\\\"\\n  ]\\n}\\n```\\n\\n第一个参数是矿工名称和版本(正如标准stratum协议)。第二个参数必须是“Ethereum Stratum/Version”，版本是根据该文档的版本使用的EthereumStratum矿工的版本。如果矿池不支持此版本，它可以终止连接或返回错误。\\n注意，矿工可以迭代ids，可以从任何数字开始。从矿工到矿池的每条消息都需要有唯一的id给矿工以正确读取响应，因为矿池可能不以FIFO方式处理矿工的消息。\\n\\n服务器回复:\\n\\n```json\\n{\\n  \\\"id\\\": 1,\\n  \\\"result\\\": [\\n    [\\n      \\\"mining.notify\\\",\\n      \\\"ae6812eb4cd7735a302a8a9dd95cf71f\\\",\\n      \\\"EthereumStratum/1.0.0\\\"\\n    ],\\n    \\\"080c\\\"\\n  ],\\n  \\\"error\\\": null\\n}\\n```\\n\\n响应几乎与标准stratum协议具有以下差异;结果数组的第一个参数的第三个参数为“EthereumStratum/Version”;如果矿池没有报告此参数或版本与矿工支持的不同，矿工可以预期兼容性问题，并终止连接。结果数组的第二个参数是由矿池设置的extranonce(在十六进制中)。没有第三个参数，因为没有extranonce2(正如标准stratum)。Extranonce可能最大3字节。\\n\\n矿工应在初次握手时授权;这与标准stratum协议相同，在这里将不会详细解释。\\n\\n在第一份任务(工作)提供之前，矿池必须通过发送设置难度:\\n\\n```json\\n{\\n  \\\"id\\\": null,\\n  \\\"method\\\": \\\"mining.set_difficulty\\\",\\n  \\\"params\\\": [\\n    0.5\\n  ]\\n}\\n```\\n\\n参数数组的第一项是双重数据类型的难度。难度和目标之间的转换与比特币一样;难度1转化为HEX的目标:\\n\\n```\\n00000000ffff0000000000000000000000000000000000000000000000000000\\n```\\n\\n如果矿池在第一份工作之前没有设置难度，那么矿工就可以假定难度是1。\\n\\n当难度发生变化时，矿工们开始为每一份到达的NEXT任务使用新的难度。\\n\\n如果矿工已经订阅extranonce通知(详细解释在这里:<https://www.nicehash.com/?p=software#devs>),然后矿池可能会改变矿工的extranonce通过发送:\\n\\n```json\\n{\\n  \\\"id\\\": null,\\n  \\\"method\\\": \\\"mining.set_extranonce\\\",\\n  \\\"params\\\": [\\n    \\\"af4c\\\"\\n  ]\\n}\\n```\\n\\n新的extranonce对于所有在矿池中发送的NEXT任务都有效。\\n\\n矿池通过发送以下数据通知矿工工作(工作):\\n\\n```json\\n{\\n  \\\"id\\\": null,\\n  \\\"method\\\": \\\"mining.notify\\\",\\n  \\\"params\\\": [\\n    \\\"bf0488aa\\\",\\n    \\\"abad8f99f3918bf903c6a909d9bbc0fdfa5a2f4b9cb1196175ec825c6610126c\\\",\\n    \\\"645cf20198c2f3861e947d4f67e3ab63b7b2e24dcc9095bd9123e7b33371f6cc\\\",\\n    true\\n  ]\\n}\\n```\\n\\n参数数组的第一个参数是任务ID(必须是任意大小的十六进制数)。第二个参数是seedhash。每一个任务都发送一个seedhash来支持尽可能多的矿池，这可能会很快地在货币之间交换。第三个参数是headerhash。最后一个参数是boolean cleanjobs。如果设为true，那么矿工需要清理任务队列，并立即开始从事新提供的任务，因为所有旧的任务分享都将导致陈旧的分享错误。\\n\\n矿工使用seedhash识别DAG，然后试着带着headerhash,extranonce和自己的minernonce寻找低于目标的分享(这是由提供的难度而产生的)。\\n\\n当发现低于目标的分享时，矿工将其提交给矿池:\\n\\n```json\\n{\\n  \\\"id\\\": 244,\\n  \\\"method\\\": \\\"mining.submit\\\",\\n  \\\"params\\\": [\\n    \\\"username\\\",\\n    \\\"bf0488aa\\\",\\n    \\\"6a909d9bbc0f\\\"\\n  ]\\n}\\n```\\n\\n参数数组的第二个参数是任务ID，第三个参数是minernonce。注意在上面的例子中，minernonce是6个字节，因为提供的extranonce是2个字节。如果矿池提供3字节的extranonce，那么minernonce必须是5字节。\\n\\n对于每一个提交的工作，矿池需要返回标准stratum响应:\\n\\n```json\\n{\\n  \\\"id\\\": 244,\\n  \\\"result\\\": true,\\n  \\\"error\\\": null\\n}\\n```\\n\\n或者如果分享不被接受(标准stratum响应):\\n\\n```json\\n{\\n  \\\"id\\\": 244,\\n  \\\"result\\\": false,\\n  \\\"error\\\": [\\n    -1,\\n    \\\"Job not found\\\",\\n    NULL\\n  ]\\n}\\n```\\n\\n# IV. 真实场景\\n\\n\\n-----------------------\\n\\n矿工连接矿池并发送:\\n\\n```json\\n{\\n  \\\"id\\\": 1,\\n  \\\"method\\\": \\\"mining.subscribe\\\",\\n  \\\"params\\\": [\\n    \\\"EthereumMiner/1.0.0\\\", \\\"EthereumStratum/1.0.0\\\"\\n  ]\\n}\\n```\\n\\n矿池响应:\\n\\n```json\\n{\\n  \\\"id\\\": 1,\\n  \\\"result\\\": [\\n    [\\n      \\\"mining.notify\\\",\\n      \\\"ae6812eb4cd7735a302a8a9dd95cf71f\\\",\\n      \\\"EthereumStratum/1.0.0\\\"\\n    ],\\n    \\\"a2eea0\\\"\\n  ],\\n  \\\"error\\\": null\\n}\\n```\\n\\n矿工然后认证:\\n\\n```json\\n{\\n  \\\"id\\\": 2,\\n  \\\"method\\\": \\\"mining.authorize\\\",\\n  \\\"params\\\": [\\n    \\\"test\\\",\\n    \\\"password\\\"\\n  ]\\n}\\n```\\n\\n矿池确认:\\n\\n```json\\n{\\n  \\\"id\\\": 2,\\n  \\\"result\\\": true,\\n  \\\"error\\\": null\\n}\\\\n\\n```\\n\\n矿池发送难度:\\n\\n```json\\n{\\n  \\\"id\\\": null,\\n  \\\"method\\\": \\\"mining.set_difficulty\\\",\\n  \\\"params\\\": [\\n    1.0\\n  ]\\n}\\\\n\\n```\\n\\n然后任务:\\n\\n```json\\n{\\n  \\\"id\\\": null,\\n  \\\"method\\\": \\\"mining.notify\\\",\\n  \\\"params\\\": [\\n    \\\"bf0488aa\\\",\\n    \\\"abad8f99f3918bf903c6a909d9bbc0fdfa5a2f4b9cb1196175ec825c6610126c\\\",\\n    \\\"fc12eb20c58158071c956316cdcd12a22dd8bf126ac4aee559f0ffe4df11f279\\\",\\n    true\\n  ]\\n}\\\\n\\n```\\n\\n过了一段时间，矿工找到了分享并提交:\\n\\n```json\\n{\\n  \\\"id\\\": 3,\\n  \\\"method\\\": \\\"mining.submit\\\",\\n  \\\"params\\\": [\\n    \\\"test\\\",\\n    \\\"bf0488aa\\\",\\n    \\\"cfae7df760\\\"\\n  ]\\n}\\\\n\\n```\\n\\n矿池响应:\\n\\n```json\\n{\\n  \\\"id\\\": 3,\\n  \\\"result\\\": true,\\n  \\\"error\\\": null\\n}\\\\n\\n```\\n\\n分享是有效考虑数据:\\n\\n```\\nseedhash=abad8f99f3918bf903c6a909d9bbc0fdfa5a2f4b9cb1196175ec825c6610126c\\nheaderhash=fc12eb20c58158071c956316cdcd12a22dd8bf126ac4aee559f0ffe4df11f279\\nnonce=a2eea0cfae7df760\\n```\\n\\n结果是难度的1.863, 大于1.0.\\n\\n# V. 增强计划\\n\\n以太坊有RPC方法eth_getBlockByNumber，它可以返回一些尚未被挖掘的下块数据。数据中有下一个块号(块高度)。这个数字可以代替seedhash;然后，每个矿工都将计算自己的seedhash，因此带宽的使用将会减少更多。\\n有一些改造eth_getBlockTemplate方法的计划。当这种情况发生时，这种stratum协议可能与标准stratum非常相似。\\n\\n# VI. 联系方式\\n\\n* [www.nicehash.com](http://www.nicehash.com)\\n* [info@nicehash.com](mailto:info@nicehash.com)\",\"timestamp\":1638851748,\"title\":\"Ethereum stratum mining protocol v1.0.0\"},\"digest\":\"y1h14JZFqQcGauRyAsvVPt4B8fpdahSuS602rY1i_3Q\",\"authorship\":{\"contributor\":\"0x94C0e8Cf59e644fA76d4Fa83164B9F2030d07F31\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"DCwEHt3t8nlX4_6pSoeUsqsUzraEuAbxkeDQyucgxtE\\\",\\\"y\\\":\\\"LXf1Gzm8IGA_Q0hf0tfYvV5jP4DrU-9ViDZ4Cv3SC5o\\\"}\",\"signature\":\"hAgh_hRGfuODrbFx-dEmj56iaeK2dSUtixogH9B_8yq5tXhgbIQG5z1XwFttDa7Z1qjENPvtd7JeCHsWDlY6bA\",\"signingKeySignature\":\"0x62f89b5c41902fb93107569b052b887fcc676e9a5d6efc9202fc6502c0f4046b274d4bd876db5df0c4a9f4fa30f6afc569078d61188eb466ba6a54c994cb10741c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"DCwEHt3t8nlX4_6pSoeUsqsUzraEuAbxkeDQyucgxtE\\\",\\\"y\\\":\\\"LXf1Gzm8IGA_Q0hf0tfYvV5jP4DrU-9ViDZ4Cv3SC5o\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"y1h14JZFqQcGauRyAsvVPt4B8fpdahSuS602rY1i_3Q\"}"