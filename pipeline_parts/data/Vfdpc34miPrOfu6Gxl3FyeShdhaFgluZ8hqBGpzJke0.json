"{\"content\":{\"body\":\"Thirdweb has been blowing up recently. They hit [#1 on Product Hunt](https://www.producthunt.com/posts/thirdweb). Their early access NFT drop immediately ran out. They have built out a great product with a vibrant community . Thirdweb one of the startups I am most excited about in the crypto/web3 space.\\n\\n![Thirdweb's early access NFT](https://images.mirror-media.xyz/publication-images/AkpLQwBJwRx9kivbul4zJ.png?height=612&width=795)\\n\\nIn this post I go over\\n\\n* Background\\n* What does third web do\\n* Why it is important\\n* The Product\\n* Funding and Team\\n* Opportunities\\n* Risks\\n* Conclusion\\n\\nI use some web3 specific terminology. If you are not familiar at all with what web3 is, I highly recommend listening to[ this podcast episode](https://tim.blog/2021/10/28/chris-dixon-naval-ravikant/) or going through [this Twitter thread](https://twitter.com/cdixon/status/1442201621266534402?lang=en).\\n\\nLet’s dive in.\\n\\n## Abstractions all the way down\\n\\n**Abstracting away complexity is one of the most consistent trends in human history.** You don’t need to know what [differentials](https://en.wikipedia.org/wiki/Differential_(mechanical_device)) are or even how engines work to drive your car. This pattern is especially prevalent in the tech industry. Billions of people use the internet everyday, a tiny percentage of which knows how a webpage appears after you enter a URL. You can be a power user- download files, upload videos, play games, and even build basic websites without really knowing what’s going on behind the scenes. All the compute, storage and networking complexities have been hidden away behind a simple web browser.\\n\\nThese abstractions also translate to building software.\\n\\n### The evolution of building AI components\\n\\nWhen I first got interested in machine learning (around 2015), basic object detection was quite tedious. Python had emerged as the language of choice for ML, and there were some Data Science libraries in place, but the overall experience of building a basic Deep Learning model was terrible.\\n\\n* You had to manually define the CNN's architecture\\n* You had to train the model and bear the compute costs\\n* You had to write functions for softmax, backpropogation, gradient descent, etc. which are building blocks for every CNN\\n* Since your data and compute resources were limited, your model's performance was usually suboptimal\\n\\n*PS. You can ignore the content in the long code snippets. They are only to illustrate number of lines of code as a proxy for effort/complexity..*\\n\\n![MNIST numeric digit classification, which is the hello world of computer vision, written in Python (with numpy and scipy). 221 lines of code.](https://images.mirror-media.xyz/publication-images/e5Fa7Q5Qff4yVIUiKjp29.png?height=8602&width=1970)\\n\\nSoon a project called Pytorch made all this much easier. Pytorch is an open source machine learning framework that was developed and launched by Meta(then Facebook). **Code you had to copy-paste into each program was now available in the Pytorch library.** This greatly reduced the number of lines of code you had to write. Moreover, since the predefined functions were expertly written and followed best practices, building on Pytorch often resulted in better models. You still had to define and train your model but the developer experience was much better.\\n\\n![MNIST numeric digit classification with Pytorch. 137 lines of code.](https://images.mirror-media.xyz/publication-images/h136LcJWQvh2G1WBlEpbH.png?height=5463&width=2000)\\n\\nPytorch then launched Pytorch Hub. This was a collection of SOTA(State of the Art) models in every category. These models came pre-trained. You could further finetune the model on your data, or use it as it is. **Suddenly everyone had access to world-class AI models.** [Fast.ai](http://fast.ai/) built a framework on top of Pytorch that made it extremely easy for anyone with basic ML knowledge to write deep learning applications. You no longer had to deal with tensors. Just specify some parameters and fast.ai took care of the rest.\\n\\n![MNIST numeric digit classification with fast.ai. More than 10x reduction in the lines of code. ](https://images.mirror-media.xyz/publication-images/0a4JktllEDdzsNOkBpx5t.png?height=968&width=1522)\\n\\nAround the same time, cloud service providers started offering **AI as a Service**. You could now integrate AI into your application with almost no understanding of how it actually worked. For generic tasks you simply needed to know what you wanted to accomplish and there was probably a service for it. All the heavy lifting could be outsourced.\\n\\n![](https://images.mirror-media.xyz/publication-images/t2mBzdFRhetG1ZCwbPoLd.png?height=872&width=840)\\n\\nAlong the way complexity in AI got so abstracted that Google made **Teachable machine**, a **drag-and-drop builder** to create deep learning models.\\n\\n![](https://images.mirror-media.xyz/publication-images/51b84j1PY3uA92ICwi5mj.png?height=770&width=1622)\\n\\nThere is definitely nuance to this. With each level of abstraction you lose some flexibility as abstractions assume useful defaults. To finetune models well you need to understand their underlying architecture. Most of the work Data Science teams do is around getting good, clean data and not just building models. However, t**here is no denying the massive unlock that abstracting complexity in AI has had**. Thanks to this democratization of AI, a cutting edge PhD research project from 2011 can be easily outperformed by a high school project in 2021.\\n\\n![Evolution of the developer experience in AI. Several other industries also follow similar patterns](https://images.mirror-media.xyz/publication-images/6evClxzOBHM9zNoK91ttw.png?height=531&width=563)\\n\\n**Looking at how the developer experience evolved in AI is a good way to build what's missing in web3.** Although they have significant differences, AI, like crypto, started out as a niche thing among computer nerds. Then for a few years it completely engulfed the tech scene's imagination (similar to the crypto bull run of the past 2 years). AI has now reached a place where we are seeing very real use-cases implemented in products that we use everyday. Today almost every popular consumer facing app has AI components in it. A big reason for this is because the developer experience has become so much better. If you have an app that data flows through and you are storing it somewhere, you can probably do some AI stuff without too much extra effort.\\n\\n![It's still early days for AI but the ecosystem has matured a lot](https://images.mirror-media.xyz/publication-images/fGBbUAX4s35nQxpbC_DZd.png?height=1125&width=1224)\\n\\n## Web3 devs need better tools\\n\\nIt is common knowledge that the **developer experience in web3 kinda sucks right now**. Let's say you are a full-stack dev in web2 that sees the promise of web3 and wants to switch over. You decide to build on Solana due to it being cheap and fast. To get started, you first need to get comfortable with web3 concepts like wallets, gas fees, smart contracts and the overall [architecture of a web3 app](https://www.preethikasireddy.com/post/the-architecture-of-a-web-3-0-application). These are fair asks. You then find out that in order to actually build something, you need to get comfortable with a whole new language called Rust. Rust is not a very welcoming language. You also have to navigate the intricacies of Solana's architecture([programs don't store state lol](https://docs.solana.com/developing/programming-model/accounts)). Since the space is so new, there aren't a lot of tutorials to help you out if you get stuck(although the community is very helpful). Many lose interest or give up in this long road to shipping a working product. Having high switching costs locks out a lot of talent.\\n\\nEthereum development has similar problems, although Solidity is much more welcoming to JS devs.\\n\\nThis is getting better very quickly. Web3.js was one of the first big upgrades. Armani Ferrante is hailed as a hero by the Solana community for having developed [Anchor](https://project-serum.github.io/anchor/getting-started/introduction.html), a framework for Solana development on Rust similar to Next.js for web development. Truffle and Hardhat have greatly improved the developer experience in Ethereum. Remix is an online IDE that lets you to develop for [EVM ](https://coinmarketcap.com/alexandria/glossary/ethereum-virtual-machine-evm)without even installing anything. However there is still a lot left to be desired. **Smart contracts are at the core of web3. Integrating smart contracts into your application still often requires getting your hands dirty with Solidity/Rust.**\\n\\n## Thirdweb\\n\\nSimply put, thirdweb makes it **easy to build for web3.** They do this by providing smart contracts, [SDKs](https://www.redhat.com/en/topics/cloud-native-apps/what-is-SDK) and UI components that make it easy to handle the blockchain stuff so that you as an app developer can **focus on what is important- utility and usability.**\\n\\n![](https://images.mirror-media.xyz/publication-images/XUkOj-zktZt4OqkVzsyOM.png?height=1200&width=962)\\n\\n### Product\\n\\n**Current functionality**\\n\\nThirdweb provides smart contracts templates. You just need to fill in your details and the smart contract will be deployed from your wallet. You have full ownership over it.\\n\\n![](https://images.mirror-media.xyz/publication-images/WDFsQwyKW5TCgVHcYZBTY.png?height=767&width=1458)\\n\\nThe smart contract templates can be modified using code or through the dashboard itself.\\n\\n![Customizing smart contracts through the dashboard](https://images.mirror-media.xyz/publication-images/05eho82yjCePmtXtjGxMP.png?height=707&width=1136)\\n\\n![Customizing smart contracts through the SDK](https://images.mirror-media.xyz/publication-images/OrCBVhODipwKsHWlSmMIq.png?height=1304&width=1396)\\n\\nThere’s no Solidity involved. Since the smart contract is deployed from your wallet address you have full ownership over it(ie. admin privileges).\\n\\n**Ease of use**\\n\\nIf you know basic web3 concepts you should be able to navigate through the thirdweb dashboard fairly easily, even if you don’t have a background in coding/computer science. I highly recommend trying to create a new token by yourself. Seeing $YOURTOKEN show up in your Metamask is a great first aha moment. You just need to **click through a couple of steps and suddenly you have deployed a smart contract** that will live forever on the blockchain. You can find a tutorial on how to do that [here](https://mirror.xyz/nonem.eth/HGL6XOknXUyENNxABa_5S-6zBXBEf5iYGDoC-l-tht4)\\n\\n**Potential future functionality**\\n\\nThirdweb chose NFTs as it’s wedge. Now it is in a position to increase the breadth of their offerings while also going deep into NFTs\\n\\n> importance = (0.7 x frequency of use)+(0.3 x number of lines of code)\\n\\n**Pricing**\\n\\nThirdweb does a great job of aligning incentives. They make money only when you make money.\\n\\n![](https://images.mirror-media.xyz/publication-images/m8gr_HFYdbTWtslYUWYP-.png?height=580&width=1197)\\n\\nThirdweb has currently only monetized their NFT smart contracts. Smart contracts are free to create(you have to pay the gas costs). If you aren’t taking royalties from your project it is free forever. If your project has royalties, thirdweb takes a flat 5% cut.\\n\\n![Thirdweb's monetization approach is very similar to that used by payment gateways like Stripe](https://images.mirror-media.xyz/publication-images/RGCGSbENlXa8ak0gRoou9.png?height=724&width=688)\\n\\n\",\"timestamp\":1640786681,\"title\":\"Third web: tools to build the next evolution of the internet\"},\"digest\":\"jHGTQQDtH9FJ30H-rB0mTFsN0RzfxKoRgPgfjgcMbTU\",\"authorship\":{\"contributor\":\"0xDd3C87Cb8513812be41A8829b8af87577313484E\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"BmFGFmNtveytPBbs7ZYItH7PJ_JVeUHnW-zFc87-stU\\\",\\\"y\\\":\\\"v1sRjZwzb8h9Lfq4dO7s5zf8tn-ulwJ2f36tmLAXdEw\\\"}\",\"signature\":\"JCcBC4NKqHIu2qeRKXzv9CJC0ZEf8Ih8sKtv2vfspAvcUBjBZ3cRpm-mT1IluFt1zlwVxbLq6XWwOterUExysQ\",\"signingKeySignature\":\"0xbf4bd43500ceb73ba820438ba4f93329213f60fa40d97295a05a55a05ade5fe92368a9fae1ab585fea05464b72e3795fa9b2b978401cd5aa7ad6358847082a501c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"BmFGFmNtveytPBbs7ZYItH7PJ_JVeUHnW-zFc87-stU\\\",\\\"y\\\":\\\"v1sRjZwzb8h9Lfq4dO7s5zf8tn-ulwJ2f36tmLAXdEw\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"rqccWFmLyT49jXyf5U_YijiHT35lSZqrWKhG6gswpVA\"}"