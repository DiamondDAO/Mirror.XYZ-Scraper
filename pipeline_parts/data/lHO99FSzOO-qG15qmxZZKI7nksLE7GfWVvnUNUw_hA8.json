"{\"content\":{\"body\":\"![](https://www.yuchanns.xyz/images/k8s-banner.png)\\n\\n**系列文章**\\n\\n* [K8S入门-使用 APISIX 作为 Ingress](https://www.yuchanns.xyz/2021/09/22/apisix-as-k8s-ingress/)\\n\\n## 环境准备\\n\\n### 安装虚拟机软件\\n\\n安装 [Virtualbox](https://www.virtualbox.org/wiki/Downloads) 和 [Extension Pack](https://www.virtualbox.org/wiki/Downloads) 。\\n\\n![](https://www.yuchanns.xyz/images/virtualbox-extension-pack.png)\\n\\n我们将会使用 Virtualbox 部署 K8S 集群的master和一个node。\\n\\n安装 Extension Pack 的目的是使用 Headless 模式启动虚拟机，方便后续在宿主机使用终端 ssh 通信操作。\\n\\n### 安装OS\\n\\n本文选择了 [CentOS7](http://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/) 。\\n\\n虚拟机属性上，分配 4核 CPU 和 4g 内存，网络使用桥接模式。\\n\\n设置转发端口的目的是为了后续 ssh 连接到虚拟机。\\n\\n启动虚拟机，选择镜像，按照提示安装操作系统。\\n\\n这里假设我们把虚拟机 OS 的管理员命名为 yuchanns 。\\n\\n### 关闭 swap 和开启 ssh 服务\\n\\n> 进入虚拟机 OS ，**注意** 下面的操作都在虚拟机的 Shell 中执行的。\\n\\nK8S 官方建议关闭 swap 分区，这里我们选择关闭，免得后续安装 K8S 时出现警告提示。\\n\\n先执行 `sudo swapoff -a` 关闭分区，然后去掉 `/etc/fstab` 中对 swap 的加载(**注意！** 是注释 `/dev/mapper/centos-swap swap` 这一行配置，而不是删除掉文件本身)。\\n\\n```\\n#\\n# /etc/fstab\\n# Created by anaconda on Sat Apr  3 15:13:29 2021\\n#\\n# Accessible filesystems, by reference, are maintained under '/dev/disk'\\n# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\\n#\\n/dev/mapper/centos-root /                       xfs     defaults        0 0\\nUUID=56bde1b4-7b8d-4b1d-ac9f-51975adefa6e /boot                   xfs     defaults        0 0\\n# 注释下面这一行\\n# /dev/mapper/centos-swap swap                    swap    defaults        0 0\\n```\\n\\n> 上面这一步操作也可以使用 `sudo sed -i '/swap/ s/^/#/' /etc/fstab && sudo swapoff -a` 代替。\\n\\n接着设置 ssh 服务的配置文件 `/etc/ssh/sshd_config` ，主要是\\\"设置监听端口、允许 root 登录和允许账号密码登录\\\"。\\n\\n```\\n# /etc/ssh/sshd_config 关键配置\\nPort 22 # 取消注释\\n#AddressFamily any\\nListenAddress 0.0.0.0 # 取消注释\\nListenAddress :: # 取消注释\\n# 省略\\nPermitRootLogin yes # 取消注释\\n# 省略\\nPasswordAuthentication yes # 取消注释\\n```\\n\\n启动服务并使用 systemctl 设置开机启动。\\n\\n```\\nsudo service sshd start\\nsudo systemctl enable sshd.service\\n```\\n\\n关闭防火墙服务和禁用 SELinux 。\\n\\n```\\nsudo systemctl disable firewalld\\nsudo systemctl stop firewalld\\nsudo setenforce 0\\n```\\n\\n启用 `bridge-nf-call-iptables` 。\\n\\n```\\nsudo echo 'net.bridge.bridge-nf-call-iptables = 1' >> /etc/sysctl.conf\\n```\\n\\n### Headless 模式\\n\\n在关闭虚拟机之前，执行 `ifconfig` 获取到虚拟机的 ip，例如 master 为192.168.31.207， node 为192.168.31.17 关闭虚拟机。\\n\\n接下来我们通过 Headless 模式启动虚拟机，并在终端使用 ssh 操作 OS 。\\n\\n> **注意** 下面这段 Shell 命令是在宿主机的终端上执行的。\\n\\n```\\n❯ VBoxManage list vms\\n\\\"x86\\\" {e1f31c26-84e8-496e-93ce-5cb843368ad4}\\n\\\"CentOS7-master\\\" {45d4e304-704d-4835-9816-58465a1ce4f7}\\n❯ VBoxHeadless -s CentOS7-master\\nOracle VM VirtualBox Headless Interface 6.1.18\\n(C) 2008-2021 Oracle Corporation\\nAll rights reserved.\\n```\\n\\n这样虚拟机就在后台启动了。\\n\\n在宿主机的新终端中执行 `ssh yuchanns@虚拟机ip` ，连接上虚拟机。\\n\\n下面没有特殊说明，全都是在宿主机终端的 ssh 通信中操作。\\n\\n### 安装 Docker\\n\\n这一部分直接参考阿里云的 [Docker CE 镜像源站](https://developer.aliyun.com/article/110806) 手册操作。\\n\\n```\\n# step 1: 安装必要的一些系统工具\\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\\n# Step 2: 添加软件源信息\\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\\n# Step 3: 更新并安装 Docker-CE\\nsudo yum makecache fast\\nsudo yum -y install docker-ce\\n# Step 4: 开启Docker服务\\nsudo service docker start\\n```\\n\\n安装完成之后，使用阿里云的 [容器镜像服务](https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors) 设置 Docker 使用国内镜像源并重启docker刷新配置以及设置开机启动。\\n\\n```\\nsudo mkdir -p /etc/docker\\nsudo tee /etc/docker/daemon.json <<-'EOF'\\n{\\n  \\\"registry-mirrors\\\": [\\\"https://你申请的镜像源.mirror.aliyuncs.com\\\"]\\n}\\nEOF\\nsudo systemctl daemon-reload\\nsudo systemctl restart docker\\nsudo systemctl enable docker\\n```\\n\\n### 安装 K8S 工具\\n\\n> 安装 Kubeadm 工具，并预先拉取 K8S 相关的镜像。\\n\\n首先配置 yum 国内源，创建 `/etc/yum.repos.d/kubernetes.repo` 写入如下内容。\\n\\n```\\n[kubernetes]\\nname=Kubernetes Repository\\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\\nenabled=1\\ngpgcheck=0\\n```\\n\\n开始安装 kubelet 、 kubeadm 和 kubectl 等 K8S 工具。\\n\\n```\\nsudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\\n```\\n\\n设置 kubelet 开机启动。\\n\\n```\\nsystemctl enable kubelet && systemctl start kubelet\\n```\\n\\n### 配置 Kubeadm 和拉取镜像\\n\\n首先执行 `sudo kubeadm config print init-defaults > init.default.yaml` 获取默认的初始化参数文件。\\n\\n然后参照该文件创建 `init-config.yaml` ，定制镜像仓库为阿里云仓库（默认使用的是 `k8s.gcr.io`）。\\n\\n```\\napiVersion: kubeadm.k8s.io/v1beta2\\nimageRepository: registry.aliyuncs.com/google_containers\\nkind: ClusterConfiguration\\nkubernetesVersion: v1.20.0\\n```\\n\\n使用配置文件拉取安装 K8S 需要的镜像。\\n\\n```\\nsudo kubeadm config images pull --config=init-config.yaml\\n[config/images] Pulled registry.aliyuncs.com/google_containers/kube-apiserver:v1.20.0\\n[config/images] Pulled registry.aliyuncs.com/google_containers/kube-controller-manager:v1.20.0\\n[config/images] Pulled registry.aliyuncs.com/google_containers/kube-scheduler:v1.20.0\\n[config/images] Pulled registry.aliyuncs.com/google_containers/kube-proxy:v1.20.0\\n[config/images] Pulled registry.aliyuncs.com/google_containers/pause:3.2\\n[config/images] Pulled registry.aliyuncs.com/google_containers/etcd:3.4.13-0\\n[config/images] Pulled registry.aliyuncs.com/google_containers/coredns:1.7.0\\n```\\n\\n到这里，关闭虚拟机，然后生成快照，以便后续如果有需要可以快速恢复备份，并复制一份命名为 node 。\\n\\n![](https://www.yuchanns.xyz/images/virtualbox-backup.png)\\n\\n然后更改两份虚拟机的 hostname，分别命名为 `yuchanns-master` 和 `yuchanns-node-1` 。\\n\\n```\\nhostnamectl set-hostname yuchanns-master\\n```\\n\\n### Master\\n\\n我们先启动 master 虚拟机，安装 K8S Master 。\\n\\n```\\nsudo kubeadm init --config=init-config.yaml\\n```\\n\\n片刻后得到如下输出。\\n\\n```\\nYour Kubernetes control-plane has initialized successfully!\\n\\nTo start using your cluster, you need to run the following as a regular user:\\n\\n  mkdir -p $HOME/.kube\\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\\n\\nAlternatively, if you are the root user, you can run:\\n\\n  export KUBECONFIG=/etc/kubernetes/admin.conf\\n\\nYou should now deploy a pod network to the cluster.\\nRun \\\"kubectl apply -f [podnetwork].yaml\\\" with one of the options listed at:\\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\\n\\nThen you can join any number of worker nodes by running the following on each as root:\\n\\nkubeadm join 192.168.31.207:6443 --token hx8f96.5yh392lco45qkd94 \\\\\\n    --discovery-token-ca-cert-hash sha256:cb21467e644298e460e0db036e0472bdce9d87bb5beba6e1453d9f3efa8ebe48\\n```\\n\\n上面的片段告诉我们作为普通用户应该执行的一些命令（如果不执行，将无法使用 kubelet 正确与集群通信），以及 node 集群如何加入 master 的方法。\\n\\n按照提示，执行命令。\\n\\n```\\nmkdir -p $HOME/.kube\\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\\n```\\n\\n### Node\\n\\n启动 `node` 虚拟机，安装 K8S Node 。\\n\\n这里我们根据安装 Master 时得到的加入提示，创建相应的配置文件 `join-config.yml`。\\n\\n```\\napiVersion: kubeadm.k8s.io/v1beta2\\nkind: JoinConfiguration\\ndiscovery:\\n  bootstrapToken:\\n    apiServerEndpoint: 192.168.31.207:6443\\n    token: hx8f96.5yh392lco45qkd94\\n    unsafeSkipCAVerification: true\\n  tlsBootstrapToken: hx8f96.5yh392lco45qkd94\\n```\\n\\n然后执行 `sudo kubeadm join --config=join-config.yml`。\\n\\n安装成功！\\n\\n### 安装网络插件\\n\\nmaster 需要安装网络插件， 这里使用 waves 。\\n\\n```\\nkubectl apply -f \\\"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\\\n')\\\"\\n```\\n\\n然后执行 `kubectl get nodes` 看到所有集群状态都为 Ready 。\\n\\n```\\nNAME              STATUS   ROLES                  AGE     VERSION\\nyuchanns-master   Ready    control-plane,master   11m     v1.20.5\\nyuchanns-node-1   Ready    <none>                 8m46s   v1.20.5\\n```\\n\\n检查所有 pod 状态是否正常。这里可以看到包括 node 集群的 pod 状态。\\n\\n```\\nkubectl get pods --all-namespaces\\nNAMESPACE     NAME                                            READY   STATUS    RESTARTS   AGE\\nkube-system   coredns-7f89b7bc75-2z2lm                  1/1     Running        0          11m\\nkube-system   coredns-7f89b7bc75-gz26q                  1/1     Running        0          11m\\nkube-system   etcd-yuchanns-master                      1/1     Running        0          11m\\nkube-system   kube-apiserver-yuchanns-master            1/1     Running        1          11m\\nkube-system   kube-controller-manager-yuchanns-master   1/1     Running        0          12m\\nkube-system   kube-proxy-p2r8v                          1/1     Running        0          9m4s\\nkube-system   kube-proxy-xjzkp                          1/1     Running        0          11m\\nkube-system   kube-scheduler-yuchanns-master            1/1     Running        0          11m\\nkube-system   weave-net-9slcj                           2/2     Running        0          9m4s\\nkube-system   weave-net-sskbj                           2/2     Running        0          10m\\n```\\n\\n如果存在异常，可以使用 `kubectl --namespace=kube-system describe pod <pod_name>` 的方式查看错误日志。\\n\\n若安装失败，也可以通过 `sudo kubeadm reset` 重置再重新安装。\\n\\n![](https://www.yuchanns.xyz/images/kubernets-all-nodes.png)\\n\\n\",\"timestamp\":1641640985,\"title\":\"K8S 入门-使用Kubeadm安装\"},\"digest\":\"8NUR1gWqQ5nAlDf151K3q_R53YEIMLNGqWzve0bTSsc\",\"authorship\":{\"contributor\":\"0x898cF8a63541B9eC02566BbE416f24A5108573e2\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ZjOjtZNcYTlHVwhOBaVHpoHcACao001cb8U7Aou0Jxk\\\",\\\"y\\\":\\\"lK2VqgFN2bOuFdh6M5HY4VTuq6wrCas3bVnFmXmQITM\\\"}\",\"signature\":\"u2xGivygW2qvK_eSWzmP5ilZBVrZPXnWstBix6YRI0TgzeW1zznmWCCUrBxq1qiAil-IsfzyIkPtHdeUylzyKw\",\"signingKeySignature\":\"0xaf4718149df2323b8c6ed54f0a57fe8f767656642002e6442ccb825f697554007ec23edf76fc40229bf4994b29816f8d016646a6cfc8e42fd0916bba61b0ed3e1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ZjOjtZNcYTlHVwhOBaVHpoHcACao001cb8U7Aou0Jxk\\\",\\\"y\\\":\\\"lK2VqgFN2bOuFdh6M5HY4VTuq6wrCas3bVnFmXmQITM\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"8NUR1gWqQ5nAlDf151K3q_R53YEIMLNGqWzve0bTSsc\"}"