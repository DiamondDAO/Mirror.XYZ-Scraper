"{\"content\":{\"body\":\"‚ÄúLet‚Äôs build a blockchain game!‚Äù I said.\\n\\nLittle did I know building blockchain applications comes with unique design and technical constraints. I jumped in head first and started building[ Ethrone](https://ethronegame.com), my first web3 project. I learned by doing and hitting problems face on, one after the other. I wanted to highlight a couple of them in this post so that you can avoid them in your own web3 projects!\\n\\n## What time is it right now? ü§î\\n\\nThe main game mechanic of Ethrone relies on timestamps. The winner is the player that stays **the longest** on the Ethrone for a given round which **lasts 24 hours**.\\n\\nIn other words, the smart contract powering the game engine **needs to always know what time it is**. I had taken for granted this incredibly handy ability for machines to always have access to the current time. So many software programs and algorithms depend on this critical piece of information. So imagine my surprise when I found out that there is no `System.currentTimeMillis()` equivalent in Solidity üò≠\\n\\n‚ÄúBut of course!‚Äù I thought, ‚Äúmy smart contract lives on a peer-to-peer network of nodes. It gets replicated and executed on individual machines running the network. So each machine - executing contract calls at their own pace - would return a different timestamp!‚Äù\\n\\nLuckily, there is one way to get a time that all nodes agree on - the timestamp of the latest mined block - `block.timestamp`. Ok, let‚Äôs work with that.\\n\\nTweaking the logic a bit to work with this constraint, I was able to at least get a reliable time difference between two transactions, which I used to determine how long each player has captured the Ethrone for, and how long since the round has started.\\n\\n**Lesson learned:** While you can‚Äôt get a traditionally accurate time from a smart contract, you can determine the time elapsed between two blocks. Your app or game will have to work with that!\\n\\n## Can you call me later? üìû\\n\\nSo I know how long since the round started, and I need the game to automatically award the winner‚Äôs prize and start the new round every 24h. Should be easy right? Wrong.\\n\\nHere I was, coming from my traditional, single machine programming paradigm, thinking: ‚ÄúSurely there‚Äôs a way to schedule a function call to be executed at a later time from my smart contract‚Ä¶ right?‚Äù\\n\\nWell no, there isn‚Äôt. Not directly at least. **Once again, I had taken threading, concurrency and schedulers for granted.** There is no such thing in the EVM.\\n\\n‚ÄúBut of course!‚Äù, I thought, ‚Äúsince all nodes need to execute every contract call to agree on the final state, imagine the mess it would be with multi threaded smart contracts!‚Äù\\n\\nLuckily, I wasn‚Äôt the only one with this problem, and the Ethereum ecosystem had my back. This is when I stumbled upon [Chainlink Keepers](https://docs.chain.link/docs/chainlink-keepers/introduction/) - a smart contract automation service run by professional DevOps teams that monitors smart contracts and triggers function calls at the desired time.\\n\\nI LOVE Chainlink Keepers. It‚Äôs simple to implement, has a nice dashboard, and a straightforward promise: ‚ÄúWe will call your smart contract function for you at the desired time, every time, without fail.‚Äù - Music to my ears.\\n\\nAfter implementing a couple of extra functions in my smart contract, Chainlink Keepers now does the heavy lifting for me, **allowing Ethrone to run completely autonomously** by automatically awarding prizes to winners every day.\\n\\n## Chainlink Keepers + Polygon = Happy dev ü•∞\\n\\nThere was one missing piece to complete the puzzle though. I wanted Ethrone to run on Polygon rather than mainnet, to avoid gas fees that cost more than the price to capture the Ethrone. And until recently, Chainlink Keepers was only operating on mainnet.\\n\\nNot anymore! **[Chainlink Keepers officially launched on Polygon](https://blog.polygon.technology/chainlink-keepers-now-live-on-polygon-mainnet-to-automate-smart-contract-devops/)**, and I have been impressed with how reliable and affordable it is.\\n\\n![My Polygon Chainlink Keepers Dashboard](https://images.mirror-media.xyz/publication-images/G-9Xn_5BB6OJgE4o5F4QL.png?height=1024&width=2660)\\n\\nEthrone on Polygon awards prizes and starts a new round pretty much exactly on time every day, with a drift of less than 10 secs per day. That‚Äôs impressive for a decentralized solution. And it‚Äôs doing this at a ridiculously low cost of 0.001 to 0.005 LINK per day depending on network conditions.\\n\\nEthrone only costs me \\\\~1 LINK / year to operate on Polygon, and as a solo dev working on it on the side, that makes me very happy ü•∞ Thanks Chainlink!\\n\\n## Wanna play? üëâüëà\\n\\n[https://ethronegame.com/](https://ethronegame.com/)\\n\\n1. Capture the [Ethrone](https://ethronegame.com)\\n2. Hold it for as long as you can\\n3. ???\\n4. Earn some MATIC and a NFT Trophy!\\n\\nFollow updates on the blue bird app [@ethronegame](https://twitter.com/ethronegame)\\n\\nJoin the community on the purple mask app:\\n\\n[https://discord.gg/Y79wQcHfJf](https://discord.gg/Y79wQcHfJf)\\n\\nGL HF!\\n\\n***About Chainlink*** \\n Chainlink is the industry standard for building, accessing, and selling oracle services needed to power hybrid smart contracts on any blockchain. Chainlink oracle networks provide smart contracts with a way to reliably connect to any external API and leverage secure off-chain computations for enabling feature-rich applications. Chainlink currently secures tens of billions of dollars across DeFi, insurance, gaming, and other major industries, and offers global enterprises and leading data providers a universal gateway to all blockchains.\\n\\n \\n Learn more about Chainlink by visiting [chain.link](https://chain.link/) or read the documentation at [docs.chain.link](http://docs.chain.link/). To discuss an integration, [reach out to an expert](https://chainlinkcommunity.typeform.com/to/OYQO67EF?page=announcement).\",\"timestamp\":1639981364,\"title\":\"Building Ethrone using Chainlink Keepers on Polygon\"},\"digest\":\"t8k77Wc4PtkzepHoFgAK6Iq5H_TvcNGuvv9O32CAnI4\",\"authorship\":{\"contributor\":\"0x2247d5d238d0f9d37184d8332aE0289d1aD9991b\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"36nEEpHUaKFk4lwWrVIRXifUiK2uuoxXVAC3q7yEhEw\\\",\\\"y\\\":\\\"ZkPoEVO9ZpIlWkCpyhzJU_lYh-70-f0L87mhL0JJJJo\\\"}\",\"signature\":\"C--nCKvmc_eDu1c7IwJDTanHLCNKAdn7yI7KyVI4owat6-cLz12SG0ko004pNEmaQjdB7R8CWHcbEDCcyR6saA\",\"signingKeySignature\":\"0x9a0a44314ec0bf13a0490391f8869065d491bd6055d97aa8264122acdb63dc751742b4f24300c945be71c4a46bde22f780a9fd574c00e69faf70a1dbdfda065d1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"36nEEpHUaKFk4lwWrVIRXifUiK2uuoxXVAC3q7yEhEw\\\",\\\"y\\\":\\\"ZkPoEVO9ZpIlWkCpyhzJU_lYh-70-f0L87mhL0JJJJo\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"t8k77Wc4PtkzepHoFgAK6Iq5H_TvcNGuvv9O32CAnI4\"}"