"{\"content\":{\"body\":\"If you've been following cryptos and blockchains, you've heard a lot about interoperability.\\n\\nThere are various chains such as ethereum, solana, avalanche, polkadot, near etc. I think it would be great if we could cooperate with each other.\\n\\nThere is also a lot of bridge development going on, and I've been using hop a lot lately. Will we be able to move between chains unconsciously in the future?\\n\\nHowever, not much has been said about dapps interoperability. Maybe I'm not doing enough research. In this article, I will write about polywrap, which solves this problem.\\n\\n## What's the problem?\\n\\nTo take a chain as an example, a coin called A cannot be used in B. In the same way, the functionality of a dapp called A cannot be used in a dapp called B.\\n\\nNote: You can actually use A coin on B chain by using a bridge. Similarly, you can use A's functionality with B's dapp. There is a big hurdle, though.\\n\\n> Web3 developers may want to integrate functions into their own dapp that allows users to perform a token swap, for example. The main way that developers do this today is by installing a JavaScript SDK like the Uniswap SDK as a dependency into their dapp. While JavaScript SDKs is one way for dapps to interact with protocols, they come with major disadvantages. [docs.polywrap.io](http://docs.polywrap.io/)\\n\\nIf you want to run an SDK written in JavaScript, you need an app written in JavaScript. In other words, since uniswap is JS, you can't run it with apps written in other languages. WTF :3\\n\\n![https://twitter.com/polywrap_io/status/1425279820297117696](https://images.mirror-media.xyz/publication-images/YuzvnSK6w8FGg3hJ2yjoe.png?height=298&width=456)\\n\\nAlso, uniswapâ€™s main sdk is in JS, there are other ways to interact with uniswap, like an ethereum native sdk like web3.js or even pythonâ€™s js package. However, this will only work if the language of the sdk is unified too.\\n\\n## How do you solve this?\\n\\nConverses with uniswap via a **polywrap WASM (web assembly) wrapper**.\\n\\n> * Query and mutation wasm modules containing the protocol's business logic functions (e.g. Uniswap's swap functions)\\n> * GraphQL schema to provide types and parameters for the query and mutation functions\\n> * Manifest files that orchestrate the wrapper [docs.polywrap.io](http://docs.polywrap.io/)\\n\\nSo with polywrap what weâ€™re enabling is a **multi-language sdk** that runs on web assembly (wasm). And can be executed on any polywrap client (which will soon be released in other langs like rust, swift, go, and more).\\n\\n![https://twitter.com/polywrap_io/status/1425279488334651392](https://images.mirror-media.xyz/publication-images/gDtPo31CQtvKoioPwEjxw.png?height=280&width=420)\\n\\nA cool part here also is that the uniswap polywrapper can be and will be soon adapted to work with any uniswap fork (sushiswap, quickswap, pancakeswap, trader joe, honeyswap, baoswap).\\n\\n**This interoperability is already enabled today :)** Thanks to the evm chain id functionality that we released last month.\\n\\nIf anyone wants to build that integration it should actually be very straight forward today!! We are super excited for that one.\\n\\nAt the end, I would say that the dapps will be able to interact across programming langs and chains!! ðŸ˜­ðŸ”¥ðŸš€\\n\\njoin now! [https://discord.polywrap.io](https://t.co/0DySM2AUMG)\\n\\n![https://twitter.com/cryptodmeme/status/1395848578648600577](https://images.mirror-media.xyz/publication-images/9w0w50HptaUiEZYg3M6vI.png?height=218&width=354)\\n\\nThis article was born at the ongoing [mini-hacks](https://github.com/polywrap/mini-hacks). Write code, design logos, and write articles, You can contribute with whatever you like. If you're interested or have any problems, talk to [media](https://twitter.com/DaoAdvocate). We'll have a super cool conversation. Thanks.\\n\\nwriter [twitter.com/cryptodmeme](http://twitter.com/cryptodmeme)\",\"timestamp\":1642732348,\"title\":\"Dapps Interoperability\"},\"digest\":\"ZmeJSpuEBqs3eGMSOGjx0bH7x3XQH1SfEsbISqg2yXM\",\"authorship\":{\"contributor\":\"0x3060fd5487a9f4184dA56bA6e09F4003c204660e\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"YYEgdHWldgXadg7WXklbyCf_hj6m6BctGSuntpvEB0k\\\",\\\"y\\\":\\\"xNMkLw0CO5utCu79JTaXxSuCPWPWBXis2c1xrpDCIXY\\\"}\",\"signature\":\"VBpjl6n6YiQRqCRsniB7KufYXJqb8_qoJATLTihJIZpJbBweXQE9WrCN2Dpbw9xpkHrt2MXdJtIP4rLWiVfQ5A\",\"signingKeySignature\":\"0x6fd1a0f32aaa6a93a858ec65f8596cc3fad141a63187d60dd4e0926923959b7c0931f8a55af271510c8940ef589186abe1c464247b4ce5dc27fc61c7ef5f2a6b1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"YYEgdHWldgXadg7WXklbyCf_hj6m6BctGSuntpvEB0k\\\",\\\"y\\\":\\\"xNMkLw0CO5utCu79JTaXxSuCPWPWBXis2c1xrpDCIXY\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"AOv01gNiiBil9-QjkcVXD170anGAZetQL7-1Exup12E\"}"