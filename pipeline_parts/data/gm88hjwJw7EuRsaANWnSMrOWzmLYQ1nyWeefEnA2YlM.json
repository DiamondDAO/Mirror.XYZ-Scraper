"{\"content\":{\"body\":\"NFT 背后的技术是 ERC721 或 ERC1155， 今天我们就来学习一下 ERC721 的开发，说不定过两周 un.Block 就有自己的 NFT 了\\n\\n### **NFT 的组成**\\n\\n首先，在 ERC721 的合约中，每个 NFT 都有以下内容\\n\\n*   `name`: 代币名字\\n*   `symbol`: 代币符号\\n*   `tokenID`: 代币编号\\n*   **`URI`： NFT元数据**\\n\\n其中，元数据是 NFT 最重要的部分，它直接决定了 NFT 里面存放的内容。对于一些图片类的 NFT ，元数据通常都会存放图片的链接字符串，这个链接可能是中心化网站的链接（就像我们日常用的图床链接一样），或者是 ipfs 链接。\\n\\n实际上，元数据可以存放的不只有字符串，以下是在 EIP-721 中给出的元数据示例：\\n\\n关于 NFT 元数据的存储问题，在之前的周报 *[#12](https://link.zhihu.com/?target=https%3A//unblock256.substack.com/p/unblock-2021-12nft-)[#13](https://link.zhihu.com/?target=https%3A//unblock256.substack.com/p/unblock-2021-13uniswap-v3filecoin)* 已经解释过了，大家有兴趣可以自行阅读。\\n\\n**漫游 ERC721**\\n\\nEIP-721 给了关于 ERC721 的 3 个接口，分别是：\\n\\n*   `IERC721`: 核心 ERC721\\n*   `IERC721Metadata`: ERC721 元数据\\n*   `IERC721Enumerable`: 关于 ERC721 的供应量、序号之类的数字接口\\n\\n其中，**IERC721** 是唯一必须实现的接口，但这个接口过于简单，几乎没有项目会只实现一个 IERC721 就发布。\\n\\n因此，我们将和大家分享多一些关于 ERC721 实用接口。\\n\\n除了上述的 3 个接口之外，还有以下功能可以让 ERC721 锦上添花：\\n\\n*   `ERC721Pausable`: 暂停 ERC721 代币交易\\n*   `ERC721Burnable`: 摧毁代币！\\n*   `AccessControl`: 合约权限管理\\n\\nOpenZepplin 给出了一个功能较为完善的 ERC721 合约范例 —— ***[ERC721PresetMinterPauserAutoId](https://link.zhihu.com/?target=https%3A//docs.openzeppelin.com/contracts/3.x/api/presets%23ERC721PresetMinterPauserAutoId)*** 这个范例能在 ERC721 的基础上实现以下功能：\\n\\n*   允许用户摧毁掉自己的代币\\n*   一个铸造者 (minter) 角色来负责铸造代币\\n*   一个交易管理员角色 (pauser)，有权暂停代币转账\\n*   自动生成代币编号(tokenID) 和 元数据 (URI)\\n\\n**ERC721: 元数据与铸币**\\n\\nERC721 在某些功能，如查询余额、授权、转账，与 ERC20 如出一辙（我们在 #9 跟大家介绍过 ERC20），值得深入了解的就是 ERC721 的元数据与铸币过程\\n\\n1⃣️元数据以 `mapping` 的形式存储\\n\\n![](https://pic2.zhimg.com/v2-92cf857da5a90547e469110b0d006d65\\\\_b.jpg)\\n\\n1⃣️ 通过 `_setTokenURI` 函数，我们可以设置 URI，这里需要传入 tokenID 和 URI元数据\\n\\n![](https://pic2.zhimg.com/v2-898d8c97286803449cee7bd0d8d617dd_b.jpg)\\n\\n3⃣️ ERC721 的 `_mint` 函数和 ERC20 很相似，本质就是将代币分发给用户，由于 tokenID 代表了 NFT 代币，因此调用 mint 函数的时候只需要指定用户和 tokenID 即可\\n\\n![](https://pic2.zhimg.com/v2-f83f3a771aa971c9c0d2a23e3a0bb889\\\\_b.jpg)\\n\\n值得一提的是，OpenZepplin 并不推荐我们直接使用 `_mint`，而是推荐使用 `_safeMint` 来铸造代币\\n\\n`_safeMint` 会在铸造前进行检查，要求如下：\\n\\n*   `tokenID` 需要不存在，可以理解为这个 tokenID 对应的 NFT 还没有被铸造\\n*   收款地址需要有接受 ERC721 代币的能力，这个检查主要是针对为了合约接收代币\\n\\n**相关阅读：**\\n\\n*   *[How to create and deploy an ERC-721 (NFT)](https://link.zhihu.com/?target=https%3A//www.quicknode.com/guides/solidity/how-to-create-and-deploy-an-erc-721-nft)*\\n*   *[ERC-721 NON-FUNGIBLE TOKEN STANDARD](https://link.zhihu.com/?target=https%3A//ethereum.org/en/developers/docs/standards/tokens/erc-721/)*\\n\",\"timestamp\":1633782324,\"title\":\"ERC721\"},\"digest\":\"wFBUjLgE7KFuNOVHKnmgEHD18S6bp3n7Bq6Tpcwn0RU\",\"authorship\":{\"contributor\":\"0x7B076d7BcdE88Ec322B2D01AA1ADc1997b7724f6\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"-uhmdAZYxFgq_x4xq-zXdui7hRToWKgI3gCLaeRwzfE\\\",\\\"y\\\":\\\"e_jae50XeRHkDjBd1dCU7xTq7o4HjO4Idn3X9qLgXmA\\\"}\",\"signature\":\"5InVU7W2r1bapU3uABKr9DUOqS38-kZrKuNRcMI22WxNW4DTmZEFmW7kYvJuYoIFPXtKeOtJuaVTLYAwKBCFZw\",\"signingKeySignature\":\"0x0475273f3894cbe534b5ebf3dc9005f7b109c905b95b05fd0afb3d0dd6c056984938a186d9c56832d588e27230d06074bb752d52c6fbbffe3ddc0a71e38362d11c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"-uhmdAZYxFgq_x4xq-zXdui7hRToWKgI3gCLaeRwzfE\\\",\\\"y\\\":\\\"e_jae50XeRHkDjBd1dCU7xTq7o4HjO4Idn3X9qLgXmA\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"wFBUjLgE7KFuNOVHKnmgEHD18S6bp3n7Bq6Tpcwn0RU\"}"