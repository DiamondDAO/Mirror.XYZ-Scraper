"{\"content\":{\"body\":\"If you have spent any time researching the world of Web 3 then you have no doubt come across the term zkSNARK. The term can be daunting for the casual researcher because search engine queries often present the complex math which makes zkSNARKs possible.\\n\\nHaving a basic grasp of the cryptographic technology is crucial to understanding rollups. Rollups have played a critical role in layer 2 blockchains which are helping solve the scalability trilemma \\\\[1\\\\].\\n\\nBy the end of this article, you should gain an understanding of:\\n\\n* What are zkSNARKs and how do they work?\\n* How can we use zkSNARKs in the real world to solve problems of privacy?\\n\\n## What is a zkSNARK?\\n\\n> A zkSNARK is a cryptographic proof that allows one party to prove it posses certain information without revealing that information \\\\[2\\\\].\\n\\nThe term zkSNARK is an acronym that stands for Zero-Knowledge Succinct Non-Interactive Argument of Knowledge.\\n\\nPut simply, a zero-knowledge proof is a situation in which each of the two parties in a transaction can verify to each other that they have a particular set of information, while at the same time not revealing what that information is.\\n\\nThe important terms to understand from the acronym are:\\n\\n* **Succinct** zero-knowledge proofs can be verified within a few milliseconds, with a proof length which is only a few hundred bytes even if the statement is about a large program \\\\[3\\\\].\\n* **Non-Interactive** zero-knowledge proofs consist of a single message sent from prover to verifier \\\\[3\\\\].\\n\\n# Structure and use cases of zkSNARKs\\n\\nIn an application of a zkSNARK, there is a prover and a verifier \\\\[4\\\\]. The prover wants to prove the truth of a statement without leaking any knowledge of the solution itself to the verifier.\\n\\nThe verifier wants to be reassured that the prover does have the solution or that the statement is true.\\n\\nWe can imagine use cases for zkSNARKs almost immediately- imagine frequent scenarios where one must reveal private information to verify something about one’s identity.\\n\\n# zkSNARK application in age verification\\n\\nLet’s take a look at an example, how can Alice (our prover) prove her age to Bob (our verifier) without revealing her age \\\\[5\\\\]?\\n\\nAlice is going to a bar and has to prove she is over the age of 18 to Bob before she can be served in the bar. She is reluctant to show Bob her identity card and instead Alice goes to a trusted source Trent.\\n\\nTrent sends her a random seed and a proving statement to Alice. Alice now encrypts her age and gives both her encrypted age and the proving statement to Bob. Bob will now be able to verify if Alice is over a certain age without knowing what Alice’s age really is.\\n\\n# How are zkSNARKs even possible?\\n\\nzkSNARKs are quite complex and difficult to understand so we will not go into too much detail in this article. They have been described as the “most powerful cryptographic technology” by Vitalik Buterin \\\\[6\\\\], the creator of Ethereum.\\n\\nThey leverage fascinating properties of polynomials, elliptic curve pairings, hashes and Merkle trees to enable a verifier to check millions of steps in a computation, without doing a piece of work to check each step individually.\\n\\nA word of warning you will look to have a medium understanding of mathematics to read more into how zkSNARKs work. I recommend getting started with this article: [An approximate introduction to how zkSNARKs are possible](https://vitalik.ca/general/2021/01/26/snarks.html)\\n\\n## Summary\\n\\nTo summarise:\\n\\n* zkSNARKs are likely the most powerful cryptographic technology to come out in the last decade.\\n* They have pioneered the way for making rollups possible in layer 2 Blockchains which are helping to solve the scalability trilemma plaguing layer 1.\\n* They allow for a prover to prove the truth of a statement without revealing any information about its solution to a verifier.\\n* The verifier can be subsequently reassured the prover does have the solution or the statement is true.\\n* Proofs are small in size regardless of statement size and fast to verify.\\n\\n  ## References\\n\\n  \\\\[1\\\\] *Why sharding is great: demystifying the technical properties*. (n.d.). Vitalik Buterin's website. <https://vitalik.ca/general/2021/04/07/sharding.html>\\n\\n  \\\\[2\\\\] Frankenfield, J. (2018, May 29). *What is zk-SNARK?* Investopedia. <https://www.investopedia.com/terms/z/zksnark.asp>\\n\\n  \\\\[3\\\\] *What are zk-SNARKs? | Zcash*. (n.d.). Zcash. <https://z.cash/technology/zksnarks/>\\n\\n  \\\\[4\\\\]  (n.d.). Home - Jerome Fisher Program in Management & Technology. <https://fisher.wharton.upenn.edu/wp-content/uploads/2020/09/Thesis_Terrence-Jo.pdf>\\n\\n  \\\\[5\\\\] *Zero-knowledge Proof: Proving age with hash chains*. (n.d.). Security and So Many Things. <https://asecuritysite.com/encryption/age>\\n\\n  \\\\[6\\\\] *An approximate introduction to how zk-SNARKs are possible*. (n.d.). Vitalik Buterin's website. <https://vitalik.ca/general/2021/01/26/snarks.html>\",\"timestamp\":1641229717,\"title\":\"A primer on zkSNARKs\"},\"digest\":\"FpY_nKetZzOxj0RAyE0rZXqjwoZ6EQsM_nlkNMgyeHo\",\"authorship\":{\"contributor\":\"0x7A452e69407478DE858F6eF741a4648641285490\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ahUuinOmk2CIXBO0Wf41EWpcy05JbhTK_T2lMoU2IhA\\\",\\\"y\\\":\\\"v9lX8bf4wl-lU0gedCZMkYEjxhy1r2WH_hNfXyc5RIA\\\"}\",\"signature\":\"JumFGqNMG0Xf3TJwQchse4FVEkYtrz3Ru8kYo8LqY3y4jB3eiQJuNyMZZlW2D_x_f94v9liGp5rbPYTBjkmGUA\",\"signingKeySignature\":\"0x3997d5e553ed3efb95d0ce4f3b25050ee246053b350bfb3ea531c0f7c3ce8c4d35ec98c9d8cc1bf8c19c51dc57623f69e03636849c94e585d19bdeb7dc4249571b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ahUuinOmk2CIXBO0Wf41EWpcy05JbhTK_T2lMoU2IhA\\\",\\\"y\\\":\\\"v9lX8bf4wl-lU0gedCZMkYEjxhy1r2WH_hNfXyc5RIA\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"Cl8NOyPBIC6_TCkaWtasPdHzSY6MlJ7emEatjn-qD0o\"}"