"{\"content\":{\"body\":\"### TOWER BFT & TURBINE. Solana’s second and third of eight innovations pillars.\\n\\n# Second Innovation: TOWER BFT\\n\\nBefore speaking about Tower BFT (aka. Tower Byzantine Fault Tolerance), let’s do a quick analogy to explain the problem it solves.\\n\\nThe Byzantine Generals Problem.\\n\\nThe Byzantine Generals Problem comes into play when more than two generals have to come to a common agreement on whether to attack or retreat, but can communicate only by sending messengers who might never arrive.\\n\\nSome generals may also be traitors and can try to spread different information to other generals, leading to a catastrophic failure.\\n\\nTo avoid a failure or inability to communicate properly impacts the function of the entire blockchain, a fault tolerance system needs to be implemented.\\n\\nThe Tower BFT (Tower Byzantine Fault Tolerance) ensures that the blockchain will remain functional even if 1/3 of the nodes get faulty.\\n\\nEven if 1/3 of the generals are compromised, the war strategy gets executed with success thus bringing victory to the army.\\n\\nTo avoid the communication bottleneck, once a “general” (node/validator) votes for a plan “A”, he commits he won’t vote to any other plan which isn’t derived from plan “A” for at least two rounds.\\n\\nEvery time the generals vote on a derived plan from plan “A”, plan “A” weights doubles, meaning it’s hard to rollback.\\n\\nBut how do we guarantee that all generals are alive and properly sending messengers? How do we make sure they are even retransmitting the right message?\\n\\nEach vote sent by the generals carries a small sequence of verifiable information that gets updated (increased) on each vote, meaning if a messenger delivers a vote with this sequence missing any info, the vote is discarded.\\n\\n# Third Innovation: TURBINE\\n\\nUsing The Simpsons analogy, imagine how communication would be delayed if instead of having just 5 packers on the Springfield Post Office (to add a box (block) onto the chain), we have 100 packers.\\n\\nThey need to communicate among themselves to send a copy of the box (block) to each packer. But some may have a more limited channel of communication between them. If they live far from each other, the time they will take to communicate and send this copy among them, can increase dramatically.\\n\\nThis limitation on their communication channel it’s called bandwidth.\\n\\nWhen a packer closes a box with the letters and adds onto the chain, he needs to send a copy of that box (block) to all the other packers. They all need to have the same structure (chain), because next time one of them could ending up being the chosen one (leader) to add a box (forge the block and add to the blockchain), and since no box can enter the chain without linking with the previous one, all validators need to be on the same page.\\n\\nThis is called block propagation.\\n\\nNow, imagine the leader packer needing to send his box (block) to all the other packers (validators). Assuming each box weighs 128 kilos, the leader packer would invest a lot of resources (time and effort) to send 128 kilos times all the packers. It’s a ton of work!\\n\\nInstead, the leader packer found a way to split a big box into smaller boxes of 640gr, then sending the smaller ones to his closest packers (validators).\\n\\nBecause each packer would have some small boxes but not all, they also need to make a copy of the small boxes they just received and then resend/retransmit to their closest packers too. This way, all the packers will keep receiving small boxes, pretty much like a puzzle, until they receive all necessary boxes to recreate the big one.\\n\\nThis is called Turbine and is the way to split a 128MB block into small packages of 64kb and send them to the leader node’s neighbourhood (closest validators). These nodes also need to retransmit these small packages onto their neighbourhood until all validators receive all packages necessary to recreate the block.\\n\\nHowever, there’s a catch on this approach. What if one malicious neighbour (Frank Grimes from Simpsons analogy. Do you remember him?) doesn’t retransmit some small packages to his neighbour? What if he changes the content?\\n\\nIn this case, each small package has a cryptographic “build a block user manual” attached to it, allowing the recreation of missing blocks.\\n\\nThis is called erasure codes.\\n\\nThis high-level analogy explains block propagation using Turbine technique and erasure codes in Solana’s blockchain.\\n\\n# About the Author\\n\\nHey, my name is Jonathan Ferreira, and I’m a software developer in constant evolution, seeking knowledge acquiring and sharing. Learning and implementing blockchain technology, and specially interested about Solana ecosystem.\\n\\nMy GitHub: [https://github.com/Jonathansoufer](https://https//github.com/Jonathansoufer)\\n\\nIn case you found any misinformation in the article or had any suggestions to improve the article please comment it or you can find me on Twitter: [@JSoufer](https://twitter.com/JSoufer).\\n\\n# Reference\\n\\nIf you want to learn more about blockchain, you can visit [https://learn.figment.io](https://learn.figment.io/tutorials/explaining-solana-with-the-simpsons).\\n\\nYou can read the full article on Figment (<https://learn.figment.io/tutorials/explaining-solana-with-the-simpsons>)\",\"timestamp\":1639418686,\"title\":\"3-4/8: Explaining Blockchain & Solana’s Innovation with The Simpsons\"},\"digest\":\"9wCFQOyumWaNzC3WMrxjQp5fouGcF_fzVd9twLuSbbU\",\"authorship\":{\"contributor\":\"0x35143137f0E02E4FB6a9173Fff012B46078B9a1e\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"VM3qU9k0A5Nkznci2pHm_sjMOyueLyhOP4Uv-Uqin78\\\",\\\"y\\\":\\\"yPmUu6RdHya8XO9OOY-I7NOwcRw4YI9KqOfujrAzLIk\\\"}\",\"signature\":\"q5sJsDDCh64HZ0iTP_bqH_Iw9kZoWndcaTChMvlwkbLQw_jY1X2OelA2-GsFj4SBHOuxN8p7T1hFze5g-sxFcQ\",\"signingKeySignature\":\"0x585f6a04abe0b3d6f3190ee4390819bc2bca6e409e53c7e75b2b8559e0af1dea6d4a90ddacf37fb73475a6e663bc2a9eb0684af1890c9b72dcfbc90e660efbb11c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"VM3qU9k0A5Nkznci2pHm_sjMOyueLyhOP4Uv-Uqin78\\\",\\\"y\\\":\\\"yPmUu6RdHya8XO9OOY-I7NOwcRw4YI9KqOfujrAzLIk\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"9wCFQOyumWaNzC3WMrxjQp5fouGcF_fzVd9twLuSbbU\"}"