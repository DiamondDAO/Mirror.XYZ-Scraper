"{\"content\":{\"body\":\"经过这些年的发展，Go语言已经成为一门被广泛使用在各个领域的编程语言。从k8s、docker等基础组件，到业务领域的微服务，都可以用Go构建。在构建这些Go项目时，采用哪种架构模式和代码布局，是一个仁者见仁智者见智的事情。有Java Spring经验的可能会采用MVC模式，有Python Flask经验的可能会采用MTV模式。加上Go语言领域并没有出现主流的企业级开发框架，很多项目甚至没有明确的架构模式。\\n\\n# Clean Architecture\\n\\nClean Architecture是Uncle Bob提出的适用于复杂业务系统的架构模式，其核心思想是将业务复杂度与技术复杂度解藕，相比于MVC、MTV等模式，Clean Architecture除了进行分层，还通过约定依赖原则，明确了与外部依赖的交互方式，以及外部依赖与业务逻辑的边界。感兴趣的朋友可以直接阅读作者原文<https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html>。\\n\\n![](https://images.mirror-media.xyz/publication-images/Mu4gMv8ryTqauZNgVq0TI.png?height=567&width=772)\\n\\n由于Clean Architecture具有脱离语言和框架的灵活性，作者在提出时也没有规定实现细节，给Clean Architecture的落地带来了困难，接下来以一个例子来说明如何在Go项目中应用Clean Architecture的思想。\\n\\n# 布局\\n\\n作为一个Go项目，不管用哪种架构模式，建议都建立app和scripts这两个路径。app存放启动Go项目的入口文件，通常是main.go。而scripts可以放一些构建和部署时候用到的脚本。\\n\\n```python\\nclean_architecture_demo\\n├── README.md\\n├── app\\n│   └── main.go\\n├── scripts\\n│   ├── build.sh\\n│   └── run.sh\\n├── go.mod\\n├── go.sum\\n└── usecases\\n```\\n\\n接下来是代码部分，分为entities、usecases、adapters三个部分。\\n\\n* entities：存储领域实体。用一个博客系统举例，领域实体可能有用户（user）和文章（article）\\n* usecases：存储业务逻辑。用博客系统举例，可能会有用户相关的业务逻辑（signup_user、signin_user、add_user、delete_user)和文章相关的业务逻辑（add_article、show_article、delete_article）\\n* adapters：存储适配器逻辑。适配器是连接业务逻辑与外部依赖的层，博客以Web形式提供服务，就需要一个http_adapter来封装Web服务；同时保存文章到数据库，需要封装一个db_adapter来连接。\\n\\n下面是项目的布局结构。\\n\\n```python\\nclean_architecture_demo\\n├── README.md\\n├── adapters\\n│   ├── api\\n│   ├── db\\n│   └── log\\n├── app\\n│   └── main.go\\n├── scripts\\n│   ├── build.sh\\n│   └── run.sh\\n├── entities\\n│   ├── article.go\\n│   └── user.go\\n├── go.mod\\n├── go.sum\\n└── usecases\\n```\\n\\n# 数据流向\\n\\n用一个查询文章的请求来描述一下调用链路。\\n\\n* 用户通过HTTP服务的调用WebAdapter的ShowArticleHandler方法\\n* 由于是文章相关的逻辑，ShowArticleHandler调用ArticleUsecase的ShowArticle方法\\n* 需要从DB中查询文章，ArticleUsecase会调用DBAdapter的GetArticle方法\\n* DBAdapter的GetArticle从MySQL中查询出文章内容返回给ArticleUsecase\\n* ArticleUsecase返回给WebAdapter\\n* WebAdapter通过HTTP服务返回给用户\\n\\n![](https://images.mirror-media.xyz/publication-images/lVWq-u_LcH39rijbIt1EV.png?height=1101&width=1326)\\n\\n# 代码示例\\n\\n为了更清晰的说分层和架构，我在Github上发布了一个示例项目，感兴趣的朋友可以直接去看源码：<https://github.com/simpleapples/go-clean-architecture>\\n\\n# 结论\\n\\n由于Clean Architecture没有规定实现细节，所以上述的分层和布局方式只是一种参考，还有众多的实践方式。例如Adapter层可以根据外部依赖的类型细分成平行的Presenter+Gateway层，在复杂项目中，更细致的分层可以把代码拆的更细致，大家可以根据自己的项目规模来调整分层和布局，这里就不做赘述了。\",\"timestamp\":1642419167,\"title\":\"基于Clean Architecture的Go项目架构实践\"},\"digest\":\"RtfcLGwp67ZYFpf86pp-ni62Aw-7xNoPGtIy9k9IV1E\",\"authorship\":{\"contributor\":\"0x7612113d355324dcC1C5b393C9e81EE8E15CE946\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"RgJdqW9IALDBGjmfKud4fsSCYKP__MON2AX_FSXMl2k\\\",\\\"y\\\":\\\"My1VU2jSR5wYUzqhy77nfYf0yXDPx6Y_CaylQug61fg\\\"}\",\"signature\":\"31k-o_-0oO78P-XDukGF5iO_xF-NkD4l3Kq8abyXtEP9TNd-M-bk6zDE5sFI71gDe3w3CuA8B7-Mgunkgv4GZA\",\"signingKeySignature\":\"0x47c614c53e7ccbbc0d72f6231bd7eb10ef4b1de9e36cc0a42cfce5a7686e0f1e6c1b1b7c43e2dd6041c431284d6aba8e7f04bb42fc0d01478689dc1b1152c2041b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"RgJdqW9IALDBGjmfKud4fsSCYKP__MON2AX_FSXMl2k\\\",\\\"y\\\":\\\"My1VU2jSR5wYUzqhy77nfYf0yXDPx6Y_CaylQug61fg\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"fUZcq8Nrv_9WFvn8kg31V0YanyvTA7hph7GI7dCyJms\"}"