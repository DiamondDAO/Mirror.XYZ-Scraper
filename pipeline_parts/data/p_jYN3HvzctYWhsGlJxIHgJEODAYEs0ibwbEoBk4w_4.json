"{\"content\":{\"body\":\"Hi, 大家好，我是Steve。欢迎来到我的博客。近期我开始重新学习以太坊编程。在学习之前，我想讲下我的 roadmap。\\n\\n我目前主要观看 [Hung-Ying Tai](https://www.youtube.com/playlist?list=PLHmOMPRfmOxQ3HSlId8KAKxnt8yuyTZVk) 的 Youtube 频道进行学习，并且观看频道后可能会附加一些在网路上搜集的信息，并且使用文字进行整理笔记。喜欢我的文字可以订阅我的 [RSS3](https://steveyu.rss3.bio/) ，我的相关文章都可以通过 [RSS3](https://steveyu.rss3.bio/) 进行追溯。\\n\\n紧接着这些学习内容是 0.7.1 的版本，目前最高版本是 0.8.x，在系列文章之后，我会更新 0.8.x 版本的新特性。文章是边学习边记录笔记，如果有误，请联系我，联系方式可以通过 [RSS3](https://steveyu.rss3.bio/) 找到我的联系方式。\\n\\n## 1. 以太坊\\n\\n以太坊(Ethereum) 是一个开源的以太智能合约功能的公共区块链平台，通过其专属的加密货币(ETH) 来处理合约\\n\\n## 2. 以太坊账户\\n\\n以太坊账户主要分为2种，一种是**无合约代码**的账户 - EOA (External Owned Account)，另一种就是**有合约代码**的账户 - Contract Account。有合约代码的账户是通过无合约代码的账户创建而来。\\n\\n观察下图可以辨识出区别：\\n\\n![EOA vs Contract Account](https://images.mirror-media.xyz/publication-images/YFKqDh0ooSuj-U-b-NinG.png?height=512&width=1210)\\n\\nEOA 拥有 address, nonce 和 balance 构成。而 Contract Account 新增了两个字段 storage hash 和 code hash。storage hash指向存储地址，code hash指向代码段。\\n\\n##### EOA - Call\\n\\nEOA 函数的调用有几个参数，From（发送者），To（接受者），Value（给多少eth），Data（这笔转账的备注）。\\n\\n##### EOA - Create Contract\\n\\n创建合约有几个重要的参数，From（发送者），To（接受者）- 创建合约没有接收者，所以此项参数留空，Data（放你的 bytecode），Value（放进合约的钱的数量）\\n\\n## 3. EVM\\n\\nEVM(Ethereum Virtual Machine) 是以太坊虚拟机，也就是以太坊的沙盒环境。\\n\\n在我们本机执行一段代码，不同的操作系统可能执行同一段代码，结果会不一样，所以以太坊系统就是避免这样的事情所产生。\\n\\n以太坊有统一的 opcode，每个 opcode/storage 价格固定。\\n\\n没有随机的 opcode （不会出现其他语言中 0.1 + 0.9 = 0.9999999...）的状况发生\\n\\n![EVM](https://images.mirror-media.xyz/publication-images/8WLEOvZgWQY11wHELR1Nc.png?height=478&width=1200)\\n\\n##### EVM执行流程\\n\\n1. Account CodeHash 载入 EVM Bytecode\\n2. 进入 Machine State 进行连续运算，直到欠费为止\\n3. Stack 储存 function 的参数，Memory 储存 Array 的参数\\n4. Account Storage 永久储存\\n\\n## 4. Storage案例\\n\\n##### Code\\n\\n下面这段代码是一个 Hello World 案例，定义了一个变量 number，通过 store 函数和 retrieve 函数进行储存和取用。\\n\\n```\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Storage {\\n\\n    uint256 number;\\n\\n    function store(uint256 num) public {\\n        number = num;\\n    }\\n\\n    function retrieve() public view returns (uint256){\\n        return number;\\n    }\\n}\\n```\\n\\n##### Bytecode\\n\\n这段代码会被编译成如下的字节码，这段代码常人无法理解，也不方便进行交互（以太坊的合约的函数就是提供给用户们进行交互的），所以我们出现了一种 JSON 格式的 ABI。\\n\\n![Bytecode](https://images.mirror-media.xyz/publication-images/8adxiF8fC-W0ckyWRAPPj.png?height=516&width=1192)\\n\\n##### ABI\\n\\nABI 是一个 JSON 格式的字符串，进行定义合约函数的输入输出格式，比如 store 函数就定义了 inputs 是一个 uint256 格式，name 为 num。outputs 是返回值为空。而retrive 函数输入为空，返回一个 uint256 的值。\\n\\n![ABI](https://images.mirror-media.xyz/publication-images/QQwvOdTqZp0VIDcndyGbs.png?height=456&width=1140)\\n\\n## 5. 实战使用 Remix IDE\\n\\n访问 <https://remix.ethereum.org/> 即可在线使用 Remix IDE （下次可以出一篇教程，使用 @remix-project/remixd 可以同步本地的代码）。\\n\\nRemix 界面如下图所示，左侧是工具栏，从上到下依次是（文件，编译，部署，数据，单元测试，插件管理）。\\n\\n左侧中间一块是文件目录，右侧是代码。点击 Storage.sol 打开该文件。\\n\\n![Remix 01](https://images.mirror-media.xyz/publication-images/DX39ZEZ87L-dpWudJrHG8.png?height=1382&width=2880)\\n\\n点击编译选项，进入编译界面。点击 `Compile 1_Storage.sol` 即可编译。\\n\\n![Remix 02](https://images.mirror-media.xyz/publication-images/Xy2_9WsujdARpghN8tMrh.png?height=1392&width=2874)\\n\\n编译后可以将代码发布到 ipfs（点击 Publish on Ipfs，Ipfs 是一个分布式文件存储系统），或者点击 Compilation Details，查看编译详细信息。观察下方还有两个小按钮，ABI 和 Bytecode，点击可以复制 ABI 和 Bytecode。\\n\\n![Remix 03](https://images.mirror-media.xyz/publication-images/OZqlPlTqFiaWYej3pk8EX.png?height=1402&width=2880)\\n\\n点击左侧部署按钮进入部署界面。点击部署，即可部署合约，点击下方合约展开。\\n\\n在文本框内输入数字，点击 store 即可存储进 number 变量。点击 retrive 即可取出 retrieve 变量。\\n\\n![Remix 04](https://images.mirror-media.xyz/publication-images/qE_sA9KXm82_TSawedmUf.png?height=1378&width=2878)\\n\\n以上就是全部内容，在  [RSS3](https://steveyu.rss3.bio/) 上可以找到我的联系方式，欢迎一起交流。\",\"timestamp\":1640794370,\"title\":\"Solidity 编程教程 - 01 进入以太坊\"},\"digest\":\"1M_3Ximzir0EgKxVsntgjS1-N1qHsYB7Uu3_9b9obKM\",\"authorship\":{\"contributor\":\"0x0C8048F2378f774c0735ee7Fb16C890a7ca6B16E\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"rJNoz0V_Vc98qnG1CB-KS4ysUTykeGKEYIHITKkcJzU\\\",\\\"y\\\":\\\"pGeJ6Vl1QLbLXIWB9BCzV_d0XmvlX4jYPww0aupwIIs\\\"}\",\"signature\":\"c8W92P_VAvbRzeh9Tl892BQ1r0198xRrhkTt-SH1kqnch3SMs7DAJ4K2R_W8OfBGh_uAybeUyXjyRbXtX2UWlw\",\"signingKeySignature\":\"0x92a16514b8621f90e44829b025d992f8dccdec0850ba5a6bc43c044448fda1306768d398324d42e839d0d3297def44a6d5befb38784f08e0438a0416023418011b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"rJNoz0V_Vc98qnG1CB-KS4ysUTykeGKEYIHITKkcJzU\\\",\\\"y\\\":\\\"pGeJ6Vl1QLbLXIWB9BCzV_d0XmvlX4jYPww0aupwIIs\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"1M_3Ximzir0EgKxVsntgjS1-N1qHsYB7Uu3_9b9obKM\"}"