"{\"content\":{\"body\":\"> 1.Retrofit是基于OkHttp网络请求框架的二次封装而已，懂Okhttp的小伙伴，那么Retrofit也就基本都会。 \\n 2.Retrofit采用注解配置请求的方式： \\n 3.性能最好，处理最快 \\n 4.使用REST API时非常方便； \\n 5.传输层默认就使用OkHttp； \\n 6.支持NIO； \\n 7.拥有出色的API文档和社区支持 \\n 8.速度上比volley更快； \\n 9.如果你的应用程序中集成了OKHttp，Retrofit默认会使用OKHttp处理其他网络层请求。 \\n 10.默认使用Gson\\n\\n#### 一：retrofit的使用\\n\\n> Retrofit支持同步和异步两种方式，在使用时，需要将请求地址转换为接口，通过注解来指定请求方法，请求参数，请求头，返回值等信息。get请求到服务器后从数据库查询数据，返回值为查询到的数据，post请求向服务器提交一条数据，返回值为提交的数据。\\n\\n一：首先完成请求所用的service，是一个interface，完全通过注解完成配置。\\n\\n倚赖需要的包\\n\\n```\\n   compile 'com.squareup.retrofit2:retrofit:2.1.0'\\n   compile 'com.google.code.gson:gson:2.8.0'\\n```\\n\\n```\\n\\npublic interface DouBanApiClient {\\n\\n    /**\\n     *@param headers  请求参数头\\n     *@param url   请求的地址\\n     *@param params 请求的参数\\n     */\\n    @GET()\\n    Call<ResponseBody> get(@HeaderMap Map<String, String> headers, @Url String url, @QueryMap Map<String, String> params);\\n\\n    @FormUrlEncoded\\n    @POST()\\n    Call<String> post(@HeaderMap Map<String, String> headers, @Url String url, @FieldMap Map<String, String> params);\\n\\n    @Streaming\\n    @GET()\\n    Call<ResponseBody> download(@HeaderMap Map<String, String> headers, @Url String url, @QueryMap Map<String, String> params);\\n}\\n\\n```\\n\\n二：创建一个请求单例 ApiClient，方便管理网络请求，本文只给出get请求的实现方式。\\n\\n（ApiBuilder 构建的参数 包含 请求 url header params，后文会贴出代码）\\n\\n```\\n/**\\n *\\n * 网络请求类\\n * Created by Administrator on 2017/2/13 0013.\\n */\\n\\npublic class ApiClient {\\n\\n    static ApiClient instance;\\n\\n\\n    public final static  String BASE_API = \\\"http://app.youxiake.com\\\";\\n\\n    /**\\n     * 请求的接口\\n     * */\\n    public static String Api_BookInfo = \\\"/api/discover/list/hot\\\";\\n\\n\\n    /***\\n     *\\n     * 构建 retrofit请求\\n     * */\\n    private final static Retrofit retrofit = new Retrofit.Builder()\\n            .baseUrl(ApiClient.BASE_API)\\n            .build();\\n\\n\\n    /**\\n     * 获得 DouBanApiClient实例\\n     * @return\\n     */\\n    public DouBanApiClient getDbService(){\\n\\n        return retrofit.create(DouBanApiClient.class);\\n    }\\n\\n    /**\\n     * 创建请求单例\\n     * @return\\n     */\\n    public static ApiClient getInstance(){\\n\\n        if(instance == null){\\n            synchronized (ApiClient.class){\\n                if(instance ==null){\\n                    instance = new ApiClient();\\n                }\\n            }\\n        }\\n        return instance;\\n    }\\n\\n\\n\\n    /**\\n     *\\n     * get请求\\n     * @param builder  request构建的参数 包含 url header params\\n     * @param onCallback  rquest 回调\\n     * @param classOf   指定请求的model类型\\n     * @param <T>\\n     */\\n    public <T> void doGet(ApiBuilder builder ,final com.retrofitdemo.interfaces.CallBack<T> onCallback,final Class classOf){\\n\\n        DouBanApiClient dbService = getDbService();\\n        Call<ResponseBody> stringCall = dbService.get(checkHeaders(builder.headers),\\n                checkUrl(builder.url), checkParams(builder.params));\\n\\n        stringCall.enqueue(new Callback<ResponseBody>() {\\n            @Override\\n            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\\n\\n                Object o = null;\\n                try {\\n                    Log.d(\\\"TAG\\\",\\\"----\\\"+response.body().string());\\n                    o = new Gson().fromJson(response.body().string(), classOf);\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n\\n                onCallback.onSuccess(call, (T) o);\\n            }\\n\\n            @Override\\n            public void onFailure(Call<ResponseBody> call, Throwable t) {\\n                onCallback.onFailure(call,t);\\n                Log.d(\\\"TAG\\\",\\\"----\\\"+t.getMessage());\\n            }\\n        });\\n    }\\n\\n\\n\\n    private String checkUrl(String url) {\\n        if (checkNULL(url)) {\\n\\n            return null;\\n        }\\n        return url;\\n    }\\n    // 判断是否NULL\\n    public static boolean checkNULL(String str) {\\n        return str == null || \\\"null\\\".equals(str) || \\\"\\\".equals(str);\\n\\n    }\\n\\n    // 判断是否NULL\\n    public static void Error(Context context, String msg) {\\n        if (checkNULL(msg)) {\\n            msg = \\\"未知异常\\\";\\n        }\\n        Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();\\n    }\\n\\n    public static Map<String, String> checkHeaders(Map<String, String> headers) {\\n        if (headers == null) {\\n            headers = new HashMap<>();\\n        }\\n        //retrofit的headers的值不能为null，此处做下校验，防止出错\\n        for (Map.Entry<String, String> entry : headers.entrySet()) {\\n            if (entry.getValue() == null) {\\n                headers.put(entry.getKey(), \\\"\\\");\\n            }\\n        }\\n        return headers;\\n    }\\n\\n    public static Map<String, String> checkParams(Map<String, String> params) {\\n        if (params == null) {\\n            params = new HashMap<>();\\n        }\\n        //retrofit的params的值不能为null，此处做下校验，防止出错\\n        for (Map.Entry<String, String> entry : params.entrySet()) {\\n            if (entry.getValue() == null) {\\n                params.put(entry.getKey(), \\\"\\\");\\n            }\\n        }\\n        return params;\\n    }\\n}\\n\\n```\\n\\n三：构建请求的参数\\n\\n```\\n\\n/**\\n * Created by cvmars 2017/2/14 0014.\\n */\\n\\npublic class ApiBuilder {\\n\\n    Map<String, String> params ;\\n    Map<String, String> headers ;\\n    String url;\\n\\n    public ApiBuilder Params(Map<String, String> params) {\\n        this.params.putAll(params);\\n        return this;\\n    }\\n\\n    public ApiBuilder Params(String key, String value) {\\n        this.params.put(key, value);\\n        return this;\\n    }\\n\\n    public ApiBuilder Headers(Map<String, String> headers) {\\n        this.headers.putAll(headers);\\n        return this;\\n    }\\n\\n    public ApiBuilder Headers(String key, String value) {\\n        this.headers.put(key, value);\\n        return this;\\n    }\\n\\n    public ApiBuilder Url(String url) {\\n        this.url = url;\\n        return this;\\n    }\\n\\n    public ApiBuilder(String url) {\\n        this.setParams(url);\\n    }\\n\\n    public ApiBuilder() {\\n        this.setParams(null);\\n    }\\n\\n\\n    private void setParams(String url) {\\n        this.url = url;\\n        this.params = new HashMap<>();\\n        this.headers = new HashMap<>();\\n    }\\n}\\n\\n```\\n\\n四：回调接口\\n\\n```\\n\\npublic interface CallBack<T> {\\n\\n    void onSuccess(Call<ResponseBody> call, T response);\\n\\n    void onFailure(Call<ResponseBody> call, Throwable t);\\n}\\n```\\n\\n五：简单的封装基本完成：下面是基本使用方法\\n\\n先创建返回的model\\n\\n```\\npublic class FindContent {\\n\\n    \\n    public String msg;\\n    public int code;\\n\\n    public DataBean data;\\n\\n    public static class DataBean {\\n        public int total;\\n        public int totalPage;\\n        public int pageSize;\\n\\n        public List<QuotesListBean> quotesList;\\n\\n        public static class QuotesListBean {\\n            public String content;\\n            public String uid;\\n            public String address;\\n            public String show_address;\\n            public String comment;\\n            public String prise;\\n            public String gmt_create;\\n            public String type;\\n            public String video;\\n            public Object activity;\\n            public String username;\\n            public String avatar;\\n            public int quote_id;\\n            public String relation;\\n            public String share_url;\\n            public boolean prised;\\n            public List<ImagesBean> images;\\n            public List<?> discus;\\n\\n            public static class ImagesBean {\\n                public String width;\\n                public String height;\\n                public String url;\\n                public String url_xl;\\n                public String url_l;\\n                public String url_m;\\n                public List<?> labels_info;\\n            }\\n        }\\n    }\\n}\\n```\\n\\n在需要请求的地方进行调用\\n\\n```\\n\\n    ApiBuilder builder = new ApiBuilder(ApiClient.Api_BookInfo)\\n                .Headers(\\\"header1\\\",\\\"this is request header\\\")\\n                .Headers(\\\"header2\\\",\\\"this is request header2\\\")\\n                .Params(\\\"params\\\",\\\"this is request params\\\");\\n        ApiClient.getInstance().doGet(builder, new CallBack<FindContent>() {\\n            @Override\\n            public void onSuccess(Call<ResponseBody> call, FindContent response) {\\n\\n                mContent.setText(response.toString());\\n            }\\n            @Override\\n            public void onFailure(Call<ResponseBody> call, Throwable t) {\\n\\n\\n            }\\n        },FindContent.class);\\n    }\\n```\\n\\n \\n \",\"timestamp\":1641729694,\"title\":\"Android retrofit的简单封装\"},\"digest\":\"5U9F0TwkGi6g9atFBU_fnrJ1Uj5y0EKtNeYgHN5__lQ\",\"authorship\":{\"contributor\":\"0x3CdD11377392664bEC71186e30c8E105ec54DAB7\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"nEhsFBBsEppcWR3KfdD_H-UZH8Xilwqv7nOQmY-gBvs\\\",\\\"y\\\":\\\"Ua7-c3s9LJfShrVdB2pkSRmJnqqkrxHAGtBh9slFsEk\\\"}\",\"signature\":\"dEedTfkfuI1wFQYCQ-ZSsrakP6FDKaAQXjTYqfpYnXvjhkIQiLu4X-PiGJ-dOSJpqM3mnXiA9idlWnoj0YA9Pw\",\"signingKeySignature\":\"0x94dde04b37a55efbf0c539e2c1d935347fd4c4efbb1cc9d6e8921be127dd50c31efaa38756c4f1c2fa338c562bd53fd5ff55882b48501cdcfd739aac0d2d7f1e1c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"nEhsFBBsEppcWR3KfdD_H-UZH8Xilwqv7nOQmY-gBvs\\\",\\\"y\\\":\\\"Ua7-c3s9LJfShrVdB2pkSRmJnqqkrxHAGtBh9slFsEk\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"5U9F0TwkGi6g9atFBU_fnrJ1Uj5y0EKtNeYgHN5__lQ\"}"