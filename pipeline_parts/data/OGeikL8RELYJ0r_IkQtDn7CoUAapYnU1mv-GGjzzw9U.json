"{\"content\":{\"body\":\"\\n_____\\n\\n## Localnet dev environment with --clone\\n\\nIn order to be productive, I want to iterate quickly.\\n\\nMango is currently accessible on `devnet` and `main-net` clusters, but my anchor workspace contains several projects, that I modify often, so I don‚Äôt feel like using `devnet`.\\n\\nI want to be able to have my usual `anchor test` speed, not sure what happen behind the curtain but the deployments to `localnet` don‚Äôt event appear in the prompt, making it ideal for iterating fast.\\n\\nIn order to use Mango on `localnet` I found this neat option for `solana-test-validator` (the program running `localnet` coming with the Solana cli) :\\n\\n`--clone <account>`  (credits to dvcrn#7961 on the Anchor discord)\\n\\nIt copies accounts from another cluster into the starting `localnet` instance, and note that once you run the `solana-local-validator` once, it create a `test-ledger` folder that store its state. So `--clone` only have effect when this `test-ledger` is not there, of if you use `--reset` to start fresh.\\n\\nThis is how I use it :\\n\\n```\\n#!/bin/bash\\n\\n# Reset then configure the local validator to mimic the mango accounts on devnet\\nsolana-test-validator \\\\\\n --reset                                                `: # Reset the test-ledger` \\\\\\n --url https://mango.devnet.rpcpool.com                 `: # Cluster from which the below program will be cloned` \\\\\\n --clone TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA    `: # token program` \\\\\\n --clone 8mFQbdXsFXt3R3cu3oSNS3bDZRwJRP18vyzd9J278J9z   `: # cache `\\\\\\n --clone ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL   `: # assoc token program` \\\\\\n --clone aca3VWxwBeu8FTZowJ9hfSKGzntjX68EXh1N9xpE1PC    `: # Acam wallet` \\\\\\n --clone 9KBGW5bbfdLA4zKAXPETwjR5Ub7BR2Zh9gKHsPnrUkUg   `: ## BTC assoc token acc` \\\\\\n --clone 7CZfVDqqYueBujgvqxwDp7Y29eoe5zcgdcqvsUW5bcqP   `: ## USDC assoc token acc` \\\\\\n --clone 4uv1EwgZNa91tnBbr49KrQmpb29mp95e9ATh77tgxr6B   `: ## WSOL assoc token acc` \\\\\\n --clone Eyh77zP5b7arPtPgpnCT8vsGmq9p5Z9HHnBSeQLnAFQi   `: # Test user wallet` \\\\\\n --clone C2CmwB1DBgaKUKHUNi9Ua55wKSH12W95wJEe8yMbSzCN   `: ## BTC assoc token acc` \\\\\\n --clone gq25cMCGNb9VNquJsqTYNpipUjZbVB6FktQiENvnq7q    `: ## USDC assoc token acc` \\\\\\n --clone 92jBUBivpzTu5EEtdVgKXXwmEhfqFMsg91z2RRYyobFQ   `: ## WSOL assoc token acc` \\\\\\n --clone 8FRFC6MoGGkMFQwngccyu69VnYbzykGeez7ignHVAFSN   `: # USDC mango test TOKEN MINT followed by mango root/node` \\\\\\n --clone HUBX4iwWEUK5VrXXXcB7uhuKrfT4fpu2T9iZbg712JrN \\\\\\n --clone J2Lmnc1e4frMnBEJARPoHtfpcohLfN67HdK1inXjTFSM \\\\\\n --clone 3UNBZ6o52WTWwjac2kPUb4FyodhU1vFkRJheu1Sh2TvU   `: # BTC TOKEN MINT followed by mango root/node`\\\\\\n --clone BeEoyDq1v2DYJCoXDQAJKfmrsoRRvfmV856f2ijkXbtp \\\\\\n --clone 4X3nP921qyh6BKJSAohKGNCykSXahFFwg1LxtC993Fai \\\\\\n --clone Bb9bsTQa1bGEtQ5KagGkvSHyuLqDWumFUcRqFusFNJWC   `: # Mango TOKEN MINT followed by mango root/node` \\\\\\n --clone CY4nMV9huW5KCYFxWChrmoLwGCsZiXoiREeo2PMrBm5o \\\\\\n --clone 6rkPNJTXF37X6Pf5ct5Y6E91PozpZpZNNU1AGATomKjD \\\\\\n --clone So11111111111111111111111111111111111111112    `: # WSOL TOKEN MINT followed by mango root/node` \\\\\\n --clone 8GC81raaLjhTx3yedctxCJW46qdmmSRybH2s1eFYFFxT \\\\\\n --clone 7mYqCavd1K24fnL3oKTpX3YM66W5gfikmVHJWM3nrWKe \\\\\\n --clone Ec2enZyoC4nGpEfu2sUNAa2nUGJHWxoUWYSEJ2hNTWTA   `: # MANGO starts - devnet.2 cluster `\\\\\\n --clone 4skJ85cdxQAFVKbcGgfun8iZPL7BadVYXG3kGEGkufqA   `: # mangoProgramId `\\\\\\n --clone 79Rz9FwjTYSGMbpPBbQMT6kEmqhuGvhqpCPEoALJGmsb   `: # vault? `\\\\\\n --clone 6eadH6vSsEk5bPiXWPYRq5KRSjohfYd6Ug5HjGbxaWce \\\\\\n --clone DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY   `: # serumProgramId`\\\\\\n --clone AvKzLiE8ezzp6kLVw49nq8drycE89NS1RQaBWjBNeUoF \\\\\\n --clone HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J   `: # BTC oracle `\\\\\\n --clone J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix   `: # SOL oracle `\\\\\\n --clone 8k7F9Xb36oFJsjpCKpsXvg4cgBRoZtwNTc3EzG5Ttd2o   `: # MNGO oracle `\\\\\\n --clone FHQtNjRHA9U5ahrH7mWky3gamouhesyQ5QvpeGKrTh2z   `: # BTC Perp market `\\\\\\n --clone F1Dcnq6F8NXR3gXADdsYqrXYBUUwoT7pfCtRuQWSyQFd   `: ## bidsKey `\\\\\\n --clone BFEBZsLYmEhj4quWDRKbyMKhW1Q9c7gu3LqsnipNGTVn   `: ## asksKey `\\\\\\n --clone Bu17U2YdBM9gRrqQ1zD6MpngQBb71RRAAn8dbxoFDSkU   `: ## eventsKey `\\\\\\n --clone 58vac8i9QXStG1hpaa4ouwE1X7ngeDjY9oY7R15hcbKJ   `: # SOL Perp market `\\\\\\n --clone 7HRgm8iXEDx2TmSETo3Lq9SXkF954HMVKNiq8t5sKvQS   `: ## bidsKey `\\\\\\n --clone 4oNxXQv1Rx3h7aNWjhTs3PWBoXdoPZjCaikSThV4yGb8   `: ## asksKey `\\\\\\n --clone CZ5MCRvkN38d5pnZDDEEyMiED3drgDUVpEUjkuJq31Kf   `: ## eventsKey `\\n#  > /dev/null 2>&1 &\\n```\\n\\nI run that script once to configure my `localnet`, or to reset it.\\n\\nYou can then start you `solana-local-validator` the usual way, or run the above script each time if you want to have a deterministic environment.\\n\\nYou then call `anchor test --skip-local-validator` to ran your test suit against it (at first I though Anchor would pick up the local `test-ledger` but it doesn‚Äôt)\\n\\nAll the accounts come from the mango `ids.rs`\\n\\n[https://github.com/blockworks-foundation/mango-client-v3/blob/main/src/ids.json](https://github.com/blockworks-foundation/mango-client-v3/blob/main/src/ids.json)\\n\\n\\n______\\n\\nOne neat thing that you might have caught in the above script, is that to also copy my users accounts and their associated token accounts from the devnet in order to have the right tokens and balances, mints and identities without bothering with mocking :\\n\\n```\\n// ...\\n--clone aca3VWxwBeu8FTZowJ9hfSKGzntjX68EXh1N9xpE1PC    `: # Acam wallet` \\\\\\n --clone 9KBGW5bbfdLA4zKAXPETwjR5Ub7BR2Zh9gKHsPnrUkUg   `: ## BTC assoc token acc` \\\\\\n --clone 7CZfVDqqYueBujgvqxwDp7Y29eoe5zcgdcqvsUW5bcqP   `: ## USDC assoc token acc` \\\\\\n --clone 4uv1EwgZNa91tnBbr49KrQmpb29mp95e9ATh77tgxr6B   `: ## WSOL assoc token acc` \\\\\\n --clone Eyh77zP5b7arPtPgpnCT8vsGmq9p5Z9HHnBSeQLnAFQi   `: # Test user wallet` \\\\\\n --clone C2CmwB1DBgaKUKHUNi9Ua55wKSH12W95wJEe8yMbSzCN   `: ## BTC assoc token acc` \\\\\\n --clone gq25cMCGNb9VNquJsqTYNpipUjZbVB6FktQiENvnq7q    `: ## USDC assoc token acc` \\\\\\n --clone 92jBUBivpzTu5EEtdVgKXXwmEhfqFMsg91z2RRYyobFQ   `: ## WSOL assoc token acc` \\\\\\n// ...\\n```\\n\\nYou can easily follow Mango tutorial to get Devnet tokens, then go trade these on the devnet Mango for other Sol, BTC and the like (That‚Äôs a good way to avoid the devnet sol airdrop limitation ü§´)\\n\\n[https://docs.mango.markets/tutorials/how-to-receive-dev-net-tokens](https://docs.mango.markets/tutorials/how-to-receive-dev-net-tokens)\\n\\nAll in all, this allows me to send Mango instructions like `InitMangoAccount` successfully.\\n\\nOne last thing that I loose using `anchor test --skip-local-validator` compared to just running `anchor test` is that the deployment does prompt now, not as fast. Will look into that later to understand what‚Äôs the diff.\\n\\n\\n__________\\n\\n## Anchor and CPI to Mango\\n\\nMango is not Anchor friendly, seems normal as the project is big and complex, and has been started from before Anchor. Also they probably don‚Äôt want to rely on a WIP framework.\\n\\nMost of the ‚Äúissues‚Äù here, are not really issues‚Ä¶ Just sugar and QoL stuff, subjective.\\n\\nFirst issues is that you cannot use the idiomatic Anchor stuff like `Program<‚Äòinfo, Mango>` as mango did not have a declare_id required by Anchor.\\n\\nDid a smol PR about it :\\n\\n[https://github.com/blockworks-foundation/mango-v3/pull/67](https://github.com/blockworks-foundation/mango-v3/pull/67)\\n\\n\\n_____\\n\\n### Creating and initialising the MangoAccount\\n\\nThe next thing is that the `mango::state::MangoAccount` has a span of 28912 bytes if I‚Äôm not mistaken, preventing you to use the Anchor IDL account creation :\\n\\n```\\n    #[account(\\n        init,\\n        seeds = [MANGO_SEED, mint.key().as_ref()],\\n        bump,\\n        payer = authority,\\n        owner = mango::mango_program::Mango::id(), // This is my custom stuff added with the PR above\\n        space = MANGO_ACCOUNT_SPAN, // 28912\\n    )]\\n    pub mango_account: AccountInfo<'info>,\\n```\\n\\nResults in this error :\\n`Account data size realloc limited to 10240 in inner instructions`\\n\\nSo I fall back on the associated instruction init as follows :\\n\\n```\\n// ... In the Solana program\\n// signer cause it's required later for the CPI initialization \\n#[account(mut, signer)]\\npub mango_account: AccountInfo<'info>,\\n// ...\\n```\\n\\nand in the typescript code\\n\\n```\\n// ...\\n   const mangoAccount = new Keypair(); \\n   const createMangoAccountIx = SystemProgram.createAccount({\\n      programId: MANGO_PROGRAM_ID,\\n      space: MangoAccountLayout.span,\\n      lamports: await getRentExemption(MangoAccountLayout.span),\\n      fromPubkey: admin.wallet.publicKey,\\n      newAccountPubkey: mangoAccount.publicKey, \\n    });\\n    // Then call your program instruction and don't forget the IX + the mangoAccount.secretKey in the signers.\\n    // instructions: [createMangoAccountIx],\\n    // signers: [mangoAccount.secretKey],\\n// ...\\n```\\n\\n\\n_____\\n\\n### Mint-erlude ü•Ç\\n\\nFor the next ‚ÄúMango related‚Äù part, I will have to stop testing with my locally crafted mints, and start using the actual `devnet` token mints, so that the cloned accounts from the mango program can find their babies.\\n\\nHere I go on `devnet` , I create a new wallet, fund it with some of the required tokens.\\n\\n![r i c h](https://images.mirror-media.xyz/publication-images/C7r_Z4yLnUpTe4oVh9cB3.png?height=352&width=1978)\\n\\nNext step is to go in the script that setup the local environment for `localnet` and add this new account to the cloning.\\n\\n```\\n// ...\\n--clone Eyh77zP5b7arPtPgpnCT8vsGmq9p5Z9HHnBSeQLnAFQi   `: # Test user wallet` \\\\\\n// ...\\n```\\n\\nFinal step, is to go in the program and create the `Keypair` associated to these thanks to the exported Private Key. (We need keypair to sign stuff)\\n\\n```\\n// ...\\n// aca3VWxwBeu8FTZowJ9hfSKGzntjX68EXh1N9xpE1PC\\nconst aca3VWSeed = Uint8Array.from([\\n  197, 246, ... 146, 223,\\n]);\\n// Eyh77zP5b7arPtPgpnCT8vsGmq9p5Z9HHnBSeQLnAFQi\\nconst Eyh77Seed = Uint8Array.from([\\n  219, 139, ... 212, 175,\\n]);\\n\\n// Identities - both of these are wallets that exists on devnet, we clone them in the localnet env\\naca3VWxwBeu8FTZowJ9hfSKGzntjX68EXh1N9xpE1PC\\nexport let admin = Keypair.fromSecretKey(aca3VWSeed);\\nexport let user = Keypair.fromSecretKey(Eyh77Seed);\\n// ...\\n```\\n\\nNow I have my test identities that are funded and ready to be used.\\n\\n\\n_____\\n\\n### Depositing to the Mango Account\\n\\nOk this is where I‚Äôll stop this article, I was starting to see the light‚Ä¶\\n\\nBut at the end of 6h of debugging, this hard check got me:\\n`self.last_update >= now_ts - (mango_group.valid_interval * 2),`\\n\\n[https://github.com/blockworks-foundation/mango-v3/blob/main/program/src/state.rs#L612](https://github.com/blockworks-foundation/mango-v3/blob/main/program/src/state.rs#L612)\\n\\n_____ \\n  \\n Seems that calling for the update saves it!\\n\\n```\\n// This might not be needed later, maybe just due to localnet\\n    const rootBank = utils.mango.group.rootBankAccounts[depositedTokenIndex];\\n    await utils.mango.client.updateRootBank(\\n      utils.mango.group,\\n      rootBank.publicKey,\\n      rootBank.nodeBanks,\\n      new Account(user.payer.secretKey)\\n    );\\n```\\n\\n_____\\n\\nUntil the next issue‚Ä¶ \\n\\n![oh no](https://images.mirror-media.xyz/publication-images/yhwWg1Ul5285deicayukh.png?height=146&width=1368)\\n\\nWhich is ‚Ä¶ the mango rewards? Means we are close! The local env setup must miss an account or something\\n\\n![That's why Anchor is cool! cf line 3472](https://images.mirror-media.xyz/publication-images/V7KGguGKcmbErM1-XkxeB.png?height=1254&width=1762)\\n\\n\",\"timestamp\":1634293460,\"title\":\"Mango integration, localnet testing and Anchor CPI to non Anchor programs\"},\"digest\":\"ZwYIZE23ilHHpvufJ6aBy5xWzBscLXQLRTvyIR0et5E\",\"authorship\":{\"contributor\":\"0x9fEcc73Da3f8bd2aC436547a72f8Dd32326D90dc\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"HQpc6cr_wO6ZJUUn7LGOZOxDRpLH9v-NAZv2XrK8l5c\\\",\\\"y\\\":\\\"U68BcmwUO82Vc9LlAElRF0NNFpvjFv2BYxZ95bBzZWc\\\"}\",\"signature\":\"dWmSou_2Zi8G4KDGZGIX6D3YOrgyU9uv25cnfPdq9_KscX9MnRhcgq9d2MRECPnkI-ZQTelyXCYRJsHZBVRe6g\",\"signingKeySignature\":\"0x9b50f510baa6a60bd0e4375cb0e2184df3409d2356250380a1f7907fb34f3d96578218d3043a45a235ef283863f218d142f8ac090191411bcfb1333043f980a41b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"HQpc6cr_wO6ZJUUn7LGOZOxDRpLH9v-NAZv2XrK8l5c\\\",\\\"y\\\":\\\"U68BcmwUO82Vc9LlAElRF0NNFpvjFv2BYxZ95bBzZWc\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"u05KU4oE4tnlI4Z5Yj-TAQSq8bgZuu4Mv2s3wblpkTs\"}"