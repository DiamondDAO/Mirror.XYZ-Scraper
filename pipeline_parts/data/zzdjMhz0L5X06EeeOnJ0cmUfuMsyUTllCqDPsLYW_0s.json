"{\"content\":{\"body\":\"**Last Updated:** October 15th 2021\\n\\nFCL-JS is the easiest way to start building decentralized applications. FCL (aka Flow Client Library) wraps much of the logic you'd have to write yourself on other blockchains. Follow this quick start and you'll have a solid overview of how to build a shippable dapp on Flow.\\n\\nWe're going to make an assumption that you know or understand React; however, the concepts should be easy to understand and transfer to another framework. While this tutorial will make use of Cadence (Flow's smart contract language), you do not need to know it. Instead, we recommend later diving into [learning the Cadence language](https://docs.onflow.org/cadence/) once you've gotten the core FCL concepts down.\\n\\nIn this tutorial, we are going to interact with an existing smart contract on Flow's testnet known as the [Profile Contract](https://testnet.flowscan.org/contract/A.ba1132bc08f82fe2.Profile). Using this contract, we will create a new profile and edit the profile information, both via a wallet. In order to do this, the FCL concepts we'll cover are:\\n\\n* [Installation](https://docs.onflow.org/fcl/tutorials/flow-app-quickstart/#installation)\\n* [Configuration](https://docs.onflow.org/fcl/tutorials/flow-app-quickstart/#configuration)\\n* [Authentication](https://docs.onflow.org/fcl/tutorials/flow-app-quickstart/#authentication)\\n* [Querying the Blockchain](https://docs.onflow.org/fcl/tutorials/flow-app-quickstart/#querying-the-blockchain)\\n* [Initializing an Account](https://docs.onflow.org/fcl/tutorials/flow-app-quickstart/#initializing-an-account)\\n* [Mutating the Blockchain](https://docs.onflow.org/fcl/tutorials/flow-app-quickstart/#mutating-the-blockchain)\\n\\nAnd if you ever have any questions we're always happy to help on [Discord](https://discord.gg/flow). There are also links at the end of this article for diving deeper into building on Flow.\\n\\n## Installation\\n\\nThe first step is to generate a React app using [create-react-app](https://reactjs.org/docs/create-a-new-react-app.html). From your terminal, run the following:\\n\\nCopy\\n\\n```\\nnpx create-react-app flow-app\\ncd flow-app\\n```\\n\\nNext, install FCL so we can use it in our app.\\n\\nCopy\\n\\n```\\nnpm install @onflow/fcl --save\\n```\\n\\nNow run the app using the following command in your terminal.\\n\\nCopy\\n\\n```\\nnpm start\\n```\\n\\nYou should now see your React app running.\\n\\n## Configuration\\n\\nNow that your app is running, you can configure FCL. Create a `config.js` file in the `src` directory and add the following.\\n\\n**Note**: These values are required to use FCL with your app.\\n\\n> **Create file:** `./src/config.js`\\n\\nCopy\\n\\n```\\nimport { config } from \\\"@onflow/fcl\\\";\\n\\nconfig({\\n  \\\"accessNode.api\\\": \\\"https://access-testnet.onflow.org\\\", // Mainnet: \\\"https://access-mainnet-beta.onflow.org\\\"\\n  \\\"discovery.wallet\\\": \\\"https://fcl-discovery.onflow.org/testnet/authn\\\" // Mainnet: \\\"https://fcl-discovery.onflow.org/authn\\\"\\n})\\n```\\n\\nðŸ“£ **Tip**: It's recommend to replace these values with environment variables for easy deployments across different environments like development/production or Testnet/Mainnet.\\n\\nThe `accessNode.api` key specifies the address of a Flow access node. Flow provides these, but in the future access to Flow may be provided by other 3rd parties, through their own access nodes. `discovery.wallet` is an address that points to a service that lists FCL compatible wallets. Flow's FCL Discovery service is a service that FCL wallet providers can be added to, and be made 'discoverable' to any application that uses the `discovery.wallet` endpoint.\\n\\nLearn more about configuration values [here](https://docs.onflow.org/fcl/reference/api/#setting-configuration-values).\\n\\nTo finish configuring our dapp, let's import the config file into the top of our `App.js` file, then swap out the default component in `App.js` to look like this:\\n\\n> **Replace file:** `./src/App.js`\\n\\nCopy\\n\\n```\\nimport \\\"./config\\\";\\n\\nfunction App() {\\n  return (\\n    <div>\\n      <h1>Flow App</h1>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\\n```\\n\\nNow we're ready to start talking to Flow!\\n\\n## Authentication\\n\\nTo authenticate a user, all an app has to do is call `fcl.logIn()`. Sign up and unauthenticate are all also as simple as `fcl.signUp()` and `fcl.unauthenticate()`. Once authenticated, FCL sets an object called `fcl.currentUser` which exposes methods for watching changes in user data, signing transactions, and more. For more information on the `currentUser`, read more [here](https://docs.onflow.org/fcl/reference/api/#current-user).\\n\\nLet's add in a few buttons for sign up/login and also subscribe to changes on the `currentUser`. When the user is updated (which it will be after authentication), we'll set the user state in our component to reflect this. To demonstrate user authenticated sessions, we'll conditionally render a component based on if the user is or is not logged in.\\n\\nThis is what your file should look like now:\\n\\n> **Replace file:** `./src/App.js`\\n\\nCopy\\n\\n```\\nimport \\\"./config\\\";\\nimport { useState, useEffect } from \\\"react\\\";\\nimport * as fcl from \\\"@onflow/fcl\\\";\\n\\nfunction App() {\\n  const [user, setUser] = useState({loggedIn: null})\\n\\n  useEffect(() => fcl.currentUser.subscribe(setUser), [])\\n\\n  const AuthedState = () => {\\n    return (\\n      <div>\\n        <div>Address: {user?.addr ?? \\\"No Address\\\"}</div>\\n        <button onClick={fcl.unauthenticate}>Log Out</button>\\n      </div>\\n    )\\n  }\\n\\n  const UnauthenticatedState = () => {\\n    return (\\n      <div>\\n        <button onClick={fcl.logIn}>Log In</button>\\n        <button onClick={fcl.signUp}>Sign Up</button>\\n      </div>\\n    )\\n  }\\n\\n  return (\\n    <div>\\n      <h1>Flow App</h1>\\n      {user.loggedIn\\n        ? <AuthedState />\\n        : <UnauthenticatedState />\\n      }\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\\n```\\n\\nYou should now be able to log in or sign up a user and unauthenticate them. Upon logging in or signing up your users will see a popup where they can choose between wallet providers. Let's select the [Blocto wallet](https://blocto.portto.io/) for this example to create an account. Upon completing authentication, you'll see the component change and the user's wallet address appear on the screen if you've completed this properly.\\n\\n## Querying the Blockchain\\n\\nOne of the main things you'll often need to do when building a dapp is query the Flow blockchain and the smart contracts deployed on it for data. Since smart contracts will live on both Testnet and Mainnet, let's put the account address where the smart contract lives into the configuration (remember, it's recommended that you change this later to use environment variables). Let's also give it a key of `Profile` and prefix it with `0x` so that the final key is `0xProfile`. The prefix is important because it tells FCL to pull the corresponding addresses needed from the configuration value.\\n\\n> **Replace file:** `./src/config.js`\\n\\nCopy\\n\\n```\\nimport { config } from \\\"@onflow/fcl\\\";\\n\\nconfig({\\n  \\\"accessNode.api\\\": \\\"https://access-testnet.onflow.org\\\",\\n  \\\"discovery.wallet\\\": \\\"https://fcl-discovery.onflow.org/testnet/authn\\\",\\n  \\\"0xProfile\\\": \\\"0xba1132bc08f82fe2\\\" // The account address where the smart contract lives\\n})\\n```\\n\\nIf you want to see the on chain smart contract we'll be speaking with next, you can view the [Profile Contract](https://testnet.flowscan.org/contract/A.ba1132bc08f82fe2.Profile) source code but again for this tutorial it's not necessary you understand it.\\n\\n**First, lets query the contract to see what the user's profile name is.**\\n\\nA few things need to happen in order to do that:\\n\\n1. We need to import the contract and pass it the user's account address as an argument.\\n2. Execute the script using `fcl.query`.\\n3. Set the result of the script to the app state in React so we can display the profile name in our browser.\\n4. Display \\\"No Profile\\\" if one was not found.\\n\\nTake a look at the new code. We'll explain each new piece as we go. Remember, the cadence code is a separate language from JavaScript used to write smart contracts, so you don't need to spend too much time trying to understand it. (Of course, you're more than welcome to, if you want to!)\\n\\n> **Replace file:** `./src/App.js`\\n\\nCopy\\n\\n```\\nimport \\\"./config\\\";\\nimport { useState, useEffect } from \\\"react\\\";\\nimport * as fcl from \\\"@onflow/fcl\\\";\\n\\nfunction App() {\\n  const [user, setUser] = useState({loggedIn: null})\\n  const [name, setName] = useState('') // NEW\\n\\n  useEffect(() => fcl.currentUser.subscribe(setUser), [])\\n\\n    // NEW\\n  const sendQuery = async () => {\\n    const profile = await fcl.query({\\n      cadence: `\\n        import Profile from 0xProfile\\n\\n        pub fun main(address: Address): Profile.ReadOnly? {\\n          return Profile.read(address)\\n        }\\n      `,\\n      args: (arg, t) => [arg(user.addr, t.Address)]\\n    })\\n\\n    setName(profile?.name ?? 'No Profile')\\n  }\\n\\n  const AuthedState = () => {\\n    return (\\n      <div>\\n        <div>Address: {user?.addr ?? \\\"No Address\\\"}</div>\\n        <div>Profile Name: {name ?? \\\"--\\\"}</div> {/* NEW */}\\n        <button onClick={sendQuery}>Send Query</button> {/* NEW */}\\n        <button onClick={fcl.unauthenticate}>Log Out</button>\\n      </div>\\n    )\\n  }\\n\\n  const UnauthenticatedState = () => {\\n    return (\\n      <div>\\n        <button onClick={fcl.logIn}>Log In</button>\\n        <button onClick={fcl.signUp}>Sign Up</button>\\n      </div>\\n    )\\n  }\\n\\n  return (\\n    <div>\\n      <h1>Flow App</h1>\\n      {user.loggedIn\\n        ? <AuthedState />\\n        : <UnauthenticatedState />\\n      }\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\\n```\\n\\nA few things happened. In our `AuthedState` component, we added a button to send a query for the user's profile name and a div to display the result above it. The corresponding `useState` initialization can be seen at the top of the component.\\n\\nThe other thing we did is build out the actual query inside of `sendQuery` method. Let's take a look at it more closely:\\n\\nCopy\\n\\n```\\nawait fcl.query({\\n  cadence: `\\n    import Profile from 0xProfile\\n\\n    pub fun main(address: Address): Profile.ReadOnly? {\\n      return Profile.read(address)\\n    }\\n  `,\\n  args: (arg, t) => [arg(user.addr, t.Address)]\\n});\\n```\\n\\nInside the query you'll see we set two things: `cadence` and `args`. Cadence is Flow's smart contract language we mentioned. For this tutorial, when you look at it you just need to notice that it's importing the `Profile` contract from the account we named `0xProfile` earlier in our config file, then also taking an account address, and reading it. That's it until you're ready to [learn more Cadence](https://docs.onflow.org/cadence/tutorial/01-first-steps/).\\n\\nIn the `args` section, we are simply passing it our user's account address from the user we set in state after authentication and giving it a type of `Address`. For more possible types, [see this reference](https://docs.onflow.org/fcl/reference/api/#ftype).\\n\\nGo ahead and click the \\\"Send Query\\\" button. You should see \\\"No Profile.\\\" That's because we haven't initialized the account yet.\\n\\n## Initializing the Account\\n\\nFor the Profile contract to store a Profile in a user's account, it does so by initializing what is called a \\\"resource.\\\" A resource is an ownable piece of data and functionality that can live in the user's account storage. This paradigm is known is as \\\"resource-oriented-programming\\\", a principle that is core to Cadence and differentiates its ownership model from other smart contract languages, [read more here](https://docs.onflow.org/cadence/#intuiting-ownership-with-resources). Cadence makes it so that resources can only exist in one place at any time, they must be deliberately created, cannot be copied, and if desired, must be deliberately destroyed.\\n\\n> There's a lot more to resources in Cadence than we'll cover in this guide, so if you'd like to know more, check out [this Cadence intro](https://docs.onflow.org/cadence/).\\n\\nTo do this resource initialization on an account, we're going to add another function called `initAccount`. Inside of that function, we're going to add some Cadence code which says, *\\\"Hey, does this account have a profile? If it doesn't, let's add one.\\\"* We do that using something called a \\\"transaction.\\\" Transactions occur when you want to change the state of the blockchain, in this case, some data in a resource, in a specific account. And there is a cost (transaction fee) in order to do that; unlike a query.\\n\\nThat's where we jump back into FCL code. Instead of `query`, we use `mutate` for transactions. And because there is a cost, we need to add a few fields that tell Flow who is proposing the transaction, who is authorizing it, who is paying for it, and how much they're willing to pay for it. Those fields â€” not surprisingly â€” are called: `proposer`, `authorizer`, `payer`, and `limit`. For more information on these signatory roles, check out [this doc](https://docs.onflow.org/concepts/transaction-signing/#signer-roles).\\n\\nLet's take a look at what our account initialization function looks like:\\n\\nCopy\\n\\n```\\nconst initAccount = async () => {\\n  const transactionId = await fcl.mutate({\\n    cadence: `\\n      import Profile from 0xProfile\\n\\n      transaction {\\n        prepare(account: AuthAccount) {\\n          // Only initialize the account if it hasn't already been initialized\\n          if (!Profile.check(account.address)) {\\n            // This creates and stores the profile in the user's account\\n            account.save(<- Profile.new(), to: Profile.privatePath)\\n\\n            // This creates the public capability that lets applications read the profile's info\\n            account.link<&Profile.Base{Profile.Public}>(Profile.publicPath, target: Profile.privatePath)\\n          }\\n        }\\n      }\\n    `,\\n    payer: fcl.authz,\\n    proposer: fcl.authz,\\n    authorizations: [fcl.authz],\\n    limit: 50\\n  })\\n\\n  const transaction = await fcl.tx(transactionId).onceSealed()\\n  console.log(transaction)\\n}\\n```\\n\\nYou can see the new fields we talked about. You'll also notice `fcl.authz`. That's shorthand for \\\"use the current user to authorize this transaction\\\", (you could also write it as `fcl.currentUser.authorization`). If you want to learn more about transactions and signing transactions, you can [view the docs here](https://docs.onflow.org/concepts/accounts-and-keys/#signing-a-transaction). For this example, we'll keep it simple with the user being each of these roles.\\n\\nYou'll also notice we are awaiting a response with our transaction data by using the syntax `fcl.tx(transactionId).onceSealed()`. This will return when the blockchain has sealed the transaction and it's complete in processing it and verifying it.\\n\\nNow your `App.js` file should look like this (we also added a button for calling the `initAccount` function in the `AuthedState`):\\n\\n> **Replace file:** `./src/App.js`\\n\\nCopy\\n\\n```\\nimport \\\"./config\\\";\\nimport { useState, useEffect } from \\\"react\\\";\\nimport * as fcl from \\\"@onflow/fcl\\\";\\n\\nfunction App() {\\n  const [user, setUser] = useState({loggedIn: null})\\n  const [name, setName] = useState('')\\n\\n  useEffect(() => fcl.currentUser.subscribe(setUser), [])\\n\\n  const sendQuery = async () => {\\n    const profile = await fcl.query({\\n      cadence: `\\n        import Profile from 0xProfile\\n\\n        pub fun main(address: Address): Profile.ReadOnly? {\\n          return Profile.read(address)\\n        }\\n      `,\\n      args: (arg, t) => [arg(user.addr, t.Address)]\\n    })\\n\\n    setName(profile?.name ?? 'No Profile')\\n  }\\n\\n  // NEW\\n  const initAccount = async () => {\\n    const transactionId = await fcl.mutate({\\n      cadence: `\\n        import Profile from 0xProfile\\n\\n        transaction {\\n          prepare(account: AuthAccount) {\\n            // Only initialize the account if it hasn't already been initialized\\n            if (!Profile.check(account.address)) {\\n              // This creates and stores the profile in the user's account\\n              account.save(<- Profile.new(), to: Profile.privatePath)\\n\\n              // This creates the public capability that lets applications read the profile's info\\n              account.link<&Profile.Base{Profile.Public}>(Profile.publicPath, target: Profile.privatePath)\\n            }\\n          }\\n        }\\n      `,\\n      payer: fcl.authz,\\n      proposer: fcl.authz,\\n      authorizations: [fcl.authz],\\n      limit: 50\\n    })\\n\\n    const transaction = await fcl.tx(transactionId).onceSealed()\\n    console.log(transaction)\\n  }\\n\\n  const AuthedState = () => {\\n    return (\\n      <div>\\n        <div>Address: {user?.addr ?? \\\"No Address\\\"}</div>\\n        <div>Profile Name: {name ?? \\\"--\\\"}</div>\\n        <button onClick={sendQuery}>Send Query</button>\\n        <button onClick={initAccount}>Init Account</button> {/* NEW */}\\n        <button onClick={fcl.unauthenticate}>Log Out</button>\\n      </div>\\n    )\\n  }\\n\\n  const UnauthenticatedState = () => {\\n    return (\\n      <div>\\n        <button onClick={fcl.logIn}>Log In</button>\\n        <button onClick={fcl.signUp}>Sign Up</button>\\n      </div>\\n    )\\n  }\\n\\n  return (\\n    <div>\\n      <h1>Flow App</h1>\\n      {user.loggedIn\\n        ? <AuthedState />\\n        : <UnauthenticatedState />\\n      }\\n    </div>\\n  )\\n}\\n\\nexport default App;\\n\\n```\\n\\nPress the \\\"Init Account\\\" button you should see the wallet ask you to approve a transaction. After approving, you will see a transaction response appear in your console (make sure to have that open). It may take a few moments. With the transaction result printed, you can use the `transactionId` to look up the details of the transaction using a [block explorer](https://testnet.flowscan.org/).\\n\\n## Mutating the Blockchain\\n\\nNow that we have the profile initialized, we are going to want to mutate it some more. In this example, we'll use the same smart contract provided to change the profile name.\\n\\nTo do that, we are going to write another transaction that adds some Cadence code which lets us set the name. Everything else looks the same in the following code except for one thing: we'll subscribe to the status changes instead of waiting for it to be sealed after the mutate function returns.\\n\\nIt looks like this:\\n\\nCopy\\n\\n```\\nconst executeTransaction = async () => {\\n  const transactionId = await fcl.mutate({\\n    cadence: `\\n      import Profile from 0xProfile\\n\\n      transaction(name: String) {\\n        prepare(account: AuthAccount) {\\n          account\\n            .borrow<&Profile.Base{Profile.Owner}>(from: Profile.privatePath)!\\n            .setName(name)\\n        }\\n      }\\n    `,\\n    args: (arg, t) => [arg(\\\"Flow Developer\\\", t.String)],\\n    payer: fcl.authz,\\n    proposer: fcl.authz,\\n    authorizations: [fcl.authz],\\n    limit: 50\\n  })\\n\\n  fcl.tx(transactionId).subscribe()\\n}\\n```\\n\\nHere you can see our argument is \\\"Flow Developer\\\" and at the bottom we've called the `subscribe` method instead of `onceSealed`.\\n\\nLet's see how that works inside our whole `App.js` file. But, let's also set the statuses to our React component's state so we can see on screen what state we're in.\\n\\n> **Replace file:** `./src/App.js`\\n\\nCopy\\n\\n```\\nimport \\\"./config\\\";\\nimport { useState, useEffect } from \\\"react\\\";\\nimport * as fcl from \\\"@onflow/fcl\\\";\\n\\nfunction App() {\\n  const [user, setUser] = useState({loggedIn: null})\\n  const [name, setName] = useState('')\\n  const [transactionStatus, setTransactionStatus] = useState(null) // NEW\\n\\n  useEffect(() => fcl.currentUser.subscribe(setUser), [])\\n\\n  const sendQuery = async () => {\\n    const profile = await fcl.query({\\n      cadence: `\\n        import Profile from 0xProfile\\n\\n        pub fun main(address: Address): Profile.ReadOnly? {\\n          return Profile.read(address)\\n        }\\n      `,\\n      args: (arg, t) => [arg(user.addr, t.Address)]\\n    })\\n\\n    setName(profile?.name ?? 'No Profile')\\n  }\\n\\n  const initAccount = async () => {\\n    const transactionId = await fcl.mutate({\\n      cadence: `\\n        import Profile from 0xProfile\\n\\n        transaction {\\n          prepare(account: AuthAccount) {\\n            // Only initialize the account if it hasn't already been initialized\\n            if (!Profile.check(account.address)) {\\n              // This creates and stores the profile in the user's account\\n              account.save(<- Profile.new(), to: Profile.privatePath)\\n\\n              // This creates the public capability that lets applications read the profile's info\\n              account.link<&Profile.Base{Profile.Public}>(Profile.publicPath, target: Profile.privatePath)\\n            }\\n          }\\n        }\\n      `,\\n      payer: fcl.authz,\\n      proposer: fcl.authz,\\n      authorizations: [fcl.authz],\\n      limit: 50\\n    })\\n\\n    const transaction = await fcl.tx(transactionId).onceSealed()\\n    console.log(transaction)\\n  }\\n\\n  // NEW\\n  const executeTransaction = async () => {\\n    const transactionId = await fcl.mutate({\\n      cadence: `\\n        import Profile from 0xProfile\\n\\n        transaction(name: String) {\\n          prepare(account: AuthAccount) {\\n            account\\n              .borrow<&Profile.Base{Profile.Owner}>(from: Profile.privatePath)!\\n              .setName(name)\\n          }\\n        }\\n      `,\\n      args: (arg, t) => [arg(\\\"Flow Developer!\\\", t.String)],\\n      payer: fcl.authz,\\n      proposer: fcl.authz,\\n      authorizations: [fcl.authz],\\n      limit: 50\\n    })\\n\\n    fcl.tx(transactionId).subscribe(res => setTransactionStatus(res.status))\\n  }\\n\\n  const AuthedState = () => {\\n    return (\\n      <div>\\n        <div>Address: {user?.addr ?? \\\"No Address\\\"}</div>\\n        <div>Profile Name: {name ?? \\\"--\\\"}</div>\\n        <div>Transaction Status: {transactionStatus ?? \\\"--\\\"}</div> {/* NEW */}\\n        <button onClick={sendQuery}>Send Query</button>\\n        <button onClick={initAccount}>Init Account</button>\\n        <button onClick={executeTransaction}>Execute Transaction</button> {/* NEW */}\\n        <button onClick={fcl.unauthenticate}>Log Out</button>\\n      </div>\\n    )\\n  }\\n\\n  const UnauthenticatedState = () => {\\n    return (\\n      <div>\\n        <button onClick={fcl.logIn}>Log In</button>\\n        <button onClick={fcl.signUp}>Sign Up</button>\\n      </div>\\n    )\\n  }\\n\\n  return (\\n    <div>\\n      <h1>Flow App</h1>\\n      {user.loggedIn\\n        ? <AuthedState />\\n        : <UnauthenticatedState />\\n      }\\n    </div>\\n  )\\n}\\n\\nexport default App;\\n\\n```\\n\\nNow if you click the \\\"Execute Transaction\\\" button you'll see the statuses update next to \\\"Transaction Status.\\\" When you see \\\"4\\\" that means it's sealed! Status code meanings [can be found here](https://docs.onflow.org/fcl/reference/api/#transaction-statuses).\\n\\nThat's it! You now have a shippable Flow dapp that can auth, query, init accounts, and mutate the chain. This is just the beginning. There is so much more to know. We have a lot more resources to help you build. To dive deeper, here are a few good places for taking the next steps:\\n\\n**Cadence**\\n\\n**Other**\",\"timestamp\":1639712415,\"title\":\"Flow App Quickstart\"},\"digest\":\"kjlGkPWxFG0KESQOcg_Z6q-efgUMg3axFgie81kW3L8\",\"authorship\":{\"contributor\":\"0x0F884db463dEF4E6918105C9B1B0FD399256Dbe9\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"UVuVezOstUOBWeKu-5qoh7d5tY6THmp1VKiHk0L6-l0\\\",\\\"y\\\":\\\"GCRwaqEBxUf_qB4RQFVNndY4TByXr5YVEG1fO5QPEUo\\\"}\",\"signature\":\"YuxJoshWpH9XOAYBb5_JcGvQ76M8x1pjoir7x_Sks51Xj89QZFj1TsxLuUsCVI-wmUujAxaDfbhX5YFaBbp0BQ\",\"signingKeySignature\":\"0xaa356fcd9b601673e3e6ecd3c8526084c029ecbb77323ac58b94a223d4ad3925151247ee9db748a8bbcccee3fed0879b81f6aeb3b697c4bce09d001f177beae61c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"UVuVezOstUOBWeKu-5qoh7d5tY6THmp1VKiHk0L6-l0\\\",\\\"y\\\":\\\"GCRwaqEBxUf_qB4RQFVNndY4TByXr5YVEG1fO5QPEUo\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"kjlGkPWxFG0KESQOcg_Z6q-efgUMg3axFgie81kW3L8\"}"