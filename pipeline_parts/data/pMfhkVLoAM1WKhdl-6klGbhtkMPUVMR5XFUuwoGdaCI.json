"{\"content\":{\"body\":\"### Section 2 - Ceramic network\\n\\n![ceramic network](https://images.mirror-media.xyz/publication-images/XB3C0_-MEjRKyWVaEEghY.jfif?height=742&width=2400)\\n\\n**What is Ceramic?**\\n\\nCeramic was formerly known as 3Box, an ethereum-based user identity data protocol.\\n\\nCeramics is a license-free protocol for creating inter-modifiable, updatable files driven by autonomously identified, verifiable files that enable backup, application, database and ecosystem operability. No network protocol is required for creating files that cannot be deleted and can be used as the basis for interoperable networks.\\n\\nCeramic combines the 3 technologies underlying the program, including IPFS, libp2p, blockchain, DID and authenticated (signature/identity) data, to build complete serverless applications with dynamic, verifiable, decentralized data for developers.\\n\\nCeramic public infrastructure will allow real-time creation of signed and tamper-proof files that can be critical information review tools and public sources of reliable information. Ceramic files are stored in IPFS, encoded using IPLD, and fixed in multiple chain items. Ceramic functions without standalone but without SQL file storage, ensuring that files and data are updated without relying on database servers or trusted users for changes and content conversion.\\n\\nBecause Ceramic's common graphics are public, license-free and verifiable, it improves network interoperability across platforms, allowing the creation of any type of information and parsing of documents without any centralized services. As a result, Ceramic allows interoperability between all and platform services in the Ceramic network, and Ceramic is ideally suited for information that requires assurance of trust, platform interoperability, and multi-party consumption.\\n\\n**Why choose ceramics?**\\n\\nWhile cloud services, SaaS tools and API businesses benefit greatly, building fully functional products or services is still extremely complex, fragile and limited. Even simple applications require deploying and maintaining back ends, protecting and managing user identities and data, and orchestrating various APIs and services together. Choices made early on often prevent developers from building long-term relationships with the technology providers that vendors leverage. Making products that add value interoperate with other products and services is often difficult and unpredictable. All of this is due to unnecessary replication for each individual application and impedes infrastructure, information and access control.\\n\\n1. To address these problems of duplication, fragmentation, and insecurity, the Internet requires a flexible public infrastructure in which participants can store verifiable information that is universally discoverable and accessible across all applications. By keeping identifiers, identifier-associated data, and services in a public domain, rather than on isolated application servers, they are accessible to all participants on the network. In this model, participants directly define and control their resources, share (or not share) them with others, and bring their identities and data to the experience.\\n2. In addition to providing users with more agency and control, the model greatly simplifies the developer experience. Instead of spending effort managing data and bundling various services together, developers can focus on adding value to their products. Each application can simply query its identity to get the information and access it needs. Data can be easily shared between products without compromising privacy. Experiences can be combined in real time based on user preferences. Bilateral service sign-ups and agreements can be eliminated and replaced with frictionless payment channels for services.\\n3. All of this frees products and services from the hassle of performing non-critical functions, coordinating services and data, worrying about users' trust and responsibility, or attracting and retaining users through many frictions. Instead, developers can simply build a product that plugs into an existing ecosystem of users, data, and services that work together seamlessly. As time passes, this will lead to the development of more targeted microservices and microapplications, rather than the behemoths we see today.\\n\\n   **Ceramic Documents**\\n\\n   Ceramic provides a common graph of verifiable documents. ceramic documents are signed, append-only, tamper-proof objects, stored in IPFS, encoded using IPLDs and anchored in one or more blockchains. Due to its hybrid design based on IPFS / IPLD and various blockchains, Ceramic's document graph is interoperable, scalable, permissionless and low cost (varies depending on the blockchain anchor service).\\n\\n   Ceramic documents are flexible primitives that can be modeled to represent many things, but each document must conform to a specific document type supported by the protocol. doctypes specify rules to control what is a valid update to a document, such as signatures and state transitions. This allows Ceramic nodes to verify the state of a given document in a decentralized manner.\\n\\n   Most production systems and applications using Ceramic will combine these simple primitives (DIDs, account links and tiles) to enjoy simplicity, interoperability and scalability only when identities, resources and services are unbundled from wallets or application silos.\\n\\n   Ceramic currently supports three standard document types: 3IDs, Account Links, and Tile.\\n\\n   **3ID identity**\\n\\n   The first and most widely used DID method on Ceramic is 3ID. over 15,000 3IDs have been used in production. other DID methods conforming to the W3C DID specification can be added to the network as other document types.\\n\\n   Decentralized Identifiers (DIDs) are globally unique identities used to sign documents on the Ceramic network and also to interact with arbitrary off-chain services and data. More specifically, they are abstract, key-independent interfaces for uniquely identifying entities, interoperably signing and encrypting information, authorizing authentication/access control to services, and mapping storage to other resources. ceramic makes no assumptions about the type of entity represented by a DID, so they can be users, organizations, applications, services, devices, etc. DIDs can be controlled by DIDs can be controlled by one or more private keys, thus providing flexibility and interoperability across wallets and platforms.\\n\\n   **Account Links**\\n\\n   Account Link is the second document type supported by Ceramic. Account links are verifiable public mappings that allow a DID to prove that it has a different public cryptographic identity that can also be signed, such as a public key, smart contract or other DID.\\n\\n   **Tile**\\n\\n   Tile is the third document type supported by Ceramic, and is the most general form of document that can be used to represent almost any type of information. tiles is a way to implement verifiable statements through one or more DIDs. tiles can be used as standalone objects, or can reference other blocks. This allows combinations between different blocks to create verifiable, variable information relationship graphs.\\n\\n   **Ceramic Smart Documents**\\n\\n   In Ceramic, all content is stored in Smart Documents, which are append-only IPFS logs where each commit (update) is signed by a Decentralized Identifier (DID) for verification and then anchored in the blockchain for consensus. Each smart document essentially acts as its own independent document chain (document blockchain), and the following are some of the key features of smart documents.\\n   1. Variable content: Store information in a collection of variable documents, such as your favorite NoSQL document database.\\n   2. Immutable identifier: Each document has a globally unique and permanent identifier called DocID, which will never change, no matter how many updates are made to the document.\\n   3. verifiable signature: each update to a document must be signed by its owner's DID to provide verifiability of its content.\\n   4. Architecture enforced content: Documents can have an architecture that will be enforced by the protocol. This allows data integrity and simple cross-platform interoperability.\\n   5. Strict version control: Each update made to a document is anchored in the blockchain, so its commits follow a strict order. This allows the protocol to guarantee the state of the document at the time of each commit and allows its content to always be auditable and trusted.\\n   6. Programmable Logic: Define custom rules for state transitions to force who, how, and when to update a document without a centralized server. Rules can react to direct events (e.g., signatures from the owner) or indirect events (e.g., an update in another document).\\n   7. Configurable persistence: Nodes can back up documents to any centralized or decentralized data storage platform.\",\"timestamp\":1638236673,\"title\":\"Blockchain technology is being integrated into the real world -Ceramic network(Tools section)\"},\"digest\":\"BulZu6EnR1WTexJe3IsUl8DZ5ze0HSgLbuNDuVSOZF8\",\"authorship\":{\"contributor\":\"0xd1a5b91957530E1B3e9cfac1543467C60c352F69\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"84QfpbrBErywu4VUwkhVnLMKxsQvNEk6fVNZD3TTOVo\\\",\\\"y\\\":\\\"3QFG0MHwsUCLQGS8I5rvHVrqQdd7tQIsMj5M1EzaWds\\\"}\",\"signature\":\"fLVDKp4h2KbUkwxzOAykppzXMSLdE1JOhdCGLZQiBbH3hAc1X6-QKfzwaG_z7_DagkaZ-CpTRGBVEDnlqP0sVA\",\"signingKeySignature\":\"0xe73e55f4c51960d1e6964bf89f20b018b6718a89cfd60952fa8838677efa097940b4d22f4dda023845e25068b14304c76bff52ed0e69f58f32f0b0fffaba08511c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"84QfpbrBErywu4VUwkhVnLMKxsQvNEk6fVNZD3TTOVo\\\",\\\"y\\\":\\\"3QFG0MHwsUCLQGS8I5rvHVrqQdd7tQIsMj5M1EzaWds\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"y0BnRaJzMVGVeQzFPINFOhp34eF8gc-uEC069OdYx1I\"}"