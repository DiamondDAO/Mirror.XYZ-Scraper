"{\"content\":{\"body\":\"本文聊聊 Metric、Logging 和 Tracing 的数据采集，Profilling 暂略。\\n\\nOpenTelemetry 提供了统一的数据采集方案，鉴于 OpenTelemetry 是未来的趋势，这里先介绍下它的方案，然后再介绍我们当前采用的方案。\\n\\nOpenTelemetry 提供了一个新的组件：[Collector](https://opentelemetry.io/docs/collector/)，Collector 负责采集、处理和转发数据。\\n\\n它的架构如下：\\n\\n![Collector 架构](https://images.mirror-media.xyz/publication-images/UR-9FO_FXE8pL614EJyUH.png?height=648&width=1578)\\n\\nCollector 的设计包含三个层级，分别是 Receivers、Processors 和 Exporters。\\n\\n1. Receivers 负责采集和接收数据，同时支持 Push 和 Pull。Metric、Logging、Tracing 可以使用标准的数据格式 OTLP（OpenTelemetry Protocol） Push 数据，也可以使用 Prometheus 的抓取配置去 Pull 数据，另外还支持采集日志，[filelogreceiver](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver) 是一个采集日志的实现。\\n2. Processors 负责处理数据，支持 Batch、Filter 和 Attributes 等功能，Attributes 是指为数据增加 Key/Value 对。另外，我们自己实现 Processor 插件为数据增加资源属性，这里有一个开源的插件：[resourcedetectionprocessor](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourcedetectionprocessor)\\n3. Exporters  \\b负责转发数据，同样支持很多种数据格式，包括 OTLP、Prometheus 和 Jaeger 等。\\n\\nCollector 具有良好的可组合性，任何一个层级都可以自己实现插件，完成需要的功能。\\n\\n另外，Collector 的部署方式有几种，可以一个 Pod 部署一个（Sidecar）、可以一个 Node 部署一个，也可以作为一个 Service 部署。\\n\\n![Collector 部署形式](https://images.mirror-media.xyz/publication-images/S-BK-1rBbH9YCaUe7cU1I.png?height=642&width=1540)\\n\\n有了 Collector 这个基础，我们看一下 OpenTelemetry 数据采集的终态架构，也就是在未来 OpenTelemetry 最终的数据采集形态。\\n\\n![未来 OpenTelemetry 终态架构](https://images.mirror-media.xyz/publication-images/y7gq_ftecB3Ih-CBTPxIJ.png?height=862&width=1714)\\n\\n相对于传统架构 Metric、Logging、Tracing 都是单独产生并收集，OpenTelemetry 最明显的特点是统一，统一使用 OpenTelemetry SDK 生成数据（OTLP 标准格式），统一使用 Push 方式发送给 Collector。至于后端实现，对接我们的 Cortex、Loki、Tempo 即可。\\n\\n好处有：\\n\\n1. 应用使用一个 SDK 就可以解决所有的数据采集，依赖更少、资源消耗也更小。在传统架构中，Metric 使用 [Prometheus Client SDK](https://github.com/prometheus/client_golang)，Logging 的 SDK 就更多了（比如 Log4j），Tracing 中 Jaeger SDK 倒是已经使用了 [OpenTelemetry SDK](https://github.com/open-telemetry/opentelemetry-go)。\\n2. 一个采集客户端，部署和运维代价更低。传统架构，采集日志\\n3. 数据模型统一，数据关联更容易\",\"timestamp\":1642675659,\"title\":\"聊聊可观测性4 - 数据采集\"},\"digest\":\"A5JkkiLMSIRevExB8TJKJi2ua-r5jnNMMp7-vw4Nk9Y\",\"authorship\":{\"contributor\":\"0xFd007bb46C47D8600C139E34Df9DfceC86F0B319\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"cA_5ftBDnUBuiAH-GuHrEiM2kPAbcgpYmr8vBMpwWsk\\\",\\\"y\\\":\\\"nOrzBQxMMeJJkeTF5e_KOLVrPQ3s9VupwUOy6Yz0SCI\\\"}\",\"signature\":\"9qjG3TdofIm3DSYdkwlT-oZWtTgoJvrtaAgTrxG7ongVzDGSRx8vguJgmeEznLHeCOogWajdjGOij_7MAy4sMQ\",\"signingKeySignature\":\"0x51379cedaf70697462bbb5746bc22b003bbe7406fc11900b8bc6ad9ac0d270da47f9555c98a7112def16ee347137f39ba4c9a77ce37da3c101c2d846da7bbed91c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"cA_5ftBDnUBuiAH-GuHrEiM2kPAbcgpYmr8vBMpwWsk\\\",\\\"y\\\":\\\"nOrzBQxMMeJJkeTF5e_KOLVrPQ3s9VupwUOy6Yz0SCI\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"F5r7ymw9F0CJxzIgrExN8g-TLRMc1j9WTGwCqBt6y60\"}"