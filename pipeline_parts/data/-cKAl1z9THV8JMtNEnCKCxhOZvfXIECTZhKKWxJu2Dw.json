"{\"content\":{\"body\":\"在上一课中，我们已经了解了Python语言并安装了运行Python程序所需的环境，相信大家已经迫不及待的想开始自己的Python编程之旅了。首先我们来看看应该在哪里编写我们的Python程序。\\n\\n编写代码的工具\\n交互式环境\\n我们打开Windows的“命令提示符”工具，输入命令python然后回车就可以进入到Python的交互式环境中。所谓交互式环境，就是我们输入一行代码回车，代码马上会被执行，如果代码有产出结果，那么结果会被显示在窗口中。例如：\\n\\nPython 3.7.6\\nType \\\"help\\\", \\\"copyright\\\", \\\"credits\\\" or \\\"license\\\" for more information.\\n\\n> > > 2 \\\\* 3\\n> > > 6\\n> > > 2 + 3\\n> > > 5\\n> > > 提示：使用macOS系统的用户需要打开“终端”工具，输入python3进入交互式环境。\\n\\n如果希望退出交互式环境，可以在交互式环境中输入quit()，如下所示。\\n\\n> > > quit()\\n> > > 更好的交互式环境 - IPython\\n> > > Python默认的交互式环境用户体验并不怎么好，我们可以用IPython来替换掉它，因为IPython提供了更为强大的编辑和交互功能。我们可以使用Python的包管理工具pip来安装IPython，如下所示。\\n\\npip install ipython\\n温馨提示：在使用上面的命令安装IPython之前，可以先通过pip config set global.index-url [https://pypi.doubanio.com/simple命令将pip的下载源修改为国内的豆瓣网，否则下载安装的过程可能会非常的缓慢。](https://pypi.doubanio.com/simple%E5%91%BD%E4%BB%A4%E5%B0%86pip%E7%9A%84%E4%B8%8B%E8%BD%BD%E6%BA%90%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E7%9A%84%E8%B1%86%E7%93%A3%E7%BD%91%EF%BC%8C%E5%90%A6%E5%88%99%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E7%9A%84%E8%BF%87%E7%A8%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E9%9D%9E%E5%B8%B8%E7%9A%84%E7%BC%93%E6%85%A2%E3%80%82)\\n\\n可以使用下面的命令启动IPython，进入交互式环境。\\n\\nipython\\n文本编辑器 - Visual Studio Code\\nVisual Studio Code（通常简称为VSCode）是一个由微软开发能够在Windows、 Linux和macOS等操作系统上运行的代码编辑神器。它支持语法高亮、自动补全、多点编辑、运行调试等一系列便捷功能，而且能够支持多种编程语言。如果大家要选择一款高级文本编辑工具，强烈建议使用VSCode。关于VSCode的下载、安装和使用，推荐大家阅读一篇名为《VScode安装使用》的文章。\\n\\n集成开发环境 - PyCharm\\n如果用Python开发商业项目，我们推荐大家使用更为专业的工具PyCharm。PyCharm是由捷克一家名为JetBrains的公司开发的用于Python项目开发的集成开发环境（IDE)。所谓集成开发环境，通常是指工具中提供了编写代码、运行代码、调试代码、分析代码、版本控制等一系列功能，因此特别适合商业项目的开发。在JetBrains的官方网站上提供了PyCharm的下载链接，其中社区版（Community）是免费的但功能相对弱小（其实已经足够强大了），专业版（Professional）功能非常强大，但需要按年或月付费使用，新用户可以试用30天时间。\\n\\n运行PyCharm，可以看到如下图所示的欢迎界面，可以选择“New Project”来创建一个新的项目。\\n\\n创建项目的时候需要指定项目的路径并创建运行项目的”虚拟环境“，如下图所示。\\n\\n项目创建好以后会出现如下图所示的画面，我们可以通过在项目文件夹上点击鼠标右键，选择“New”菜单下的“Python File”来创建一个Python文件，创建好的Python文件会自动打开进入可编辑的状态。\\n\\nimage-20210720133621079\\n\\n写好代码后，可以在编辑代码的窗口点击鼠标右键，选择“Run”菜单项来运行代码，下面的“Run”窗口会显示代码的执行结果，如下图所示。\\n\\nimage-20210720134039848\\n\\nPyCharm常用的快捷键如下表所示，我们也可以在“File”菜单的“Settings”中定制PyCharm的快捷键（macOS系统是在“PyCharm”菜单的“Preferences”中对快捷键进行设置）。\\n\\n表1. PyCharm常用快捷键。\\n\\n快捷键\\t作用\\nctrl + j\\t显示可用的代码模板\\nctrl + b\\t查看函数、类、方法的定义\\nctrl + alt + l\\t格式化代码\\nalt + enter\\t万能代码修复快捷键\\nctrl + /\\t注释/反注释代码\\nshift + shift\\t万能搜索快捷键\\nctrl + d / ctrl + y\\t复制/删除一行代码\\nctrl + shift + - / ctrl + shift + +\\t折叠/展开所有代码\\nF2\\t快速定位到错误代码\\nctrl + alt + F7\\t查看哪些地方用到了指定的函数、类、方法\\n说明：使用macOS系统，可以将上面的ctrl键换成command键，在macOS系统上，可以使用ctrl + space组合键来获得万能提示，在Windows系统上不能使用该快捷键，因为它跟Windows默认的切换输入法的快捷键是冲突的，需要重新设置。\\n\\nhello, world\\n按照行业惯例，我们学习任何一门编程语言写的第一个程序都是输出hello, world，因为这段代码是伟大的丹尼斯·里奇（C语言之父，和肯·汤普森一起开发了Unix操作系统）和布莱恩·柯尼汉（awk语言的发明者）在他们的不朽著作The C Programming Language中写的第一段代码。\\n\\nprint('hello, world')\\n运行程序\\n如果不使用PyCharm这样的集成开发环境，[我们可以将上面的代码命名为hello.py](http://xn--hello-4h1hgl58bqa3eu34fnkap2cs41d5wukz8edkfg58n.py)，对于Windows操作系统，可以在你保存代码的目录下先按住键盘上的shift键再点击鼠标右键，这时候鼠标右键菜单中会出现“命令提示符”选项，点击该选项就可以打开“命令提示符”工具，我们输入下面的命令。\\n\\npython [hello.py](http://hello.py)\\n提醒：我们也可以在任意位置打开“命令提示符”，然后将需要执行的Python代码通过拖拽的方式拖入到“命令提示符”中，这样相当于指定了文件的绝对路径来运行该文件中的Python代码。再次提醒，macOS系统要通过python3命令来运行该程序。\\n\\n你可以尝试将上面程序单引号中的hello, world换成其他内容；你也可以尝试着多写几个这样的语句，看看会运行出怎样的结果。需要提醒大家，上面代码中的print('hello, world')就是一条完整的语句，我们用Python写程序，最好每一行代码中只有一条语句。虽然使用;分隔符可以将多个语句写在一行代码中，但是最好不要这样做，因为代码会变得非常难看。\\n\\n注释你的代码\\n注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性。当然，我们也可以将源代码中暂时不需要运行的代码段通过注释来去掉，这样当你需要重新使用这些代码的时候，去掉注释符号就可以了。简单的说，注释会让代码更容易看懂但不会影响程序的执行结果。\\n\\nPython中有两种形式的注释：\\n\\n单行注释：以#和空格开头，可以注释掉从#开始后面一整行的内容。\\n多行注释：三个引号开头，三个引号结尾，通常用于添加多行说明性内容。\\n\\\"\\\"\\\"\\n第一个Python程序 - hello, world\\n\\nVersion: 0.1\\nAuthor: 骆昊\\n\\\"\\\"\\\"\\n\\n# print('hello, world')\\n\\nprint(\\\"你好，世界！\\\")\\n总结\\n到这里，我们已经把第一个Python程序运行起来了，是不是很有成就感？只要你坚持学习下去，再过一段时间，我们就可以用Python制作小游戏、编写爬虫程序、完成办公自动化操作等。写程序本身就是一件很酷的事情，在未来编程就像英语一样，对很多人来说或都是必须要掌握的技能。\",\"timestamp\":1635850034,\"title\":\"第02课：第一个Python程序.md\"},\"digest\":\"2RlONr2pbIb-T2tCliwX92f5Wu_Wxta98Xsq6ektgAI\",\"authorship\":{\"contributor\":\"0x08C7CB6ebBe09C0365407fD4428aD38D1dD7D4a7\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"kdgGo-Ox4AlKtsAhbYa_qbK2tQvLIZ5_lvbysJz6Jjc\\\",\\\"y\\\":\\\"MvBxcM4LquW1_w7YfedD_46ShanYKifwXobNHNzxmw0\\\"}\",\"signature\":\"wZXnBU3aLrSlG9yTnXGuIEbvpHML8Vw_CRVT_irHEkYK2TSt16CZzdt6e1UMjUypcEA0OvF5lwPw8Af2NdkFgA\",\"signingKeySignature\":\"0x21613e039190448d7d9eba5ededef284509aae55b48ca5dbe7204bf9d6cad1ee7e0ac2c08f57f6a07ec62d8a2b0f24bc6914fc2c3a12b8ad53f29817a10e2b3a1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"kdgGo-Ox4AlKtsAhbYa_qbK2tQvLIZ5_lvbysJz6Jjc\\\",\\\"y\\\":\\\"MvBxcM4LquW1_w7YfedD_46ShanYKifwXobNHNzxmw0\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"2RlONr2pbIb-T2tCliwX92f5Wu_Wxta98Xsq6ektgAI\"}"