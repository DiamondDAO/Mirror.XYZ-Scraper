"{\"content\":{\"body\":\"Recently I worked on a search component that would communicate with an API that uses ElasticSearch for indexing. It's common to have a search input, that as you type will auto query and update the list on the frontend.\\n\\nSo I used a text input, and inside the \\\\`onChange\\\\` event would pass the \\\\`event.target.value\\\\` as a parameter to the API url.\\n\\nIt would look something like this (abbreviated for readability):\\n\\n```\\nconst searchQueryFunction = (queryText) => {\\n\\n\\tconst res = await fetch(`/products.json?_page=${page}&_limit=10&_q=${queryText}&_total=50`, {\\n    method: 'GET',\\n    headers: {\\n     'Access-Control-Allow-Origin': '*'\\n    }\\n  })\\n\\n  const responseData = await res.json()\\n\\n\\tsetItems({items: responseData.data})\\n}\\n\\n<input type=\\\"text\\\" placeholder=\\\"Search...\\\" onChange=((e) => searchQueryFunction(e.target.value)) />\\n```\\n\\nBut I quickly found out how taxing this was for the browser and server. As I would search for something like \\\"Minivan\\\", it would query each letter. This is where a debouncer comes in. There are libraries like \\\\`lodash\\\\` that offer a function, but wanted to keep my \\\\`package.json\\\\` light.\\n\\nA debouncer is just a fancy \\\\`setTimeout\\\\`, so I created a \\\\`Debouncer\\\\` class that takes 2 parameters. A function and time.\\n\\nIt looks like this:\\n\\n```\\nexport default class Debouncer {\\n  timeout: null | ReturnType<typeof setTimeout>\\n  n: number\\n  func: Function\\n\\n  constructor(func, n) {\\n    this.timeout = null\\n    this.n = n || 500\\n    this.func = func\\n  }\\n\\n  execute = (e) => {\\n    this.cancel()\\n    this.timeout = setTimeout(() => {\\n      this.func(e)\\n    }, this.n)\\n  }\\n\\n  cancel = () => {\\n    if (this.timeout) clearTimeout(this.timeout)\\n  }\\n}\\n```\\n\\nInside the React component, initialize the Debouncer and pass it the `searchQueryFunction`\\n\\n```jsx\\nconst debouncer = new Debouncer((e) => searchQueryFunction(e))\\n```\\n\\nThen create a new function that will execute the `searchQueryFunction` through the debouncer\\n\\n```jsx\\nconst execDebouncer = (e) => debouncer.execute(e)\\n```\\n\\nNow inside the input `onChange` event, well replace calling the `searchQueryFunction` directly and use the new `execDebouncer`\\n\\n```jsx\\n<input type=\\\"text\\\" onChange={(e) => execDebouncer(e)} />\\n```\\n\\nBut.. you'll notice some errors in the log:\\n\\n> \\\"This synthetic event is reused for performance reasons. If you're seeing this, you're accessing the method currentTarget on a released/nullified synthetic event. This is a no-op function. If you must keep the original synthetic event around, use event.persist()\\\"\\n\\nThis is because the event is lost, while the function is being debounced for 500ms. To fix this, simply add `e.persist()` inside the `execDebouncer` function\\n\\n```jsx\\nconst execDebouncer = (e) => {\\n  e.persist()\\n  return debouncer.execute(e)\\n}\\n```\\n\\nI put together a little example, with an included mock api:\\n\\n[https://codesandbox.io/embed/pensive-swartz-cvsx1](https://codesandbox.io/embed/pensive-swartz-cvsx1)\\n\\n\",\"timestamp\":1637247218,\"title\":\"Debounce and persist event targeting in react\"},\"digest\":\"JwxrUN3QtRfb1-JTaj_pxyq_oM1jwSXcRnqLRvEVmag\",\"authorship\":{\"contributor\":\"0x60D959C97833F8791260190A085d2dcF6d5Ab9D0\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"lbAY9RakY7AvNAKuKYZEJ5VSZC7v8FXKm3quqWIbGPw\\\",\\\"y\\\":\\\"tXcCZ3PEK9HQDZVzLSjAni65gpYmdmFnaf7Ln-qXRqw\\\"}\",\"signature\":\"rA8c7otfh9UN8sf6g6YdD8M5j9cAkNie4UwM4BeBPRMs6Di6xI6rebdOAuwlYra0XYKVaS3t-cnEjEYnRPsSBQ\",\"signingKeySignature\":\"0x10e115ca0aefd83b6f8a822a4e916084d18ba63cecadbf631688f3157f29a6ea099321afaa4a3bccf7c30e453d8a03a6d9986ad8fb4c8df7b8ed967c2667fae91c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"lbAY9RakY7AvNAKuKYZEJ5VSZC7v8FXKm3quqWIbGPw\\\",\\\"y\\\":\\\"tXcCZ3PEK9HQDZVzLSjAni65gpYmdmFnaf7Ln-qXRqw\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"JRPSfXe1Q38l1teeWNTmrXZZv8tuob0dvS7KbYNb-as\"}"