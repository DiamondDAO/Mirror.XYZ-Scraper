"{\"content\":{\"body\":\"![](https://images.mirror-media.xyz/publication-images/Q3ix379JJMuB-ZB4QgWBl.png?height=935&width=1457&&&&&&&&&&&&&&&&&&size=large)\\n\\nBack in October 2018 I started a note with the title \\\"The Web is Dead\\\" while being part of the startup studio called [eFounders](https://www.efounders.com/). I was working on what is now [Multis](https://multis.co/) (crypto stuff) and also spending time surrounded by other startups building products on the web. Serendipity was ubiquitous. Especially when I'd go for a coffee walk around the 9th arrondissement with my wordsmith friend Jonathan. I probably started the note after an intense debate about Intercom (more on that later).\\n\\nThis article comes after 10+ years of working for the world wide web, from web1 to web2.0 to web3. It took me 3 years to connect the dots, after building decentralized applications and also, surprisingly, chatbots. I hope you find something interesting in it (or actually not, because contrarian is better).\\n\\n([tl;dr](https://www.loom.com/share/7aa975361a6a4e5b92df88fae31ca751))\\n\\n\\n---\\n\\n# üò© Yet another form\\n\\nHow many times have you opened a tab and performed the exact same steps you performed one minute, one hour or one day ago? Your honest answer: all the time. You just went to Airbnb and entered the same city, the same dates as you did yesterday... or that Google search that you do again and again... or this floor price on [OpenSea](https://opensea.io/collection/autoglyphs) you keep checking... This surely feels sub-optimal.\\n\\nBut how much more frustrating is it **having to learn to navigate every new website you visit**. You'll say that's the beauty of the diversity of the web. But the reality is that it creates lots of inefficiencies. The proof, you ask? Websites keep copying each other in an ironical attempt at being ‚Äúintuitive‚Äù.\\n\\nThere are too many things on a page, too many buttons, links and most of all too much real estate: the surface is extremely large for a poor little cursor or eyeball. Adding on top that the sequence of the actions matters: ‚Äúfirst this, then that and -oh- a submenu appears‚Äù.\\n\\nUsers come with intents, they want to do something. The way to collect these intents is with the ‚Äúform primitive‚Äù: that meta-category encompassing elements like inputs, buttons, checkboxes, links which allow users to send data to a web application runtime in order to change the state of the world (ex: save a record in database, navigate to a new page).\\n\\nNow, I put it to you that **since the web was created, nothing has changed**. We still create forms, and we put them on the real estate of a web page.\\n\\nAs a software engineer, I started my career with vanilla JavaScript, then jQuery, then Angular, then [React](https://reactjs.org/) and now with [re-frame](https://day8.github.io/re-frame/re-frame/) (ClojureScript). Don‚Äôt get me wrong, it‚Äôs SO much better now. But I feel **we reached a local maxima**. Tools have improved, not the outcome. We‚Äôre still in the [tar pit](http://curtclifton.net/papers/MoseleyMarks06a.pdf).\\n\\nAnd I‚Äôm not even mentioning this bloody CSS which I give the honour of being the worst technology of our era (after bluetooth of course). While game developers are still laughing at us poor web people, we learned that the best way to write CSS is not to write CSS.\\n\\nAnyhow. Why does it feel like a local maxima? I see two reasons:\\n\\n1. **Forms are dynamic** (ie: type, submit, load, reset, repeat actions) but they live on static web pages. That creates a dissonance, the same way [ensemble probability reasoning is not applicable to time probability](https://twitter.com/nntaleb/status/730836349004091392). In other words, we‚Äôre trying to put square pegs in round holes.\\n2. There are no incentives to change the status quo. Blame the experts.\\n\\n# üßë‚Äçüíª Experts sell expertise\\n\\nAsk any startups around you. Ask them if they ever had to reduce the number of software developers in their team. My guess is that unless they were dying, they hadn't. Actually, even if they‚Äôd been dying they would probably still try to keep the developers in the hope to get acqui-hired. Or, vice versa, ask if they are not always hiring for them.\\n\\nThe explanation is straightforward: **developers create technical debt, which can be only reduced by more developers**. Or to put it differently: every new line of code is a liability not an asset.\\n\\nDevelopers usually dislike decisions to cut corners or to ship an half-baked feature for the business. But deep down, consciously or not, they know they're creating more future demand for their skills.\\n\\nIt's an absolute seller market. Non-developer people are getting very aware of that, joining bootcamps or training themselves to land one of these so-called tech job paying way better money. This concerns mostly remote-friendly tech companies. Which means all tech companies in 2021.\\n\\n**And the more developers, the more technical debt is created, the more companies want developers**. Amusingly, these developers are attributed a very particular status of \\\"tyrannical slave\\\": usually at the bottom of the chain, but with immense power.\\n\\nOn top of that, users have become more demanding as we are in \\\"the decade of design\\\". It's no longer enough to have a MVP (minimum viable product) you need a MLP (minimum lovable product). And love is never cheap.\\n\\nSo companies sprinkle designers on top. Refining web pages, conducting user research making sure users can find the right form on the right screen at the right moment. And, of course tweaking the CSS *ad nauseam*.\\n\\nThe reality is that **most companies can‚Äôt afford to hire these web engineers**, and designers, and mobile developers, and product designers and art directors (and the infamous devops managing the ever increasing AWS complexity debt)...\\n\\nWhat do they do? They use Intercom (or similar services ‚Äî they are legion).\\n\\n# üï≥ The Intercom fallacy\\n\\nYour first encounter with [Intercom](https://www.intercom.com/) (or similar) was probably with one of these annoying chat bubbles appearing at the bottom right of a website. **Getting in the way of what you were trying to achieve**.\\n\\nWhy businesses resort to these services? They have a problem: their website is not evolving or adapting fast enough, and users are getting lost, ending up not buying their product or being frustrated. Since these companies don't have the means to fix that with more developers and designers, they \\\"patch\\\" it with one of these chat assistant. The rationale being: we can fix whatever problems our users are having by holding their hand while they navigate our poorly-designed website.\\n\\nPeople familiar with regular expressions will recognize the famous fallacy:\\n\\n> Some people, when confronted with¬†a problem,¬†think ‚ÄúI know, I'll use regular expressions.‚Äù Now they have two problems.\\n\\n**Businesses still have a malfunctioning website AND now they have to maintain and pay for this expensive new tool**. A tool which is, by the way, not much more than a glorified, VC-funded version of Microsoft Word‚Äôs Clippy!\\n\\nIntercom set out to make internet business more personal. But they stopped halfway. What they truly achieved is to make their business successful, and create a cult around their product vision: back in 2018, being against Intercom was almost as contrarian as being pro crypto.\\n\\n> No results found for **‚Äúintercom is overrated‚Äù.**‚Äî Google Search, circa 2018\\n\\nLet's not be too harsh on them though, they put me on the right path when I asked myself: why not having an empty page with a full screen intercom? I thought this would be at least less confusing for the user.\\n\\nThat‚Äôll lead us to the main idea of this article, but before going there let's take a detour through crypto land.\\n\\n![our INTERLUDE](https://images.mirror-media.xyz/publication-images/i9pxQrei01Vg05tRX1LHW.gif)\\n\\n# ‚õì We call it layer 2\\n\\nThere are many similarities between crypto and the early days of the web. Take the [Ethereum](https://ethereum.org/en/) blockchain for instance, developers can come and deploy any application on it, which will be represented as a set of what we call smart contracts. The same way anyone can publish a website on the world wide web.\\n\\nBut what's interesting with crypto is that everything goes faster ‚Äî probably because money is a better incentive than information. And **crypto already reached this local maxima that we mentioned earlier for the web**. The systems, the platforms have to evolve. And they are evolving.\\n\\nWe have now all these [layer 2 protocols](https://l2beat.com/). Basically **offering developers a way to build on higher level abstractions, avoiding the hurdles of basic layers**: high transaction fees and slow transaction times for instance. Suddenly it's another paradigm shift, unlocking entirely novel usage. Let‚Äôs take the obvious example of buying and selling [GodsUnchained](https://godsunchained.com/) NFT cards for very low amounts ([true micro transactions](https://tokentrove.com/rankings)) without any fee or delay.\\n\\nIn general we want robust abstractions on top of each other ‚Äî that's how we go from the transistors on a chip to streaming videos on a screen. Unfortunately for the web we've been stuck with leaky abstractions. And, no, the plethora of new no-code apps are not abstractions: they are better tools, but the outcome is the same, targeting this dissonant web format that we want to avoid.\\n\\nWell, truth be told, we almost had layer 2 for web2.0 applications... but they lived inside the walled-gardens of vendor lock-ins.\\n\\n# ü§ñ Chatbots return\\n\\nChatbots were all the rage a few years ago, some even predicting they would replace all the apps in some segment like e-commerce. It didn't happen. **Chatbots were often annoying and probably tried to do too much** (and in the end did nothing). I made this mistake, but this was not entirely at a loss.\\n\\nIn 2017 I built a [Slack bot](https://www.producthunt.com/posts/plop-2) to help coworkers know each other better in a playful manner (it managed to get a lot of users and made me reach the front page of Hacker News for the first time in my life). In 2018 I built a bot for Facebook messenger to let users create their digital movie libraries (no fame for this one unfortunately). Both times building came with challenges since not so many people were building real products for these platforms. But with my different collaborators at the time we acknowledged the new and powerful capabilities brought by this chatbot format:\\n\\n* A login system is already in place\\n* You can monitor the activity accurately\\n* You can talk to users for real\\n* You‚Äôre cross platform\\n* You have a notification system available\\n* You get to provide the best on-boarding experience possible\\n* And overall you‚Äôre more productive as a developer because of the constraints of the conversation\\n\\nIt‚Äôs not all rosy though. Vendor lock-in sucks. You end up stuck and limited by Facebook, Salesforce or Amazon. Good luck adding crypto payments in your system within these walled gardens. So we don't want that‚Ä¶ **We want the benefits of the chatbots on the web**‚Ä¶ Or the web in a conversational format.\\n\\n# üí° The main idea\\n\\nIt's time to unveil the main idea. Going back to the intercom fallacy: **what if a website is a full page conversation, but with web components inside messages?** Or let's look at this image explaining the \\\"inversion\\\".\\n\\n![The \\\"inversion\\\" üôÉ](https://images.mirror-media.xyz/publication-images/zIXuW-2L1w_QgC_RVQlEx.png?height=1508&width=1039)\\n\\nThe components usually spreading over the real estate of a traditional website, are now moved inside a conversation. This conversation represents the entire history of the interaction with the user: components can be duplicated and in different states. Only scrolling up is required to resume interacting with them.\\n\\n**This inversion makes building a web application effectively at the component level.** Components in isolation, a key practice already well understood by players like [Storybook](https://storybook.js.org/) or even more recently Next.js and their [url imports](https://nextjs.org/docs/api-reference/next.config.js/url-imports) (thanks Mike!).\\n\\nBut make no mistake, we are not using Intercom, or any closed-source vendors. We **keep the open web**, and simply turn the interactions into an (almost) invisible conversation with the runtime of an application.\\n\\nThis probably doesn't make sense just yet. But please don't give up, a case study is coming!\\n\\nI just need to touch on support before that.\\n\\n# üêï‚Äçü¶∫ Support everywhere\\n\\nSupport is always an afterthought. Companies build and release applications to later realize users are not doing what they are supposed to do. How come, with all that user research they conducted?!\\n\\n**So much energy and resources are wasted on support**. Companies resort to using tracking tools like FullStory to actually see what users are doing. And still, when debugging a specific situation for a user, it's almost impossible to get the full context after the fact. The never ending list of debug tools or log systems are just [INDIRECTIONS](https://en.wikipedia.org/wiki/Indirection) to the real application.\\n\\n**Support has to be built-in, omnipresent, not an afterthought**. And if the user is interacting through a conversation with the application, support is just about adding a support agent in that conversation. Both sides would have access to the same information and the exact history of interactions with the components. No [asymmetry](https://www.readthistwice.com/book/skin-in-the-game)!\\n\\nThis \\\"support everywhere\\\" came as a side effect, but it's the thing that got me excited the most, especially after being so frustrated with existing support tools which end up running in parallel.\\n\\nWe will see that support can even get better within this conversational format for the web.\\n\\n# üßá Case study: WAWA\\n\\nI wanted to try this main idea on a minimal but real use case. Because I can never wander too far away from web3, I picked the \\\"simplest crypto wallet\\\" idea: the product is called [WAWA](https://wawa.teawaterwire.dev/) and lets you send, receive and check your crypto balance.\\n\\n[https://wawa.teawaterwire.dev/](https://wawa.teawaterwire.dev/)\\n\\nThe design is rough, as my full-stack capabilities stop at the \\\"make it pretty\\\" step of the UI... but here's a screencast showing the features of WAWA, and also the aforementioned built-in support system.\\n\\n[https://www.loom.com/embed/7aa975361a6a4e5b92df88fae31ca751?display=iframe](https://www.loom.com/embed/7aa975361a6a4e5b92df88fae31ca751?display=iframe)\\n\\n### Transcript\\n\\n* Password-less signup\\n* Native onboarding\\n* Checking balance of the wallet\\n* Getting address of the wallet, and funding it from a MetaMask\\n* Chatting with support\\n* Support sending text and a component directly\\n* Sending ETH to a counterparty\\n* Stopping chat with support\\n* Checking updated balance from first component in the history\\n\\n### Under the hood\\n\\n* The send, receive and balance components are React components, that are supposed to be built in isolation (a la Storybook).\\n* The global state is handled with re-frame (ClojureScript), but components can have local state as well, if deemed not important enough to be saved globally.\\n* **The chat system is based on the [Matrix](https://matrix.org/) protocol**: it is a key component of our conversation-first architecture. (You could have guessed it from the screencast with the support agent using the Element Matrix client).\\n* Communicating with the server means sending a message that will be interpreted by the \\\"user account\\\" of the application present in the conversation (that can also be joined by the support agent)\\n* There is free text input, necessary for support, but also for notes to self. The vision is to have something like Mac Spotlight, where you type and the actions appear depending of context (tools like CommandBar are providing this experience, but they're unfortunately following the Intercom fallacy).\\n\\n# üîÆ web4·µó ∞\\n\\nMost of the web now is in 2d: top, right, bottom, left. I'll accept that we have some 3d as well: x, y, z. We interact with these interfaces with our intents and our touchscreens or pointers. The arrow of time is casually showing up when we order our actions, or when we use the infamous Ctrl+Z action: rewinding time locally or more as a debug-only mode for trying things out without keeping them.\\n\\n**What if time became a new dimension**, letting us navigating it as easily as we can move our pointers left or right?\\n\\nThis idea is already well in place in the database world. We have what is called \\\"temporal databases\\\" which you can query against time. Or more excitingly we even have \\\"bi-temporal databases\\\" like [XTDB](https://xtdb.com/), which you can query against two axis of time: transaction time and valid time.\\n\\nUnfortunately I couldn't go with this very cool word \\\"bi-temporal\\\" here, as it doesn't really apply... but I could indeed keep the satisfying \\\"temporal\\\" part.\\n\\nSo please welcome the stage our new friend.... THE TEMPORAL WEB... Taking time as a new dimension, the fourth dimension... how convenient... let's define it again:\\n\\n> **web4·µó ∞ aka \\\"the temporal web\\\": user interactions across screen space and time of an immutable conversation**\\n\\n\\n---\\n\\n### What do we have?\\n\\n* **The temporal web** with conversation-first interfaces, leveraging decentralized communication protocols.\\n* Forcing developers to really think at the isolated-component level, while reducing the surface of worry (remember mobile-first, constraints are a blessing).\\n* Making their life simpler (even though they don't want it because‚Ä¶ money, you know)\\n* And most importantly making users' lives simpler: catering better for their intents and adding outstanding build-in support\\n\\n### It‚Äôs fine (art)\\n\\nArt is fine though. You can keep building landing page or product pages, this is art. Art doesn't have to be efficient.\\n\\nWriting on [Mirror](https://mirror.xyz) is fine. it's about \\\"passively\\\" consuming, not actively interacting.\\n\\nA game stays a game, I don't want to play Gods Unchained in a conversation, because I want to be fully immersed. It's not really the web anyway‚Ä¶\\n\\n### What's next?\\n\\nI‚Äôll agree with you, this is still a rough idea but I believe the foundations are here.\\n\\nI'd be very curious to build a real big web application with this paradigm. **Ping me** if you are a pioneer.\\n\\n\\n---\\n\\n> Webo Webini Lupus.\",\"timestamp\":1640860072,\"title\":\"Web is Dead\"},\"digest\":\"mCz_gvCCr1JEo65gY-mt0f_AK8CYonH_ATqiXCqQwpc\",\"authorship\":{\"contributor\":\"0x7A0F0B39FeA907Deb70A483387Fc6d42fa99adFD\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"5gJTz6HDrx6JpsFnoEk4RxZC54c6QvIS-AuJcuPw2gE\\\",\\\"y\\\":\\\"TXLG-4oEVMtJnCPYkfBWpfWR-WJy7XGE6KXrXa-Toug\\\"}\",\"signature\":\"KdFsNy1QrV4NHif4waO4bLgbSDHTTIpns5GcawxWm9DLv7a7hXaT-dIzMLt_Wg3I691YwNA75acIpTHHV0uqww\",\"signingKeySignature\":\"0x52fd9a47190da3789df00a7885b3c2947c94d7a10d05762ecff07697a135c9760de45ff2dcf2ff244f92c23d9c53257d805456f297543d7e86474da2b5f1f4931b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"5gJTz6HDrx6JpsFnoEk4RxZC54c6QvIS-AuJcuPw2gE\\\",\\\"y\\\":\\\"TXLG-4oEVMtJnCPYkfBWpfWR-WJy7XGE6KXrXa-Toug\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"mvqOkcw0ABBgRjSD49Pb_V3lbpQMxxi68KCHabYj5RA\"}"