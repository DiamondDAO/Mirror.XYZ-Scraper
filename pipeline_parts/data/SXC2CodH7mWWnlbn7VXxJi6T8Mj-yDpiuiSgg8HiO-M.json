"{\"content\":{\"body\":\"搞 iOS 以来，一直在想找一个云主机进行 iOS 项目的 CI 探索，方向想偏了，没找到几家提供 macOS 系统的云主机，遂作罢。\\n\\n最近在读 《[iOS App Distribution & Best Practices](https://www.raywenderlich.com/books/ios-app-distribution-best-practices/)》，里面提到现在有大致三类 CI 服务商：\\n\\n1.  Full-service CI，即全方位服务的 CI 提供商，可以理解为通过交互页面就可以进行部署。虽然简单，但可能不太容易拓展。典型如：\\n\\n    1.  Bitrise: <https://www.bitrise.io/>\\n    2.  Microsoft’s App Center: <https://appcenter.ms/>\\n\\n2.  Managed CI，即在云上替你托管硬件相关的工作，你只需要提供构建脚本，在 iOS 项目中，常见的就是构建方式就是 `fastlane` 和 `xcodebuild`。比较流行的如：\\n\\n    1.  CircleCI: <https://circleci.com/>\\n    2.  GitHub Actions: [https://Github.com/features/actions](https://github.com/features/actions)\\n\\n3.  Manual CI，即手动管理，感觉跟自己在云主机上处理一个概念。便宜，但得自己管理服务器。最著名的就是 Travis CI: <https://travis-ci.org/> 了。\\n\\n怀着激动的心，每个官方都去逛了一遍，确实都提供了 macOS 的构建环境，nice，der\\\\~。而且都有都有免费的配额（收费方式都是卖点卡）。\\n\\n最后还是选择 GitHub Actions 作为远程 CI 的第一个实验品。截图如下\\n\\n![job](https://shenxiaohai.me/img/loading.gif)\\n\\n![workflows](https://shenxiaohai.me/img/loading.gif)\\n\\n中文的概念介绍和使用方式可以去看阮一峰的 [GitHub Actions 入门教程](https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html) 。\\n\\n或者直接去看官方文档 [GitHub Actions](https://docs.github.com/en/actions) 。\\n\\n简单来说，就是在仓库目录 `.github/workflows/` 放置脚本，当有 push 或 PR 的时候，就会触发脚本运行。\\n\\n**免费额度查看方式**，「右上角LOGO」-「Settings」-「Billings & plans」\\n\\n## [](#触发条件 \\\"触发条件\\\")触发条件\\n\\n|                      |                                                                                                             |\\n| -------------------- | ----------------------------------------------------------------------------------------------------------- |\\n|     1 2 3 4 5 6 7 8  |     name: iOS starter workflow   on:   push:     branches: [ main ]   pull_request:     branches: [ main ]  |\\n\\n## [](#Step-整理 \\\"Step 整理\\\")Step 整理\\n\\n## [](#构建环境 \\\"构建环境\\\")构建环境\\n\\n|                                    |                                                                                                                                                                                                                                       |\\n| ---------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n|     1 2 3 4 5 6 7 8 9 10 11 12 13  |     jobs:   build:     name: Build and Test default scheme using any available iPhone simulator          runs-on: macos-latest   \\t   \\tsteps:   \\t\\t   \\t\\t- name: Checkout         uses: actions/checkout@v2   \\t\\t- name: stepxxx   \\t\\t\\t    |\\n\\n## [](#Pod-install \\\"Pod install\\\")Pod install\\n\\niOS 项目免不了用 cocoaPods 安装依赖。\\n\\n|            |                                                                          |\\n| ---------- | ------------------------------------------------------------------------ |\\n|     1 2 3  |     - name: Install Dependencies   run: |     pod install --repo-update  |\\n\\n### [](#踩坑记录 \\\"踩坑记录\\\")踩坑记录\\n\\n在 `Podfile` 头部标记 `source 'https://github.com/CocoaPods/Specs.git'` 不是很明智。\\n\\ncocoaPods 官方在 [CocoaPods 1.7.2 — Master Repo CDN is Finalized!](https://blog.cocoapods.org/CocoaPods-1.7.2/) 表示，随着 pod 数目的增多，利用 github 作为数据库备份越来越慢了，已经更换成 CDN 的形式了。\\n\\n|            |                                            |\\n| ---------- | ------------------------------------------ |\\n|     1 2 3  |       source 'https://cdn.cocoapods.org/'  |\\n\\n## [](#默认-Scheme \\\"默认 Scheme\\\")默认 Scheme\\n\\n|                  |                                                                                                                                                                                                                                                                                            |\\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\\n|     1 2 3 4 5 6  |     - name: Set Default Scheme   run: |     scheme_list=$(xcodebuild -list -json | tr -d \\\"\\\\n\\\")     default=$(echo $scheme_list | ruby -e \\\"require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]\\\")     echo $default | cat >default     echo Using default scheme: $default  |\\n\\n## [](#Build \\\"Build\\\")Build\\n\\n用模拟器进行编译。优先跑 .xcworkspace，无则跑 .xcodeproj。\\n\\n我测试的时候，在 GitHub Actions 上 `xcrun` 得到的模拟器名称不正确，所以直接固定了使用 iPhone 11 作为模拟器。\\n\\n|                                 ||\\n| ------------------------------- ||\\n|     1 2 3 4 5 6 7 8 9 10 11 12  |     - name: Build   env:     scheme: ${{ 'default' }}     platform: ${{ 'iOS Simulator' }}   run: |               device='iPhone 11'     if [ $scheme = default ]; then scheme=$(cat default); fi     if [ \\\"`ls -A | grep -i \\\\\\\\.xcworkspace\\\\$`\\\" ]; then filetype_parameter=\\\"workspace\\\" && file_to_build=\\\"`ls -A | grep -i \\\\\\\\.xcworkspace\\\\$`\\\"; else filetype_parameter=\\\"project\\\" && file_to_build=\\\"`ls -A | grep -i \\\\\\\\.xcodeproj\\\\$`\\\"; fi     file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`     xcodebuild build-for-testing -scheme \\\"$scheme\\\" -\\\"$filetype_parameter\\\" \\\"$file_to_build\\\" -destination \\\"platform=$platform,name=$device\\\"  |\\n\\n## [](#Test \\\"Test\\\")Test\\n\\n|                                 ||\\n| ------------------------------- ||\\n|     1 2 3 4 5 6 7 8 9 10 11 12  |     - name: Test   env:     scheme: ${{ 'default' }}     platform: ${{ 'iOS Simulator' }}   run: |               device='iPhone 11'     if [ $scheme = default ]; then scheme=$(cat default); fi     if [ \\\"`ls -A | grep -i \\\\\\\\.xcworkspace\\\\$`\\\" ]; then filetype_parameter=\\\"workspace\\\" && file_to_build=\\\"`ls -A | grep -i \\\\\\\\.xcworkspace\\\\$`\\\"; else filetype_parameter=\\\"project\\\" && file_to_build=\\\"`ls -A | grep -i \\\\\\\\.xcodeproj\\\\$`\\\"; fi     file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`     xcodebuild test-without-building -scheme \\\"$scheme\\\" -\\\"$filetype_parameter\\\" \\\"$file_to_build\\\" -destination \\\"platform=$platform,name=$device\\\"  |\\n\\n## [](#通知以及跨Job传递状态 \\\"通知以及跨Job传递状态\\\")通知以及跨Job传递状态\\n\\n1.  使用 ravsamhq/notify-slack-action\\\\@v1 将 Job 状态通知到 Slack。\\n\\n2.  因为该 action 运行在 Linux 系统，所以需要另起一个 Job。\\n\\n3.  如何将上一个 Job 的状态通知到下一个 Job？一种思路是将 Job_A的状态通过文本保存到本地，再在Job_B中读取该状态。\\n\\n    可参考：[How get the status of previous jobs](https://github.community/t/how-get-the-status-of-previous-jobs/17555)\\n\\n## [](#保存状态 \\\"保存状态\\\")保存状态\\n\\n|                           |                                                                                                                                                                                                                                                                                                                                                |\\n| ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n|     1 2 3 4 5 6 7 8 9 10  |     - name: Create file status_build_test.txt and write the job status into it   if: always()   run: |     echo ${{ job.status }} > status_build_test.txt - name: Upload file status_build_test.txt as an artifact   if: always()   uses: actions/upload-artifact@v1   with:     name: pass_status_build_test     path: status_build_test.txt  |\\n\\n## [](#读取状态 \\\"读取状态\\\")读取状态\\n\\n|                      |                                                                                                                                                                                                                                                                                                                         |\\n| -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n|     1 2 3 4 5 6 7 8  |     - name: Download artifact pass_status_build_test   uses: actions/download-artifact@v1   with:     name: pass_status_build_test - name: Set the statuses of Job build output parameters   id: set_outputs   run: |     echo \\\"::set-output name=status_build_test::$(<pass_status_build_test/status_build_test.txt)\\\"  |\\n\\n## [](#附录-完整版 \\\"附录-完整版\\\")附录-完整版\\n\\n附上我当前使用的完整脚本，持续完善中。\\n\\n|                                                                                                                                                                                                                                                      |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ||\\n|     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83  |     name: iOS starter workflow  on:   push:     branches: [ main ]   pull_request:     branches: [ main ]  jobs:   build:     name: Build and Test default scheme using any available iPhone simulator     runs-on: macos-latest      steps:       - name: Checkout         uses: actions/checkout@v2       - name: Install Dependencies         run: |           pod install --repo-update       - name: Set Default Scheme         run: |           scheme_list=$(xcodebuild -list -json | tr -d \\\"\\\\n\\\")           default=$(echo $scheme_list | ruby -e \\\"require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]\\\")           echo $default | cat >default           echo Using default scheme: $default       - name: Build         env:           scheme: ${{ 'default' }}           platform: ${{ 'iOS Simulator' }}         run: |                                            device='iPhone 11'           if [ $scheme = default ]; then scheme=$(cat default); fi           if [ \\\"`ls -A | grep -i \\\\\\\\.xcworkspace\\\\$`\\\" ]; then filetype_parameter=\\\"workspace\\\" && file_to_build=\\\"`ls -A | grep -i \\\\\\\\.xcworkspace\\\\$`\\\"; else filetype_parameter=\\\"project\\\" && file_to_build=\\\"`ls -A | grep -i \\\\\\\\.xcodeproj\\\\$`\\\"; fi           file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`           xcodebuild build-for-testing -scheme \\\"$scheme\\\" -\\\"$filetype_parameter\\\" \\\"$file_to_build\\\" -destination \\\"platform=$platform,name=$device\\\"       - name: Test         env:           scheme: ${{ 'default' }}           platform: ${{ 'iOS Simulator' }}         run: |           # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)           # device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\\\\(]+' | head -1 | awk '{$1=$1;print}'`                      device='iPhone 11'           if [ $scheme = default ]; then scheme=$(cat default); fi           if [ \\\"`ls -A | grep -i \\\\\\\\.xcworkspace\\\\$`\\\" ]; then filetype_parameter=\\\"workspace\\\" && file_to_build=\\\"`ls -A | grep -i \\\\\\\\.xcworkspace\\\\$`\\\"; else filetype_parameter=\\\"project\\\" && file_to_build=\\\"`ls -A | grep -i \\\\\\\\.xcodeproj\\\\$`\\\"; fi           file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`           xcodebuild test-without-building -scheme \\\"$scheme\\\" -\\\"$filetype_parameter\\\" \\\"$file_to_build\\\" -destination \\\"platform=$platform,name=$device\\\"       - name: Create file status_build_test.txt and write the job status into it         if: always()         run: |           echo ${{ job.status }} > status_build_test.txt       - name: Upload file status_build_test.txt as an artifact         if: always()         uses: actions/upload-artifact@v1         with:           name: pass_status_build_test           path: status_build_test.txt   # 因为 notify-slack-action 跑在 Linux 系统所以另起一个 Job   notify:     needs: [ build ]     if: always()     name: Notify Slack     runs-on: ubuntu-latest     steps:       - name: Download artifact pass_status_build_test         uses: actions/download-artifact@v1         with:           name: pass_status_build_test       - name: Set the statuses of Job build output parameters         id: set_outputs         run: |           echo \\\"::set-output name=status_build_test::$(<pass_status_build_test/status_build_test.txt)\\\"       - name: Notify Slack         uses: ravsamhq/notify-slack-action@v1         if: always()         with:           status: ${{ steps.set_outputs.outputs.status_build_test }}         env:           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}  |\\n\\n版权声明: 本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) 许可协议。转载请注明来自 [SHEN's BLOG](https://shenxiaohai.me/)！\\n\\n***\\n\",\"timestamp\":1639029899,\"title\":\"利用 GitHub Actions 进行 iOS 项目的 CI/CD\"},\"digest\":\"qarS5N_eVAeamVtsoTh5LfBS4ssyJG6mJcPNkAkr130\",\"authorship\":{\"contributor\":\"0x74CDEBD6028e5D8407c2ad6F13BEDD9892e3FB2A\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"8kCjAlvYp03an6xhM0Fa6Z7fNbG5ygNhHAW30VNJZW8\\\",\\\"y\\\":\\\"GHlrEBEHPoWXfdyOxTIDUcGN2x_JjiE_Ufi2v-urrF4\\\"}\",\"signature\":\"uDEJQVKCPcA2utYkKuu1rr9sfSIW8khwhcMYdkAX7ket6TssLiyBAwMUPPLa-IxOAQeqNElyiDlUDwMhiAhkSw\",\"signingKeySignature\":\"0x1f24ae2d104d0acbfbe400b4f4a08ab304ad288bd9cb736f3b9859efbcc84c84170d9988f65a6e48cd6e1a337ca509c98018fa1e0abb0fc5ff3f9b13f040622c1c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"8kCjAlvYp03an6xhM0Fa6Z7fNbG5ygNhHAW30VNJZW8\\\",\\\"y\\\":\\\"GHlrEBEHPoWXfdyOxTIDUcGN2x_JjiE_Ufi2v-urrF4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"qarS5N_eVAeamVtsoTh5LfBS4ssyJG6mJcPNkAkr130\"}"