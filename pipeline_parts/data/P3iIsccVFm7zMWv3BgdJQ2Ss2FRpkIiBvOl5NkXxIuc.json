"{\"content\":{\"body\":\"## 90% Merge, 10% Bomb üí£\\n\\nAs promised in the [previous update](https://tim.mirror.xyz/CHQtTJb1NDxCK41JpULL-zAJe7YOtw-m4UDw6KDju6c), this one will cover the post-merge Ethereum client architecture in depth. With the progress made during the [Amphora Interop event](https://blog.ethereum.org/2021/10/15/amphora-merge-milestone/), the specification is now close to final üéâ\\n\\nBefore we dive into The Merge, though, a short update on the difficulty bomb!\\n\\n## Arrow Glacier üèπüßä\\n\\nOn AllCoreDevs #124 ([recording](https://youtu.be/BTtwbvZZpfs), [tweets](https://twitter.com/TimBeiko/status/1449047538103767044)), we agreed to push back the difficulty bomb, set to go off in December 2021, to June 2022. To do so, we will have a network upgrade, [Arrow Glacier](https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md), which contains a single EIP, [EIP-4345](https://eips.ethereum.org/EIPS/eip-4345), that pushes back the bomb.\\n\\nArrow Glacier is scheduled for block 13,773,000, expected on [December 8th, 2021](https://etherscan.io/block/countdown/13773000).\\n\\nWe debated various options for the Ice Age pushback on AllCoreDevs. June was chosen because we had reasonable confidence that The Merge could happen before, and we wanted to avoid having to organize another difficulty bomb pushback right before it.\\n\\nOf course, The Merge is independent from the bomb: it will require a separate network upgrade and is activated based on a PoW `total difficulty` threshold. **This means that we do not need to \\\"wait\\\" for the difficulty bomb to go off in order to transition Ethereum to proof of stake. Similarly, if we encountered issues with the transition, we could decide to push back the bomb once more.**\\n\\nHopefully, Arrow Glacier will be the last network upgrade on PoW Ethereum ü§ûüèª Onto The Merge!\\n\\n## Post-Merge Architecture üèó\\n\\nThe architecture for The Merge leverages the fact that Ethereum already has battle-tested clients built for both its execution (Eth1) and beacon (Eth2) chains. Given that these exist, it makes sense to keep using them.\\n\\nAt a high-level, at The Merge, clients will switch from following PoW to following PoS to determine Ethereum's latest valid block. Aside from that, most of the clients' functionality, and, more importantly, the EVM, its state, and how it executes transactions, will stay the same.\\n\\n**Post-merge, the current Eth1 and Eth2 clients respectively become the execution and consensus layers (or engines) of Ethereum. This means that node operators of either Eth1 or the Beacon Chain clients will need to run the \\\"other half\\\" of the stack to have a fully validating node.** Danny Ryan has great diagrams illustrating this. They've been [minted as NFTs](https://opensea.io/collection/when-merge), with the proceeds going towards the engineers and researchers working on The Merge.\\n\\n![Post-merge client architecture. NFT. Artist: Danny Ryan](https://i.imgur.com/l65cGy0.png)\\n\\nThe above shows what a full Ethereum client will look like post-merge. Let's use this as our starting point to dive into each component!\\n\\n## Beacon Node üö®\\n\\nToday, Beacon Nodes are tasked with coming to consensus on  empty (from end users' standpoint!) blocks. These contain pieces of consensus-related information, called Operations, such as attestations, the deposit contract root and validator slashings/exits, but do not contain any \\\"transactions\\\" in the Eth1 sense (e.g. sending ETH or interacting with smart contracts). The Merge is where this changes.\\n\\nAs The Merge happens, Beacon Nodes will watch the current PoW chain and wait for it to hit a predefined `total difficulty` threshold, called `TERMINAL_TOTAL_DIFFICULTY`. Once a block with `total difficulty >= TERMINAL_TOTAL_DIFFICULTY` is produced, it will be considered the final PoW block. Subsequent blocks will be produced and attested to by the validators on the Beacon Chain.\\n\\nTo do this, Beacon Nodes will communicate with their execution engine (formerly the Eth1 client) and ask it to either produce or validate `ExecutionPayloads`. These payloads are the post-merge equivalent of Eth1 blocks. They contain information such as the parent's hash, the state root, the base fee, and a list of transactions to execute. Once these have been produced or validated, the Beacon Node will share them with other nodes on the p2p network.\\n\\n![A post-merge block: the consensus layer (a.k.a. Beacon Node) validates all the fields currently part of Beacon Chain blocks. It passes ExecutionPayloads to the execution layer for validation as it receives them on the network.](https://i.imgur.com/9ju947n.png)\\n\\nTo establish communication between the consensus and execution layers, a new set of JSON RPC endpoints is introduced: the Engine API.\\n\\n## Engine API ‚öôÔ∏è\\n\\nThe [Engine API](https://github.com/ethereum/execution-apis/tree/main/src/engine) is the communication interface between the consensus and execution layers. It is exposed on a separate port than the execution layer's public JSON RPC API. For simplicity, calls to the API are always initiated by the consensus layer and the API introduces only three methods: `engine_executePayload`, `engine_forkchoiceUpdated` and `engine_getPayload`. Let's go over what each of these does:\\n\\n* `engine_executePayload` asks the execution layer to validate that an `ExecutionPayload` conforms to all protocol rules.\\n\\n  After receiving a payload via this call, the execution layer will either return `VALID`/`INVALID` or, if it still has not synced to the tip of the chain, `SYNCING`. Because a block's validity is dependent on its parents' validity, if the execution layer is missing historical data to assess the payload's validity, it will fetch it from the network. \\n \\n* `engine_forkchoiceUpdated` is how the consensus layer informs the execution layer of a new head and finalized block on the network. In the case where the consensus layer needs the execution layer to produce a new `ExecutionPayload` on top of the latest head block, it will pass a `payloadAttributes` field along with this call.\\n\\n  The`payloadAttributes` field contains information relevant for the execution engine to produce an `ExecutionPayload`, specifically the `timestamp`, `random` and `feeRecipient` (formerly `coinbase`) values. Upon receiving this call, the execution layer will update its head, sync as needed, and, if required, begin building an `ExecutionPayload` with the values from `payloadAttributes`. \\n \\n* `engine_getPayload` asks the execution layer to return its best `ExecutionPayload` whose build process was previously initiated in an associated call to `engine_forkChoiceUpdated`.\\n\\n  This is how, when a validator must produce a block, it gets a valid one from its execution engine. Other nodes will then, upon receiving that block from the p2p layer, call `engine_executePayload` to assess its validity.\\n\\n... and that's it! With these three new endpoints, the consensus and execution layers can communicate information about the state of the chain and transactional payloads. Now, let's dive into how the execution engine works some more.\\n\\n## Execution Engine üõ†\\n\\nAs stated above, the execution engine is what becomes of Eth1 clients after The Merge. At that point, anything related to consensus is removed from their purview. Their main focus becomes state management, as well as block creation and validation, which is modified slightly. The bulk of the changes are described in [EIP-3675](https://eips.ethereum.org/EIPS/eip-3675).\\n\\nFirst, The Merge will require some change to the block format. Several fields, which are only relevant for PoW and not PoS, will be set to `0` (or their data-structure's equivalent). These are fields which either relate to mining (`difficulty`, `mixHash`, `nonce`) or to ommers (`ommers`, `ommersHash`), which are not possible in PoS. The length of `extraData` will also be capped to 32 bytes on mainnet.\\n\\nSecond, because issuance will only happen on the Beacon Chain post-merge, the execution layer will stop processing block and uncle rewards. That being said, the execution engine will still be in charge of handling transaction fees. Indeed, as it creates an `ExecutionPayload`, the execution engine ensures that all transaction senders can pay at least the current `baseFeePerGas` and that any extra fees are sent to `feeReceipient`. Note that `feeReceipient` refers to a \\\"legacy\\\" Ethereum address, and not a Beacon Chain validator.\\n\\nThird, once PoS has taken over from PoW, execution engines will stop gossiping blocks. This means deprecating the `NewBlockHashes (0x01)` and `NewBlock (0x07)` handlers at the p2p layer. Again, the execution layer will still be in charge of syncing the network state, gossiping transactions and maintaining its transaction pool.\\n\\nThe following diagram, again by Danny Ryan, shows the execution layer dropping PoW and relying on the Beacon Chain as The Merge happens.\\n\\n![PoW blocks stop appearing and Beacon Chain blocks begin to hold ExecutionPayloads after The Merge.](https://images.mirror-media.xyz/publication-images/IpF4PeStURgtLYdXGs0Rn.png?height=740&width=2129&size=medium)\\n\\nWe've now covered all the core components of how clients process blocks and communicate internally post-merge. Now, let us briefly touch on the various \\\"edges\\\" of the system.\\n\\n## P2P Networking, User APIs and Sync üì°\\n\\nAs the first diagram in this post shows, post-merge, both the execution and Beacon Chain layers participate in a p2p network. Aside from block gossiping being deprecated on the execution layer side, everything else in the p2p network remains unchanged: Beacon Nodes will gossip attestations, slashings, etc. and the execution layer will share transactions, sync state, etc. each on their independent p2p network.\\n\\nSimilarly, the user APIs for both the [Beacon Chain](https://github.com/ethereum/beacon-apis) and the [execution layer](https://github.com/ethereum/execution-apis/) will remain independent, with the exception of the newly created Engine API.\\n\\nThe one component which will live across both layers is sync. Several syncing strategies are being developed for every possible edge case pre and post merge. These are still being refined and tested, and may be the subject of a future deep dive.. üëÄ\\n\\n## Next Steps üëÄ\\n\\nSince [Amphora](https://blog.ethereum.org/2021/10/15/amphora-merge-milestone/), the focus has been on specification refinements and devnet testing. Over the coming weeks, expect the specifications to have settled to a point where we do not expect any more major modifications.\\n\\nIn the meantime, the [Pithos](https://pithos-explorer.ethdevops.io/) testnet is up and running with more client combinations being tested daily, and a [community call is scheduled for next week](https://github.com/ethereum/pm/issues/402) for infrastructure & tooling providers to get up to speed on The Merge. See you then üëãüèª\\n\\n![The various client combinations running on Pithos, from https://pithos-explorer.ethdevops.io/charts](https://i.imgur.com/4Ymkvq9.png)\\n\\n\\n---\",\"timestamp\":1635278571,\"title\":\"AllCoreDevs Update 007 ‚õì \",\"publication\":\"tim\"},\"digest\":\"sR23jU02we6zXRgsF_oTUkttL83S3vyn05vJWnnp-Lc\",\"authorship\":{\"contributor\":\"0x10F5d45854e038071485AC9e402308cF80D2d2fE\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"SzidtLw5YIo_fVQEvOYVABoozm67Au_FNzPGx32rghE\\\",\\\"y\\\":\\\"0FZz7mod8RlZfkMvgGr4bT4sWMc8DShvgKMbgnANIdI\\\"}\",\"signature\":\"GcyACVWZwmbFVWMz566Gk_F4c2qoNViKiLXADUDVYvi1bhgE-BanC329zO4xUvU04SUD0P9N-pdcbL3mwNg7pg\",\"signingKeySignature\":\"0xb23d03fa114992b36bb19ce049d1f2db4d73be867ec6dd1ad3cd8270c0b2b35a61dc1a6e7ef0b8e37e24249f3f3d950200e4e87c1a225cc902323fa0f19e06841c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"SzidtLw5YIo_fVQEvOYVABoozm67Au_FNzPGx32rghE\\\",\\\"y\\\":\\\"0FZz7mod8RlZfkMvgGr4bT4sWMc8DShvgKMbgnANIdI\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"sR23jU02we6zXRgsF_oTUkttL83S3vyn05vJWnnp-Lc\"}"