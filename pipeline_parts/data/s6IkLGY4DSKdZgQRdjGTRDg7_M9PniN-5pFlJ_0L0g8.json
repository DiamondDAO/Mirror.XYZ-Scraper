"{\"content\":{\"body\":\"One of the things I really like about [Paradigm](https://www.paradigm.xyz/) is that they seem to be very focused on helping builders and developers, and are not afraid to get their hands dirty with code (people like [Anish Agnihotri](https://github.com/Anish-Agnihotri?tab=repositories) and [Georgios Konstantopoulos](https://github.com/gakonst?tab=repositories) are some of the best engineers in web3 or maybe anywhere). They also [share](https://www.paradigm.xyz/writing/) an enormous amount of some of the highest quality blockchain / web3 / crypto related content in existence. They definitely don't seem like the the typical VC firm.\\n\\nThey [recently created](https://www.paradigm.xyz/2021/12/introducing-the-foundry-ethereum-development-toolbox/) and open sourced [Foundry](https://github.com/gakonst/foundry), a new Solidity development environment.\\n\\nSince it came out I've been wanting to try it out, and finally had the chance to this week.\\n\\nIn this post I want to give you a quick rundown of what I learned and how to get started with it.\\n\\n## Foundry Overview\\n\\nParadigm's description of Foundry is that **Foundry is a portable, fast and modular toolkit for Ethereum application development.**\\n\\nIt fits into the stack the same way that [Hardhat](https://hardhat.org/), [Truffle](https://trufflesuite.com/), and [Dapp Tools](https://dapp.tools/) do.\\n\\nThe main differences / selling points of Foundry are:\\n\\n**1.** It allows you to write your tests in Solidity instead of JavaScript.\\n\\nThey make [a great case](https://www.paradigm.xyz/2021/12/introducing-the-foundry-ethereum-development-toolbox/#You_should_be_writing_your_tests_in_Solidity) about why writing tests in Solidity VS JavaScript is better, and they are spot on with most of their points.\\n\\nThere is just a lot less boilerplate and a lot less mental overhead. Once you write a few tests in Solidity you feel the difference.\\n\\n**2.** It's fast.\\n\\nFoundry is written in Rust and it is fast. They've documented a few [benchmarks here](https://www.paradigm.xyz/2021/12/introducing-the-foundry-ethereum-development-toolbox/#You_should_be_writing_your_tests_in_Solidity), but it's hard to do it justice until you use it (especially after using an alternative).\\n\\nFoundry is made up of 2 CLI tools - [forge](https://github.com/gakonst/foundry/tree/master/forge) and [cast](https://github.com/gakonst/foundry/tree/master/cast).\\n\\n**Forge** is the Ethereum development and testing framework.\\n\\n**Cast** is a CLI that allows you to interact with EVM smart contracts, send transactions, and read data from the network.\\n\\n### Drawbacks\\n\\nWhile Foundry is fantastic for hardcore smart contract development, as an avid Hardhat user and enthusiast, I have to also outline some of the tradeoffs.\\n\\nAt the time of this writing I feel like Hardhat wins for full stack developers because it offers better tooling for switching between and deploying to various networks.\\n\\nHardhat also has a robust [plugin ecosystem](https://hardhat.org/plugins/) that allows you to extend the project with a lot of additional functionality.\\n\\nFinally, Hardhat is fairly mature at this point and *just works*, whereas Foundry is still building out its base feature set.\\n\\nNow that we've had an overview of Foundry, let's look at how to use it to build and test a smart contract.\\n\\n## Building & testing a smart contract with Foundry\\n\\n> To install Foundry, you must first have Rust installed on your machine.\\n\\nTo get started, we'll install [forge](https://github.com/gakonst/foundry/tree/master/forge)\\n\\n```sh\\ncargo install --git https://github.com/gakonst/foundry --bin forge --locked\\n```\\n\\nNext, in an empty directory, we can use the `init` command to initialize a new project:\\n\\n```sh\\nforge init\\n```\\n\\nThe forge CLI will create two directories, **lib** and **src**.\\n\\nThe **lib** directory contains the testing contract (**lib/ds-test/src/test.sol**) as well as a demo test contract implementing some various tests (**lib/ds-test/demo/demo.sol**).\\n\\nThe **src** directory contains a barebones smart contract and test.\\n\\nLet's create a basic smart contract to test out. Rename **Contract.sol** to **HelloWorld.sol** and update it with the following:\\n\\n```solidity\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ncontract HelloWorld {\\n  string private greeting;\\n  uint public version = 0;\\n  \\n  constructor (string memory _greeting) {\\n    greeting = _greeting;\\n  }\\n\\n  function greet() public view returns(string memory) {\\n    return greeting;\\n  }\\n\\n  function updateGreeting(string memory _greeting) public {\\n    version += 1;\\n    greeting = _greeting;\\n  }\\n}\\n```\\n\\nNext, we can run a build and compile the ABIs:\\n\\n```sh\\nforge build\\n```\\n\\nThis should create an **out** directory containing the ABIs for both the main contract as well as the test.\\n\\nNext, let's update the name of **test/Contract.t.sol** to **test/HelloWorld.t.sol** and add the following code:\\n\\n```solidity\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"ds-test/test.sol\\\";\\nimport 'src/HelloWorld.sol';\\n\\ncontract HelloWorldTest is DSTest {\\n    HelloWorld hello;\\n    function setUp() public {\\n      hello = new HelloWorld(\\\"Foundry is fast!\\\");\\n    }\\n\\n    function test1() public {\\n        assertEq(\\n            hello.greet(),\\n            \\\"Foundry is fast!\\\"\\n        );\\n    }\\n\\n    function test2() public {\\n        assertEq(hello.version(), 0);\\n        hello.updateGreeting(\\\"Hello World\\\");\\n        assertEq(hello.version(), 1);\\n        assertEq(\\n            hello.greet(),\\n            \\\"Hello World\\\"\\n        );\\n    }\\n}\\n```\\n\\nForge comes built in with some really great testing features like assertions and gas cost snapshots.\\n\\nIn our test we've asserted equality using the `assertEq` utility.\\n\\nTo run the test, we can run:\\n\\n```sh\\nforge test\\n```\\n\\nWhen the test is run, we'll see output for not only the success of the test, but also the gas cost:\\n\\n![Forge test](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op80td1jznbdv76sah6b.png)\\n\\nThere are also utilities for:\\n\\n**truthiness** - `assertTrue`\\n\\n**decimal equality** - `assertEqDecimal`\\n\\n**greater than, less than** - `assertGt`, `assertGe`, `assertLt`, `assertLe`\\n\\nYou can view the assertions in the testing contract at **lib/ds-test/src/test.sol**. These are all of the available functions that we can use in our tests.\\n\\n### Fuzzing\\n\\nFoundry also supports [fuzzing](https://en.wikipedia.org/wiki/Fuzzing).\\n\\nThis allows us to define function parameter types and the testing framework will populate these values at runtime.\\n\\nIf it does find an input that causes the test to fail, it will return it so you can create a regression test.\\n\\nFor instance, we can update the `test2` function to receive a function argument, and use the value in our test without ever having to define what it is:\\n\\n```solidity\\nfunction test2(string memory _greeting) public {\\n    assertEq(hello.version(), 0);\\n    hello.updateGreeting(_greeting);\\n    assertEq(hello.version(), 1);\\n    assertEq(\\n        hello.greet(),\\n        _greeting\\n    );\\n}\\n```\\n\\nNow when we run the test, Foundry will automatically populate the `_greeting` variable when the test is run.\\n\\n## Conclusion\\n\\nFoundry is a welcome addition to the web3 stack, bringing improved tooling and performance for smart contract testing and development.\\n\\nI'm excited to see this project mature and already would recommend developers looking to quickly build and test non-trivial smart contracts to try it out today.\\n\\nHuge shout out and thank you to Paradigm for their work building developer tooling like Foundry, it is much appreciated.\",\"timestamp\":1640097969,\"title\":\"Building and testing smart contracts with Foundry\"},\"digest\":\"bSi5FMARCpuD6lD3ez5mTI5Fr-G6RNaXYZ_iuNBfWjM\",\"authorship\":{\"contributor\":\"0xB2Ebc9b3a788aFB1E942eD65B59E9E49A1eE500D\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"NMKRSLV2AAjgHFx4ebpaRQL45nMyEgA3QUwJ6DyAo4E\\\",\\\"y\\\":\\\"Fp0QEPsLae6LLptCkkKUy8ut6AmDXc7MePT7rjFKiME\\\"}\",\"signature\":\"D-aOBlqAs5I2bNQ0Q6JoC5_UIjMhQyXaQGxQIGvHtjPSFg6n5D0yxtHuhXXZljzH3K_FXUzBpCIDuv0kvTzCTg\",\"signingKeySignature\":\"0xee6b93ef8443ca2dd869ccdd7a57ca7540e0e3a476e3401e5b8e476463064d514f61312f46ad2b3cfadf3b8383306e56746b244bd84dcd7189d89a7bb48ac1f41c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"NMKRSLV2AAjgHFx4ebpaRQL45nMyEgA3QUwJ6DyAo4E\\\",\\\"y\\\":\\\"Fp0QEPsLae6LLptCkkKUy8ut6AmDXc7MePT7rjFKiME\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"6Mn3HjrqKLhHzu2balLPv4SqE5a-oEESl4ycpRkWFsc\"}"