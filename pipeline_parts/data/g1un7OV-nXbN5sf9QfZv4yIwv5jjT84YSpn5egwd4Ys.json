"{\"content\":{\"body\":\"About a week ago, we published this tweet and received a flood of responses:\\n\\n[https://twitter.com/JonathanHillis/status/1443178900830527490?s=20](https://twitter.com/JonathanHillis/status/1443178900830527490?s=20)\\n\\nDocumentation and team knowledge management is a sore spot for DAOs. There are no web3-native solutions available, so we’re stuck clobbering together tech stacks made up of the usual web2 suspects: Notion, Google Docs, Roam.\\n\\nIn this article, we lay out what we think DAOs need in collaboration tools to get our work done. We then evaluate the current tools on the market to see how they stack up, including our own tech stack. Finally, we present our CabinDAO dream feature set — a Frankenstein doc tool that takes the most DAO-friendly features of a number of web2 tools.\\n\\nWe pulled from our experience writing docs and managing projects for CabinDAO. We asked other folks in the web3 ecosystem who are building DAOs and protocols to share their experience and team workflow, as well.\\n\\nFinally, we didn’t differentiate between writing and collaboration tools (ex. Google Docs) and knowledge management tools (ex. Notion). For a DAO, informal notetaking, documentation, and publishing all fall under [the team communication umbrella](https://creators.mirror.xyz/862A5rBtKX3BC8eEircDnGwPIJJTJ33hn-MvnukByPc). We want a tool that takes us from meeting notes and brainstorming all the way to the approval process for final changes.\\n\\nAnd with that, let’s dive in.\\n\\n## Essential features for DAO knowledge management tools\\n\\n### Multiplayer access management\\n\\nEnabling multiplayer access is the hardest problem DAOs face in knowledge management, specifically per seat pricing and access.\\n\\nThis is because traditional companies have a very clear line between employee and non-employee. As a result, enterprise software pricing charges per employee onboarded onto the product and designed with this structure in mind.\\n\\nIn contrast, DAOs have a gradient of engagement. At any point in time, a DAO will have a handful of major contributors and concentric circles of participants, members, Discord lurkers, and the public.\\n\\nThis naturally touches on the problem of access. Traditional companies with over 300 workers have entire IT departments who give, revoke, and manage each user’s access. Most DAOs have one or up to a handful of people who manage permissions for a group of similar size.\\n\\nEnterprise apps generally do a decent job at multiplayer access. Google Docs has the ability to manage individual document permissions. Notion also has a function to set pages as public or private. But paying per seat for non-contributors, just for them to be able to view and comment on shared documents, doesn’t make sense for DAOs.\\n\\nThe ideal scenario for access in a DAO is the permeable Wikipedia contribution model. Wikipedia has a power law distribution amongst contributors and editors. It remains an open source movement that doesn’t distinguish between an employee or a non-employee, but also has various gating mechanisms that outputs quality information over time.\\n\\n### Decentralized project management\\n\\nEnterprise knowledge management apps that cater to traditional companies expect a top-down structure. Projects and assignments are then assigned to individuals and groups from upper management.\\n\\nIn contrast, DAOs are more like a network of independent contractors interacting with each other than a company of employees. They have a bottoms-up structure where contributors write their own job description and propose projects for approval to the broader community.\\n\\nGithub, for example, encourages open source contributions and allows a built-in review process that ensures the quality of the contribution. It also allows developers to add issues for features they would like to work on and assign it to themselves. Github encourages decentralized project management.\\n\\nWhen a would-be contributor submits a proposal, the ideal knowledge management software should be able to pull the DAO’s governance or approval process, match that with the project’s specs and scope, and estimate compensation.\\n\\n### Web3 native\\n\\nMost DAOs, CabinDAO included, clobber together web2 apps to collaborate and disseminate knowledge. But these duct tape measures won’t cut for long.\\n\\nWith web3-native apps, DAOs can manage permissions on the doc as a group, rather than relying on a single member to gatekeep access. Instead of constantly adding new users and removing ones who leave, web3 assigns permissions programmatically. This means that DAO membership — usually signified by the existence or lack of a token or NFT — dictates access, not a fallible individual.\\n\\n[DAOHaus](https://twitter.com/nowdaoit)’ Spencer Graham ([@spengrah](https://twitter.com/spengrah) on Twitter) told us his ideal scenario.\\n\\n> “When I sign into a web3-native tool with my address, the tool can look up my status in the DAO. It then shows me what I have access to while simultaneously hiding what I don’t. This programmatic feature works the same way for deciding whether to give editing or viewing permissions to an individual.”\\n\\nA more advanced web3-native feature would be the ability to tie projects to bounties. And maybe even embed payment structures within the projects to pay guild members out, based on a DAO-determined contribution level.\\n\\n## What knowledge management tools DAOs currently use\\n\\nKnowledge management is a pain point for CabinDAO across the board. We're using Roam, Google Docs, Notion, and Discord all at once because none of them do exactly what we need.\\n\\n### Notion\\n\\nWe use [Notion](https://foul-buffer-636.notion.site/Cabin-DAO-668930ccc2c64e8a958aacb2686e335f) for sharing general knowledge about the DAO and our long-term vision. We love Notion’s WYSIWYG (versus Markdown) and its ability to manage permissions on a contributor and page level.\\n\\nWe admit it: Notion solves at least half of the problems we need for documentation and knowledge management, However, as an enterprise tool, Notion costs $8 – $20 per user per month. Without workarounds, onboarding the over 300 members of CabinDAO’s Discord server would be exorbitant and unwieldy.\\n\\n### Roam\\n\\nWe use [Roam Research](https://roamresearch.com/#/app/CabinDAO/page/NhaKzWlCO) for project management and internal knowledge management.\\n\\nRoam’s multiplayer user structure fits us. Anybody can contribute to our Roam server, without being able to delete what anyone else wrote. In this way, it’s better than Google Docs or Notion for access. Its bidirectional linking structure also makes it excellent for bottoms-up project management.\\n\\nFor more on Roam for DAOs, here’s a video from [@realfakepicnic](https://twitter.com/realfakepicnic) on how [code423n4](https://twitter.com/code423n4) uses Roam:\\n\\n[https://www.loom.com/share/7316d46335e1480eb548b4a3c1e2de86](https://www.loom.com/share/7316d46335e1480eb548b4a3c1e2de86)\\n\\nFrom our experience, however, Roam’s bullet-based interface isn’t a great fit for longer form writing. For folks who aren’t familiar with its block-and-bullet point structure or with Markdown, Roam has a steeper learning curve.\\n\\nThere’s a similar notetaking application called Obsidian that [some folks use](https://mobile.twitter.com/SpacesCreator/status/1443179660129542145), but unlike Roam, it lacks multiplayer functionality.\\n\\n### Google Docs\\n\\nWe use Google Docs for collaborative writing. It’s nice because the commenting and multiplayer features are strong. However, Docs doesn’t have interlinking capabilities. And it still has the obsolete Microsoft Word-like writing experience even after all these years.\\n\\n(We know –- if it’s not broken, don’t fix it. But c’mon we’re in the web3 era, here).\\n\\n### HackMD\\n\\nWe’ve never used HackMD, but it was a tool that was recommended quite a few times in the thread so we spoke to a couple web3 teams who do.\\n\\n[Jet Protocol](https://twitter.com/JetProtocol) and [DAOHaus](https://twitter.com/nowdaoit) both use HackMD as their teams’ primary collaboration tools. Both orgs use it for internal collaboration and quick notetaking.\\n\\nFor outside collaboration Jet uses [Discourse](https://www.discourse.org/). DAOHaus uses [Docusaurus](https://docusaurus.io/) for public, more formal documentation.\\n\\nOne cool thing about Hackmd is that [it integrates with Github](https://hackmd.io/s/link-with-github). This way, document edits can go through a formal pull request review process before they get pushed live.\\n\\n### Clarity\\n\\nClarity is the only app on this list aiming for DAOs as their target audience.\\n\\nOur team just started testing Clarity so we turned to outside input for in-depth insight.\\n\\n[Foster](https://www.foster.co) — a writing community that isn’t a DAO but functions like one — switched from Notion to Clarity for their team’s knowledge and project management. They found that Notion got bloated quickly. Customizing their tasks began taking up too much time.\\n\\nThe Foster team likes Clarity for how it handles both tasks and knowledge. Foster co-founder Stew Fortier says, “Clarity is excellent because it's low-maintenance. If you're up late writing something brilliant, you can easily spin up a couple of tasks and assign them directly in the document so that your brilliant vision has a higher likelihood of seeing the light of day.”\\n\\nOur initial tests of Clarity found that bidirectional linking is a challenge. While its current pricing model is still on a per-user basis and stores data on a traditional web2 architecture, the Clarity team has shared their plans with us to tweak their model to serve DAOs better.\\n\\nAccording to founder [Richie Bonilla](https://twitter.com/richiebonilla), Clarity wanted to solve the problem of human coordination first. They’re actively working with their users to find the best way to approach decentralizing the app.\\n\\n## Documentation & team knowledge management for DAOs: Who will take the crown?\\n\\nDAOs need a way to create, edit, and disseminate knowledge in a way that's web3 native. The current tools available are mostly web2 tools. They just aren't built for a DAO’s bottom-up, multiplayer needs.\\n\\nAt CabinDAO, we dream of a knowledge management tool that combines the most web3-like features of the best web2 collaboration tools on the market. We want …\\n\\n* Notion’s WYSIWYG interface\\n* Wikipedia’s permeable community protocol\\n* Roam’s bidirectional linking\\n* Reddit’s contribution model\\n* Github’s change management\\n* Web3-native token-gating, identity, and payment tools\\n\\nWe’d love to hear from you. What does documentation and knowledge management look like for your web3 org?\",\"timestamp\":1633976552,\"title\":\"The State of DAO Documentation & Knowledge Management\",\"publication\":\"creators\"},\"digest\":\"_SCwA0X2VqVePjkQUOtnhuc5ZFHkCMTL-q5OWmOgrUs\",\"authorship\":{\"contributor\":\"0xB91833386627cb178D99fEbad89236E35C0AD43f\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"yflCDPdKTrXJBnWx7YL2d25ZAo3_Mbj4dR6iYZzXi4U\\\",\\\"y\\\":\\\"EfxE3aVsXAV9SF2SfS2ozYbcswTnjzZwjPABOEKBX68\\\"}\",\"signature\":\"xZA2zNSsIByg1MXxfDPk50qvBaGk-o5Cb-ZsDOuHet4Y3bbP4eWzwKrM4FlXDtEphTpcQs0vcngSrA-JkZDSkg\",\"signingKeySignature\":\"0x1ce09ef8a4343aabe56a6e7d7968ddd5c9209dff4eab1405e1212905d616184f0db412fc6c14decabb67a2b600b8a8b3debac80e162769b6c34d137069c63edb1c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"yflCDPdKTrXJBnWx7YL2d25ZAo3_Mbj4dR6iYZzXi4U\\\",\\\"y\\\":\\\"EfxE3aVsXAV9SF2SfS2ozYbcswTnjzZwjPABOEKBX68\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"qTeJ-VeKfuijliliIZHmbFYzcIZXx3lJdbORVdPWDUk\"}"