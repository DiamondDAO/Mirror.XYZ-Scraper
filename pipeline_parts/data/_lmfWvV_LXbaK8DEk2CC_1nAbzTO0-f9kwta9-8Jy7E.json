"{\"content\":{\"body\":\"如果你有二进制逆向的经验，那么以太坊智能合约的逆向是比较容易上手的。但首先我们要知道以太坊智能合约是如何运行的：\\n\\n以太坊虚拟机（EVM）是一种基于栈的、准图灵完备（quasi-Turing complete）的虚拟机。听起来云里雾里，hum？好吧，EVM是智能合约的执行时环境，它是完全孤立的沙盒：运行在EVM中的代码无法访问网络、文件系统或其他进程。\\n\\n当创建一个智能合约的过程是怎样的？将EOA与nonce计算出一个地址（这个地址当然是空的），然后EOA向该地址发起一笔交易，这笔交易包含数据信息（payload）。的交易被发送至该空地址时，其数据信息将作为“输入数据”在EVM中执行，而其“输出数据”将作为代码永久地保存在合约地址中。需要注意的是：**Solidity这样的高级语言是无法在EVM中被直接执行的，代码会被编译成更加接近机器的低级语言—操作码（opcode）来执行。我们的目的，就是把操作码尽可能地还原成高级语言，以分析其逻辑。**\\n\\n***EVM与操作码（Opcode）***\\n\\nEVM是基于栈的虚拟机，为了方便计算，EVM定义了以32个字节为一个词（word）进行操作，栈中最多存储1024个词。\\n\\n为了方便计算，EVM定义了以32个字节为一个词（word）进行操作，栈中最多存储1024个词。\\n\\n![](https://images.mirror-media.xyz/publication-images/rhk326iYqNKpnTEfQftqh.png?height=118&width=1133)\\n\\n在执行上图的加法运算时，EVM的实际流程是：\\n\\n1. PUSH b, 将b推入栈\\n2. PUSH a, 将a推入栈\\n3. ADD, 栈顶两列相加\\n\\n上述的PUSH，ADD称为操作码（opcode），是虚拟机可以直接执行的指令，目前EVM定义了大约140个操作码，几乎可以完成所有的计算（图灵完备）。\\n\\n操作码可以简单地分为以下几类：\\n\\n§ 栈操作码（POP, PUSH, DUP, SWAP）\\n\\n§ 算术/比较/位运算操作码（ADD, SUB, GT, LT, AND, OR）\\n\\n§ 环境操作码（CALLER, CALLVALUE, NUMBER）\\n\\n§ 内存操作码（MLOAD, MSTORE）\\n\\n§ 硬盘操作码（SLOAD, SSTORE）\\n\\n§ 终止操作码（STOP, RETURN, REVERT, INVALID. SELEFDESTRUCT）\\n\\n**字节码（Bytecode）**\\n\\n为了方便存储操作码，EVM采用字节码（Bytecode）来对操作码进行标记。一个字节等于两位16进制数，因此最多存储256个操作码。\\n\\n![EVM字节码-操作码参照图](https://images.mirror-media.xyz/publication-images/a8Nx7FdCqL3muE0p1k5DP.png?height=437&width=1431)\\n\\nEVM执行时，字节码将按照字节（即每两位16进制数）划分执行。字节0x60-0x7f（PUSH1 – PUSH32）是特殊的字节，该字节后的字节数将作为输入压入栈中。\\n\\n下面来看一组字节码的实际执行步骤：0x6002600101\\n\\n1. 0x60是特殊的字节码（PUSH1），它取之后的一个字节0x02作为输入。\\n\\n因此0x6002在EVM中是PUSH1 0x02\\n\\n1. 同理0x60是特殊的字节码（PUSH1），它取之后的一个字节0x01作为输入。\\n\\n因此0x6001在EVM中是PUSH1 0x01\\n\\n1. 0x01对应直接码ADD\\n\\n因此，上述的字节码在EVM中是对2和1进行求和运算，它先后将0x02和0x01压入栈中，再将栈顶的2个数字弹出栈进行相加，最后将结果0x03压入栈中。\\n\\n**小结：**\\n\\n1、创建合约就是往空地址发一笔带合约数据的交易，然后这些数据就固定在了这个地址，变成了一个合约。\\n\\n2、EVM执行时，字节码是以字节为单位（即每两位16进制数）读取并执行的。以0x6002600101 为例，执行顺序为 60 02 →  60 01 → 01 \\n\\n \\n \",\"timestamp\":1641619467,\"title\":\"以太坊智能合约逆向分析与实战：（1）以太坊虚拟机原理简析\"},\"digest\":\"5xxK9HnCnGOiHPViKsZN71DsPl9pLSN0UZCCI5wlPPw\",\"authorship\":{\"contributor\":\"0x01aC3FF155739D34948f1af53f24524149c9d928\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"WAJ5ApaAmpApJREC5KAEfxthVrAZRIY353GG0MK-QQ4\\\",\\\"y\\\":\\\"itSjj1WaYCHRNwsiaX1nfNpvZIeu9T7BX800ex_dXDU\\\"}\",\"signature\":\"qed_G2Cmiriy7yYx1gdEmR5XeS0PNFHQbuimxAy9KpsvGQTY05idBIJcahaIw2cRHhq1N_Nm90ti4wvAR-7vtQ\",\"signingKeySignature\":\"0x933b1c681d0085961433adc74e77c1a43ae57097ec89d80cbf4ac54f4646d8482a601ebb65fca3791c8c67540a9c8f2a76058b934c35f2dd7f263fbcad46c1a71b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"WAJ5ApaAmpApJREC5KAEfxthVrAZRIY353GG0MK-QQ4\\\",\\\"y\\\":\\\"itSjj1WaYCHRNwsiaX1nfNpvZIeu9T7BX800ex_dXDU\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"5xxK9HnCnGOiHPViKsZN71DsPl9pLSN0UZCCI5wlPPw\"}"