"{\"content\":{\"body\":\"***Scaling refers to a system‚Äôs ability to sustain an increase in bandwidth. Particularly in the case of Blockchain networks, this means supporting a higher transactional throughput as well as a greater number of nodes. So what does this look like? And what are the limitations? How can we even begin to approach a problem like this? Let‚Äôs find out together as we explore the ‚ÄòScalability Trilemma.‚Äô***\\n\\n***\\n\\n## Scaling a Distributed Network\\n\\nLike any network, as capacity goes up, so too does its complexity. This gets much harder when we‚Äôre talking distributed networks. Fortunately, we can *[‚Äòstand on the shoulders of giants‚Äô ](https://wikipedia.org/wiki/Standing_on_the_shoulders_of_giants)* to reach some perspective by looking at **[Brewer‚Äôs ‚ÄòCAP‚Äô Theorem ](https://wikipedia.org/wiki/CAP_theorem)**.\\n\\nFirst published as the ‚ÄòCAP Principle‚Äô in 1999, ‚ÄòBrewer‚Äôs Theorem‚Äô basically states that distributed systems must sacrifice being either ‚Äò**C**onsistent‚Äô or ‚Äò**A**vailable‚Äô in the presence of network ‚Äò**P**artitions‚Äô (CAP).\\n\\n*   **Consistency** - Responses ***are*** guaranteed to be up-to-date *and* accurate, or an error will be returned\\n*   **Availability** - Responses are ***not*** guaranteed to be up-to-date *or* accurate, but will ***always*** be returned\\n*   **Partition Tolerance** - Withstanding a network splitting into distinct sub-networks, kinda like ‚Äòforking‚Äô\\n\\n![](https://i.ibb.co/sPwcQ7v/CAP-Theorem-The-Parts.png)\\n\\nThis often gets confused as a ‚Äòpick two‚Äô scenario, when in reality, it‚Äôs a lot more about choosing between ‚ÄòConsistency‚Äô and ‚ÄòAvailability.‚Äô\\n\\nThat makes a lot of sense when you think about it too. Distributed networks are inherently vulnerable to forking (*partitioning*). And if you‚Äôve ever had to write penalties in grade school, you‚Äôll know every line can be just a little bit different from the next. Even if you thought you were slick by running from top-to-bottom doing each letter at a time, each line would just look different (not that I‚Äôd know anything about that üôÑ)\\n\\nNow, you could have taken your time, carefully writing each line (or letter) with a monk-like focus, determined to craft your masterpiece and prove you‚Äôd learned your lesson‚Ä¶but that accuracy will have taken more time. Or you could have just flown through it, your pencil transcending space and time, each line (or letter) appearing in the blink of an eye, just wanting to get it over and done with. So what if it‚Äôs not consistent? At least it got turned in, right?\\n\\n![](https://i.ibb.co/23wT44f/893-C51-B9-16-D4-4597-8-CF5-4-B39-CC33-CC9-E.gif)\\n\\nIn either case, you made the choice between getting it done fast or getting it done accurately: available, or consistent. The lines will just be inherently different, even more so as the number of lines goes up, especially if you weren‚Äôt the only one writing a penalty. Your lines and Tommy‚Äôs lines can look a lot different, even though you have the exact same penalty and it was totally Tommy‚Äôs fault to begin with.\\n\\nIf we apply this to distributed networks, each line is like a node on the network, and in much the same way we chose between getting the penalty done accurately and getting it done fast, we also need to choose between whether our network cares more about consistency or availability.\\n\\nFor example, travel directions can change for a variety of reasons. Since it‚Äôs safe to assume most people would prefer *not* to be potentially stranded in the middle of nowhere and eaten by a family of bobcats, our network should prioritize *consistency/accuracy*. On the other hand, we should prioritize *availability* for something like the geolocation of a historical landmark since that shouldn‚Äôt change‚Ä¶and if it *does*, well, we‚Äôve got bigger issues to deal with.\\n\\nSo then, how can we apply all this to Blockchain architecture? It‚Äôs a distributed network, it‚Äôs vulnerable to partitioning, and we stopped trusting Tommy after that whole debacle. This leads us to a concept known as the ‚ÄòScalability Trilemma.‚Äô\\n\\n## The Trilemma\\n\\nThe ‚ÄòScalability Trilemma,‚Äô in many ways, reframes Brewer‚Äôs Theorem. In it, [Ethereum ](https://ethereum.org/) co-founder Vitalik Buterin proposes that within current Blockchain technologies, there will always be a trade-off between Scalability, Security, and Decentralization when dealing with traditional approaches.\\n\\n*   **Scalability** - Efficiently sustaining an increase in bandwidth, that is, handling more transactions (Brewer‚Äôs ‚ÄòAvailability‚Äô)\\n*   **Security** - Guaranteeing the correctness and integrity of a network, including the ability to resist attacks (Brewer‚Äôs ‚ÄòConsistency‚Äô)\\n*   **Decentralization** - The degree of resistance to large centralized actors, who might collude to manipulate data (Brewer‚Äôs ‚ÄòPartition Tolerance‚Äô)\\n\\n![](https://i.ibb.co/x5bwRt2/blockchain-trilemma.jpg)\\n\\nUnlike ‚ÄòBrewer‚Äôs Theorem‚Äô, this *is* much more of a ‚Äòpick two‚Äô scenario:\\n\\n1.  Prioritize ***Scalability*** and ***Security***, and we sacrifice ***Decentralization***\\n2.  Prioritize ***Scalability*** and ***Decentralization***, and we sacrifice ***Security***\\n3.  Prioritize ***Security*** and ***Decentralization***, and we sacrifice ***Scalability***\\n\\nOK, but what does this mean?\\n\\nWe already know that more nodes means more complexity, and since we don‚Äôt want our assets pulling a ninja vanish, this also means more time spent on validating data.\\n\\nIf we want less complexity and time, we need to scale back the number of nodes on our network. But wait‚Ä¶that‚Äôs centralization! Not that way! The other way, *de*centralization. Centralization means trusting a smaller number of nodes, and we don‚Äôt want to sacrifice security like that. No thank you!\\n\\n![](https://i.ibb.co/5YkYVtg/9-D150842-0-E88-4290-A6-BE-CA6-D60-B50-F03.gif)\\n\\nBut then, what do we do? We can have fast *and* accurate transactions, but not without sacrificing decentralization. And if we rely on a smaller number of nodes to gain speed, we have to extend a great deal of trust since there are fewer nodes validating data.\\n\\nSince we‚Äôd *really* prefer to steer away from centralization, and we don‚Äôt want to sacrifice security, that leaves us with improving the ways that we can scale‚Ä¶but how does that work!?\\n\\n## A Layered Approach\\n\\nTo figure out the different ways we can improve scalability, let‚Äôs take a look at the different architectural layers of a Blockchain. The layering of a Blockchain is roughly analogous to the [OSI Model ](https://wikipedia.org/wiki/OSI_model) which abstracts the protocols and concepts of computing or telecommunications systems into distinct layers.\\n\\n![Layer 1 vs Layer 2 - thecapital.io](https://i.ibb.co/VtnvsCj/1-j-D2-Wo-Trsrtc-V6-MBIApbq5-Q.png)Layer 1 vs Layer 2 - thecapital.io\\n\\nIn Blockchain architecture, Layer-1 (L1) is considered the Base Layer. It‚Äôs the lowest level where solutions fundamentally change the way the Blockchain works. This usually involves things like increasing the size of a block, decreasing the size of transactions, consensus changes like switching from [PoW ](https://wikipedia.org/wiki/Proof_of_work) to [PoS ](https://wikipedia.org/wiki/Proof_of_stake), or [sharding ](https://wikipedia.org/wiki/Shard_\\\\(database_architecture\\\\)). This also makes L1 solutions particularly tied to the ‚ÄòScalability Trilemma‚Äô as L1 *is* the main network itself. We‚Äôre unavoidably going to make trade-offs here if we want to scale. Remember, we can write our penalty fast or consistently, but not both.\\n\\nWhat happens when we look at Layer-2 (L2) then? This is where things get interesting. If L1 solutions change the *way* a Blockchain works, L2 solutions change the way you *use* a Blockchain. We no longer *have* to rely solely on using the main chain. That‚Äôs right, we can offload overhead onto a secondary network which can work a lot differently. All that matters is that the final result ends up on the main chain.\\n\\n> *If L1 solutions change the *way* a Blockchain works, L2 solutions change the way you *use* a Blockchain.*\\n\\nTo put it another way, using L2 is kinda like the teacher revealing that they never *technically* said we have to do it all by hand‚Ä¶all they really wanted us to turn in was the same line repeated 50 times‚Ä¶\\n\\n![](https://i.ibb.co/7Qsr2jJ/724-B6-C16-3352-4267-A85-A-D5-E8554-D136-C.gif)\\n\\n## Conclusion\\n\\nAs we‚Äôve seen, there‚Äôs a *lot* to consider when it comes to scaling a Blockchain network. There are always trade-offs to be made, but that doesn‚Äôt mean we can‚Äôt rethink solutions to a problem. Sometimes a bit of perspective and taking a different approach reveals that our limitations were based on assumptions about the scope of what we *can* do‚Ä¶\\n\\nAll it takes is a little bit of thinking outside the Blockchain ü•Å\\n\\n![](https://i.ibb.co/1bBSGLS/62-BCB496-DAC0-405-A-8-ACB-6-AB5-FB9653-D7.gif)\\n\\n***\\n\\nThe journey doesn‚Äôt end here! Stay tuned to the [MarketSquare Blog](https://marketsquare.io/blog) where we‚Äôll be exploring more technical topics just like this one, including what the different Layer-2 solutions are and how they work.\\n\\nLet us know if there are particular topics you‚Äôd like to learn more about too. We‚Äôre only just getting started, my friends ü¶æ\\n\",\"timestamp\":1633531282,\"title\":\"The Scalability Trilemma\"},\"digest\":\"uYdMUghpqq92b3U_B2Nb8Ia0LQt-Ur_ZoGmE--eqOKc\",\"authorship\":{\"contributor\":\"0xb55C20A9883B2866486D345d754e73290Cf444CE\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"hqF3e7On_gzSnXvUCvrBGDW6FGKQZTBw8KbqmWEGI6A\\\",\\\"y\\\":\\\"DAkkCHZMRij17OM54XKJuvj3k2Co2ZF1mpg8S8A05NM\\\"}\",\"signature\":\"c4OmoJxGYsHFmyVHZB043t9ezfiSm0nzvIj3uW-bgIVciEpSLvSlwDMnGE7BxiRpx8WTCvCh-ysS6JvcD9Vi6w\",\"signingKeySignature\":\"0x2c42f3dc296c1b91b616453eaeb016984effaae315fba54ce5c34c62c7a41bb1426cec5d0b4f5d616ec4e9d768d5c26a15aa9d36cee5f388aaa5f26a489110331c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"hqF3e7On_gzSnXvUCvrBGDW6FGKQZTBw8KbqmWEGI6A\\\",\\\"y\\\":\\\"DAkkCHZMRij17OM54XKJuvj3k2Co2ZF1mpg8S8A05NM\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"hfLcE9xOrnoUIbQDDtOOmnRJ60DoTJdkpyOCFOUtQB0\"}"