"{\"content\":{\"body\":\"*This post was originally published January 17, 2019 on [Medium](https://medium.com/whiteblock/canto-overview-5f8f3a6f7dad).*\\n\\n\\n---\\n\\n*Scaling Ethereum through ephemeral economies*\\n\\nTo date, scaling Ethereum has taken two forms: Layer 1 client improvements (L1), or Layer 2 (L2) mechanisms. While L1 scaling is realised through incremental code upgrades, L2 comes in the form of higher level external systems that leverage the greater security of the basechain.\\n\\nCanto’s unique value proposition emerges as a hybrid with a foot in both camps. Simply put, client changes in the form of a new L1 subprotocol would enable L2 mechanisms to bloom more easily. The spec was recently released to the ETH Magician’s forum, check them out below:\\n\\n* [canto-ethereum/spec](https://github.com/canto-ethereum/spec/blob/master/canto.md) (broken link)\\n* [CANTO: A Scalable Blockchain System Interconnect Model](https://ethereum-magicians.org/t/canto-a-scalable-blockchain-system-interconnect-model/2203)\\n\\nI highly recommend reading both in full, as most of the information in this overview is taken in some form from there. If you’re short on time or technicals, follow along as we jump into what makes Canto an idea worth pursuing.\\n\\n## ORIGIN\\n\\nThe idea for Canto came up over beers between [Antoine Toulme](https://twitter.com/_tmio) (Consensys) and [Zak Cole](https://twitter.com/0xzak) (Whiteblock) in November 2018. Their discussion focused on a few roadblocks: ETH 2.0 is going to take some time and there’s no guarantee that ETH 1.0 (1.x) improvements would all be implemented. How could they help push Ethereum forward with the current environment? From this frustration Canto was born. The name comes from poetry, referring to “one of the major divisions of a long poem.”\\n\\nFollowing this initial brainstorm and some work, Will Meister (Consensys) and Daniel Choi (Whiteblock) were brought in to hash out some of spec details.\\n\\n## ARCHITECTURE: SUBPROTOCOLS\\n\\nConceptually, Canto is simple: the proposal hinges on a new Ethereum subprotocol. Every up-to-date ETH client includes four subprotocols, denoted by a short prefix: eth, les (light clients) shh (whisper), and bzz (swarm). The subprotocols facilitate important activities onchain in addition to the basic functions of the network.\\n\\n![Antoine explaining Ethereum subprotocols](https://miro.medium.com/max/1400/1\\\\*JlW4an2qWUm3qqxc87mI4g.png)\\n\\nHere’s a quick analogy. Imagine a client as a smartphone that only has 4 apps installed. Connecting users is limited to the design of only these 4 apps. Of course, this smartphone still allows people to do productive things, but what if another app could be added? Canto’s new app is a subprotocol named “can.”\\n\\n“Can” would allow the creation of subnets, a catch-all term from networking: if Ethereum is the top-level network, Canto makes sub-networks that reside within it. These are flexible constructions that allow incredible design diversity, encompassing the potential of Plasma-like sidechains, novel testnets, ephemeral interactions, channels, games, and [more](https://github.com/canto-ethereum/spec/blob/master/canto.md#examples).\\n\\nBeing embedded within a client at L1, but also facilitating an expressive L2. It permits mainchain to subnet communication while in the form of a client-integrated mechanism generator. It’s difficult to overemphasise how beneficial this arrangement is when compared to Plasma chains that have gone live. These require extensive coordination between operators and validators, maintenance, and monitoring to remain viable. While there are benefits like dependability and security, the marginal cost for each new chain is still quite high. This prevents rapid iteration and optimization of parameters for unique uses.\\n\\nHere’s a rough equivalent: the role the ERC20 standard played during the 2017 runup. A thousand flowers (and some weeds) bloomed:\\n\\n![This is why we can’t have nice things.](https://miro.medium.com/max/1400/1\\\\*fABBCQGv4jGJeaijy7AfTw.png)\\n\\nWhile some projects may have considered launching their own chains, the absence of hash-security combined with the network effects an ERC20 utility token precluded the notion (exchange support, existing high-quality code, etc.). Similarly, Canto could facilitate the coordination node services, operators, validators and users in a streamlined mechanism. Granted, hindsight shows that the majority of ERC20s were poorly designed, unnecessary, or outright scams. For better or worse, the barrier for ephemeral economies has dropped significantly.\\n\\nA final comparison between ICOs and Canto is the role of ETH in this ecosystem. ETH from fundraising served first as operational runway for legitimate efforts, while the less scrupulous took large paydays and ran. Comparatively, Canto allows ETH to remain onchain as a staked bond placed in order to create the subnet. This further removes the need for high-stakes fundraising in deference to small scale experimentation.\\n\\nThe coordination process surrounding this creation would naturally accrue to marketplaces — see [Livepeer’s Transcoder Explorer](https://explorer.livepeer.org/transcoders) for a good example of service providers differentiating around a few simple variables.\\n\\n![Livepeer Transcoder Explorer](https://miro.medium.com/max/1400/1\\\\*8O1GGcLwSAT4VA53eHzsGQ.png)\\n\\nIn Canto, the design space expands from 1 to N dimensions. To start, there are the initialising parameters: consensus mechanism, privacy, gas economics, whether to implement research initiatives like state rent, among others. Will the subnet communicate with other subnets? How will node operators be rewarded? Templates, and template companies a la Wordpress, will spring up in and around these marketplaces. There is also room for the generalized mining narrative to thrive, as facilitators and supporters of subnet economies.\\n\\nSecond order effects of Canto, will be interesting to follow as it develops traction within the community.\\n\\n## SMART CONTRACTS\\n\\nEvery subnet begins and is maintained through the same core of contracts, hosted on the Main ETH chain — however, the spec [section on Contract Creation](https://github.com/canto-ethereum/spec/blob/master/canto.md#canto-smart-contract-design) is a better source for technical readers.\\n\\n![Routing, Factory & Gateway Contracts](https://miro.medium.com/max/1400/1\\\\*MxdtFTjcYBMRy7UhUab2Jg.jpeg)\\n\\n## COMPARED TO PLASMA\\n\\nThough Canto may initially appear similar to Plasma, there are some important distinctions between them.\\n\\n**Similarities:**\\n\\n* Both are L2 scaling solutions\\n* Both require some degree of coordination to kick off the network\\n* Shared challenges in the design of mass exit mechanisms (load balancer back to mainnet).\\n\\n**Differences:**\\n\\n* Canto ships with native flexibility when it comes to hardware and validator requirements. Discussed previously, Plasma requires significantly more coordination, whereas Canto might start as a wild west marketplace predicated on degrees of reputation.\\n* Smart Contracts on Plasma are a challenge — read [“Why is EVM-on-Plasma hard?”](https://medium.com/@kelvinfichter/why-is-evm-on-plasma-hard-bf2d99c48df7) from [Kelvin Fichter](https://medium.com/u/60c1f53c90d?source=post_page-----5f8f3a6f7dad--------------------------------).\\n\\n## COMPARED TO POLKADOT\\n\\nOutside of Ethereum proper, Canto might also resemble [Polkadot](https://polkadot.network/#cover), a Parity project; again, there are important differences.\\n\\n**Similarities:**\\n\\n* Both are systems of smaller ‘dapp-chains’ that coordinate around a connecting base chain.\\n* Both enable smart contracts.\\n\\n**Differences:**\\n\\n* Canto is a ‘plug and play’ solution that runs within Ethereum, while Polkadot on a separate blockchain with a new architecture.\\n* Polkadot has a more rigid architecture that only allows for PoS — while the Ethereum basechain only permits PoW currently. Canto offloads onchain activity to to flexible subnets that can be PoW, PoS, PoA\\n* Canto’s subnets are [“logically isolated from one another, responsible for their own security and function”](https://ethereum-magicians.org/t/canto-a-scalable-blockchain-system-interconnect-model/2203/7) while Polkadot’s parachains require interoperation in order to pool security collectively.\\n* Every parachain on Polkadot operates under on-chain governance. Canto leaves any governance (or lack of it) up to each subnet to decide.\\n\\n## REMAINING ROADBLOCKS\\n\\nWhile Canto is conceptually straightforward, there are still challenges that might slow implementation and the growth of a mature ecosystem.\\n\\nTo start, there’s the actual process to get a subprotocol implemented in a client. Aside from “eth”, light client support launched in [January 2017](https://blog.ethereum.org/2017/01/07/introduction-light-client-dapp-developers/), Swarm in [December 2016](https://btcmanager.com/new-release-of-ethereums-client-geth-awakens-the-swarm/), when the fledgling ecosystem was relatively small. Given the push today towards ETH 2.0 (and ETH 1.0, 1.x), it’s fortunate that that Canto doesn’t require a hard fork. A single client is all that’s needed to start demonstrating utility, but getting one onboard will take some effort.\\n\\nAdditionally, exit conditions still need to be developed and iterated on. Hopefully the developers will be informed by the large design space growing around Plasma. This is an open area of research that will need careful attention prior to release.\\n\\nI’m looking forward to seeing development progress over the coming months. Hopefully sometime soon the larger Ethereum ecosystem will get to explore the capabilities of subnets.\\n\\n\\n---\\n\\n## WHAT’S NEXT FOR THE TEAM\\n\\nTo start, they are continuing to build out PoCs in Java and Go. You can track their Github progress [here](https://github.com/canto-ethereum) (broken link).\\n\\nThanks to Antoine ([@_tmio](https://twitter.com/_tmio)) and Zac ([@0xzak](https://twitter.com/0xzak)) for answering my questions and being super helpful. Please reach out with questions below or on twitter. (@trent_vanepps) \\\\n \",\"timestamp\":1632624880,\"title\":\"CANTO :: Overview\",\"publication\":\"trent\"},\"digest\":\"a4YhOMZBSD503my5o2-hFLfuY49OOcSFNWSMKBtBKSI\",\"authorship\":{\"contributor\":\"0x4C0a466DF0628FE8699051b3Ac6506653191cc21\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"FaggmySWmxMOpjsAfoYTethf_ADgXzieaPjX8yB3wkE\\\",\\\"y\\\":\\\"fvqw5kCn0zT3rC0oevHu8o4RDX0bca8s4EVI4INP5Yo\\\"}\",\"signature\":\"foNWs-YAkbWxGL5xbsQRcdkHAj271Up2nmLGLndt-tfH9td2H_qdINKsVon_XXQiEmzWkZ9P-d7dNDgypuIXPA\",\"signingKeySignature\":\"0x55ee1e3e39dbb98d83dd8af98b152438a1a67645ff93af2b0202fb2f34e7877c6a45f9b9aa25e6ecaf09bb434ee32c4b90969c17b8fc2353f68c4d8c6eebce781c\",\"signingKeyMessage\":\"I authorize the publication of articles on trent.mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"FaggmySWmxMOpjsAfoYTethf_ADgXzieaPjX8yB3wkE\\\",\\\"y\\\":\\\"fvqw5kCn0zT3rC0oevHu8o4RDX0bca8s4EVI4INP5Yo\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"uuwo-UGbsc4O6jTgYP3q4zB8Rik-dD1BQQR_21lXQMc\"}"