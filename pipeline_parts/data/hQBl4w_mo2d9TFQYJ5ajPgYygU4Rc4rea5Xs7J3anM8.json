"{\"content\":{\"body\":\"译者注：这篇文章具有一定的争议，但提出的观点值得思考，它给出了一种新的Web3应用的构建思路，值得一读，以下是全文译文，原文链接：[deso.org/blog/smart-services](http://deso.org/blog/smart-services)。\\n\\n> **Web3必将建立在智能服务之上**\\n\\n![](https://images.mirror-media.xyz/publication-images/qpq5ASu8hadL10XaK1w8P.png?height=1846&width=3200)\\n\\n当Brian Armstrong创办Coinbase时，他做了一个逆向思考：他打赌用中心化的方法来建立一个加密货币交易所，会在短期内带来更好的用户体验，因此会超越大量去中心化交易所。今天看来，这是显而易见的，因为当时根本无法建立一个去中心化交易所，即便如此在当时，这个想法仍然是一个异端邪说。\\n\\n决定建立一个中心化的加密货币产品是有很大争议的，这也是Brian[与他的第一个联合创始人分道扬镳的主要原因](http://wired.com/2014/03/what-is-bitcoin/)。从长远来看，实用性往往是取得胜利的关键，但短期而言，要放下去中心化的信仰来支持它是极其困难的。\\n\\n**今天，我们在这里讨论一个类似的“异端邪说”：我们相信不久的将来，智能合约所建立的大部分计算将发生在中心化的可组合的链下智能服务中，这就是我们将要描绘的场景。**\\n\\n当然，区块链在存储**资产**和**内容**方面仍然是非常有用的，但我们相信**计算**将几乎完全转移到链下。这是因为智能服务使得web2开发者无需学习任何新的编程语言，就能支持原生的链间通信和可组合性，同时比智能合约有更好地可扩展性。与智能合约相比，虽然这些优点是以去中心化和信任为代价的，但是我们相信，开发者和更广泛的市场将会毫不犹豫的选择智能服务而非智能合约。\\n\\n## 智能合约很难上手\\n\\n今天，如果你想写Web3应用，这个领域的大多数人都会告诉你写智能合约。然而要写智能合约，你不仅要学习一种新的编程语言，如Solidity或Rust，而且要适应一种全新的“事件驱动”的编程范式，[同时这种范式充满了陷阱](https://populus.readthedocs.io/en/latest/gotchas.html)。在你学会了如何写代码和处理所有的问题之后，你还必须尽量减少存储，因为支持智能合约的链并没有配备强大且廉价的存储以及索引能力。更糟糕的是，一旦你有了一个可运行的智能合约，它也会被限制在一条链上。一个以太坊智能合约是不能直接调用Avalanche或Solana智能合约的，反之亦然。\\n\\n智能合约对大多数开发者来说真的很难，我们认为这使得进入Web3的门槛比需要的高得多。更重要的是，由于缺乏跨链的互通性和可组合性，进一步阻碍了开发者可以构建的应用。\\n\\n我们认为这有一个更好的解决方法。具体来说，是一种能够提供与智能合约相同功能的方法，但只使用web2的API以及Javascript/Python，而这些都是数百万web2开发者已经熟悉的技术。你想象一下，如果能用已经被数以百万计的Web2开发者广泛理解的技术来构建应用，将会产生多大的变革？更重要的是，如果你的代码可以一次性无缝接入所有区块链，甚至是不支持智能合约的区块链，如比特币，那将会发生什么？\\n\\n我们称这种新范式为智能服务，我们相信它将成为绝大多数Web3应用的驱动力，并有效地取代智能合约，成为开发者构建Web3应用的主流方式。为什么呢？因为，正如我们将讨论的那样，在很多方面智能服务比智能合约做得更好，比如智能服务能够最大限度地提高开发者的可访问性、互通性、可组合性以及可扩展性。\\n\\n## 链上与链下：史诗级论战\\n\\n![](https://images.mirror-media.xyz/publication-images/gkHKuxee1kiRyMbkCLMpk.png?height=2073&width=4096)\\n\\n在探讨智能服务背后的细节之前，需要着重注意到，从宏观来看，智能服务用去中心化和抗审查性来换取了面向开发者更强的可访问性、跨链互通性、可组合性和可扩展性。这确实触及了区块链领域的一个现实问题：\\n\\n**在不同场景中，如何选择区块链与中心化的web2服务？**\\n\\n随着时间的推移，会有越来越多的加密货币场景开始转移到链外。即使是最近流行的基于区块链的NFTs，与之相关的图像/视频内容几乎总是存储在链外的，而且拍卖通常也都是在链外进行的。但是这一趋势将把我们引向何处？例如，是否有一天Instagram会以完全集中的方式托管NFTs，就像他们今天托管图片和视频一样？我们不这么认为——至少不全是。\\n\\n一般来说，随着Web3的持续推进，我们认为**资产**和**内容**都仍将被存储在链上，而**计算**将转移到链外，这将有效地降低对智能合约的使用。例如，我们相信你的代币、你的NFTs和你的社交图谱将从链上大大受益。但是基于计算的服务，允许你借出、交易、入股等将转移到链外的智能服务中。有鉴于此，我们认为区块链将继续发挥作用的原因有以下几点：\\n\\n* **抵制审查制度**。当资产和内容存储在区块链上时，没有公司或应用可以冻结某人的资产或对其进行审查。这意味着，在用户使用智能服务进行交换、众筹或贷款等计算的同时，会更愿意将他们的代币等重要资产存储在区块链上，\\n* **可移植性**。尽管智能服务可以通过Web2 APIs进行互通，但只要你的资产是放在区块链上的，就能保证了你和第三方开发者将永远可以访问它们。这也意味着，一个智能服务上的代币或帖子将显示在所有其他智能服务中，就像今天比特币等资产可以在加密货币交易所之间移动一样。\\n* **克服监管限制**。通过完全消除对中心化一方的依赖，区块链有时可以满足中心化服务无法满足的监管要求。例如，在区块链上发行代币或NFTs可以抵御证券法的干扰。\\n\\n综上所述，尽管在链上存储东西的好处可能看起来很强大，但我们认为，除了用户需要存储的最重要的状态信息之外，智能合约将很难战胜智能服务。为什么呢？嗯，想想看。如果智能服务只要求开发者知道Javascript和web2 APIs，那么我们能让数以百万计的开发者发挥作用，而在此之前他们几乎不能为web3作出贡献，因为他们不知道Solidity或Rust。在初次编写智能服务时，我们相信在涉及到应用的计算部分时，这些开发者中的绝大多数会选择对区块链的优势做出部分妥协，以快速迁移并运行他们的产品，就像Brian Armstrong多年前对Coinbase所做的那样。再进一步讲，你会愿意赌谁能找到Web3的杀手级应用：是数以百万计能编写不受限的Javascript的web2开发者，还是几千个被Gas费困扰的Solidity/Rust开发者呢？\\n\\n鉴于上述情况，你可能会问：如果很多计算被转入到链外的智能服务中，那么智能合约还能有什么用处？我们认为智能合约在定义资产和内容的新标准方面将会发挥作用，比如ERC-20（代币）或ERC-721（NFTs）。例如，如果你想用以太坊代币做一些事情，你仍然会在以太坊上通过ERC-20的智能合约来转移资产，即使更高级的计算可能发生在你使用的智能服务中。然而，随着时间的推移，需要注意的是，DeSo等定制化区块链将与支持智能合约的区块链展开竞争，这些区块链在效率上优于智能合约的实现。因此，虽然智能合约仍然可能是发现基于区块链的新产品的有效工具，但我们认为存在一个重大风险，即需要高吞吐量的应用最终会将其资产和内容转移到能根据现有的扩展需求进行定制化的区块链上。\\n\\n## 什么是智能服务？\\n\\n![](https://images.mirror-media.xyz/publication-images/jEAUNoe5vj8nnfLtSEjHp.jpeg?height=2251&width=4001)\\n\\n智能服务可能看起来像一个花哨的术语，但我们实际上只是指一个简单的集中式网络服务，它符合某些基本约束。正如我们将讨论的那样，这些约束条件允许智能服务之间保持可发现性和互通性，不管它们是构建在哪个底层区块链。我们将在下面列出这些约束条件。任何满足以下条件的网络服务都可以被看作智能服务，不管它是用哪种技术来实现的（NodeJS、Django等流行的网络框架）：\\n\\n* \\\\*\\\\*一个智能服务有一个传统的web2域名，其他服务可以用它来调用，\\\\*\\\\*例如：mysmartservice.com\\n* **一个智能服务有一个REST API，至少实现了以下关键接口：**\\n\\n  > **/get-address**\\n  > * 每个智能服务至少有一个链上钱包，它标识为一个地址或公钥。这允许智能服务接受用户的资金，并以类似智能合约的方式对其进行任意操作。所有智能服务都需要定义 */get-address* 接口，它只是返回用户可以发送资金的地址，以此与智能服务交互。换句话说，*/get-address* 接口使智能服务可以相互发现。\\n  > * 重要的是，智能服务不与特定的区块链绑定。如果一个智能服务需要，它可以返回多个地址，每个地址对应一条不同的链。然后，用户可以向以太坊地址发送ETH，或向DeSo地址发送DESO，并假设智能服务在每种情况下都会做正确的事情。不是所有的智能服务都需要这样做，但他们可以选择这样做。\\n  > * 往智能服务返回的地址存款时可以附带一个通用键值对的元数据映射，该元数据映射将被下面描述的 *trigger()* 函数所使用。\\n  >\\n  > **/get-info**\\n  > * 返回一个包含智能服务重要信息的键值对映射。同时也可以包括对智能服务如何工作以及该怎么做的简单描述。\\n  > * 智能服务可以通过额外的REST API接口实现其他功能。还可以定义标准接口，以便于为智能服务的常用功能引入互通性（需要注意的是，智能服务的价值更多的在于开发的便利性，而不是API的标准化）。\\n  > * 往智能服务返回的地址存款时可以附带一个通用键值对的元数据映射，该元数据映射将被下面描述的 *trigger()* 函数所使用。\\n* **trigger()**\\n\\n  > * 每个智能服务定义了一个触发器（元数据）函数，该函数可以用任何语言编写，每次向智能服务返回的地址（由 */get-address* 返回）进行存款时都会自动调用。*trigger()* 函数会收到一个与存款相关的元数据参数，包括原始交易信息、存款地址和存款金额。\\n  > * *trigger()* 函数正是智能服务框架的神奇之处。通常情况下，开发者必须在区块链上扫描他们感兴趣的交易，这富有挑战、耗时且低效的。有了智能服务，一切都被设置好了，只要检测到有相关的交易，就会立即调用 *trigger()* 函数，所以开发者所要做的就是把它实现好。\\n  > * 从技术上讲这个函数并不是必需的，但它对大多数智能服务来说是至关重要。即：有人存钱，然后智能服务做一些事情。它还使得智能服务在功能方面直接类似于智能合约，这是被智能合约开发者所熟悉的。\\n  > * 同样，*trigger()* 函数也能够以完全跨链的方式运作，例如，当ETH被发送到智能服务的ETH地址时触发授权DESO在钱包之间移动。\\n  > * 随着智能服务框架的成熟，开发者可以用通用的 *trigger()* 函数来代替事件处理函数，如 *onETHDeposit()* 或 *onNFTTransaction()*，这使得代码更容易被编写和理解。\\n\\n## 实例#1：一个代币交换智能服务\\n\\n![](https://images.mirror-media.xyz/publication-images/FxS59EEx_wIAI3R4A5Owl.png?height=2036&width=4096)\\n\\n了解智能服务框架的最好方法是浏览几个简单的例子。\\n\\n想象一下，你想实现一个智能服务，允许某人存入ETH并立即将ETH兑换成DESO，反之亦然。下面就是这个智能服务的大概样子：\\n\\n* 服务将运行在一个域名上，如 desoethswapper.com\\n* */get-address* 将被实现，并将返回智能服务的ETH和DESO地址。\\n* */get-info* 将通过一个键值对映射返回智能服务的使用说明。这个映射还可以包括一些重要的信息，如智能服务在DESO和ETH之间提供的当前汇率、需要收取的任何费用等等。\\n\\n  > **description: \\\"调用 /get-address 并发送DESO到DESO地址以交换到ETH，发送ETH到ETH地址以交换到DESO。在存款的元数据中包括一个键名为'destination'的目的地址。当前汇率在 /get-info 接口中返回，表示每个ETH可以兑换的DESO数量\\\"**。\\n  >\\n  > **exchange_rate: 5.0**\\n  >\\n  > **smart_service_type: \\\"swapper\\\"**，这个字段允许其他智能服务对当前智能服务的行为做出假设。稍后会有更多关于这个的内容。\\n* *trigger(metadata)* 函数在任何语言中都将被大致定义如下，包括 Javascript或Python。\\n\\n![](https://images.mirror-media.xyz/publication-images/8EInWxmupMHjKJZ7zkSIv.png?height=182&width=575)\\n\\n一旦这样的智能服务被定义，任何人都可以调用它，将ETH交换成DESO，反之亦然。你所需要的只是一个域名，desoethswapper.com，然后 */get-info* 调用告诉你如何使用该服务。一旦你知道如何使用该服务，你只需将带有适当元数据的资金发送到智能服务的一个区块链地址（可以从智能服务的 */get-address* 接口获得）上。\\n\\n更重要的是，代币交换智能服务的行为可以被标准化，这样任何在其 */get-info* 接口中定义自己为 swapper 的智能服务都可以与任何其他智能服务自由组合。例如，任何人都可以建立一个类似于 Uniswap 的聚合器智能服务，将所有的代币交换智能服务整合到一个干净的用户界面中。然后，如果你想用货币A交换货币B，类似Uniswap的智能服务可以用最高效的方式路由到任何可以完成交易的智能服务上 。\\n\\n## 实例#2：一个众筹智能服务\\n\\n假设你已经创建了一个ERC-20代币$MYDAO，你想以某种巧妙的方式出售成DESO。也就是说，你想让人们把DESO存入你的智能服务中，并从中获得$MYDAO。这样的智能服务会是什么样子呢？\\n\\n* 首先，它需要有一个web2域名，如 mydaocrowdsale.com。\\n* */get-address* 将简单地返回智能服务的DESO地址，因为这个智能服务只接受DESO。\\n* */get-info* 将描述众筹的条款，并告诉用户需要包括哪些元数据。\\n\\n  > **description: \\\"调用 /get-address 并向返回的地址发送DESO，以购买$MYDAO。在存款的元数据中包括一个键名为'destination'的你的$MYDAO地址。每售出一百万枚$MYDAO，价格就会翻倍。以DESO计价的$MYDAO的当前价格将在 exchange_rate字段中返回\\\"**\\n  >\\n  > **exchange_rate: 10.0**\\n  >\\n  > **smart_service_type: \\\"crowdsaler\\\"**\\n* *trigger(metadata)* 将在每次存款时被调用，并完成用户的购买。它的逻辑看起来如下：\\n\\n![](https://images.mirror-media.xyz/publication-images/qQUNKeRjjk77_flmx8dMK.png?height=255&width=775)\\n\\n很明显，任意复杂的众筹都可以通过简单地修改 trigger() 函数来实现。此外，这些众筹还可以跨越多个区块链，这意味着有人可以使用ETH为其项目筹集资金，即使他们出售的是DESO，反之亦然。\\n\\n## 部署智能服务\\n\\n因为智能服务可以用任何语言编写和部署，所以从技术上讲，部署智能服务没有任何限制。你可以随心所欲地部署一个网络服务，只要它的API可以在互联网上被访问，其他智能服务就能发现它并与之互通。\\n\\n综上所述，我们将可以开发一个 \\\"一键部署 \\\"的功能，允许人们编写简单的Javascript函数，然后将代码即时部署到Firebase等平台上。从长远来看，人们可以想象，Javascript代码本身会被自动部署到���个托管平台上、从代码中提取摘要并完整描述智能服务的功能。\\n\\n这样的平台可以强制要求部署的代码与智能服务中实际运行的代码相匹配，从而实现比现在的智能合约更强大的保障，因为大多数智能合约都是闭源的。智能服务托管供应商之间的应该是高度竞争的，因此从长远来看会相对分散，就像今天的web2托管一样。\\n\\n## 实例#3：一个ERC-20智能服务\\n\\n正如上述所讨论的，由于智能服务比智能合约相对中心化，我们认为智能服务会最先被应用于**计算**，而不是**资产**和**内容**。这意味着ERC-20代币在区块链上仍然是最优的，例如以太坊或DeSo（通过DAO币），因为这将使其持有者的余额具有可移植性和抗审查性。\\n\\n在这里为了展示智能服务的能力，我们还是需要说明一下，即使是类似ERC-20的标准也可以完全定义为智能服务，只需要将[标准的代币转移功能](https://ethereum.org/en/developers/tutorials/understand-the-erc-20-token-smart-contract/)实现为REST API接口（*/total-supply、/balance-of、/allowance、/transfer、/approve、和/transfer-from*）。\\n\\n如果你的智能服务实现了这组接口，你的智能服务就可以无缝地集成到类似Uniswap的聚合器 智能服务中，以支持你交易智能服务的代币。然后你可以把你的智能服务的Web2域名插入类似Uniswap的智能服务中，类似Uniswap的智能服务将知道如何调用你的智能服务的标准化REST API接口，以完成交易。\\n\\n同样，类似Uniswap的智能服务不会被绑定到一个特定的区块链上。理论上，它能够以一种完全不可知的方式在不同链的不同资产之间进行交易。此外，一个完全被定义为智能服务的ERC-20代币将不会受到基于以太坊的ERC-20代币所需的高额gas费的影响。\\n\\n## 关于Layer-2解决方案的说明\\n\\n以太坊Layer-2解决方案（例如Arbitrum或ZK-Rollups）实现了与智能服务类似的可扩展性且提高了不可信度，但是与智能服务相比，这样做的代价是提升了建立应用的难度。例如，你不能仅仅使用javascript和Web2 APIs编写一个定制的ZK-Rollups应用。因此，Layer-2解决方案不能像智能服务那样吸引数以百万计的Web2开发者，我们相信走向链下的最大价值将来源于此。\\n\\n## 结论\\n\\n![](https://images.mirror-media.xyz/publication-images/AmAXmRBRIgezMcrYIj1P7.png?height=2677&width=4096)\\n\\n对开发者而言，智能服务在可访问性、互通性、可组合性和可扩展性方面优于智能合约，当然是以牺牲去中心化为代价的。我们相信，这使得智能服务对开发者更有吸引力，这使得杀手级应用极有可能开始建立在智能服务上，而不是智能合约。一旦这种情况开始发生，我们相信区块链将主要用于存储**资产**和**内容**，而**计算**则移至链外的智能服务。\",\"timestamp\":1641888411,\"title\":\"【译】智能服务：重塑智能合约，带领百万Web2开发者加入Web3\"},\"digest\":\"FnscAjGKaZ5JmiRCLnAMFUnRAOknPT5u7L6XNH0f1Ag\",\"authorship\":{\"contributor\":\"0xb4EC91cB80b44dda04A6D9917fBE8eDf27F4D721\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ZI5DzU9ADOrYaeSrZHqeJxRJRA6R8X2ngfEGOhtKZ84\\\",\\\"y\\\":\\\"dmyu8-ft31ukOpcGPxScp9rzx1tN4CyCBE69fUheWZI\\\"}\",\"signature\":\"4T7W9Pqm4-yP_2Ywn8PurNG76sfWHwV56GdMtjyd8Y5oCpYJEmtQnO5qFgyuyNhCI3ShZ78WJZN_DaeYxYaKmg\",\"signingKeySignature\":\"0xd750867199936d08b06bb292275ee32482dde9e966a94e6a372ad887340ce4d557eb872395c1b87db246f47045c28bebbcbc6c69ae649097379a99650d47d9cd1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ZI5DzU9ADOrYaeSrZHqeJxRJRA6R8X2ngfEGOhtKZ84\\\",\\\"y\\\":\\\"dmyu8-ft31ukOpcGPxScp9rzx1tN4CyCBE69fUheWZI\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"07JwFfyrHU2_GXlCgTNfdfO_R5RXU9Opo9UrRGuDVPc\"}"