"{\"content\":{\"body\":\"Forge is an Ethereum development framework. You can use it to create Solidity projects, manage dependencies, run tests, and more. It is inspired by [Dapp](https://github.com/dapphub/dapptools/tree/master/src/dapp) and has the important similarity that tests are written in Solidity. This is unlike other Ethereum development frameworks to date. It is written in Rust and is very fast.\\n\\nThis is a beginners guide. I will go over how to create a project, manage dependencies, and write tests. The intended audience is someone familiar with Solidity who wants to learn more about developing with Forge.\\n\\n## Getting Started\\n\\nFirst, you need to install [Foundry](https://github.com/gakonst/foundry), which is a broader Ethereum toolkit that Forge lives within. I recommend checking the repo for the latest install instructions, but this is the current install command.\\n\\n```\\n$ cargo install --git https://github.com/gakonst/foundry --bin forge --locked\\n```\\n\\nNote that if you do not have Rust/Cargo installed, you will need to install that, first. See instructions [here](https://www.rust-lang.org/tools/install).\\n\\n([Forgeup](https://github.com/transmissions11/forgeup) is a useful tool for pulling the latest Forge version or point to a specific branch.)\\n\\nNext, create a folder to work in and init a project\\n\\n```\\n$ mkdir forge-tutorial\\n$ cd forge-tutorial\\n$ forge init\\n```\\n\\nGreat! Now you should have two directories inside forge-tutorial: `lib` and `src`.\\n\\nLib is where all your installed dependencies will live. These are managed as git submodules. You’ll see in lib there is already `ds-test` which is a dependency installed by default. `ds-test`, from the creators of Dapp, has a contract with bunch of useful functions and events for testing. You can see the code on Github [here](https://github.com/dapphub/ds-test).\\n\\nSrc is where your code will live. At the top level you’ll see `Contract.sol` and a `test` directory. In `test` is `Contract.t.sol`.\\n\\n## Testing\\n\\nSince this document is geared towards those already familiar with Solidity, I am going focus on testing, as that is mainly what is unique about using Forge.\\n\\n### Getting started\\n\\nRun `forge test` and you should see something like this.\\n\\n![](https://images.mirror-media.xyz/publication-images/prrKqyeC8N8l8nA1XIBO8.png?height=146&width=854)\\n\\nThe test is passing, and it tells you the amount of gas that test function used.\\n\\nLet’s open up `Contract.t.sol` to see what is happening.\\n\\n![](https://images.mirror-media.xyz/publication-images/Ey2ReTlLLB4B2BXIaCOjg.png?height=344&width=548)\\n\\nFirst thing you should notice is that we’re writing tests in Solidity! Many of us have gotten used to writing tests for Solidity in other languages, which is kind of odd when you think about it. Can you think of any other programming language that requires you to test your code in a different language? This is a [big point](https://twitter.com/gakonst/status/1473479120461963264?s=20) for the creator of Forge: how can we make great Solidity developers if every Solidity developer also has to know these other languages?\\n\\nLet’s get into what’s going on. First, we notice that the ds-test import at the top, and that the contract is inheriting from `DSTest` with `is DSTest`. This gives `ContractTest` access to all the handy testing functions/events in `ds-test/test.sol`, which I mentioned above. For example, the `assertTrue` function being used is defined in `DSTest`. I recommend taking a look at the `test.sol` in the `ds-test` folder to see all the different kinds of asserts available.\\n\\n`setUp` a special function that will be called before any of the tests run. Modify the code slightly to see this at work.\\n\\n![](https://images.mirror-media.xyz/publication-images/5PP-oZ6XkT555HdzkYQCw.png?height=492&width=528)\\n\\nIf you run `forge test` this test should pass.\\n\\nChange the 10 to 9\\n\\n![](https://images.mirror-media.xyz/publication-images/qIAYRkNXDnvnbGmtz3OJq.png?height=132&width=484)\\n\\nand run `forge test` and you should see.\\n\\n![](https://images.mirror-media.xyz/publication-images/7bLA07RV_e2AD7ytauwh6.png?height=396&width=904)\\n\\nNice! You’re doing great. It failed, as expected. Note that test functions must have “test” in the name. If the function was just called `example`, it would not automatically run with `forge test`.\\n\\nIf you are expecting a failure, you can prefix the test name with `testFail` rather than just `test`.\\n\\n![](https://images.mirror-media.xyz/publication-images/ut8xIl2ye9GdScJ0Oo_qK.png?height=126&width=550)\\n\\nIf you run `forge test`, this should pass. Note this will work for reverts as well.\\n\\n![](https://images.mirror-media.xyz/publication-images/igtcZ8M2cNkpvxAqn0WjZ.png?height=146&width=540)\\n\\nTo be honest, I find the `testFail` pattern to be kind of odd (you know something failed, but not exactly what), will discuss a preferred option, `expectRevert`, in the Cheat Codes below.\\n\\nTo actually test your contract, first let’s add some code to `Contract.sol`\\n\\n![](https://images.mirror-media.xyz/publication-images/5OeXRzejeWIf3xFYdpBbj.png?height=196&width=866)\\n\\nThen in `Contract.t.sol` you could import this contract and write a test for it like this\\n\\n![](https://images.mirror-media.xyz/publication-images/so4h9yEWR4aLKHhT8XpJK.png?height=518&width=646)\\n\\n### Verbosity, Logging, and Traces\\n\\nWhen running tests, you can specifying verbosity by passing `-v`. More `v`s, the higher the verbosity, with 5 (`-vvvvv`) being the highest. Here’s what each level gets you\\n\\n1: Default (what you’ve seen so far when running tests)2: print logs3: print test trace for failing tests4: always print test trace, print setup for failing tests5: always print test trace and setup\\n\\nLet’s add a log line and run our tests with `-vv` to see it. I’m going to add an `emit log_string` to my code.\\n\\n![](https://images.mirror-media.xyz/publication-images/2zmRZD_3NlPPZOO1tJG0G.png?height=452&width=626)\\n\\nIf you’re less familiar with Solidity, contracts can `emit` events. But where is the `log_string` event defined? In `test.sol` in the `ds-test` repo.\\n\\n![](https://images.mirror-media.xyz/publication-images/YrfnAV1eOTaQ-phiuOAjM.png?height=560&width=998)\\n\\nRun `forge test -vv`\\n\\n![](https://images.mirror-media.xyz/publication-images/_xZeufuUvgdMkY0IC668V.png?height=172&width=462)\\n\\nCheck out the other log events in `test.sol` and try some others!\\n\\nNext, let’s pass `-vvvv` so we can see the traces from our tests. Run `forge test -vvvv`\\n\\n![](https://images.mirror-media.xyz/publication-images/68rKLXF1PKBlIoPen-J4J.png?height=336&width=714)\\n\\nWoah! Super cool, right? This is showing you that our test function `testAddone` calls to `addOne`, and that the `addOne` call used 717 gas and returned 3!\\n\\n### Fuzzing\\n\\nA very cool feature of Forge is test fuzzing. Rather than specifying static inputs to a function, fuzzed tests give you random values of a particular type. For example, we could make `testAddOne` a fuzzed test like this by changing the function to take an argument, like this\\n\\n![](https://images.mirror-media.xyz/publication-images/2N1ZoCL5VlWngloXVGZh7.png?height=144&width=638)\\n\\nIf you run `forge test`, you should see\\n\\n![](https://images.mirror-media.xyz/publication-images/9LwkpNnJkVXY4i6NHTbCQ.png?height=150&width=866)\\n\\nThis is telling you it ran 256 times (each time with a random uint256 value for x), and that the mean gas across these runs was 2789 and the median was 2791.\\n\\n(Something to note, as of writing this, there is an issue where if you have already run your tests/compiled your code and change a non-test contract and not the test contract, e.g. change just `Contract.sol` and run `forge test`, the tests will run as if you hadn’t made any changes to `Contract.sol`. To manage this, you can force a recompile with `forge test --force`.)\\n\\n### Cheat Codes\\n\\nCheat codes are the bread and butter of testing with forge. Cheat codes exist in [Dapp](https://github.com/dapphub/dapptools/blob/master/src/hevm/README.md#cheat-codes) and have been expanded in Forge. Cheat codes are being updated frequently, so check the [README](https://github.com/gakonst/foundry/tree/master/forge) for the latest. Basically these a contract calls to a “VM” contract that cause the vm to modify its ordinary execution behavior. I’ll give a couple examples here.\\n\\nFirst, let’s talk about the `prank` cheat code, which can be used to set `msg.sender` for the next call. If that doesn’t make sense, just keep reading and you’ll see what I meant.\\n\\nFirst, I am going to add a dummy contract to the top of \\\\`Contract.t.sol\\\\`.\\n\\n![](https://images.mirror-media.xyz/publication-images/xpMZnp4drSQY6Sod-Tnyr.png?height=208&width=882)\\n\\nNext I’ll update my test contract to use Foo\\n\\n![](https://images.mirror-media.xyz/publication-images/3F9zmeJJVEY5r-kn2sERL.png?height=234&width=522)\\n\\nNote, I could simplify this to\\n\\n![](https://images.mirror-media.xyz/publication-images/lbzAcuRd09I_I2r23YQA0.png?height=116&width=524)\\n\\nbut I am trying to model the use of `setUp` , which is needed for more complex setup.\\n\\nNow, we need to add our VM contract that will receive the cheat code calls.\\n\\n![](https://images.mirror-media.xyz/publication-images/KjbWNmgkXSFM-k2k52h2U.png?height=276&width=890)\\n\\nThe VM is always at this address. Where does it come from? `address(bytes20(uint160(uint256(keccak256('hevm cheat code')))))` = `0x7109709ecfa91a80626ff3989d68f67f5b1dd12d`. We also need to define a `Vm` interface so the compiler knows what methods we expect to be able to call. You can add as many of the cheat codes as you want, for now I’ll just add prank.\\n\\n![](https://images.mirror-media.xyz/publication-images/eSEMZNPLbFHR2CYlqg1_i.png?height=142&width=572)\\n\\nThe Forge [README](https://github.com/gakonst/foundry/tree/master/forge) has all of the cheat codes defined in a format that you can copy and paste to your own interface. Finally let’s update my test to be named `testBar` and to call \\\\`foo.bar()\\\\`My test file now looks like this\\n\\n![](https://images.mirror-media.xyz/publication-images/nYI_stTDWUOBjYgrrdld1.png?height=824&width=894)\\n\\nRun `forge test -vvvv` and you should see\\n\\n![](https://images.mirror-media.xyz/publication-images/KwoQjnjyNZL6DcgyI7IXq.png?height=554&width=932)\\n\\nWhat’s going on here? Well, bar is requiring that `msg.sender` be `address(1)` but current `msg.sender` is just whatever address our test contract has. We can use `prank` to call `bar` from `address(1)`\\n\\n![](https://images.mirror-media.xyz/publication-images/X7wd5d5Cabmy-WDpRB2EX.png?height=174&width=422)\\n\\nRun `forge test -vvvv`\\n\\n![](https://images.mirror-media.xyz/publication-images/SJJj1fU-FhenfHyvFIc4n.png?height=338&width=936)\\n\\nNow, we could also test for our expected revert using another cheat code, `expectRevert`. Add `expectRevert` to the `Vm` interface\\n\\n![](https://images.mirror-media.xyz/publication-images/lNsf7EiQAEa0cxEzzYl4y.png?height=164&width=756)\\n\\nand add a new test\\n\\n![](https://images.mirror-media.xyz/publication-images/YLHc4AaPDrOniQSMDAz16.png?height=162&width=546)\\n\\nRun `forge test -vvvv`\\n\\n![](https://images.mirror-media.xyz/publication-images/ddRuLsD3mxDjmzdGo6DbQ.png?height=638&width=936)\\n\\nAwesome!\\n\\n## Adding Dependencies\\n\\nLet’s add say we want to use someone else’s contracts. Maybe Solmate from Rari. We can install by running `forge install rari-capital/solmate`. After running this command, you will see `solmate` has been added to `lib`.\\n\\nI can import a specific contract like this\\n\\n![](https://images.mirror-media.xyz/publication-images/uOxfKJCXaJaZ0GF9CnjI_.png?height=60&width=514)\\n\\n## Remappings\\n\\nSome of your contracts or the contracts you import may have imports in the NPM format, e.g. `import \\\"@openzeppelin/contracts/access/Ownable.sol;` Let’s look at how to handle this.\\n\\nFirst install the OpenZeppelin contracts `forge install OpenZeppelin/openzeppelin-contracts` .\\n\\nNext, let’s just add that import line to our test file\\n\\n![](https://images.mirror-media.xyz/publication-images/t3X4SJ11OSFgOjCgrAwMx.png?height=152&width=798)\\n\\nRun `forge build`\\n\\n![](https://images.mirror-media.xyz/publication-images/ua50Oqq2qE2f7X6sqf8y3.png?height=428&width=1404)\\n\\nWe can tell forge the correct place to look for this file by creating a `remappings.txt`.\\n\\n```\\n$ touch remappings.txt\\n```\\n\\nand then in remappings.txt, put this line\\n\\n```\\n@openzeppelin/=lib/openzeppelin-contracts/\\n```\\n\\nThis tells Forge, “Hey, anytime you hit `@openzepplin/`, look in `lib/openzeppelin-contracts/` instead.”\\n\\nNow if you run `forge build` or `forge test`, it should work fine.\\n\\n## Advanced testing\\n\\n**Matching flag**\\n\\nIf you want to only run some tests, there is a handy flag `-m`, which will match to the test name. E.g. run `forge test -vvvv -m Revert` and any test with “Revert” in the function name will run!\\n\\n**Snapshot**\\n\\nSnapshot the gas usage of your tests by running `forge snapshot`.\\n\\n**Forking mode**\\n\\nRather than starting from a blank state, you can run your tests with state seeded from a live Ethereum network. To do this, you need to pass an Ethereum node uri to your tests using the `-f` flag, i.e. `forge test -f <uri>`. (You can get such a URI from Alchemy or Infura.) This is super cool: In your tests you could call to an address, say the Mainnet USDC address, and get responses with live network state. This is especially useful for testing against contracts or states that might be particularly hard to mock.\\n\\n### Goodbye!\\n\\nThere is more to say, but it strikes me that this is plenty for now. Feel free to reach out to me directly with any questions.\\n\\n[split://0xC99b6Eb19B96916164318b11Cb7e20590296Dab3](split://0xC99b6Eb19B96916164318b11Cb7e20590296Dab3)\\n\\n\",\"timestamp\":1642294745,\"title\":\"Getting Started With Forge\",\"publication\":\"w\"},\"digest\":\"gixLVPF113hXDyXww-DKP1hPvonOCesur6WDMrqjwtg\",\"authorship\":{\"contributor\":\"0xbc3ed6B537f2980e66f396Fe14210A56ba3f72C4\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"s2NLH7-_pxQp_gdTfgIKICJ3c5Hrx-OrqQyBD8yS4BM\\\",\\\"y\\\":\\\"DeriFQGDrBieBLmCdfXujwJNZYlDx4U6139PD_DPPyw\\\"}\",\"signature\":\"abaAdS3NDT-uvH4dMApiZYjP0wn3BZjWmNYLL2s-0MgxBeJaR2gLVwcSuKtipUsLwYYTYe8O00lpO5NxKmxBSA\",\"signingKeySignature\":\"0x4c7f0fa81e4726b21dc406922cb073e5c3fd0f78b9c714fcfd262fd541f6b83a310f784b7c8b575995e15d17faa40144231d98ae115d1bcb9715772c5bb784ea1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"s2NLH7-_pxQp_gdTfgIKICJ3c5Hrx-OrqQyBD8yS4BM\\\",\\\"y\\\":\\\"DeriFQGDrBieBLmCdfXujwJNZYlDx4U6139PD_DPPyw\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"mOUlpgkWA178HNUW7xR20TdbGRV6dMid7uChqxf9Z58\"}"