"{\"content\":{\"body\":\"## Introduction\\n\\nWhat is Web3? It means different things for different people. Even the Ethereum co-founder Gavin Wood, who coined this term in 2014 can’t give an exact definition of Web3. Loosely speaking, Web3 is an idea for a new iteration of the World Wide Web that incorporates decentralization based on blockchains. \\n\\nWeb1.0 refers roughly to the period from 1991 to 2004, where most websites were static webpages, and the vast majority of users were consumers, not producers, of content.\\n\\nSince 2004, internet had evolved to the Web 2.0 phase, when the internet centered on the idea of “the web as platform“ , and user-created content dominated  social-networking services, blogs, among other services. Web 2.0 is still considered the dominant form of internet as of today.\\n\\nSpecific visions for Web3 differ, but they revolve around the idea of decentralization, and often incorporate blockchain technologies, such as various cryptocurrencies and non-fungible tokens (NFTs). In recent years, decentralized finance (DeFi), and decentralized autonomous organizations (DAOs) are critical propellent of the Web3 movement. \\n\\n## Overview\\n\\nThis article is not trying to go down the rabbit hole and explain what exactly Web3 is. This article serves as an amuse-bouche for your formal Web3 dinner, and opens the Web3 world to you.\\n\\nThis article gives a step by step guide to develop a very simple Web3 application, which displays the Ethereum (ETH) balance of your ETH wallet, using [web3.js](https://web3js.readthedocs.io/en/v1.5.2/).\\n\\n## Step by Step Guide\\n\\n### Setup Metamask\\n\\nThis application is using [Metamask](https://metamask.io/) to interact with the Ethereum blockchain. If you are new to Metamask, follow [this page](https://metamask.io/download.html) and install Metamask for Chrome. \\n\\nAfter installing Metamask and creating an account, sign in to your account.\\n\\nSince this application is mainly for demo purpose, we are gonna use the Rinkeby Test Network for development, rather than Ethereum Mainnet (any operation on the Mainnet costs real money). After you sign into Metamask, toggle the Networks menu on top of Metamask and choose Rinkeby Test Network as shown in the following screenshot:\\n\\n![Choose Rinkeby Test Network](https://images.mirror-media.xyz/publication-images/KAUSQq2LOfdZVh7M5DRAi.png?height=1208&width=714)\\n\\n###  Deposit test ETH\\n\\nAfter the ETH account is created in Metamask, the default test ETH balance for the Rinkeby Test Network is 0. In order to show non zero balance in our application, we need to find a way to deposit some test ETH into our wallet.\\n\\nWe can use [Chainlink Faucets](https://faucets.chain.link/rinkeby) to deposit test ETH into your ETH account in Metamask as shown in the following screenshot:\\n\\n![Deposit Test ETH](https://images.mirror-media.xyz/publication-images/ecN-_qR1YJCTV3aoAisnN.png?height=1646&width=2004)\\n\\nIn the Network section, choose Ethereum Rinkeby, and in the Testnet account address, paste the Metamask account address that you just copy to clipboard as shown in the following screenshot:\\n\\n![](https://images.mirror-media.xyz/publication-images/igCJ5fg-eWP6uv4Aije7u.png?height=1190&width=716)\\n\\nSo far you can only add 0.1 ETH to your test account per request. If you want to add more than 0.1 ETH to your test account, you could request multiple times.\\n\\nBy now, you already have a working ETH account with some test ETH on MetaMask. We are ready to move on to the fun part.\\n\\n### Install Homebrew and Node\\n\\n[Homebrew](https://brew.sh/) is a free and open-source software package management system that simplifies the installation of software on Apple's operating system, macOS, as well as Linux. In this application, we are gonna use Homebrew to install the required libraries for our application. Assuming that you are using MacOS or Linux system for this application, paste the following in a macOS Terminal or Linux shell prompt:\\n\\n```\\n/bin/bash -c \\\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\\\"\\n```\\n\\nWe are going to use [npm](https://docs.npmjs.com/about-npm) to manage the packages required for our application. Installing [Node.js](https://nodejs.org/en/about/) comes with npm, which we later use to install the required packages. Run the following command:\\n\\n```\\nbrew install node\\n```\\n\\n### Create Web Application Skeleton\\n\\nThere are a couple of ways to create a web application skeleton. Some popular choices are [create-react-app](https://create-react-app.dev/) and [next.js](https://nextjs.org/). In this application, we are going to use next.js to create the skeleton of the web application. In your desired directory, run the following command:\\n\\n```\\nnpx create-next-app web3-demo --use-npm --example \\\"https://github.com/vercel/next-learn/tree/master/basics/learn-starter\\\"\\n```\\n\\nUnder the hood, this uses the tool called `create-next-app` , which boostraps a Next.js app for you. It uses [this template](https://github.com/vercel/next-learn/tree/master/basics/learn-starter) through the `--example` flag. \\n\\nDon’t be intimidated by the new `npx` command. You can think of npx as an alternative to npm. While they are performing the similar function, npx helps you to avoid npm dependencies and versioning. In most cases, npx is preferred over npm. Refer to this comparison if you want to [learn more](https://www.section.io/engineering-education/npm-vs-npx/). \\n\\n**Run the Development Server**\\n\\nYou now have a new directory called `web3-demo`. Let’s `cd` into it:\\n\\n```\\ncd web3-demo\\n```\\n\\nThen, run the following command:\\n\\n```\\nnpm run dev\\n```\\n\\nThis starts your Next.js app’s \\\"development server\\\" (more on this later) on port **3000**.\\n\\nLet’s check to see if it’s working. Open [http://localhost:3000](http://localhost:3000/) from your browser.\\n\\nYou should see something like this:\\n\\n![](https://images.mirror-media.xyz/publication-images/GIQkeyur9yautviBn5pg5.png?height=1368&width=3276)\\n\\n### Integrate web3.js with Web Application\\n\\n[web3.js](https://web3js.readthedocs.io/en/v1.5.2/) is a collection of libraries that allow you to interact with a local or remote ethereum node using HTTP, IPC or WebSocket. In our application, we use web3.js to interact with the ETH account on MetaMask. \\n\\nFirst you need to get web3.js into your project. This can be done using the following methods:\\n\\n* npm: `npm install web3`\\n* yarn: `yarn add web3`\\n* pure js: link the `dist/web3.min.js`\\n\\nAfter that you need to create a web3 instance and set a provider.\\n\\nMost Ethereum-supported browsers like MetaMask have an [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193) compliant provider available at `window.ethereum`.\\n\\nFor web3.js, check `Web3.givenProvider`.\\n\\nIf this property is `null` you should connect to a remote/local node.\\n\\n```\\n// In Node.js use: \\nimport Web3 from \\\"web3\\\";\\nconst web3 = new Web3(Web3.givenProvider || \\\"ws://localhost:8545\\\");\\n```\\n\\nThat’s it! now you can use the `web3` object.\\n\\n**Main UI Components**\\n\\n* **Show me the money!** title\\n* A button to connect with MetaMask\\n* A button to show the ETH balance\\n\\n**Initial Landing Page**\\n\\n![Landing Page](https://images.mirror-media.xyz/publication-images/C2S5HJgHSRTyX4SLvGbHR.png?height=1374&width=1650)\\n\\nAfter the **Connect With MetaMask** button is clicked, if you have already logged in Metamask, the button text changes to **Show ETH Balance**. You can clicked the **Show ETH Balance** button to see the balance of your test ETH as shown below:\\n\\n![Show ETH Balance](https://images.mirror-media.xyz/publication-images/pahRVQAuxQtivWr4PTFow.png?height=390&width=1388)\\n\\n If you haven’t signed in to MetaMask, After the **Connect With MetaMask** button is clicked, MetaMask will prompt you to log in, as shown below: \\n\\n![Required Permission to Sign in](https://images.mirror-media.xyz/publication-images/KUsnu8dLfEbloZE7-6jFx.png?height=1442&width=1878)\\n\\nAfter you log in, the button text changes to **Show ETH Balance**. You can clicked the **Show ETH Balance** button to see the balance of your test ETH.\\n\\n**Main Code Block**\\n\\n```\\nimport Head from 'next/head'\\nimport { useState } from 'react';\\nimport Web3 from \\\"web3\\\";\\n\\nexport default function Home() {\\n  const [metaMaskConnected, setMetaMaskConnected] = useState(false);\\n  const [accounts, setAccounts] = useState([]);\\n  const [showCurrentBalance, setShowCurrentBalance] = useState(false);\\n\\n  let web3 = new Web3();\\n  const ethEnabled = async () => {\\n    if (window.ethereum) {\\n      await window.ethereum.send('eth_requestAccounts');\\n      web3 = new Web3(window.ethereum);\\n      return true;\\n    }\\n    return false;\\n  };\\n\\n  const checkAccounts = async () => {\\n    if (!await ethEnabled()) {\\n      alert(\\\"Please install MetaMask to use this dApp!\\\");\\n    }\\n    let accs = await web3.eth.getAccounts();\\n    const newAccounts = await Promise.all(accs.map(async address => {\\n      const balance = await web3.eth.getBalance(address);\\n      return web3.utils.fromWei(balance, 'ether');\\n    }));\\n    setAccounts(newAccounts);\\n  };\\n\\n  const showBalance = async () => {\\n    await checkAccounts();\\n    setShowCurrentBalance(true);\\n  };\\n\\n  const onClickConnect = async () => {\\n    await checkAccounts();\\n    setMetaMaskConnected(true);\\n  }\\n\\n\\n  return (\\n    <div className=\\\"container\\\">\\n      <Head>\\n        <title>Create Next App</title>\\n        <link rel=\\\"icon\\\" href=\\\"/favicon.ico\\\" />\\n      </Head>\\n\\n      <main>\\n        <h1 className=\\\"title\\\">\\n          Show me the money!\\n        </h1>\\n        <button className=\\\"button\\\" style={{display: metaMaskConnected ? \\\"none\\\" : \\\"block\\\"}} onClick={onClickConnect}>Connect With MetaMask</button>\\n        <button className=\\\"button\\\" style={{display: metaMaskConnected ? \\\"block\\\" : \\\"none\\\"}} onClick={showBalance}>Show ETH Balance</button>\\n        <p style={{display: showCurrentBalance && accounts.length > 0 ? \\\"block\\\" : \\\"none\\\"}}>Current ETH Balance: {parseFloat(accounts[0]).toFixed(2)}</p>\\n        <p style={{display: showCurrentBalance && accounts.length === 0 ? \\\"block\\\" : \\\"none\\\", color: \\\"red\\\"}}>Please connect your test account!</p>\\n\\n      </main>\\n    </div>\\n  )\\n}\\n```\\n\\n**Triggering the Log In UI of MetaMask**\\n\\nThe critical piece of the code which triggers the Log In UI of MetaMask is `await window.ethereum.send('eth_requestAccounts')`. If the MetaMask is already connected, this operation succeeds silently. Otherwise, the MetaMask Log In UI will pop up, asking for permission.\\n\\n**Collecting the active account and ETH balance**\\n\\nThe piece of code which collects the active is `let accs = await web3.eth.getAccounts()`. I originally thought the `getAccounts()` method will return either an empty array or an array of all the available accounts. But according to [MetaMask Doc](https://docs.metamask.io/guide/ethereum-provider.html#accountschanged), the `getAccounts()` method returns an array that is either empty or contains a single account address. The returned address, if any, is the address of the most recently used account that the caller is permitted to access. That seems like a security feature. Whether it will return all the available accounts in the future is TBD.\\n\\nThe following code records the ETH balance for the active account\\n\\n```\\n    const newAccounts = await Promise.all(accs.map(async address => {\\n      const balance = await web3.eth.getBalance(address);\\n      return web3.utils.fromWei(balance, 'ether');\\n    }));\\n```\\n\\n**Toggling Between Different Accounts**\\n\\nIt is possible that you have multiple accounts connected to your application as shown below:\\n\\n![](https://images.mirror-media.xyz/publication-images/p48xlDjExjgNw8Y5y8SaX.png?height=1206&width=714)\\n\\nYou can click the “Connected“ button, and switch to the desired account. After that, you can click the **Show ETH Balance** button again to see the ETH balance of the new active account.\\n\\n## Conclusion\\n\\nIn this article, we’ve demonstrated how to create a simple web application using Next.js, web3.js, and MetaMask. You have learned how to create a MetaMask wallet, how to deposit test ETH to your wallet, how to use web3.js to show the ETH balance. \\n\\nI hope you learn something very interesting and fundamental about Web3. Obviously, this web application is just a tip of the Web3 ice berg, and there is so much more you can achieve in the Web3 world.\\n\\nIf you find this article helpful, please follow my Twitter [@harrywangw](https://twitter.com/harrywangw). Let’s rock the Web3 world together.\\n\\n## Resources\\n\\nThe complete code resides in Github: [web3-demo](https://github.com/totolo/web3-demo)\",\"timestamp\":1641197815,\"title\":\"First Bite of Web3\"},\"digest\":\"rKQRmr7ec3O7vM4A0ZWPBod_6cO0XdlPqkPnke1FtMY\",\"authorship\":{\"contributor\":\"0xDeE7B5d937b3916657d46584784d7018ae42da35\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"2pcOEoUB_JFgyhIMb05K0uKmYxFoNsqaWJ_m2uHuvV4\\\",\\\"y\\\":\\\"JGvkjd1tZrgER6BrrYVOELQUjToUMdhBb807eDZzWX0\\\"}\",\"signature\":\"_8J4rixAOfDVp47Em3656LMhnbMG6Shoc7rjKebyqEHYizfsJaYqvNgjVqbKRPa_RuYV9hWcL8w4iRe3a5biFQ\",\"signingKeySignature\":\"0x0018adc68e5bfe6e2fa0a6ca7e373f782fd69cf8e075ac799bd367b3a96bd7a778ad406bf60971f55387042c2cd868f3625437a4ecb55960d641406b0c8fbc4a1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"2pcOEoUB_JFgyhIMb05K0uKmYxFoNsqaWJ_m2uHuvV4\\\",\\\"y\\\":\\\"JGvkjd1tZrgER6BrrYVOELQUjToUMdhBb807eDZzWX0\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"dn8W3l1ZEo850jU1bkIdSWqdIKNHfGcHeSLaEmGIhNA\"}"