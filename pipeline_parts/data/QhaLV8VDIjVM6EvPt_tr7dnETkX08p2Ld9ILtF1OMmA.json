"{\"content\":{\"body\":\"#### Introduction\\n\\nNFT (Non-Fungible Token) has exploded since last year and keeps on roaring regardless of how the cryptocurrency is performing. You must have heard of CryptoPunk, BAYC or the most recent Phantom Bear if you are following any crypto news. In the nutshell, NFT is a smart contract with some meta data such as image, video or some other attribute data to make it unique from one another. And since it’s on blockchain, it’s easy for anybody to verify the ownership. In this article, I will walk you through the process on how to deploy your own NFT with Python and we will be using a Python based smart contract development framework called [Brownie](https://eth-brownie.readthedocs.io/).\\n\\n#### Prerequisite\\n\\nYou will need to install the [Brownie](https://eth-brownie.readthedocs.io/en/stable/install.html) package. It is recommended to use [pipx](https://github.com/pypa/pipx) to install it in an isolated environment, but since I have my own virtual environment created, I would continue to use pip instead. Below is the pip command to install Brownie:\\n\\n    #run in your venv\\n    pip install eth-brownie\\n\\nIn order to test your code locally, Brownie will automatically install [ganache cli](https://trufflesuite.com/ganache/) which launches a local Ethereum blockchain for you to execute your smart contracts. You can follow its documentation to download and install it if you wish to install it manually.\\n\\n#### Get Started with Brownie\\n\\nLet’s create an empty folder and then run the below command to initiate a new Brownie project:\\n\\nWith the above command, brownie will create a project structure for you under your current folder. The majority of your work shall be done in the following folders:\\n\\n*   **contracts** – for solidity smart contract source code\\n*   **interfaces** – for the interface files that referenced by the smart contract\\n*   **scripts** – for deployment scripts or interacting with deployed contracts\\n*   **tests** – for test scripts\\n\\nBrownie supports both Solidity and [Vyper](https://vyper.readthedocs.io/en/stable/) language for creating smart contracts. In this article, I will be using the smart contract in Solidity style as the example.\\n\\n#### Create NFT Smart Contract\\n\\nNFTs use [ERC721](https://ethereum.org/en/developers/docs/standards/tokens/erc-721/) token standard, so we will need to create a smart contract that implements this standard. Since the objective of this article is to walk through the process rather than a deep dive into the smart contract coding, I have just shared a sample smart contract [here](https://github.com/codeforests/brownie_legendnft/blob/master/contracts/LegendNFT.sol).  You can download this LegendNFT.sol smart contract file and the [libraries](https://github.com/codeforests/brownie_legendnft/tree/master/contracts/libraries \\\"libraries\\\") folder, then put them under the ***contracts* **folder.\\n\\nHere is a quick explanation of what this smart contract does:\\n\\n*   an ERC721 contract with name *Codeforests Legend, *token symbol* CFL *and total supply of *1,000,000*\\n*   3 lists of words to generate a “random” word phrase\\n*   a SVG xml template to create a picture of the above word phrase\\n*   a list of color codes to provide “random” background color to the SVG\\n*   a mint function for minting the NFT tokens\\n*   finally a function to return how many tokens have minted\\n\\nAs you can see from the source code that I used two external contracts from [OpenZeppelin](https://openzeppelin.com/contracts/), so I will need to specify this dependency so that they can be recognized when compiling the contract. Brownie provides a config file *brownie-config.yaml *which allows you specify these configurations. This file is not created automatically when initiating the project as all the settings are optional, you will only need it when necessary.\\n\\nTo specify the dependencies, you can manually create this yaml file under your project root folder. And add the below configurations:\\n\\nIt basically tells Brownie package manager to automatically download this package for you and let compiler find the correct path of the package when using the short form ‘import @openzeppelin/…’.\\n\\n#### Compile Smart Contract\\n\\nOnce you have saved your contract and the config file, you can run below compile command on your terminal:\\n\\nYou shall see brownie auto downloaded the dependencies and compiled the code:\\n\\n![brownie compile smart contract, NFT smart contract](https://www.codeforests.com/wp-content/uploads/2022/01/brownie-compile.png \\\"Deploy Your First NFT with Python 1\\\")\\n\\nThe output Json files will be placed into the build/contracts folder. The next step we shall try to deploy this contract locally.\\n\\n#### Deploy Smart Contract Locally\\n\\nTo deploy our contract locally, we will need to use the ganache as I mentioned in the beginning. By default, when you want to deploy a contract, brownie will always start the ganache local network and deploy it to the local network. Brownie provides a console window where you can use the commands to deploy contract, but since we may need to do the deployment multiples for testing or in different networks, so let’s create a re-usable Python script called deploy.py under the scripts folder for the deployment purpose.\\n\\nWhen your smart contract is compiled, the contract class object will be automatically added to brownie runtime environment, so we can import it from brownie directly.\\n\\nBelow is the Python code for deploying my *LegendNFT* contract:\\n\\n    from brownie import LegendNFT, network, config, accounts\\n\\n\\n    def deploy_contract():\\n        account = accounts[0]\\n        legend_contract = LegendNFT.deploy({\\\"from\\\" : account})\\n        print(\\\"contract has been deployed successfully to :\\\", legend_contract.address)\\n\\n        return legend_contract\\n\\n    def main():\\n        deploy_contract()\\n\\nThe *accounts* is some dummy accounts provided by ganache only for your local network, so we just pick the first dummy account as the contract creator for the *from* parameter.\\n\\n*Note that your script needs to have a main function to let brownie know which function to run.*\\n\\nNext, let’s run the below command in the terminal:\\n\\n    brownie run .\\\\scripts\\\\deploy.py\\n\\nYou shall see something similar to the below output showing that both contract address and transaction hash have been generated:\\n\\n![brownie deploy smart contract python, NFT smart contract](https://www.codeforests.com/wp-content/uploads/2022/01/contract-deployment-local-network-1024x272.png \\\"Deploy Your First NFT with Python 2\\\")\\n\\nCongratulations that you’ve just deployed your contract to your local network, although you may have no idea if the contract works correctly. Don’t worry, let’s continue to explore how to deploy to a public network and come back to the unit test later.\\n\\n#### Deploy Smart Contract to Public Network\\n\\nThe public network usually refers to the public accessible and persistent blockchain network such as the Ethereum mainnet, rinkeby, kovan, popsten etc. To access the public network, you will need to connect to a node, but it would be too much to run your own node just for deploying a contract.\\n\\nLuckily there are some service providers like [Infura](https://infura.io/), [Alchemy](https://www.alchemy.com/) or [Pocket Network](https://www.pokt.network/) etc., who allows you to use their API to connect to the public network nodes. For Brownie, it uses Infura as the default provider for connecting to public network. If you run below command in your terminal:\\n\\n    brownie networks list true\\n\\nYou can see it is using Infura’s API:\\n\\n![brownie deploy smart contract python, NFT smart contract, rinkeby network](https://www.codeforests.com/wp-content/uploads/2022/01/network-rinkeby.png \\\"Deploy Your First NFT with Python 3\\\")\\n\\nIn this case, you will need to sign up Infura for a free account and get your own project API token. Once you have your API token, you can create a environment variable called WEB3\\\\_INFURA_PROJECT_ID and assign your token ID to it. My personal preference would be putting this information into a .env file and load it into the Brownie config file.\\n\\nAnd another thing you need is a real wallet account with some fund, as deployment will always incur some cost for confirming the transaction. You can create a wallet with [Metamask,](https://metamask.io/) and for testnet like rinkeby, you can get some testing ether token from chainlink [rinkeby faucet](https://faucets.chain.link/rinkeby). You can also find other faucets for the rest of the testnets.\\n\\nSo let’s put below info in the .env file:\\n\\n    PRIVATE_KEY = 0x{your wallet private key}\\n    WEB3_INFURA_PROJECT_ID = {your infrua project ID}\\n    ETHERSCAN_TOKEN = {etherscan API token; to submit your contract source code to etherscan (optional)}\\n\\n*Note: to add 0x before your wallet private key so that it’s recognized as hex string. If you wish to get your contract source code verified by etherscan, you will need to sign up with etherscan and get an API token as well.*\\n\\nAnd add below lines in the brownie-config.yaml file:\\n\\n    dotenv: .env\\n\\n    wallets:\\n      from_key: ${PRIVATE_KEY}\\n\\n    # optional for verifying the contract source code\\n    networks:\\n      development:\\n        verify : false\\n      rinkeby:\\n        verify : true\\n\\nI strongly recommend you to add .env in .gitignore, so that you won’t accidently push your sensitive information into github. Your wallet private key for testnet and mainnet is the same, so bear in mind to not expose to anyone.\\n\\nNow let’s also do some minor change to our deployment script, so that it uses the new account we created for deploying the contract to public network.\\n\\n    def deploy_contract():\\n        if(network.show_active() == \\\"development\\\"):\\n            account = accounts[0]\\n        else:\\n            account = accounts.add(config[\\\"wallets\\\"][\\\"from_key\\\"])\\n\\n        legend_contract = LegendNFT.deploy(\\n            {\\\"from\\\" : account}, \\n            publish_source=config[\\\"networks\\\"][network.show_active()].get(\\\"verify\\\")\\n        )\\n        print(\\\"contract has been deployed successfully to :\\\", legend_contract.address)\\n\\n        return legend_contract\\n\\nWe have added a condition to check whether we are working on local/development network, when it’s not local network, we will load our account by the private key and use it to sign the transaction for deployment.\\n\\nNow we have everything ready, let’s run the deploy.py again and specify the target network with the *–network* option, e.g. :\\n\\n    brownie run .\\\\scripts\\\\deploy.py --network rinkeby\\n\\nBelow is the output from my terminal:\\n\\n![brownie deploy smart contract python, NFT smart contract, Python deploy smart contract to public network](https://www.codeforests.com/wp-content/uploads/2022/01/contract-deployment.png \\\"Deploy Your First NFT with Python 4\\\")\\n\\nIt would take slightly longer time since it requires the transaction to be minted and confirmed. You can copy the contract address or transaction hash then search it from [etherscan rinkeby](https://rinkeby.etherscan.io/) network.\\n\\nYou can see my deployed contract address [here](https://rinkeby.etherscan.io/address/0xaA629BE88190fe2077b970aa02f52dA40cE98454) and the verified source code [here.](https://rinkeby.etherscan.io/address/0xaA629BE88190fe2077b970aa02f52dA40cE98454#code)\\n\\nAwesome! You just had your contract deployed in the public network where everybody can see it!!! Since you’ve not yet minted any NFT from your contract, you won’t see anything visually at the moment. To give you a idea of how your NFTs will look like, I have created this [website](https://legendnft.vercel.app/) for minting the *LegendNFT, *you can try and experience the minting process and then view the NFT from Opeasea. It currently supports Rinkeby, Matic and Matic Mumbai network. Below is the minting page after you have connected your wallet:\\n\\n![brownie deploy smart contract python, NFT smart contract, mint NFT, free NFT](https://www.codeforests.com/wp-content/uploads/2022/01/minting-screen-1024x615.png \\\"Deploy Your First NFT with Python 5\\\")\\n\\n#### Conclusion\\n\\nCreating your own NFT can be a very fun journey although you may not be able to eventually sell it on the market. And there are just too much details to be covered and which is impossible to write in one post, so I will try to write a few more articles on how to perform unit test, interact with your deployed contract, as well as deploy the contract to other EVM compatible networks. Do follow me on my [twitter](https://twitter.com/\\\\_0xken) and let me know if you encounter any issue with your contract deployment.\\n\",\"timestamp\":1642604564,\"title\":\"Deploy Your First NFT With Python\"},\"digest\":\"HRa1gcda5ALmI4o0cxxs5d-Bf5npvTrJM7Y9b7AqX38\",\"authorship\":{\"contributor\":\"0xF36f242CE662b9fe44A203924B6b965e1d5a1B48\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ESwaQ1q4SUSWV2E8C5CSJiNLmTZozuXolz8L7v7TP6s\\\",\\\"y\\\":\\\"vyPx2XmObAiOP53eVFwp1vd6i4cq9j5NUMloPV95ZFU\\\"}\",\"signature\":\"EpJdOLSkmGu3v2f8aR8gGPkltnaLYPVkUFZs1vGertnCmsrIdO9QyHKWIZYhWZUloJ7mXB5FUTFWZzJauBA_jQ\",\"signingKeySignature\":\"0x178ae061890ec0e312d594256f9891d402124895914f41e64b5a3e5b4d641a6a0f9514e19a72c5e12e2d1a6eea03a6154247cc16cbd4726cc6e5472ffd15e4781c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ESwaQ1q4SUSWV2E8C5CSJiNLmTZozuXolz8L7v7TP6s\\\",\\\"y\\\":\\\"vyPx2XmObAiOP53eVFwp1vd6i4cq9j5NUMloPV95ZFU\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"HRa1gcda5ALmI4o0cxxs5d-Bf5npvTrJM7Y9b7AqX38\"}"