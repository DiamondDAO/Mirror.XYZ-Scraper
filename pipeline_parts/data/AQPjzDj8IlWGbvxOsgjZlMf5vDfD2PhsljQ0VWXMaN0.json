"{\"content\":{\"body\":\"We've been working at @ClassLambda on an anonymity tool for  @TornadoCash.\\n\\nTornado Cash is a mixer that allows users to deposit Ethereum and then withdraw it with another account, breaking the on-chain link between them. Below, a thread with details of what we are doing:\\n\\n* For the [@0xPARC](https://twitter.com/0xPARC) applied ZK course, we had to do a lightning talk. For my talk I chose to ELI5 [@TornadoCash](https://twitter.com/TornadoCash).It's one of the simplest useful application of zkSNARKs and let me understand how snarks work in an real app A thread going into detail how it works under the hood:\\n\\n  Tornado cash is a mixer that allows you to take some ETH and hide the link between the account you deposit in and the account you withdraw in. Tornado cash is a smart contract that holds the funds as well as a merkle tree of all participants.\\n\\n  A merkle tree is a tree-like data structure that has data on the leaves and creates hashes all the way up til you get a root hash. It is an efficient data structure to prove inclusion in a set of participants without having to provide every single piece of data.\\n\\n  When you deposit you create a secret offline and then hash that into a commitment. It is this commitment that is added to the merkle tree on-chain. When you withdraw you want to prove you are within the merkle tree so the contract allows you to withdraw your funds.\\n\\n  To prove inclusion in a merkle tree, you normally have to provide the data itself, the sibling hash, plus all the sibling hashes going up until you get to the root hash However if you provided this, you would reveal which leaf you are and when that deposit was made.\\n\\n  So on withdrawal instead of providing the actual data, you only provide a zk proof of inclusion. This proof is created using a secret you generated on deposit.\\n\\n  However if you create a proof of inclusion using a zkSNARK, there is one issue. How does the contract know if you have withdrawn before? It doesnâ€™t actually know who you are so it does not know if you have withdrawn in the past.\\n\\n  This means there is a double spend problem that needs to be solved as a proof could be used multiple times to drain the contract of funds. The proof proves you are in the tree, but there is no way to know if the proof has been used before.\\n\\n  This is solved by adding a salt to the commitment in addition to your secret. When you create your commitment on deposit, you are hashing both the secret and the salt together. They call this a nullifier in Tornado cash, which is a unique identifier of your commitment.\\n\\n  When you generate your proof, this is also provided with your secret. And when you withdraw, your nullifier is also provided and is recorded in the smart contract so the proof cannot be used again.\\n\\n  The last piece of the puzzle are relayers. Relayers allow the actual withdrawal to happen without any ETH in the new address. And additionally it doesn't allow any link to be created between the deposit address and withdrawal address (other than they both used Tornado)\\n\\n  Relayers take the proof and submit them to the Tornado cash smart contract on your behalf. They cannot steal the ETH as the proof has been created with the recipient as an input. If the recipient is changed, this will invalidate the proof itself and the withdrawal will fail.\\n\\n  Relayers are pivotal to keeping anonymity in Tornado Cash. They stop any link from connecting the deposit and withdrawal address. If you use the same address (or an address that links to it) you break all the anonymity the zk proof has helped you provide.\\n\\n  In summary Tornado cash is a proof of inclusion in a merkle tree, where snarks are used to do the proof without revealing the leaf node you are and with double spend protection to stop the proof being used twice.\\n\\n  For this tweet thread I mainly read the code at: <https://github.com/tornadocash/tornado-core>\\n\\n  I would encourage anyone getting into zkSNARKs to take a look as the circuits are much more approachable than others I've seen.\\n\\n  Also Tornado also uses [@ensdomains](https://twitter.com/ensdomains) for additional censorship resistance for all their relayers, which is pretty cool too! But not integral to Tornado cash working, so I'll just add it in here at the end!\\n\\n  Original article from Twitter \\n\\n  [https://twitter.com/_jefflau/status/1468065457190350850](https://twitter.com/_jefflau/status/1468065457190350850)\\n\\n\",\"timestamp\":1640848524,\"title\":\"[NOTE2021.12.30]Privacy audit tool\"},\"digest\":\"Kd1f21iGWKm3V6YB5cTqRo5R8nv-BCgJ0uifY7PDF1M\",\"authorship\":{\"contributor\":\"0x5FBce71b1b74d0d8511dC708ceED3250a1aBDacA\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"RBwqX_txPf5TCte2yZXMQ_9A3riZj4S7We4xehttYCs\\\",\\\"y\\\":\\\"RRY8HwLGBx5CXF1Mm4FIHYSG6jiOHqw2IxOvQTBn0Cc\\\"}\",\"signature\":\"1gyfe84dTp0GiQBwHXpCfZleDPUd__w5bAg5puCx6tih6F7g2f3svmU4HoMWSk9LPX0MBgPqiiUGQO6PQJatpg\",\"signingKeySignature\":\"0x6b2eee9f92cfa9ecfc6d0615635888c4f773dbd221107bb2cf9c0ad7519448986bcc8166e2c218113125c78087ddddf4ff28df8da3f800dd5e5344e74f0f25101c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"RBwqX_txPf5TCte2yZXMQ_9A3riZj4S7We4xehttYCs\\\",\\\"y\\\":\\\"RRY8HwLGBx5CXF1Mm4FIHYSG6jiOHqw2IxOvQTBn0Cc\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"Kd1f21iGWKm3V6YB5cTqRo5R8nv-BCgJ0uifY7PDF1M\"}"