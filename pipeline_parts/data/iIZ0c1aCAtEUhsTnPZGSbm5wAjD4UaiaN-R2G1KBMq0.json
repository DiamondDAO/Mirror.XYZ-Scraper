"{\"content\":{\"body\":\"在比特币中，私钥本质上就是一个256位的随机整数。我们以JavaScript为例，演示如何创建比特币私钥。\\n\\n在JavaScript中，内置的Number类型使用56位表示整数和浮点数，最大可表示的整数最大只有`9007199254740991`。其他语言如Java一般也仅提供64位的整数类型。要表示一个256位的整数，只能使用数组来模拟。[bitcoinjs](https://github.com/bitcoinjs)使用[bigi](https://github.com/cryptocoinjs/bigi)这个库来表示任意大小的整数。\\n\\n下面的代码演示了通过`ECPair`创建一个新的私钥后，表示私钥的整数就是字段`d`，我们把它打印出来：\\n\\n```\\nconst bitcoin = require('bitcoinjs-lib');\\n```\\n\\nRun\\n\\n注意：每次运行上述程序，都会生成一个随机的`ECPair`，即每次生成的私钥都是不同的。\\n\\n256位的整数通常以十六进制表示，使用`toHex(32)`我们可以获得一个固定64字符的十六进制字符串。注意每两个十六进制字符表示一个字节，因此，64字符的十六进制字符串表示的是32字节=256位整数。\\n\\n想要记住一个256位的整数是非常困难的，并且，如果记错了其中某些位，这个记错的整数仍然是一个*有效的私钥*，因此，比特币有一种对私钥进行编码的方式，这种编码方式就是带校验的[Base58编码](https://zh.wikipedia.org/wiki/Base58)。\\n\\n对私钥进行Base58编码有两种方式，一种是非压缩的私钥格式，一种是压缩的私钥格式，它们分别对应非压缩的公钥格式和压缩的公钥格式。\\n\\n具体地来说，非压缩的私钥格式是指在32字节的私钥前添加一个`0x80`字节前缀，得到33字节的数据，对其计算4字节的校验码，附加到最后，一共得到37字节的数据：\\n\\n```\\n0x80           256bit             check\\n┌─┬──────────────────────────────┬─────┐\\n│1│              32              │  4  │\\n└─┴──────────────────────────────┴─────┘\\n```\\n\\n计算校验码非常简单，对其进行两次SHA256，取开头4字节作为校验码。\\n\\n对这37字节的数据进行Base58编码，得到总是以`5`开头的字符串编码，这个字符串就是我们需要非常小心地保存的私钥地址，又称为钱包导入格式：WIF（Wallet Import Format），整个过程如下图所示：\\n\\n可以使用[wif](https://github.com/bitcoinjs/wif)这个库实现WIF编码：\\n\\n```\\nconst wif = require('wif');\\n```\\n\\nRun\\n\\n另一种压缩格式的私钥编码方式，与非压缩格式不同的是，压缩的私钥格式会在32字节的私钥前后各添加一个`0x80`字节前缀和`0x01`字节后缀，共34字节的数据，对其计算4字节的校验码，附加到最后，一共得到38字节的数据：\\n\\n```\\n0x80           256bit           0x01 check\\n┌─┬──────────────────────────────┬─┬─────┐\\n│1│              32              │1│  4  │\\n└─┴──────────────────────────────┴─┴─────┘\\n```\\n\\n对这38字节的数据进行Base58编码，得到总是以`K`或`L`开头的字符串编码，整个过程如下图所示：\\n\\n通过代码实现压缩格式的WIF编码如下：\\n\\n```\\nconst wif = require('wif');\\n```\\n\\nRun\\n\\n目前，非压缩的格式几乎已经不使用了。bitcoinjs提供的`ECPair`总是使用压缩格式的私钥表示：\\n\\n```\\nconst\\n    bitcoin = require('bitcoinjs-lib'),\\n    BigInteger = require('bigi');\\n```\\n\\nRun\\n\\n### 小结\\n\\n比特币的私钥本质上就是一个256位整数，对私钥进行WIF格式编码可以得到一个带校验的字符串。\\n\\n使用非压缩格式的WIF是以`5`开头的字符串。\\n\\n使用压缩格式的WIF是以`K`或`L`开头的字符串。\",\"timestamp\":1639559617,\"title\":\"什么是私钥？\"},\"digest\":\"YcvxoD8ouqGQ21ts_7_vAhqrQ78DXuSwv7NlCgtk6fE\",\"authorship\":{\"contributor\":\"0xa2Fbc740b7927Fe7647422606173A10e62441dFB\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"dD9hvO-o2F8dMK9rl2ysUC6bVqKAazzZvbOq7Qrfhgg\\\",\\\"y\\\":\\\"DL1zA5XjPaNbY8SeVqb8ld6txyE9vco3shZlGd56aZo\\\"}\",\"signature\":\"KM9yDEHNkiztqJEQgyq3jT7ES4ecEpap0YcIiUxCgbdiOUKKJWYyMForh1QQwOkEESVqaQ01GBTey9L-YsnAHA\",\"signingKeySignature\":\"0x86b07a02cba900135e9861ac4923552afb3e4010e19c0b9f0b9372dcf5627c3f0625e11580694bdbc7472b9fb0a3733aa24c41ce1ce55fe28ed922a356154add1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"dD9hvO-o2F8dMK9rl2ysUC6bVqKAazzZvbOq7Qrfhgg\\\",\\\"y\\\":\\\"DL1zA5XjPaNbY8SeVqb8ld6txyE9vco3shZlGd56aZo\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"YcvxoD8ouqGQ21ts_7_vAhqrQ78DXuSwv7NlCgtk6fE\"}"