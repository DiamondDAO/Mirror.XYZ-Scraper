"{\"content\":{\"body\":\"![](https://miro.medium.com/max/2800/1\\\\*Q7K58uce9fE9KWVcsnXJIg.png)\\n\\n## 发生了什么？\\n\\n1/19/2022也就是今天，Metroverse的publicsale。我刚好这个时候没有会议，所以打算看看是不是热的一塌糊涂。但是很奇怪Metroverse的合约啥都没有发生，就卖完了。唯一一个成功的mint是第10000个block，也就是最后一个。\\n\\n![](https://miro.medium.com/max/1400/1\\\\*UDBvVXpqED96slblS3VHTQ.png)\\n\\n[https://etherscan.io/tx/0x5f25e7202691ed0b5ccabf3e0640782077f9e29643b58755e6591b5c3ef6415c](https://etherscan.io/tx/0x5f25e7202691ed0b5ccabf3e0640782077f9e29643b58755e6591b5c3ef6415c)\\n\\n其他都去哪里了？？\\n\\n## 大神出现了\\n\\n让我们看看其他都去哪儿了！\\n\\n![](https://miro.medium.com/max/1400/1\\\\*UDBvVXpqED96slblS3VHTQ.png)\\n\\n[https://etherscan.io/tx/0x54993818335b0cf3e083bfddb304d1d33761e095cb92e6fcab6a41d6cdf9c612](https://etherscan.io/tx/0x54993818335b0cf3e083bfddb304d1d33761e095cb92e6fcab6a41d6cdf9c612)\\n\\n## 出了什么事情？\\n\\n我也不知道，这个 [0x1b900a675Dbdb008718E7763cc61c592FAcfA3EF](https://etherscan.io/address/0x1b900a675dbdb008718e7763cc61c592facfa3ef) 是个什么的合约，我只好去看看它的bytecode，基本上还是不明白，为什么这个可以把这些nft都拿走。\\n\\n```\\n#\\n#  Panoramix v4 Oct 2019 \\n#  Decompiled source of 0x1b900a675Dbdb008718E7763cc61c592FAcfA3EF\\n# \\n#  Let's make the world open source \\n# \\n#\\n#  I failed with these: \\n#  - unknowna893c195(?)\\n#  - withdrawETH()\\n#  - _fallback()\\n#  All the rest is below.\\n#const owner = 0x7b1af7b1ef831d1bf46314d3a579eb153f980776def storage:\\n  saleContractAddress is addr at storage 0\\n  count is uint256 at storage 1\\n  limit is uint256 at storage 2def count(): # not payable\\n  return countdef limit(): # not payable\\n  return limitdef saleContract(): # not payable\\n  return saleContractAddress#\\n#  Regular functions\\n#def setLimit(uint256 _tokenId): # not payable\\n  require calldata.size - 4 >=′ 32\\n  if 0x7b1af7b1ef831d1bf46314d3a579eb153f980776 != caller:\\n      revert with 0, 'Ownable: caller is not the owner'\\n  limit = _tokenIddef unknownafdce2ec() payable: \\n  require calldata.size - 4 >=′ 64\\n  require cd <= 18446744073709551615\\n  require cd <′ calldata.size\\n  require ('cd', 4).length <= 18446744073709551615\\n  require cd * ('cd', 4).length) + 36 <= calldata.size\\n  require ext_code.size(saleContractAddress)\\n  static call saleContractAddress.0x6f2057a with:\\n          gas gas_remaining wei\\n  mem[96] = ext_call.return_data[0]\\n  if not ext_call.success:\\n      revert with ext_call.return_data[0 len return_data.size]\\n  require return_data.size >=′ 32\\n  require ext_call.return_data == bool(ext_call.return_data[0])\\n  require not ext_call.return_data[0]\\n  require ext_code.size(saleContractAddress)\\n  static call saleContractAddress.saleActive() with:\\n          gas gas_remaining wei\\n  mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]\\n  if not ext_call.success:\\n      revert with ext_call.return_data[0 len return_data.size]\\n  require return_data.size >=′ 32\\n  require ext_call.return_data == bool(ext_call.return_data[0])\\n  require ext_call.return_data[0]\\n  if cd > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:\\n      revert with 0, 17\\n  require ext_code.size(saleContractAddress)\\n  static call saleContractAddress.totalSupply() with:\\n          gas gas_remaining wei\\n  mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]\\n  if not ext_call.success:\\n      revert with ext_call.return_data[0 len return_data.size]\\n  mem[64] = (4 * ceil32(return_data.size)) + 96\\n  require return_data.size >=′ 32\\n  if ext_call.return_data > !(2 * cd[36]):\\n      revert with 0, 17\\n  if ext_call.return_data * cd > 10000:\\n      revert with 0, 'Exceeds Max Supply'\\n  require count < limit\\n  idx = 0\\n  while idx < cd:\\n      _17 = mem[64]\\n      mem[mem[64] len 892] = 0xfe608060405260405161037c38038061037c833981016040819052610022916101ca565b600080826001600160a01b0316348560008151811061005157634e487b7160e01b600052603260045260246000fd5b6020026020010151604051610066919061029d565b60006040518083038185875af1925050503d80600081146100a3576040519150601f19603f3d011682016040523d82523d6000602084013e6100a8565b606091505b5091509150816100b757600080fd5b826001600160a01b0316846001815181106100e257634e487b7160e01b600052603260045260246000fd5b60200260200101516040516100f7919061029d565b6000604051808303816000865af19150503d8060008114610134576040519150601f19603f3d011682016040523d82523d6000602084013e610139565b606091505b5050505050505061032f565b80516001600160a01b038116811461015c57600080fd5b919050565b600082601f830112610171578081fd5b81516001600160401b0381111561018a5761018a610319565b61019d601f8201601f19166020016102b9565b8181528460208386010111156101b1578283fd5b6101c28260208301602087016102e9565b949350505050565b600080604083850312156101dc578182fd5b82516001600160401b03808211156101f2578384fd5b818501915085601f830112610205578384fd5b815160208282111561021957610219610319565b8160051b6102288282016102b9565b8381528281019086840183880185018c101561024257898afd5b8993505b8584101561027f5780518781111561025c578a8bfd5b61026a8d87838c0101610161565b84525060019390930192918401918401610246565b509750610290915050878201610145565b9450505050509250929050565b600082516102af8184602087016102e9565b9190910192915050565b604051601f8201601f191681016001600160401b03811182821017156102e1576102e1610319565b604052919050565b60005b838110156103045781810151838201526020016102ec565b83811115610313576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b603f8061033d6000396000f3fe6080604052600080fdfea264697066735822122053f6501ff55f957ac07c643b9763b0d556c11ce1ec1de13a2bb98828df801aae64736f6c634300080400\\n      mem[mem[64] + 892] = 64\\n      mem[mem[64] + 956] = ('cd', 4).length\\n      s = 0\\n      t = cd[4] + 36\\n      u = mem[64] + 988\\n      v = mem[64] + (32 * ('cd', 4).length) + 988\\n      while s < ('cd', 4).length:\\n          mem[u] = v + -_17 - 988\\n          require cd[t] <′ calldata.size + -cd[4] - 67\\n          require cd[(cdt] + 36)] <= 18446744073709551615\\n          require cd <=′ calldata.size - cd[(cdt] + 36)]\\n          mem[v] = cd[(cdt] + 36)]\\n          mem[v + 32 len cd[(cdt] + 36)]] = call.data[cdt] + 68 len cd[(cdt] + 36)]]\\n          mem[cd[(cdt] + 36)] + v + 32] = 0\\n          s = s + 1\\n          t = t + 32\\n          u = u + 32\\n          v = v + ceil32(cd[(cdt] + 36)]) + 32\\n          continue \\n      mem[_17 + 924] = saleContractAddress\\n      create contract with 200000000000000000 wei\\n                      code: mem[memem[64] + 988]\\n      if not create.new_address:\\n          revert with ext_call.return_data[0 len return_data.size]\\n      if idx == -1:\\n          revert with 0, 17\\n      idx = idx + 1\\n      continue \\n  if cd > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:\\n      revert with 0, 17\\n  if count > !(2 * cd[36]):\\n      revert with 0, 17\\n  count += 2 * cd[36]def unknown888fdd2e(): # not payable\\n  require calldata.size - 4 >=′ 128\\n  require cd <= 18446744073709551615\\n  require cd <′ calldata.size\\n  require ('cd', 4).length <= 18446744073709551615\\n  require cd * ('cd', 4).length) + 36 <= calldata.size\\n  require cd == addr(cd)\\n  require cd <= 18446744073709551615\\n  require cd <′ calldata.size\\n  require ('cd', 100).length <= 18446744073709551615\\n  require cd('cd', 100).length + 36 <= calldata.size\\n  mem[96 len ('cd', 100).length] = call.data[cd('cd', 100).length]\\n  mem[('cd', 100).length + 96] = 0\\n  call addr(cd) with:\\n       gas gas_remaining wei\\n      args call.data[cd('cd', 100).length]\\n  if not return_data.size:\\n      require ext_call.success\\n      require ext_code.size(saleContractAddress)\\n      static call saleContractAddress.0x6f2057a with:\\n              gas gas_remaining wei\\n      mem[96] = ext_call.return_data[0]\\n      if not ext_call.success:\\n          revert with ext_call.return_data[0 len return_data.size]\\n      require return_data.size >=′ 32\\n      require ext_call.return_data == bool(ext_call.return_data[0])\\n      require not ext_call.return_data[0]\\n      require ext_code.size(saleContractAddress)\\n      static call saleContractAddress.saleActive() with:\\n              gas gas_remaining wei\\n      mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]\\n      if not ext_call.success:\\n          revert with ext_call.return_data[0 len return_data.size]\\n      require return_data.size >=′ 32\\n      require ext_call.return_data == bool(ext_call.return_data[0])\\n      require ext_call.return_data[0]\\n      if cd > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:\\n          revert with 0, 17\\n      require ext_code.size(saleContractAddress)\\n      static call saleContractAddress.totalSupply() with:\\n              gas gas_remaining wei\\n      mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]\\n      if not ext_call.success:\\n          revert with ext_call.return_data[0 len return_data.size]\\n      mem[64] = (4 * ceil32(return_data.size)) + 96\\n      require return_data.size >=′ 32\\n      if ext_call.return_data > !(2 * cd[36]):\\n          revert with 0, 17\\n      if ext_call.return_data * cd > 10000:\\n          revert with 0, 'Exceeds Max Supply'\\n      require count < limit\\n      idx = 0\\n      while idx < cd:\\n          _36 = mem[64]\\n          mem[mem[64] len 892] = 0xfe608060405260405161037c38038061037c833981016040819052610022916101ca565b600080826001600160a01b0316348560008151811061005157634e487b7160e01b600052603260045260246000fd5b6020026020010151604051610066919061029d565b60006040518083038185875af1925050503d80600081146100a3576040519150601f19603f3d011682016040523d82523d6000602084013e6100a8565b606091505b5091509150816100b757600080fd5b826001600160a01b0316846001815181106100e257634e487b7160e01b600052603260045260246000fd5b60200260200101516040516100f7919061029d565b6000604051808303816000865af19150503d8060008114610134576040519150601f19603f3d011682016040523d82523d6000602084013e610139565b606091505b5050505050505061032f565b80516001600160a01b038116811461015c57600080fd5b919050565b600082601f830112610171578081fd5b81516001600160401b0381111561018a5761018a610319565b61019d601f8201601f19166020016102b9565b8181528460208386010111156101b1578283fd5b6101c28260208301602087016102e9565b949350505050565b600080604083850312156101dc578182fd5b82516001600160401b03808211156101f2578384fd5b818501915085601f830112610205578384fd5b815160208282111561021957610219610319565b8160051b6102288282016102b9565b8381528281019086840183880185018c101561024257898afd5b8993505b8584101561027f5780518781111561025c578a8bfd5b61026a8d87838c0101610161565b84525060019390930192918401918401610246565b509750610290915050878201610145565b9450505050509250929050565b600082516102af8184602087016102e9565b9190910192915050565b604051601f8201601f191681016001600160401b03811182821017156102e1576102e1610319565b604052919050565b60005b838110156103045781810151838201526020016102ec565b83811115610313576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b603f8061033d6000396000f3fe6080604052600080fdfea264697066735822122053f6501ff55f957ac07c643b9763b0d556c11ce1ec1de13a2bb98828df801aae64736f6c634300080400\\n          mem[mem[64] + 892] = 64\\n          mem[mem[64] + 956] = ('cd', 4).length\\n          s = 0\\n          t = cd[4] + 36\\n          u = mem[64] + 988\\n          v = mem[64] + (32 * ('cd', 4).length) + 988\\n          while s < ('cd', 4).length:\\n              mem[u] = v + -_36 - 988\\n              require cd[t] <′ calldata.size + -cd[4] - 67\\n              require cd[(cdt] + 36)] <= 18446744073709551615\\n              require cd <=′ calldata.size - cd[(cdt] + 36)]\\n              mem[v] = cd[(cdt] + 36)]\\n              mem[v + 32 len cd[(cdt] + 36)]] = call.data[cdt] + 68 len cd[(cdt] + 36)]]\\n              mem[cd[(cdt] + 36)] + v + 32] = 0\\n              s = s + 1\\n              t = t + 32\\n              u = u + 32\\n              v = v + ceil32(cd[(cdt] + 36)]) + 32\\n              continue \\n          mem[_36 + 924] = saleContractAddress\\n          create contract with 200000000000000000 wei\\n                          code: mem[memem[64] + 988]\\n          if not create.new_address:\\n              revert with ext_call.return_data[0 len return_data.size]\\n          if idx == -1:\\n              revert with 0, 17\\n          idx = idx + 1\\n          continue \\n  else:\\n      mem[96] = return_data.size\\n      mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]\\n      require ext_call.success\\n      require ext_code.size(saleContractAddress)\\n      static call saleContractAddress.0x6f2057a with:\\n              gas gas_remaining wei\\n      mem[ceil32(return_data.size) + 97] = ext_call.return_data[0]\\n      if not ext_call.success:\\n          revert with ext_call.return_data[0 len return_data.size]\\n      require return_data.size >=′ 32\\n      require ext_call.return_data == bool(ext_call.return_data[0])\\n      require not ext_call.return_data[0]\\n      require ext_code.size(saleContractAddress)\\n      static call saleContractAddress.saleActive() with:\\n              gas gas_remaining wei\\n      mem[ceil32(return_data.size) + ceil32(return_data.size) + 97] = ext_call.return_data[0]\\n      if not ext_call.success:\\n          revert with ext_call.return_data[0 len return_data.size]\\n      require return_data.size >=′ 32\\n      require ext_call.return_data == bool(ext_call.return_data[0])\\n      require ext_call.return_data[0]\\n      if cd > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:\\n          revert with 0, 17\\n      require ext_code.size(saleContractAddress)\\n      static call saleContractAddress.totalSupply() with:\\n              gas gas_remaining wei\\n      mem[ceil32(return_data.size) + (2 * ceil32(return_data.size)) + 97] = ext_call.return_data[0]\\n      if not ext_call.success:\\n          revert with ext_call.return_data[0 len return_data.size]\\n      mem[64] = ceil32(return_data.size) + (4 * ceil32(return_data.size)) + 97\\n      require return_data.size >=′ 32\\n      if ext_call.return_data > !(2 * cd[36]):\\n          revert with 0, 17\\n      if ext_call.return_data * cd > 10000:\\n          revert with 0, 'Exceeds Max Supply'\\n      require count < limit\\n      idx = 0\\n      while idx < cd:\\n          _37 = mem[64]\\n          mem[mem[64] len 892] = 0xfe608060405260405161037c38038061037c833981016040819052610022916101ca565b600080826001600160a01b0316348560008151811061005157634e487b7160e01b600052603260045260246000fd5b6020026020010151604051610066919061029d565b60006040518083038185875af1925050503d80600081146100a3576040519150601f19603f3d011682016040523d82523d6000602084013e6100a8565b606091505b5091509150816100b757600080fd5b826001600160a01b0316846001815181106100e257634e487b7160e01b600052603260045260246000fd5b60200260200101516040516100f7919061029d565b6000604051808303816000865af19150503d8060008114610134576040519150601f19603f3d011682016040523d82523d6000602084013e610139565b606091505b5050505050505061032f565b80516001600160a01b038116811461015c57600080fd5b919050565b600082601f830112610171578081fd5b81516001600160401b0381111561018a5761018a610319565b61019d601f8201601f19166020016102b9565b8181528460208386010111156101b1578283fd5b6101c28260208301602087016102e9565b949350505050565b600080604083850312156101dc578182fd5b82516001600160401b03808211156101f2578384fd5b818501915085601f830112610205578384fd5b815160208282111561021957610219610319565b8160051b6102288282016102b9565b8381528281019086840183880185018c101561024257898afd5b8993505b8584101561027f5780518781111561025c578a8bfd5b61026a8d87838c0101610161565b84525060019390930192918401918401610246565b509750610290915050878201610145565b9450505050509250929050565b600082516102af8184602087016102e9565b9190910192915050565b604051601f8201601f191681016001600160401b03811182821017156102e1576102e1610319565b604052919050565b60005b838110156103045781810151838201526020016102ec565b83811115610313576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b603f8061033d6000396000f3fe6080604052600080fdfea264697066735822122053f6501ff55f957ac07c643b9763b0d556c11ce1ec1de13a2bb98828df801aae64736f6c634300080400\\n          mem[mem[64] + 892] = 64\\n          mem[mem[64] + 956] = ('cd', 4).length\\n          s = 0\\n          t = cd[4] + 36\\n          u = mem[64] + 988\\n          v = mem[64] + (32 * ('cd', 4).length) + 988\\n          while s < ('cd', 4).length:\\n              mem[u] = v + -_37 - 988\\n              require cd[t] <′ calldata.size + -cd[4] - 67\\n              require cd[(cdt] + 36)] <= 18446744073709551615\\n              require cd <=′ calldata.size - cd[(cdt] + 36)]\\n              mem[v] = cd[(cdt] + 36)]\\n              mem[v + 32 len cd[(cdt] + 36)]] = call.data[cdt] + 68 len cd[(cdt] + 36)]]\\n              mem[cd[(cdt] + 36)] + v + 32] = 0\\n              s = s + 1\\n              t = t + 32\\n              u = u + 32\\n              v = v + ceil32(cd[(cdt] + 36)]) + 32\\n              continue \\n          mem[_37 + 924] = saleContractAddress\\n          create contract with 200000000000000000 wei\\n                          code: mem[memem[64] + 988]\\n          if not create.new_address:\\n              revert with ext_call.return_data[0 len return_data.size]\\n          if idx == -1:\\n              revert with 0, 17\\n          idx = idx + 1\\n          continue \\n  if cd > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:\\n      revert with 0, 17\\n  if count > !(2 * cd[36]):\\n      revert with 0, 17\\n  count += 2 * cd[36]\\n```\\n\\n## 你都到这了，我们还是往下看看吧\\n\\n我们只看这个unknown888fdd2e，这个就是这位大神的思路，当然我不是smartcontract的expert，我也就是大概说说想法，注意我高亮的地方：\\n\\n1. checkWhietlist\\n2. saleActive\\n3. 计算要多少个钱包，每个钱包mint两个\\n4. 创建contract去call 这段***mem\\\\[mem\\\\[64\\\\] len 892\\\\]*** 代码，如果没有猜错就是创建钱包和mintnft了\\n\\n剩下的问题是为什么这个contract可以改官方contract里面的数据？\\n\\n我们再来看看官方如何开始公售的\\n\\n[https://etherscan.io/address/0xc932d6a49d2d8b77b4075e537d142ee6cc1e416a](https://etherscan.io/address/0xc932d6a49d2d8b77b4075e537d142ee6cc1e416a)\\n\\n这个就是官方的call，这个时候科学家把里面的签名拿了，完全一样的call了自己的contract，如果没有猜错，科学家把官方的tx拿到了，然后加大gas，运气好了就赢了。\\n\\nbonus point: 这儿必须要check owner亚\\n\\n```\\nfunction mintNFT(uint256 amount, bool stake) public payable {         require(!checkWhitelist, \\\"Not public mode\\\");          _mintNFT(amount, \\\"\\\", \\\"\\\", stake);     \\n}\\n```\\n\\n但是也有可能他有别的方式保证自己的成功率，但是我们还没有看出来。\\n\\n## 结论\\n\\n在mint的时候还是要检查owner亚。。。\\n\\n本来了项目方使用Gnosis来做多重签名是好的，但是这个没有办法避免tx跟监听，然后先做了。应用的场景完全不对了。\\n\\n*Originally published at [https://01dcat.notion.site](https://01dcat.notion.site/Metroverse-c9bfdf572d8c4be1a2c8514b8867d7fc)*.\",\"timestamp\":1642667332,\"title\":\"Metroverse公发是怎么了\"},\"digest\":\"5YcT9k4utZjxQrqLot_di5qO-ZoMpHOZEH-82E7PBVM\",\"authorship\":{\"contributor\":\"0x1519E84999d6dbdE35b00f2E73B18AA83B27290A\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"3IgMUd3qhbD-N6V1Br_VbrbldaHu03PV0EUXY70CWKE\\\",\\\"y\\\":\\\"TwJoxBIusAbHLp80twmooe0HD_jEBdQcb0HhuX-7qHo\\\"}\",\"signature\":\"qGUVlmUI3XOURrCDLmQES8ydqYLYlKmpLeNz2O9ppucCR1M2Kk0roxxhs1NvFtaa8V2q0j-1gjZc5cWDtg34WQ\",\"signingKeySignature\":\"0x88c62b36816adce704b83e1a2e860c46ee7393918a1d99e3775425ffac44b30f6dfc53e5ef64fa07bb3f831b6a91880c2bc3fbf60f65d52432e13cefb3fa13071c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"3IgMUd3qhbD-N6V1Br_VbrbldaHu03PV0EUXY70CWKE\\\",\\\"y\\\":\\\"TwJoxBIusAbHLp80twmooe0HD_jEBdQcb0HhuX-7qHo\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"6L8hzNtcGC57PtetZQhgK_5gxoHLDjluFpnLCdNauxE\"}"