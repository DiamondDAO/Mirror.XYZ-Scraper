"{\"content\":{\"body\":\"**Problem Statement:** We have an application that allows us to analyze different blockchain projects and their relevant stats. The main component of this application is a `<Table />` that lists out the the top 100 projects by market capitalization in the crypto markets. Each row in this table contains an Inspect button that conditionally renders a `<Details />` component in an effort to allow us to further examine the ongoings of the project. We use the useEffect hook to make a `GET` request to the pertinent API as a side effect of rendering the `<Details />` component and set state with that data. However, how do we ensure that the appropriate fetch request is made on each render of the <Details /> component without triggering an infinite loop of re-rendering? \\n\\nMy first attempt at building out this functionality looked something like this: \\n\\n`import React, { useEffect } from \\\"react\\\";`\\n\\n`import { useParams } from \\\"react-router\\\";`\\n\\n`function Details({ projectData, setProjectData}) {`\\n\\n`const params = useParams();`\\n\\n`useEffect(() => {`\\n\\n`` fetch(`${BASE_URL}/${params.id})`) ``\\n\\n`.then(resp => resp.json())`\\n\\n`.then(data => setProjectData(data))}, [projectData])`\\n\\n`…`\\n\\nLet’s walk through this code: \\n\\n* `projectData` is my state variable that holds the data that my `<Details />` component renders and setProjectData is it’s respective setter function. This have been passed down to the `<Details />` component as props.\\n* params is an object that encapsulates the parameters in my URL. For the purposes of this app, when a user clicks on a project within the <Table /> component they are directed to a URL where the last parameter is the name of the project. Thus, if the user clicks on Solana, the URL changes to `home/solana`. We can extract that last parameter via the id key in the params object and then use it to make the `GET` request. \\n* `resp => resp.json()` converts the response from the server into JSON format. \\n* `data => setProjectData(data)` sets state for the projectData with the data received from the server.\\n* `[projectData]` is the dependencies array which instructs the `GET` to fire every time `projectData` changes. \\n\\nDo you see the problem? 🙄🙄🙄🙄🙄🙄🙄🙄\\n\\n**Every time the** `<Details />` **component renders, we inherent change the** `projectData` **state. Since the dependencies array contains** `projectData` **this results in an infinite loop of** `GET` **requests.**\\n\\nHow do we fix this? Simple, abide by the this beautiful tweet below: \\n\\n![](https://images.mirror-media.xyz/publication-images/TqgPmFZpd5w3j9jA1gWiZ.png?height=1094&width=1194)\\n\\nOur state does not synchronize with itself, that would be silly. Instead, it synchronizes most closely with the URL. Thus, the working code should take advantage of the useLocation(); hook as follows: \\n\\n`import React, { useEffect } from \\\"react\\\";`\\n\\n`import {useParams, useLocation } from \\\"react-router\\\";`\\n\\n`function Details({ projectData, setProjectData}) {`\\n\\n`const params = useParams();`\\n\\n`const { pathname } = useLocation();`\\n\\n`useEffect(() => {`\\n\\n`` fetch(`${BASE_URL}/${params.id})`) ``\\n\\n`.then(resp => resp.json())`\\n\\n`.then(data => setProjectData(data))}, [pathname])`\\n\\n`…`\\n\\nBOOM 😎😎😎🦄🦄🦄🌈🌈🌈🍾🍾🍾🚀🚀🚀. No more infinite re rendering for you. \\n\\n \",\"timestamp\":1639413718,\"title\":\"An Example on Avoiding Infinite Re-Rendering in React. \"},\"digest\":\"0FCFbm2BTkzqchrRWuudD9V8SS7HFF6VK1WEnl6V3Eg\",\"authorship\":{\"contributor\":\"0xdD0868dAF82E38808130eCdbD998013a654637Ae\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"M8oMSw4x9m8PXqSwspHjQGPvxut_AbkevQAHwigwa-Q\\\",\\\"y\\\":\\\"ulOOueuis_wWL3FuCALTQBjupyU4yWxaTRkzu2WrpEM\\\"}\",\"signature\":\"_s9_FFTfiM5AITbnnuW3VlF5cPXqDABkVjbXM64BCFg7dVTehEDiQRmfNRX-0APkyJ0lGYB9AcPAk9_bJygtFw\",\"signingKeySignature\":\"0xac7e522cc679b6267bf4748334e261e8c5bb90e90e3f58d4a016dcd32602bb5b7e9a53bc8c7201cf25cc5b9ab8019b074517ab8dbcdc138e9c7f22df94427e821c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"M8oMSw4x9m8PXqSwspHjQGPvxut_AbkevQAHwigwa-Q\\\",\\\"y\\\":\\\"ulOOueuis_wWL3FuCALTQBjupyU4yWxaTRkzu2WrpEM\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"0FCFbm2BTkzqchrRWuudD9V8SS7HFF6VK1WEnl6V3Eg\"}"