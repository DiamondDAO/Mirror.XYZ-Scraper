"{\"content\":{\"body\":\"Small Intro\\n\\nHi I’m David a Full stack developer, looking to transition from Web2 → Web3 👾\\n\\n* I’ve been in tech for 3-4 years now\\n* Self taught Fullstack dev, I love the ability to make complete end to end solutions\\n* Studied some CS in college and have been exposed to a lot of different languages but my favorite is javascript\\n\\n`This is my first exposure programming` ***ANYTHING*** `web 3`\\n\\nHere are my notes for the [BuildSpace tutorial: ](https://app.buildspace.so/projects/CO02cf0f1c-f996-4f50-9669-cf945ca3fb0b)*[Build a Web3 App with Solidity + Ethereum Smart Contracts](https://app.buildspace.so/projects/CO02cf0f1c-f996-4f50-9669-cf945ca3fb0b) tutorial*\\n\\nENS → kidme.eth\\n\\n### Tools\\n\\nTutorial leads you through all this but just a small overview of what we will use.\\n\\n* Hardhat + ?? dependencies\\n  * Tool used for testing Smart Contracts\\n* Solidity `.sol`\\n  * Language similar to Java, EVN breaks it down to binary I believe\\n* Javascript\\n  * Used to test and deploy our smart contract\\n* replit ( [link](https://replit.com/\\\\~) )\\n  * online programming environment\\n  * using it for our frontend, done in React\\n\\n> Keep in mind these are my notes while doing the tutorial, they are meant to display what stood out to me and nothing more. My intent is not to replace the tutorial only to help make sense of what we are doing, even though the tutorial does a good job of this. I am still learning, not a Web 3 dev… yet.\\n\\n`Tip`\\n\\nKeep track of the address in an organized manner. With blockchain tech there is a lot of deploying and keeping track of things on the Rinkeby test net.\\n\\n## Getting started\\n\\n### Lesson: Get your local Ethereum networking running\\n\\nHardhat → a fake local ETH network, with fake money 💸\\n\\n### Lesson: 👩‍💻 Write your first smart contract in Solidity\\n\\nIn IDE (VSCode) look up Solidity to have your theme coloring in this programming language as well. This helps a lot.\\n\\nWavePortal.sol → Smart Contract\\n\\n* This is what gets compiled into instructions for the EVM (Ethereum Virtual Machine)\\n  * I knew smart contracts got broken into byte code or something\\n  * This was looked up for this post\\n\\nONE THING TO NOTE HERE: DON’T GET FARZA SAD I encourage everyone to do all steps and participate in this tutorial end to end\\n\\n### Lesson: Compile contract locally and run it 🔥\\n\\nNice the contract is done now we are trying to `run` it.\\n\\n(Keep in mind these are my initial notes and my first experience working with smart contracts and blockchain in general. Writing this blog is also supposed to help me cement these concepts.)\\n\\n`run.js: `\\n\\n* Does this also mean deploy local version??\\n\\n![Annotations of run.js](https://images.mirror-media.xyz/publication-images/whw8ieFBy0rIgRN-sFlln.png?height=726&width=1752&&&&&&&&&&&&&&&&&&&&&&&&&&&size=medium)\\n\\nNice tutorial goes through it line by line! ☺️\\n\\nLines:\\n\\n1. Grabs our contract and when compiled make the necessary files we need for the EVM\\n2. Looks like this might be overkill since this is creating an entire local blockchain for this one contract\\n3. deploys…. nice\\n\\nThis section provides some nice insight into `hardhat`\\n\\n### Lesson: Store 👋 data on….. . . . .\\n\\nThe biggest thing I wanted to focus on here was to show how similar Solidity is to something a lot more people are familiar with… java\\n\\n![Comparing Solidity and Java](https://images.mirror-media.xyz/publication-images/sqxsZQABALKKT_vrsjSvD.jpg?height=612&width=2312&&&&&&&&&&&&&&&&&&&&&&&&&&&size=medium)\\n\\nMore on Solidity variables:\\n\\n[https://medium.com/coinmonks/solidity-variables-storage-type-conversions-and-accessing-private-variables-c59b4484c183](https://medium.com/coinmonks/solidity-variables-storage-type-conversions-and-accessing-private-variables-c59b4484c183)\\n\\nI feel like the tutorial does a good job about explaining what is being done.\\n\\n`run.js`\\n\\n![Notating run.js new parts](https://images.mirror-media.xyz/publication-images/Dao24vklkC2ECqwnhHgtw.jpg?height=810&width=1304)\\n\\nOne thing to point out that hre (hardhat) is providing us with `[owner, randomPerson]` values.\\n\\nNice! we waved to ourselves.. Note: In order to deploy something to the blockchain we need to have a wallet address. Also looking at the console it shows what is happening\\n\\n![New line in run.js](https://images.mirror-media.xyz/publication-images/A29avZjuGoUDQKEBxfxxs.jpg?height=322&width=1304)\\n\\nWith this we are now waving to another wallet!!! 👋\\n\\n### Lesson:  Deploy locally….👀 start building the website\\n\\nThis lesson is important. Now introducing deploying our contract and interacting with it. This script `npx hardhat node` creates a local blockchain that stays alive.\\n\\n`deploy.js`\\n\\n![notes on deploy.js](https://images.mirror-media.xyz/publication-images/l2Y2m26rb5nMUfoxdWo0g.jpeg?height=746&width=1292)\\n\\nAfter running another hardhat script in a separate window, we are finally given an address for our contract. This makes it easy for our site to locate this contract.\\n\\nThe receipts: 👀\\n\\nAfter this part I was super excited! This new tech can be intimidating but we have accomplished a lot!!\\n\\n## Section 2\\n\\n### Lesson: Setup a basic react app, setup Metamask\\n\\nThis part was a bit weird for me as Metamask is not used as my main wallet. However, I feel like Metamask is so seamless it makes it a strong candidate as a development wallet.\\n\\n> What I was trying to do was to import this project, host it on Vercel and connect it to my mobile, wallet. That turned own to be quite the bump in the road that I just didn’t want to deal with.\\n\\nI recommend just using Metamask and the Replit page they provided, that journey was pretty seem less.\\n\\n### Lesson: 📤 Deploy smart contract to a real testnet\\n\\nthis looks cool → Alchemy\\n\\n* Looks incredibly impressive, has a full suite of dev tools and features\\n\\n🚰 Rinkeby and it’s fake ETH money was a roadblock I couldn’t get around through the main channels. HOWEVER the discord has a channel `#faucet-request`, that is the easiest and fastest way I was able to get some development ETH.\\n\\n*Now once that contract is deployed this should live on Rinkeby public test network 🤯🤯*\\n\\n### Lesson: Connect our wallet to our web app 🌅\\n\\n`In React ..App.jsx`:\\n\\n![Small breakdown of .jsx code](https://images.mirror-media.xyz/publication-images/GcE04Y1dvEO2S7xMyNhGy.jpg?height=834&width=1040)\\n\\n* `useEffect` gets called anytime the state of the second parameter changes, in this case we are using it to be called once the page is rendered\\n* If not familiar with React, it is a good choice for a frontend framework\\n\\ngoing through tutorial…. Alot is being added\\n\\n* We now have state\\n* Connect to the users wallet\\n  * Also check if we are have been given permission to use this wallet\\n* Just in general try, catch blocks are good development practices\\n\\n### Lesson: Call the our deployed smart contract…\\n\\n`Back in React ..App.jsx`:\\n\\n![Notes on new stuff added to frontend](https://images.mirror-media.xyz/publication-images/7Adj8682bc8qfk6VLnEFE.jpg?height=1194&width=1820&&&&&&&&&&&&&&&&&&&&&&&&&&size=medium)\\n\\n* contractAddress: Where this contract is in the Rinkeby testnet.\\n  * *told you save all addresses when developing smart contracts*\\n* contactAbi: For the site to know how to interact with our contract, the abi comes                 from the artifacts we moved over\\n* signer: validates a proper signer is interacting with contract (I believe)\\n* Added some useful links to the bottom of the doc :)\\n\\n  > Here’s a thing I learned from now developing on web 3!\\n  >\\n  > If you need to retest website, the connection to Metamask does effect the state of our site. If needing to retest these are the steps.\\n  > * Open Metamask extension\\n  > * Setting ( 3 dots on the right of the account )\\n  > * Click the trash can near the correct repl project\\n  >   * Something like this …xxxx.id.repl.co\\n  >   * If you delete the wrong one it will just kind of sign you out of that site\\n\\n### Lesson: 📦 Storing messages from users on the blockchain\\n\\nTasks\\n\\n1. Update Smart Contract (WavePortal.sol)\\n2. Test in run.js\\n3. Re-deploy (deploy.js)\\n4. Update new info on frontend\\n\\n`WavePortal.sol`:\\n\\n* Added an event\\n* Added struct (Similar to js object?)\\n* Created array to hold Wave structs\\n* Wave now has a message\\n  * This pushes our new wave to our wave array\\n  * This means we store *who waved*, *what did they say* and *when*\\n* emit NewWave → triggers an event in Solidity\\n* new function getAllWaves() returns our fancy new array of Wave structs\\n\\n`run.js`:\\n\\n* deploy contract up top\\n* get all waves\\n\\n  > Remember contracts on the blockchain are immutable, lose all contract data when we redeploy\\n\\n  A small thing I noticed was that our smart contract was able to handle emojis 🥳 so use them up!\\n\\n### Lesson: Fund contract, set a prize …. .. send users ETH Ξ 💸\\n\\nTake some time on this section, there is a lot to unpack\\n\\n`WavePortal.sol`:\\n\\n* Check to see if contract has enough funds\\n* (bool success, )\\n  * success if we sent the money\\n  * If it failed return “Failed to withdraw money ….. “\\n* require();\\n  * this is an important function\\n  * It means we are able to cancel a transaction if certain criteria isn’t met\\n\\n`run.js` some new parts:\\n\\n`const waveContract = await waveContractFactory.deploy({ value: hre.ethers.utils.parseEther(\\\"0.1\\\"), });`\\n\\n* ⭐️ This is the deployment of our contact and with 0.1 ETH at that\\n* `hre.ethers.provider.getBalance(waveContract.address)`\\n  * Gets balance of our contract\\n* Notice if we want to log our current balance you have to use `utils.formatEther(currentBalance)`\\n* Our wave now can handle a message in it!\\n  * `waveContract.wave(\\\"A message!\\\");`\\n\\n### Lesson: Randomly pick a winner\\n\\nThis is where developing on the block chain gets tricky. How do we implement randomness in something that is both immutable and public? …… take some time to guess 👀 I did …. I guessed wrong but still tried.\\n\\n> Not sure if Solidity has built in library but a util for randomness would be nice\\n\\nLots of stuff happening here but now we know moving forward when developing smart contracts, dealing with randomness will have its own set of unique challenges.\\n\\nGoing through the tutorial …. ….\\n\\nNotice in `function wave` there is a new require section with its own parameters\\n\\n`require( lastWavedAt[msg.sender] + 15 minutes < block.timestamp, \\\"Wait 15m\\\" );`\\n\\nCancels transaction if that parameter does not pass\\n\\n### Lesson: Finalize and celebrate! 🎨\\n\\nAnother thing we are adding is a gas limit to ease the friction in using our new web 3 app, is it safe to call this a dapp?\\n\\nReally cool that it goes through `emit`s/events and also points out how to add it in the code\\n\\n* the second `useEffect` now updates the UI any time it notices a new emitter event happening on the Smart Contract\\n* This allows for our UI to keep up with the contract on the blockchain\\n\\n## And that is it! Congratulations 🎉\\n\\nI did run into issues when going through this tutorial, the trick is to kinda stick with it and be resourceful. I found that these new concepts are abit tough however it is pretty easy to relate them to things we already do in tech.\\n\\nI do want to say thank you for taking the time in reading this and good luck on the journey.\\n\\n***Links on documentation***:\\n\\n[https://github.com/ethers-io/ethers.js/blob/master/packages/contracts/src.ts/index.ts#L1130](https://github.com/ethers-io/ethers.js/blob/master/packages/contracts/src.ts/index.ts#L1130)\\n\\n[https://docs.ethers.io/v5/api/contract/contract/](https://docs.ethers.io/v5/api/contract/contract/)\\n\\n[https://docs.ethers.io/v5/api/signer/#signers](https://docs.ethers.io/v5/api/signer/#signers)\\n\\n\",\"timestamp\":1640790025,\"title\":\"Buildspace Project: Build a web 3 app .... My notes\"},\"digest\":\"Zko56jgJpY7yIIWrbnauKpc3HactIX3SjT4YmfY__Vk\",\"authorship\":{\"contributor\":\"0xAa197624BF7283e2120Ee9d25490485C11F17FD0\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"GlpQCz8J-JIZru9zgat_3BiBBVnUsX3KttzQJhVJQNE\\\",\\\"y\\\":\\\"Va8S_08tN0pmc1rJt6bBO-QzJc7MXztYdE8NKMqZGaI\\\"}\",\"signature\":\"zyMu7Aj7OmI0q7YK5BaLQ3PYWgn2M9-aIA_5WF5DS0H4jQxkP3_vHIscwPcZ-vRNYJy2LjeS0TEwzsJEfQGE0A\",\"signingKeySignature\":\"0xcb2a34bc42345168247ca1afc5d4dcf4c7f2e62debfa543ad6b2f15a75c069f902b72d8fa4e2fa1886fec711cc44cb3626481ff4d8f97c724a9baff0433227d51c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"GlpQCz8J-JIZru9zgat_3BiBBVnUsX3KttzQJhVJQNE\\\",\\\"y\\\":\\\"Va8S_08tN0pmc1rJt6bBO-QzJc7MXztYdE8NKMqZGaI\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"JWDuQdsEPauHv35FQv1EQ7Dnsad03i5etdoubWVC3qY\"}"