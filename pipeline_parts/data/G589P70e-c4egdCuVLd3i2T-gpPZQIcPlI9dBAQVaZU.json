"{\"content\":{\"body\":\"[![A Bit Whale-ish](https://miro.medium.com/fit/c/96/96/1\\\\*o3fqF_yiq89vetvAzlgwkQ.png)](https://medium.com/@abitwhaleish?source=post_page-----d09ad642f690-----------------------------------)\\n\\n![](https://miro.medium.com/max/900/1\\\\*k5D7XtzFhFCoeDX0d_F2VQ.png)\\n\\ngm frens! Welcome back to the Ante Test Series (check out our first writeup on Compound [here](https://medium.com/ante-finance/ante-test-series-1-compound-4e775fd8e1fc), or read more [here](https://medium.com/ante-finance/why-ante-f206ccef6cba) if you need a refresher on Ante Tests).\\n\\nAt Ante, we believe in putting our money where our mouth is, so itâ€™s only natural that this weekâ€™s featured Ante Tests are tests for the **Ante protocol**! After all, what kind of buidlers would we be if we didnâ€™t eat our own dog food?\\n\\n## About the tests\\n\\nBoth of these Ante Tests loop over multiple contract addresses checking for specific conditions. While looping in general can be susceptible to a block stuffing attack if the number of tests in the loop gets sufficiently (read: extremely) high, we set the array of tests on deployment explicitly so we can avoid this problem.\\n\\n    constructor(address[] memory antePoolContracts) {\\n        testedContracts = antePoolContracts;\\n        protocolName = \\\"Ante\\\";\\n    }\\n\\nHaving the tested contracts be passed in as an argument on deploy also makes it easy to deploy new versions of the test if the set of Ante Pools we want to check changes.\\n\\n## AntePoolTest\\n\\nAntePoolTest checks several Ante Pools to confirm that the balance matches the total amount staked, challenged, and paid out (check it out on the [Ante app](https://app.ante.finance/#/contract/0xDC99AD0b3FDdAE6522e26c33439a0b0b476172c5)). This is an example of using an Ante Test to verify that smart contract functionality works as intended.\\n\\n    function checkTestPasses() public view override returns (bool) {\\n        for (uint256 i = 0; i < testedContracts.length; i++) {\\n            IAntePool antePool = IAntePool(testedContracts[i]);\\n            // totalPaidOut should be 0 before test fails\\n            if (\\n                testedContracts[i].balance < \\n                (\\n                    antePool\\n                        .getTotalChallengerStaked()\\n                        .add(antePool.getTotalStaked())\\n                        .add(antePool.getTotalPendingWithdraw())\\n                        .sub(antePool.totalPaidOut())\\n                )\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\nWhen AntePoolTest was deployed, there were 6 Ante Pools on mainnet, so AntePoolTest checks each of those 6 pools and if any of them fail to meet the conditions, AntePoolTest fails.\\n\\n## AnteAVLDropTest\\n\\nOur second (and brand new) Ante Test for Ante is a **plunge protection test** to make sure that there isnâ€™t a 99% drop in value locked across the tested contracts (check it out [here](https://app.ante.finance/#/contract/0x2EdC35B39BFBca6A52eA35612C2684D3D7654763)). In the test, we define a helper function `getCurrentAVL()`, which loops through the Ante Pools and sums up the balances:\\n\\n    function getCurrentAVL() public view returns (uint256) {\\n        uint256 currentAVL;\\n\\n            for (uint256 i = 0; i < testedContracts.length; i++) {\\n            currentAVL = currentAVL.add(testedContracts[i].balance);\\n        }\\n\\n        return currentAVL;\\n    }\\n\\nIn the constructor, a snapshot of the total AVL is taken on deploy and used to calculate the failure threshold. For the current deployment, weâ€™ve included all 11 Ante Tests that are currently on Mainnet, which includes 4 community-written tests ðŸ¥³.\\n\\n    constructor(address[] memory _testedContracts) {\\n        protocolName = \\\"Ante\\\";\\n        testedContracts = _testedContracts;// Calculate test failure threshold using 99% drop in total AVL at time of deploy\\n        avlThreshold = getCurrentAVL().div(100);\\n    }\\n\\nOnce we have our AVL threshold, checking the failure condition is pretty straightforward:\\n\\n    function checkTestPasses() public view override returns (bool) {\\n        return getCurrentAVL() >= avlThreshold;\\n    }\\n\\nDead simple, right? Honestly, besides helping bootstrap trust in a protocol, writing an Ante Test is also a great way to onboard junior developers and teach them basic smart contract development. I mean, our UX designer wrote AnteAVLDropTest!\\n\\n## Conclusion\\n\\nRisks in DeFi are really hard to understand unless youâ€™re super technical. Ante Tests help quantify those risks in a simple manner, and weâ€™ve made it super easy for anyone to write your own Ante Tests. Check out our [community GitHub](https://github.com/antefinance/ante-community-tests) where other community members have written Ante Tests for protocols like OlympusDAO and Wild Credit and help write tests for your favorite protocols, follow us on [Twitter](https://twitter.com/AnteFinance), and join our [Discord](https://discord.com/invite/yaJthzNdNG) for more discussion!\\n\",\"timestamp\":1638460461,\"title\":\"Ante Test Series #2: Ante Finance - Ante Finance - Medium\"},\"digest\":\"4knHVt3sjo0d7RVj6QOwS708QzCPxDDTU6gtS9krU5s\",\"authorship\":{\"contributor\":\"0x8CD69bE390c689Eb7E9ab74113f572994C2914B9\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ar7iEoi0lVS_9Y36CD1RlFM0hzp_tg2_3ovoz-c8Xjw\\\",\\\"y\\\":\\\"G_flir9mZ0SK1ymxarujJpVCstBRYv2KUeSsaeKqNuk\\\"}\",\"signature\":\"uU7OmBsg4T9-XnS83-ZbgrsXP8r5q0VYxgDBqrvshgaphqGS_ZXrY0GL9MBih7YPBITxuBpq3RfUf_kKyscGGQ\",\"signingKeySignature\":\"0xdac9d1de356cf0497671ceb1d20eaa8c4977e06b7e7d777771bb66a386283409682128dea19ccde34e71e2cd528543ce154c5cb6a86c58ebd50c1467c7eefed901\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ar7iEoi0lVS_9Y36CD1RlFM0hzp_tg2_3ovoz-c8Xjw\\\",\\\"y\\\":\\\"G_flir9mZ0SK1ymxarujJpVCstBRYv2KUeSsaeKqNuk\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"4knHVt3sjo0d7RVj6QOwS708QzCPxDDTU6gtS9krU5s\"}"