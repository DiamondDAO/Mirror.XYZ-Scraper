"{\"content\":{\"body\":\"# gin框架\\n\\n1、gin框架的路由是采用洋葱模型，中间件和具体接口采用同样的方式，提前放入handler，只是中间件方法中，有Next()方法，继续执行下一个，具体接口中则没有Next()方法，当然，中间件中也可以采用Abort()方法，终止程序继续往下执行。\\n\\n详细可以参考这篇文章：\\n\\n[https://blog.csdn.net/raoxiaoya/article/details/109444890](https://blog.csdn.net/raoxiaoya/article/details/109444890)\\n\\n# 基础\\n\\n## struct之间可以相互比较吗\\n\\n1、同一个类型的struct，且没有不可比较的类型（map,slice等），则可以进行比较。\\n\\n2、一旦struct中包含不可比较的类型，或者是两个结构体，则不可进行比较，即便两个struct有相同的类型也不可以，因为地址不一样。\\n\\n## select\\n\\n1、select和channel配合使用，用于等待一个或多个channel的输出。\\n\\n## golang为什么高效\\n\\n1、goroutine是golang并行设计的核心。\\n\\n2、goroutine说到底就是协程，但是它比线程更小，几十个协程可能底层对应的就是五六个线程，golang内部帮你实现了这些协程之间的内存共享。\\n\\n3、执行协程，只需要极少的栈内存，大概是4\\\\~5kb，也正因为这样，在一台机器上可以开启成千上万个协程，只要内存足够即可。\\n\\n4、golang既支持通过共享内存进行通讯，也支持通过消息传递的方式进行通讯，后者是CSP的一个变种，效率更高，也是golang推荐的方式。\\n\\n**总结为：用户空间 避免了内核态和用户态的切换导致的成本、可以由语言和框架层进行调度、更小的栈空间允许创建大量的实例。**\\n\\n关于golang的CSP模型说明，可以查看这篇文章：\\n\\n[https://www.jianshu.com/p/36e246c6153d](https://www.jianshu.com/p/36e246c6153d)\\n\\n# 特别需要注意的代码执行题目\\n\\n1、以下程序输出什么\\n\\n```\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n)\\n\\nfunc calc(index string, a, b int) int {\\n\\tret := a + b\\n\\tfmt.Println(index, a, b, ret)\\n\\treturn ret\\n}\\n\\nfunc main() {\\n\\ta := 1\\n\\tb := 2\\n\\tdefer calc(\\\"1\\\", a, calc(\\\"10\\\", a, b))\\n\\ta = 0\\n\\tdefer calc(\\\"2\\\", a, calc(\\\"20\\\", a, b))\\n\\tb = 1\\n\\t//time.Sleep(1000 * time.Second)\\n}\\n\\noutput:\\n10 1 2 3\\n20 0 2 2\\n2 0 2 2\\n1 1 3 4\\n```\\n\\n```\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n)\\n\\nfunc main() {\\n\\ts := make([]int, 5)\\n\\ts = append(s, 1, 2, 3)\\n\\tfmt.Println(s)\\n}\\noutput:\\n[0 0 0 0 0 1 2 3]\\n```\\n\\n```\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n)\\n\\ntype People interface {\\n\\tSpeak(string) string\\n}\\n\\ntype Stduent struct{}\\n\\nfunc (stu *Stduent) Speak(think string) (talk string) {\\n\\tif think == \\\"bitch\\\" {\\n\\t\\ttalk = \\\"You are a good boy\\\"\\n\\t} else {\\n\\t\\ttalk = \\\"hi\\\"\\n\\t}\\n\\treturn\\n}\\n\\nfunc main() {\\n\\tvar peo People = Stduent{}\\n\\tthink := \\\"bitch\\\"\\n\\tfmt.Println(peo.Speak(think))\\n}\\n\\n//编译不过去，需要修改一行代码：\\nvar peo People = Stduent{} 修改为 var peo People = &Stduent{}\\n```\\n\\n```\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n)\\n\\ntype People interface {\\n\\tShow()\\n}\\n\\ntype Student struct{}\\n\\nfunc (stu *Student) Show() {\\n\\n}\\n\\nfunc live() People {\\n\\tvar stu *Student\\n\\treturn stu\\n}\\n\\nfunc main() {\\n\\tif live() == nil {\\n\\t\\tfmt.Println(\\\"AAAAAAA\\\")\\n\\t} else {\\n\\t\\tfmt.Println(\\\"BBBBBBB\\\")\\n\\t}\\n}\\n\\noutput:\\nBBBBBBB\\n原因：指针类型的地址和nil不一致，不相等\\n```\\n\\n```\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n)\\n\\nfunc main() {\\n\\tdefer_call()\\n}\\n\\nfunc defer_call() {\\n\\tdefer func() { fmt.Println(\\\"打印前\\\") }()\\n\\tdefer func() { fmt.Println(\\\"打印中\\\") }()\\n\\tdefer func() { fmt.Println(\\\"打印后\\\") }()\\n\\n\\tpanic(\\\"触发异常\\\")\\n}\\noutput:\\n打印后\\n打印中\\n打印前\\npanic: 触发异常\\n\\n原因：遇到panic，遍历本协程的defer链表，并按照先进后出的顺序执行\\n```\",\"timestamp\":1639974534,\"title\":\"golang面试题\"},\"digest\":\"LEFQeon2SUK-49_g-J0ASzbTXO9XT1GuNs_l5EIPFR4\",\"authorship\":{\"contributor\":\"0x3593df8f329981B1C3E9066551dF17F2174ADdc5\",\"signingKey\":\"{\\\"alg\\\":\\\"ES256\\\",\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"r4tSJAOmJaPSqAb5pxHp3IkMGAsUp8SoiZSs_mAf4jo\\\",\\\"y\\\":\\\"PN4qV-Re_p03PUM6wHE8IIwJUE5MxxW4FGCRw_HyVg8\\\"}\",\"signature\":\"8Azh0Z9Rdb4Rj49V0QtGfb0TUWfTfwdm0L6uF6trL2IgqdxzZwTCIX1wYA4A3bt9f100Dcbdw3UZQ69AHKY6jA\",\"signingKeySignature\":\"0x5d44b49f67196b7e56c4c4022c72d571f428c2b1b4c69f7fe05b42698f1e83355466f07a0e16827e328d6638cc96421214bf599fbb086b938896e2cc3f0037ff1c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"alg\\\":\\\"ES256\\\",\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"r4tSJAOmJaPSqAb5pxHp3IkMGAsUp8SoiZSs_mAf4jo\\\",\\\"y\\\":\\\"PN4qV-Re_p03PUM6wHE8IIwJUE5MxxW4FGCRw_HyVg8\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"LEFQeon2SUK-49_g-J0ASzbTXO9XT1GuNs_l5EIPFR4\"}"