"{\"content\":{\"body\":\"![](https://images.mirror-media.xyz/publication-images/a3537c30-d4e7-43c7-b749-9e5b71a09ad9.jpg?height=640&width=1280)\\n\\nI spent way too much time figuring out how to generate and validate typed data signatures so you don't have to.\\n\\n---\\n\\nFor [a project I’m working on](https://sonarwave.xyz), I need users to sign some data with their wallet. Normally, I’d just [use personal signatures](/post/server-authentication-for-web3), but in this case, the data has a specific format, and I wanted to get the wallet signature prompt looking a little bit nicer than usual.\\n\\n## The World of Ethereum Signatures\\n\\nWhen signing some data with an Ethereum wallet, there are multiple signature types you can choose from. You can use the “regular” one, which will sign any string (this is what’s used to sign transactions); you can use personal signatures, which add a prefix to the signed message; or you can use typed data signatures, which allow you to define a format for the message the user will sign (and display it nicely on the signature prompt).\\n\\n## Let’s Type some Data\\n\\nFor this project, I decided to go with typed data signatures (or EIP-712 signatures). To start, you need to define your `types` (the structure the message will be using) and your `domain` (some information about your app).\\n\\n```js\\n// Let's assume we're signing an email message\\nconst message = {\\n    from: {\\n        name: 'Miguel Piedrafita',\\n        wallet: '0xE340b00B6B622C136fFA5CFf130eC8edCdDCb39D'\\n    },\\n    to: {\\n        name: 'Alex Masmej',\\n        wallet: '0xD3e9D60e4E4De615124D5239219F32946d10151D'\\n    },\\n    contents: 'We need more NFTs.'\\n};\\n\\n// Our domain will include details about our app\\nconst domain = {\\n    name: 'Ether Mail',\\n    version: '1',\\n};\\n\\n// Here we define the different types our message uses\\nconst types = {\\n    Person: [\\n        { name: 'name', type: 'string' },\\n        { name: 'wallet', type: 'address' }\\n    ],\\n    Mail: [\\n        { name: 'from', type: 'Person' },\\n        { name: 'to', type: 'Person' },\\n        { name: 'contents', type: 'string' }\\n    ]\\n};\\n```\\n\\nOnce we have our `domain` and `types`, we can use the `ethers.js` library to get our signature.\\n\\n```js\\nimport { ethers } from 'ethers'\\n\\nconst web3 = new ethers.providers.Web3Provider(provider)\\n\\nconst signature = await web3.getSigner._signTypedData(\\n    domain, types, message,\\n)\\n```\\n\\n## The Verificathon\\n\\nNow we just need a way of verifying the signature in our server. For this, we’ll need the signature we just generated and the wallet address of the signer, as well as our `domain` and `types` from the last step.\\n\\n```ts\\nimport { verifyTypedData } from 'ethers/lib/utils'\\n\\nexport const verifySignature = (signature, message, address): boolean => {\\n    return verifyTypedData(\\n        domain, types, message, signature,\\n    ).toLowerCase() === address.toLowerCase()\\n}\\n```\\n\\n## In Summary\\n\\nThis took me quite a while to figure out (+2h 😅), so I thought I’d write it down for the next person that decides to go down this rabbit hole. Hopefully, it’ll help!\",\"timestamp\":1629477406,\"title\":\"Going Down the EIP-712 Rabbit Hole\",\"publication\":\"miguel\"},\"digest\":\"0q2OYZvEc-mYCZmMpaDQWer_ri2FOjDAkJWy8zuNkes\",\"authorship\":{\"contributor\":\"0xE340b00B6B622C136fFA5CFf130eC8edCdDCb39D\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"s5dxBgjTfZ5IWK7pVL7mWf2jtUG6ibGD86H-eoO2hSI\\\",\\\"y\\\":\\\"zv1QfjUOcpQ_oyarQWkqVt2xds0opIqWKagmFYb_T1Y\\\"}\",\"signature\":\"vyVp7rZB3LvswRBvsHvRUA6cPnaZWEuHi1ATlL4XMqSJPEWqB4os8SWvRXRoiHxl9b7rN35qlHvghXOkGnH6wA\",\"signingKeySignature\":\"0xa7b09c09fce6881ef0c9452ba8562261c370e82b4e340e0ccf89de85a1197f3476687c7434572f78641cb4be894a516af7878b9544deb1398c8b0e096498ca2d1b\",\"signingKeyMessage\":\"I authorize the publication of articles on miguel.mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"s5dxBgjTfZ5IWK7pVL7mWf2jtUG6ibGD86H-eoO2hSI\\\",\\\"y\\\":\\\"zv1QfjUOcpQ_oyarQWkqVt2xds0opIqWKagmFYb_T1Y\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"lgIDdfbeDSElr0g7kaP0TZLkkjAqkQGPriauuYSrLlI\"}"