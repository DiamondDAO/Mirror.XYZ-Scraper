"{\"content\":{\"body\":\"## [](#introduction)Introduction\\n\\nWe'll learn how we can build a blog site with Next.js and Strapi as our Headless CMS. With these two technologies combined, you can already have a blog up and ready as quickly as you can. So if you have opened this article so I assume you understand or familiar with the basics of React / Next js. With that all said, let's get started.\\n\\n## [](#file-structure)File Structure\\n\\nThis is going to be a monorepo so we can easily navigate through our backend (Strapi) and the frontend (Next.js).\\n\\nLet's just have this simple file structure\\\\\\n\\n\\n    - backend\\n    - frontend\\n    README.md\\n\\n\\n\\n## [](#installation)Installation\\n\\nOpen your terminal and create a directory\\\\\\n\\n\\n    $ mkdir nextjs-strapi-blog\\n\\n\\n\\nThen navigate into that directory and install Strapi and Next.js. For now let's put the `--quickstart` flag, this basically just selects the database which will be SQLite and other default configurations just to setup our Strapi backend quick.\\n\\nAnd of course, we can use any other SQL databases with Strapi.\\\\\\n\\n\\n    $ npx create-strapi-app backend --quickstart\\n\\n\\n\\nIt will then take awhile for the Strapi installation so wait up for about 5 minutes maximum or less. Once that is done it will launch a page and asks you to create an admin account.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--zqp1aZV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqmxspg5l1clhllp6431.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--zqp1aZV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqmxspg5l1clhllp6431.png)\\n\\nJust create a simple account that is easy to remember, for example:\\\\\\n\\n\\n    First Name: Admin\\n    Last Name: Admin\\n    Email: admin@admin.com\\n    Password: Password123!\\n\\n\\n\\nOnce that is done, the Strapi Admin dashboard should be opened by now.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--JwV7EEmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4i8nlnt1z88kc6m0wlej.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--JwV7EEmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4i8nlnt1z88kc6m0wlej.png)\\n\\nThen up next will be to create our Next.js app\\\\\\n\\n\\n    $ npx create-next-app frontend\\n\\n\\n\\nAfter installing Next.js let's add TypeScript for our Next.js\\\\\\n\\n\\n    $ touch tsconfig.json\\n\\n\\n\\nThen run the app and it should throw us an error in the CLI and will ask us to install the following\\\\\\n\\n\\n    # If you’re using npm\\n    $ npm install --save-dev typescript @types/react @types/node\\n\\n    # If you’re using Yarn\\n    $ yarn add --dev typescript @types/react @types/node\\n\\n\\n\\nOnce that is done we can run our Next.js server again and it should be ready. Then all of our files will end with `.tsx` so we can use TypeScript in writing code and it will be much easier for us to write code for the application.\\n\\n## [](#creating-a-post-collection)Creating a Post Collection\\n\\nFor a single post in our blog application, we'll have the following fields like `title`, and `content`. So that's all we have for now we'd like to keep it simple since this is just a simple blog application.\\n\\nFor our TypeScript datamodel, we'll have something like\\\\\\n\\n\\n    export interface Post {\\n      id: number;\\n      title: string;\\n      content: string;\\n      created_at: any;\\n      updated_at: any;\\n      published_at: any;\\n    }\\n\\n\\n\\nThe other fields like `id`, `created_at` and `published_at` are being generated by Strapi.\\n\\nSo let's proceed to creating a Collection Type in Strapi. Now on the side menu / sidebar, hover over the \\\"Content-Types Builder\\\" and click it and it should navigate us to this page.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--ROmm8KEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntgovcu9mxy9ruwzai2u.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ROmm8KEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntgovcu9mxy9ruwzai2u.png)\\n\\nOnce you are already in that page, then click on \\\"Create new collection type\\\"\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--kWqRg92v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a92xjfrl1y18vandzd28.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--kWqRg92v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a92xjfrl1y18vandzd28.png)\\n\\nA modal should then open with a field labelled as \\\"Display Name\\\", then just put \\\"Post\\\",\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--mnIzw9IR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y46nki15g6rmv8bmdg85.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--mnIzw9IR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y46nki15g6rmv8bmdg85.png)\\n\\nWe want it to be in a form of a singular word than plural because Strapi will then read this as plural word when generating API endpoints. So basically if we have a Collection named as \\\"Post\\\" then our RESTful API endpoints that are generated will have `/posts`, and `/posts/:id`.\\n\\nClick \\\"Continue\\\" to proceed.\\n\\nWhile we only have two fields for this Collection, we simply want \\\"Text\\\" for our `title` field and \\\"Rich Text\\\" for the `content`.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--vgi1Gl56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fk831wf0mzntw7nkt8c.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--vgi1Gl56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fk831wf0mzntw7nkt8c.png)\\n\\nOnce that is done, click on \\\"Save\\\"\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--6IZQ1QUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p52pu5e98qkwtxwu24ao.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--6IZQ1QUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p52pu5e98qkwtxwu24ao.png)\\n\\nAnd after that, we already have a REST API that was generated by Strapi itself! We will also have the following CRUD feature up and ready, so let's visit the page under Strapi dashboard.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--oOkDQL5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eoduj6tnh5jb7wwkri8.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--oOkDQL5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eoduj6tnh5jb7wwkri8.png)\\n\\nThen we can create a few posts then we'll test our API.\\n\\n## [](#creating-posts)Creating Posts\\n\\nClick the \\\"Create\\\" button on the top right portion and you should then navigate into this page with the form.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--ACXt3CWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wudpd3y4p9r6brdjfg5.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ACXt3CWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wudpd3y4p9r6brdjfg5.png)\\n\\nClick \\\"Save\\\" when done, then wait a bit and finally click \\\"Publish\\\" so we can see this getting returned from the REST API when we are requesting the data.\\n\\n## [](#allow-read-access-to-public)Allow read access to Public\\n\\nBefore anything else, we will have to allow reads. To do that, navigate into \\\"Settings\\\" page and click on the \\\"Roles\\\" tab under \\\"Users & Permissions Plugin\\\" section. Then on the table click on the row \\\"Public\\\" then we can allow reads publicly.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--UooUtykA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyin92vhe1tatbowco9g.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--UooUtykA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyin92vhe1tatbowco9g.png)\\n\\nOnce that is done be sure to click \\\"Save\\\", and we can proceed to testing our API manually in the browser or you can do it using Insomnia. Whichever you prefer.\\n\\n## [](#testing)Testing\\n\\nJust to make it quick and easy because it's just basically the same thing. Open this in a new tab `http://localhost:1337/posts` and it should return an array of objects.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--\\\\_8Tz5Ww3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yl0a4uucrdr76439uzgi.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--\\\\_8Tz5Ww3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yl0a4uucrdr76439uzgi.png)\\n\\n## [](#frontend)Frontend\\n\\nWe can setup our frontend and make it read the posts that is created from Strapi. But before that I'll want to use `axios` for HTTP calls.\\n\\nSo to install on a new fresh terminal and make sure you are under `frontend` directory\\\\\\n\\n\\n    $ cd frontend\\n\\n\\n\\nThen install the package\\\\\\n\\n\\n    $ npm install axios\\n\\n\\n\\nFor the look, let's use Chakra UI. To install it,\\\\\\n\\n\\n    $ npm i @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4\\n\\n\\n\\nThen make the following changes of your Next application if you haven't already.\\n\\nChange `_app.js` to `_app.tsx` then add the `AppProps` type on the first destructured parameter.\\n\\nThen the `index.js` page to `index.tsx`.\\n\\nThe moving back under `_app.tsx` file, wrap the `<Component {...pageProps} />` around the component `ChakraProvider`\\n\\nIt should then look like this when done correctly.\\\\\\n\\n\\n    import { ChakraProvider } from \\\"@chakra-ui/react\\\";\\n    import { AppProps } from \\\"next/dist/next-server/lib/router/router\\\";\\n\\n    function MyApp({ Component, pageProps }: AppProps) {\\n      return (\\n        <ChakraProvider>\\n          <Component {...pageProps} />\\n        </ChakraProvider>\\n      );\\n    }\\n\\n    export default MyApp;\\n\\n\\n\\nThen the `index.tsx` file, remove everything from there and replace the following code:\\\\\\n\\n\\n    import { GetServerSideProps, GetStaticProps } from \\\"next\\\";\\n    import axios from \\\"axios\\\";\\n    import { Box, Heading } from \\\"@chakra-ui/layout\\\";\\n\\n    interface Post {\\n      id: number;\\n      title: string;\\n      content: string;\\n      created_at: any;\\n      updated_at: any;\\n      published_at: any;\\n    }\\n\\n    interface PostJsonResponse {\\n      data: Post[];\\n    }\\n\\n    export const getStaticProps: GetStaticProps = async () => {\\n      const response = await axios.get(\\\"http://localhost:1337/posts\\\", {\\n        headers: {\\n          Accept: \\\"application/json\\\",\\n        },\\n      });\\n      const data: Post[] = response.data;\\n\\n      return {\\n        props: {\\n          data,\\n        },\\n      };\\n    };\\n\\n    const IndexView = ({ data }: PostJsonResponse) => {\\n      return (\\n        <>\\n          <Box height=\\\"100vh\\\" padding=\\\"10\\\">\\n            <Heading>My Blog</Heading>\\n            <pre>{JSON.stringify(data, null, 2)}</pre>\\n          </Box>\\n        </>\\n      );\\n    };\\n\\n    export default IndexView;\\n\\n\\n\\nTo break it down for you. Under `index.tsx` file, that is our main view and the route path is `/`, basically this is the first page.\\n\\nWe created an interface of `Post` from the one I mentioned above and a `PostJsonResponse` as we'll provide that type to the first parameter of our React component which is the props.\\n\\nWe also used `getStaticProps` for fetching data from our Strapi backend. While this is just a simple blog application and there's not many posts to create we'll use `getStaticProps` as it will pre generate these data during build time as JSON files. Basically making reads blazing fast.\\n\\nAnd on the template, we used the `Box` component from Chakra UI just for the layout and providing us padding and a height of `100vh`.\\n\\nThen just to see the JSON data we called it in the template `<pre>{JSON.stringify(data, null, 2)}</pre>` and the `pre` tag just to make it look \\\"pretty\\\" and easier to read the JSON format.\\n\\nSo that's about it. So this is how it looks as of the moment.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--LVq\\\\_9MHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrjujxq5t2w7x2kbe96u.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--LVq\\\\_9MHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrjujxq5t2w7x2kbe96u.png)\\n\\n## [](#creating-a-postcard-component)Creating a PostCard component\\n\\nJust to make things look better, let's create a `PostCard` component that will have an `onClick` prop so whenever we click on the card it will redirect us to a Post detail view to read more of the contents from each of our posts that we created from Strapi.\\n\\nTo do that, create a directory under `frontend` directory and name it as `components` then create the file called `PostCard.tsx`.\\n\\nThen the code would be as follows\\\\\\n\\n\\n    import { Button } from \\\"@chakra-ui/button\\\";\\n    import { Box, Heading, Text } from \\\"@chakra-ui/layout\\\";\\n\\n    export type PostCardProps = {\\n      title: string;\\n      publishedAt: string;\\n      onClick: VoidFunction;\\n    };\\n\\n    const PostCard = ({ title, publishedAt, onClick }: PostCardProps) => {\\n      return (\\n        <>\\n          <Box\\n            padding=\\\"30px\\\"\\n            width=\\\"500px\\\"\\n            shadow=\\\"lg\\\"\\n            borderRadius=\\\"md\\\"\\n            marginBottom=\\\"30px\\\"\\n            onClick={onClick}\\n          >\\n            <Box display=\\\"flex\\\" justifyContent=\\\"space-between\\\">\\n              <Text fontWeight=\\\"bold\\\" fontSize=\\\"24px\\\">\\n                {title}\\n              </Text>\\n              <Button colorScheme=\\\"facebook\\\">Read</Button>\\n            </Box>\\n            <Text size=\\\"10px\\\">Published at {new Date(publishedAt).toLocaleDateString()}</Text>\\n          </Box>\\n        </>\\n      );\\n    };\\n\\n    export default PostCard;\\n\\n\\n\\n## [](#use-the-postcard-component)Use the PostCard component\\n\\nThen head on over back to our `index.tsx` file and update that code that will be using the newly created dumb component. It is a dumb component since it doesn't handle any state, only receiving input props from a parent component.\\\\\\n\\n\\n    import { GetServerSideProps, GetStaticProps } from \\\"next\\\";\\n    import { Box, Center, Heading, VStack } from \\\"@chakra-ui/layout\\\";\\n    import { useRouter } from \\\"next/router\\\";\\n    import axios from \\\"axios\\\";\\n    import PostCard from \\\"../components/PostCard\\\";\\n\\n    interface Post {\\n      id: number;\\n      title: string;\\n      content: string;\\n      created_at: any;\\n      updated_at: any;\\n      published_at: any;\\n    }\\n\\n    interface PostJsonResponse {\\n      data: Post[];\\n    }\\n\\n    export const getStaticProps: GetStaticProps = async () => {\\n      const response = await axios.get(\\\"http://localhost:1337/posts\\\", {\\n        headers: {\\n          Accept: \\\"application/json\\\",\\n        },\\n      });\\n      const data: Post[] = response.data;\\n\\n      return {\\n        props: {\\n          data,\\n        },\\n      };\\n    };\\n\\n    const IndexView = ({ data }: PostJsonResponse) => {\\n      const router = useRouter();\\n      const toPostView = (id: number) => router.push(`/posts/${id}`);\\n      const posts = data.map((post) => (\\n        <PostCard\\n          key={post.id}\\n          title={post.title}\\n          publishedAt={post.published_at}\\n          onClick={() => toPostView(post.id)}\\n        />\\n      ));\\n\\n      return (\\n        <>\\n          <Box height=\\\"100vh\\\" padding=\\\"10\\\">\\n            <Heading>My Blog</Heading>\\n\\n            <Center>\\n              <VStack>{posts}</VStack>\\n            </Center>\\n          </Box>\\n        </>\\n      );\\n    };\\n\\n    export default IndexView;\\n\\n\\n\\nAnd our application will look like this by now.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--82KS0xrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3821t39clnz1qie9nnng.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--82KS0xrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3821t39clnz1qie9nnng.png)\\n\\nYou may notice I have imported the `useRouter()` hook from `next/router` and I have put an on click handler on to the button \\\"Read\\\" and that it should navigate into the post detail view. When you click on it now, it will return you a 404 error.\\n\\nSo let's create that view.\\n\\n## [](#post-detail-view)Post detail view\\n\\nCreate a new folder under `pages` directory and name it as `posts` then create a file and name it as `[id].tsx` where the brackets will make this view to render with dynamic route parameters. This way we can handle different Post IDs.\\n\\nThen have the following code,\\\\\\n\\n\\n    import { GetStaticPaths, GetStaticProps } from \\\"next\\\";\\n    import { useRouter } from \\\"next/router\\\";\\n    import { Post } from \\\"../../models/Post\\\";\\n    import { Button } from \\\"@chakra-ui/button\\\";\\n    import { Box, Divider, Heading, Text } from \\\"@chakra-ui/layout\\\";\\n    import axios from \\\"axios\\\";\\n\\n    export type PostDetailViewProps = {\\n      data: Post;\\n    };\\n\\n    export const getStaticPaths: GetStaticPaths = async () => {\\n      const response = await axios.get(\\\"http://localhost:1337/posts\\\");\\n      const posts: Post[] = await response.data;\\n\\n      const paths = posts.map((post) => {\\n        return {\\n          params: { id: String(post.id) },\\n        };\\n      });\\n\\n      return {\\n        paths,\\n        fallback: false,\\n      };\\n    };\\n\\n    export const getStaticProps: GetStaticProps = async ({ params }) => {\\n      const { data } = await axios.get(`http://localhost:1337/posts/${params.id}`);\\n\\n      return {\\n        props: {\\n          data,\\n        },\\n      };\\n    };\\n\\n    const PostDetailView = ({ data }: PostDetailViewProps) => {\\n      const router = useRouter();\\n\\n      return (\\n        <>\\n          <Box padding=\\\"10\\\">\\n            <Button onClick={() => router.back()}>Back</Button>\\n            <Heading>{data.title}</Heading>\\n            <Text>{data.published_at}</Text>\\n            <Divider marginTop=\\\"10\\\" marginBottom=\\\"10\\\"></Divider>\\n            <Text>{data.content}</Text>\\n          </Box>\\n        </>\\n      );\\n    };\\n\\n    export default PostDetailView;\\n\\n\\n\\nTo break it down for you. We used `getStaticPaths` to fetch all of the posts and map it down to shape as a `path` that `next` knows about. Since `getStaticPaths` and `getStaticProps` will be executed during build time and generates static content therefore it should make sense by now having called all posts inside a post detail view on `getStaticPaths`.\\n\\nWe then used `getStaticProps` and we have our first argument as the context but destructured it to only retrieve the `params` property which have access to the parameters of the current route. That's how we retrieve the `id` from the `[id].tsx` file name. While we have that we can make a call to a specific post.\\n\\nThen on the template, we just added a \\\"Back\\\" button so we imported `useRouter` from `next/router`, next is we display the `title` field, `published_at` field and then the `content`. But for now I just didn't install a react markdown. Typically you should use react-markdown or any similar library to display the markdown contents properly.\\n\\nThis is how it looks by the way.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--MxLsZ6o5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6omexd7fhj4jj8mvskf4.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--MxLsZ6o5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6omexd7fhj4jj8mvskf4.png)\\n\\n## [](#summary)Summary\\n\\nWe learned how to build a blog using Strapi and Next.js and also understand some of the concepts Next.js has regarding `getStaticProps` and `getStaticPaths` for static site generation. By now you should be able to build out a simple blog on your own or you might a blog but has other use cases but simple CRUD functionalities are mostly required then usnig Strapi would definitely be a good pick. Otherwise if the project requires some customization, then consult Strapi's official documentation to understand/learn how you will implement it using Strapi.\\n\\nIf you've ever reached here at the bottom part of this article, then thank you so much for taking the time to read. Cheers and have a good day!\\n\\nFull source code can be found from the [repository](https://github.com/carlomigueldy/nextjs-strapi-simple-blog).\\n\",\"timestamp\":1636676671,\"title\":\"Building a simple blog site with Next.js + Strapi API\"},\"digest\":\"0vfkyAJ01EvFrJVUySmH3q90M2BG3tCjmqTYiMKVjIE\",\"authorship\":{\"contributor\":\"0x3E8c686F499C877D8f4aFB1215b6f0935796b986\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XNAfCibxrmGjSr-VHADLIVoKcpjQ6AvgUiRVqATl37k\\\",\\\"y\\\":\\\"3RuY7Uw61mZNEnJyyzr7ObM928gt-QoWvGAdLDb2gy4\\\"}\",\"signature\":\"0mN5wqniCrkFVg56RoNxAvSf6Zws6EK9FtoFDdceMolzL3PEj3RUG0rgfE3dzY9U0ifCjCUe-YjH8oqBymw5Hg\",\"signingKeySignature\":\"0xc823d2ab2ee5864fc5495382efb960b4461c3fb598b3be4e5e068c6312ab60ce014c7378c1f02beed8fce37236dc1e3eb8dd28a6f911b33ec4172a1fa8b17f101b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XNAfCibxrmGjSr-VHADLIVoKcpjQ6AvgUiRVqATl37k\\\",\\\"y\\\":\\\"3RuY7Uw61mZNEnJyyzr7ObM928gt-QoWvGAdLDb2gy4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"0vfkyAJ01EvFrJVUySmH3q90M2BG3tCjmqTYiMKVjIE\"}"