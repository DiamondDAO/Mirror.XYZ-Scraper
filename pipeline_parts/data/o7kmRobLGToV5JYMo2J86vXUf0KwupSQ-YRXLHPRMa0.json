"{\"content\":{\"body\":\"*👋 Note: Originally published in April 2016 on [Coindesk](https://www.coindesk.com/markets/2016/04/11/how-close-are-smart-contracts-to-impacting-real-world-law/) and [Medium](https://jjmstark.medium.com/introduction-to-smart-contracts-part-1-8f191a324d0a).*\\n\\n\\n---\\n\\nOver the last year, the concept of a “smart contract” has received renewed attention in both the technology industry and in legal and business circles. Recent advancements in a field known as “blockchain technology” have led some to believe that smart contracts could soon offer alternatives to traditional commercial and financial agreements, with dire results for the legal and financial sectors. While this enthusiasm may be premature, lawyers nonetheless remain mostly unaware of this important emerging technology and the long-term implications for their profession.\\n\\nIn this context, “smart contract” refers specifically to the use of computer code to articulate, verify, and execute an agreement between parties. Whereas a typical contract is drafted using natural language, the terms of smart contracts are expressed in code, similar to a programming language like javascript or HTML. The contract is then “executed” by a computer — given the conditions of the agreement, and a set of defined inputs, the smart contract enforces its own terms.\\n\\nReaders familiar with blockchain technology will know that the term “smart contract” is often used in a more general sense to refer to any script or program that operates on a blockchain. However for the purposes of this article, I focus on the narrower meaning described above: using code in place of traditional contractual agreements between parties.\\n\\n\\n---\\n\\nThe term “smart contract” was first popularized by computer scientist Nick Szabo in his 1997 paper *The Idea of Smart Contracts*. The vending machine, he described, is the simplest form of a “smart contract” — a mechanical device designed to transfer ownership of a good (a candy bar) when provided with a certain defined input ($1.50). Because the machine itself “controls” the property — by being physically sealed — it is able to enforce the terms of the “contract”.\\n\\nExtending the concept, Szabo suggested that computer code could be used in place of mechanical devices to facilitate far more complex transactions of *digital* property. Rather than transfer ownership of a candy bar, a smart contract could transfer ownership of real-estate, or shares, or intellectual property. The program would define what “inputs” were necessary for the contract to execute — things like payment, or votes of board members, or any other condition that can be expressed by code.\\n\\nConsider a basic options contract. A call options contract entitles the holder to buy a given security at a defined price. In our example, Alice buys our “smart options contract” from Bob. The contract entitles Alice to purchase 100 shares of Acme Inc. from Bob at a defined price of $50 per share. The contract has an expiry date, after which Alice is no longer entitled to buy the share at the defined “strike price”.\\n\\nExpressed in pseudo-code, a simple “smart options contract” might look like this:\\n\\n```\\ncontract Option {   strikePrice = $50\\n   holder = Alice\\n   seller = Bob\\n   asset = 100 shares of Acme Inc.\\n   expiryDate = June 1st, 2016   function exercise ( ) {\\n\\n             If Message Sender = holder, and\\n      If Current Date < expiryDate, then\\n         holder send($5,000) to seller, and\\n         seller send(asset) to holder\\n   }\\n\\n}\\n```\\n\\nIn the first section, the smart options contract defines the relevant terms — the underlying asset, the strike price, the identities of each party, and the expiry date. Then, a function we’ve named “exercise” enables the holder to trigger the purchase of shares at the strike price at any moment before the expiry date. The function first checks to see if the entity triggering it (the “Message Sender”) is the holder, and then checks to see that the contract is still within the expiry date. If both are true, then the contract immediately executes by transferring cash from the holder to the seller, and the assets from the seller to the holder, according to the contract’s terms.\\n\\n\\n---\\n\\nUntil recently, smart contracts were little more than theory. In general, there were two fundamental challenges that needed to be addressed before smart contracts could be used in any real-world setting.\\n\\n**(1)** How would a smart contract actually *control* real assets so that it could enforce an agreement? A vending machine, to return to Szabo’s example, controls property by physically securing it inside of itself. But how could code do the same? In our options contract above, the “exercise” function transfers money and assets between the two parties. But how can a computer program control real-world assets like cash and shares?\\n\\n**(2)** What computer would be trusted to “execute” those terms in a way that both parties could rely upon? Parties must not only agree on the code of their contract, but also the computer which interprets and executes that code. A shared standard, at the minimum, would have to exist, and be used in a way that was verifiable by each party — ideally, without requiring the parties to physically inspect the computer in question.\\n\\nIn the last few years, solutions to both of these problems have come into sight. Emerging research and development surrounding what is called “blockchain technology” may provide a basis to make smart contracts a reality in the near future.\\n\\nThe first use of blockchain technology was the digital currency bitcoin, made famous by its mysterious creator and sudden price increase in late 2013. In the last few years, the underlying “blockchain” technology has been intensely studied and adapted to expand its use beyond simple digital currencies. Startups, open-source communities, and large financial institutions alike are improving and expanding the technology with the aim of one day using it to facilitate exchange of fully digital assets.\\n\\nA blockchain is an **authoritative database**. It is a database that, by virtue of the way it is maintained and updated, has very high trust properties. Blockchains are not controlled by a single party. There is no single company, organization, or person that has ultimate control over a blockchain. Rather, a blockchain is maintained, updated, and secured by a network of participating computers.\\n\\nEach computer keeps a full copy of the blockchain database, and each copy is kept in synchronization with the others by a system of cryptographically-enforced rules called a *consensus algorithm*. Crucially, blockchains are *append-only* databases, meaning that once information is validly added, it can never be removed. Each update to the blockchain is secured by a cryptographic process known as a *hash function*, which allows the network to immediately detect and reject any attempt to distribute an edited copy of the database.\\n\\nIn this way, blockchains form the foundation for the recording and transfer of fully digital assets. Because the blockchain is always kept in synchronization, there is only ever one true record of ownership — essential to prevent anyone trying to double-spend their assets by sending it to multiple parties at the same time, a problem that plagued previous attempts to create digital assets. Because it is impossible to edit a blockchain once it has been properly updated, parties have mathematically-enforced confidence that the record of their ownership will persist into the future.\\n\\n\\n---\\n\\nWhile the technology is still in early stages, many now believe that if blockchains can create a secure platform for the trade of digital assets, they may also solve the two fundamental challenges facing smart contracts.\\n\\n**First**, recall that smart contracts require a way for computer code to control real assets. By enabling fully digitized assets, blockchains make it possible for code to exercise control over property. On a blockchain, control over an asset means controlling a cryptographic key that corresponds to the asset in question, rather than any physical object. Thus in our example above, the options contract could *itself* have control of the underlying assets, rather than an escrow agent. When the “exercise” function is called, the operation of the code would transfer the assets without requiring any human assistance.\\n\\n**Second**, smart contracts need a “trusted computer” that would execute the terms of the contract. This is the blockchain itself. The blockchains that are being developed today are not only databases, but distributed *computers* that can execute code as well as record ownership of assets. Our “smart option” example would itself be uploaded and stored on a blockchain, and would be executed by the blockchain when instructed to do so. The same properties that make blockchains ideal to record ownership of assets also make them ideal for executing smart contracts. Once the code of the contract is uploaded and recorded onto the blockchain, the parties can have confidence that the contract cannot be altered, and that it will always perform as expected.\\n\\nBlockchain smart contracts may not be as far away as we expect. Banks, exchanges, and other financial institutions are actively developing blockchain technologies that will enable them to store and trade real assets over blockchain systems. Nasdaq, in partnership with blockchain startup Chain, has developed and begun testing a private-market equity trading platform. A next-generation open-source blockchain called Ethereum, launched in July 2015, aims to be the foundation for a new industry of non-traditional decentralized commerce. A consortium of 42 banks, working with blockchain firm R3, have begun work on a shared industry platform based on blockchain technology specifically designed to facilitate financial agreements. Within a few years, financial markets may be trading fully-digital assets across blockchain networks, with the terms of those trades enforced by code.\\n\\nThe impact will not be limited to financial contracts, although these are the most obvious use cases. As techniques are developed that enable other types of property to be recorded and transacted on a blockchain the possible applications for smart contracts will multiply.\\n\\n\\n---\\n\\nIf they ever become widely used, smart contracts could alter the nature of corporate & commercial transactions. The advantages of software that have revolutionized so many industries — automation, predictability, and speed — could finally be brought to bear on segments of the legal industry.\\n\\nRepresenting contractual terms in code, rather than natural language, could bring clarity and predictability to agreements. A smart contract could be tested against any set of inputs — in other words, against any set of material facts which it takes as inputs — allowing lawyers on either side of a deal to know precisely how the contract would execute in every computationally-possible outcome.\\n\\nIn our simple Smart Options example above, each of Alice and Bob could “dry run” the contract in a simulated environment, where every possible input is tested. While this is unnecessary in such a simple example, imagine a contract with thousands of inputs, and hundreds of nested if-then statements — as is common in many complex financial agreements. These, too, could be tested against every possible input defined in the code. Analogous to how software developers “debug” their own code by testing it in every possible circumstance, lawyers could test contracts, giving each side of a deal a clearer understanding of their risk — and perhaps requiring fewer billable hours.\\n\\nOf course, smart contracts will never fully replace natural-language law. Many types of agreements can never be fully expressed in code or executed by a computer — for instance, those that involve human performance rather than just the exchange of dematerialized assets. Even fully self-executing contracts will ultimately need to make reference to legal terms and concepts that will define each party’s rights if their relationship leads to litigation. Rather, the emergence of smart contracts will lead to a re-evaluation of common practice, as lawyers and clients alike discover which types of agreements and terms are best suited to code, which should be left to natural language, and how to combine each to achieve the best of both worlds.\\n\\nFor now, smart contracts are still speculative fiction. But for the first time we have a technology that could be used to bring them into commercial use. While that day may still be years away, law firms would be wise to consider how these innovations could impact their business. By the time smart contracts become viable, the legal industry should hope that they have lawyers to match.\",\"timestamp\":1631897447,\"title\":\"Introduction to Smart (legal?) Contracts\",\"publication\":\"stark\"},\"digest\":\"IUqivJ5jeQiCRnwlwkAhGSJtT5pSAPpqbBJvyUN0nCg\",\"authorship\":{\"contributor\":\"0x4aa9C5546BE68486c4eF264a230D25674a1A728e\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"wK13VdJCIe1wloDWo15jqrCP-pXcaxAHoUWpDMtiZNc\\\",\\\"y\\\":\\\"o-bOA4mWjHEqpB5Rn-z9bYJHjgmF7Hn3WdmgjBSlvrk\\\"}\",\"signature\":\"swKxQ8R1KKrQI-lgbP7sO5U7WZhMwn1Gud1cZ5WP8pdHcw4blvShwqK0gbPOF95Jy_Pm0Dy4tLN8GnXEw5R93A\",\"signingKeySignature\":\"0xbed4620751c6f3999af8ef8f13bec6d6039e15f5a85ebb3589b9c832f7041e8054706ebffd8d3287e8bf5490805d90dac88ade6491b63a291c52c20c2e599dce1b\",\"signingKeyMessage\":\"I authorize the publication of articles on stark.mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"wK13VdJCIe1wloDWo15jqrCP-pXcaxAHoUWpDMtiZNc\\\",\\\"y\\\":\\\"o-bOA4mWjHEqpB5Rn-z9bYJHjgmF7Hn3WdmgjBSlvrk\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"IUqivJ5jeQiCRnwlwkAhGSJtT5pSAPpqbBJvyUN0nCg\"}"