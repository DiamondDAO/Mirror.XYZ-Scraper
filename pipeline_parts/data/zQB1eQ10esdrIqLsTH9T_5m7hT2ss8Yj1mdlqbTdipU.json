"{\"content\":{\"body\":\"There are at least three places to get useful data on blockchains: [BigQuery](https://cloud.google.com/blog/products/data-analytics/introducing-six-new-cryptocurrencies-in-bigquery-public-datasets-and-how-to-analyze-them), [Nansen](https://pro.nansen.ai/), and [Dune Analytics.](https://dune.xyz/browse/queries) I will show how each of these can be used to answer a very basic question: what is the historical floor price of a popular NFT collection on [OpenSea](https://opensea.io/)? In this process, I will highlight the trade-offs between data sources (summarized below):\\n\\n![Summary of trade-offs between blockchain data sources](https://images.mirror-media.xyz/publication-images/Nv_SZBQNLA_KpKR00ATuN.png?height=140&width=819)\\n\\n### Nansen\\n\\n[Nansen](https://pro.nansen.ai/) is a subscription service. For the [standard](https://www.nansen.ai/plans) tier ($399 / quarter), you get access to an excellent UI with many views (see the many great videos on usage [here](https://www.youtube.com/c/Nansen-ai/videos)). There is one central limitation: the data is read-only unless you pay $3990 / quarter for access to csv download. This may not matter to users that only want to view the dashboards. In any case, [NFT God Mode](https://pro.nansen.ai/nft-god-mode?nft_address=0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d) answers our question (e.g., for [BAYC](https://opensea.io/collection/boredapeyachtclub)) over the past month.\\n\\n![NFT god mode in Nansen for BAYC](https://images.mirror-media.xyz/publication-images/4BBr0qp0b1pbh9h8r_oqC.png?height=611&width=1288)\\n\\n### Dune\\n\\nWhat if we want to see a longer historical timeframe of floor price? Without access to the Nansen raw data, we are limited to what the dashboard provides. [Dune Analytics](https://dune.xyz/browse/queries) provides an [extensive library](https://dune.xyz/browse/queries) of existing, user-generated queries and dashboard for [free](https://dune.xyz/pricing). The queries can be easily forked, making the logic composable. In addition, some of the [dashboards are extremely good](https://dune.xyz/hagaetc/dex-metrics) (rivaling Nansen in terms of information quality).\\n\\n![The DEX metrics dashboard on Dune](https://images.mirror-media.xyz/publication-images/LpQ4EdZNbmZGGFYlOLjnZ.png?height=990&width=2275)\\n\\nThere is also a [python client](https://github.com/itzmestar/duneanalytics) for Dune, which allows you to easily pull data for any query into python. [Here](https://dune.xyz/queries/294423) is my Dune query to answer our question. And below is the Python code I use to access the raw query result and further manipulate / plot the data:\\n\\n```\\nimport pandas as pd\\nfrom duneanalytics import DuneAnalytics\\n\\n# login\\ndune = DuneAnalytics('name', 'pw')\\ndune.login()\\n\\n# fetch token\\ndune.fetch_auth_token()\\n\\n# query\\nresult_id = dune.query_result_id(query_id=294423)\\n\\n# fetch query result\\ndata = dune.query_result(result_id)\\nresult_list=data['data']['get_result_by_result_id']\\nresult_list_clean=[e['data'] for e in result_list ]\\nd=pd.DataFrame(result_list_clean)\\n\\n# reshape and plot\\nd['Day'] = pd.to_datetime(d.Day)\\nd_=d.pivot(index='Day', columns='Name', values='Floor (Approx)')\\nd_.plot(figsize=(15,5))\\n```\\n\\nThis plot shows the BAYC floor (along with MAYC and Runners) for the past year:\\n\\n![Floor price of BAYC, MAYC, and ChainRunners over the past year](https://images.mirror-media.xyz/publication-images/PKlPxb0fPugM6Rjaasc5z.png?height=334&width=893)\\n\\n### Big Query\\n\\n[nick.eth wrote](https://twitter.com/nicksdjohnson/status/1464393250253389824) a [very good overview](https://mirror.xyz/nick.eth/INhEmxgxoyoa8kPZ3rjYNZXoyfGsReLgx42MdDvn4SM) of Ethereum analytics using BigQuery already. In short, Big Query can be used to access a lot of raw blockchain transaction data (full list of datasets [here](https://github.com/blockchain-etl/public-datasets)). Big Query is populated by the [Blockchain ETL library](https://github.com/blockchain-etl) (authored by [Evgeny Medvedev](https://twitter.com/EvgeMedvedev), the co-founder of Nansen). It is easy to access data for any erc721 contract from the tables below (see [example](https://console.cloud.google.com/marketplace/product/ethereum/crypto-ethereum-blockchain?project=western-glazing-305418)). Big Query is well-optimized, familiar to many, and offers a [Python client](https://googleapis.dev/python/bigquery/latest/index.html) for composing queries in [Jupyter notebook](https://jupyter.org/).\\n\\n```\\nSELECT \\ncontracts.address\\nCOUNT(1) AS tx_count\\nFROM \\n`bigquery-public-data.crypto_ethereum.contracts` AS contracts\\nJOIN \\n`bigquery-public-data.crypto_ethereum.transactions` AS transactions \\nON (transactions.to_address = contracts.address)\\nWHERE \\ncontracts.is_erc721 = TRUE\\nGROUP BY contracts.address\\nORDER BY tx_count DESC\\nLIMIT 10\\n```\\n\\n### Summary\\n\\nIn short, Nansen is an excellent source of data if you strictly want read-only access to high quality dashboards or if you have a large budget to pay for API access. In addition, Nansen has labeled \\\\~100M wallets (associating an address with an ETH name and / or institution), which is very useful for grouping and interpretability.\\n\\nDune took a different approach, allowing the community to create dashboards and queries. It’s the most composable (e.g., it’s easy to fork queries from others and re-build dashboards), but less streamlined (e.g., dashboards must be searched for and saved) than Nansen. It’s excellent for developers because you can fork logic and it has a Python client to pull query results into python for further analysis or plotting.\\n\\nBigQuery is a great source of raw data with fast execution and familiar tools (e.g., a great python client, etc). Of course, it lacks the extensive library of example queries / dashboards that Dune offers. In addition, Dune (along with Nansen) appears to have several tables (e.g., for Opensea and DeFi) that are missing from BigQuery.\",\"timestamp\":1639527716,\"title\":\"Blockchain analytics survey\"},\"digest\":\"81cyaiGbJRq-p8n6O1rzX-EscOr29rCY3dvgSJXUZIM\",\"authorship\":{\"contributor\":\"0x62903ec0ee4C2Ee9b2bCc71b1abd3E04bc224037\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"80tRpnwlW3NdS1rVgKdSjGXEECL7ZwoLjdUre48MlM4\\\",\\\"y\\\":\\\"6EWA-Gn_9Tu___XnN9_WLZ_MwtBWJRBbP0CDvnmvkGU\\\"}\",\"signature\":\"A3lGiKz7csy287fnX4wXdTE9CHFj5l0dSPeyXgSlvUBYkDdNYUNhDfMHiF72UroZD4knuadBhqrfJtNXpPM_5A\",\"signingKeySignature\":\"0xd4c24dcafce3f817ca3c1bafbb4a61a05f234769d458a7bfd01ea1d0f4f02d99330ce21d074a4fbd5eb8e72c1483c680c187255318ad700a49f4581b817c08fd1c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"80tRpnwlW3NdS1rVgKdSjGXEECL7ZwoLjdUre48MlM4\\\",\\\"y\\\":\\\"6EWA-Gn_9Tu___XnN9_WLZ_MwtBWJRBbP0CDvnmvkGU\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"J6s7SYB4hUc90LXb7s0lmSNCIydrA2AzxHJep445_xw\"}"