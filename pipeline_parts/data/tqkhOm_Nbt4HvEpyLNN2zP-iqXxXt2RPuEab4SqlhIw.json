"{\"content\":{\"body\":\"NFTs are usually referred to as picture on-chain, but NFT is more than just on-chain JPEG. NFTs on Ethereum are built on smart contracts which are standardized in most cases as ERC-721, sometimes referred to as ERC-1155. If you do lack understanding of what ERC means, you can [read this article](https://medium.com/coinmonks/what-the-heck-is-eip-and-how-can-i-create-one-ethereum-standards-eip-erc-faqs-2fd1194eebe0) in order to understand ERCs and it's fundamentals. This article is deep dive and overview of Metadata and issues the NFT ecosystem is facing with metadata.\\n\\nIn the NFT space it's pretty known that we are facing a lot of issues which are usually attached to the lack of technical development of ERC-721 as the most used NFT Standard. The main issue with this standard is associated with Metadata. There are numerous issues of how not so competent this standard is and people like [Transmissions](https://twitter.com/transmissions11) are [sharing insights](https://twitter.com/transmissions11/status/1437157773179977728) how this standard can be improved. But before you [start hating this standard](https://anettrolikova.medium.com/why-erc721-sucks-and-we-need-a-new-standard-28122e8279ab), you need to understand the fact that ERC-721 was created in 2017 when the Ethereum chain was \\\"in diapers''. **The ERC-721 was proposed to allow smart contracts to operate as tradable tokens similar to ERC20 token standard as we were missing having the option to create and trade non fungible items on chain. It is the most used standard that NFTs are being minted using this smart contract, which is being modified by marketplaces in order to add functions to it which the basic standard is missing.** \\n\\n[ERC-721](https://www.nftstandards.wtf/Standards/ERC721+Non+Fungible+Standard)\\n\\nThe fact that ERC-721 - the most used NFT standard is super simple - is giving a ton of headaches to the developers. This standard defines metadata as tokenURI which is referring to IPFS (or other storage provider service) URL (link).\\n\\n**ERC721 is using tokenURI which is a unique resource identifier of the NFT itself. This can be linked to a server where the metadata - picture (file) is stored**. Usually IPFS, Arweave or centralised server link. So NFT metadata is defined as a URL which points out to the server where the NFT file (JPEG, PNG...) is stored. \\n\\nOther attributes / properties are not defined in the ERC-721 contract itself. Opensea made metadata implementation of rich metadata to ERC-721 and ERC-1155 standards aiming to provide more options for metadata. This implementation is pretty popular around ERC-721 and ERC-1155, it is being used around the projects quite a lot. \\n\\n[ERC-1155](https://www.nftstandards.wtf/Standards/ERC1155+Multi+token) \\n\\n**The ERC-1155 is extending the features of ERC-721 and adding multi token features like storing data of multiple items, atomic swaps — trading multiple items by batching the items into one or multiple accounts in a single transaction, multi transfers and unification**. This standard makes it easier to store multiple items in a single smart contract with the minimum possible amount of data needed to recognise (distinguish) the token from others. The contract contains tokenID that contains the configuration and all the behaviour governing the token collection. Each item has its own unique identity and can be traded, indexed and fully fungible with others. This standard is supporting only image files as metadata.\\n\\n[ERC-2477 is metadata standard](https://www.nftstandards.wtf/Standards/ERC2477+Token+Metadata+Integrity) \\n\\nThis standard was initially proposed to solve issues with describing metadata in ERC-721. It introduces tokenURIIntegrity and tokenURISchemaIntegrity functions. **These are supposed to provide access to assets on-chain by adding [schema](https://schema.org/VisualArtwork) to the metadata itself which is describing metadata in a more readable way.** \\n\\nThis [standard is stagnant](https://eips.ethereum.org/EIPS/eip-2477) which means it is inactive for a period of 6 months or greater. Most likely there are other solutions like OpenSea metadata standard or Zora metadata media which can replace this standard.** \\n **\\n\\n**The OpenSea Rich Metadata standard** \\n\\nThe [Opensea metadata standardisation](https://docs.opensea.io/docs/metadata-standards) is using schemas which are being added to JSON files, schemas are describing data as visual characters. This standard is supporting multimedia attachments - audio, video and 3D models including interactive traits for your items which makes it easier to filter and sort items on OpenSea marketplace.\\n\\n**Zora Media Metadata standard**\\n\\nZora protocol has a bunch of amazing documentation and modifications of ERC-721 and NFT smart contracts. In [ZDK](https://docs.zora.co/docs/developer-tools/zdk/introduction) you can find a bunch of modules for interacting with ZORA NFT contracts including ERC-721, [metadata schemas](https://github.com/ourzora/media-metadata-schemas) and many handy tools. \\n\\n### Why should we even care about NFT Metadata ?\\n\\nIt is complicated for the NFT marketplace (or any other NFT minting platform) to know what’s the mimeType (definition) of an element definition of metadata - whether it is \\\"img\\\", \\\"video\\\", \\\"iframe\\\", \\\"gif\\\" or other file format. The front end does not know what kind of file you just uploaded on the platform as it can read only the tokenURI which points to IPFS/Arweave/ centralised storage link. The link itself contains (if it is uploaded to IPFS): ipfs://SHA (hash algorithm), for example: ipfs://QmQ9xMUDiWtVp1YMU1f1MpcdsB3enP6V3JfYmTmhnju5JC which does not gives any information to backend how the file should be displayed. Whether it is a video, image, gif... the front end needs to know what type of file you just uploaded in order to show it correctly. This can be done by adding check boxes of what file you minted in order to show it correctly on the front-end.** \\n **\\n\\n**New EIPs which are aiming to solve (not only) metadata issues**\\n\\nThese EIPs were created by NFT Standards Working Group members. \\n\\n[EIP4494 Permits for ERC721](https://www.nftstandards.wtf/Working+Group+EIPs+and+implementations/EIP4494+Permits+for+ERC721)\\n\\nThe implementation is modifying [Permit EIP-2612](https://www.nftstandards.wtf/Security/EIP2612+Signed+token+approvals) but with added functions to support functions of non fungible token instead of fungible token functions.\\n\\n[Identify NFT Content Type](https://www.nftstandards.wtf/Working+Group+EIPs+and+implementations/ERC+Identify+NFT+Content+Type)\\n\\nThis EIP is identifying underlying content  and associated data type of the NFT file itself via on-chain getter function. \\n\\n[JSON Metadata Standard](https://www.nftstandards.wtf/Working+Group+EIPs+and+implementations/JSON+Metadata+Standard)\\n\\nThis ERC is proposing to add TypeScript specification of JSON file representing metadata. \\n\\n[Permit singleton](https://www.nftstandards.wtf/Working+Group+EIPs+and+implementations/Permit+Singleton)\\n\\nERC for backward-compatible signed ERC-20/ERC-721/ERC-1155 transfers. This implementation is wrapping ERC-20, ERC-721, or ERC-1155 assets with a permit function.\\n\\n### Conclusion \\n\\nThere are a few gaps in the NFT ecosystem and development and as a community we can do better. The biggest issue the NFT dev ecosystem  is facing are metadata. Generally speaking, in the most used standard ERC-721 the metadata is lacking. The ERC721 is using tokenURI which is a unique resource identifier of the NFT itself. This can be linked to a server where the metadata - picture (file) is stored. Usually IPFS, Arweave or centralised server link. Many projects are using the implementation of ERC-721 which is not very gas efficient. We need better support of video formats of NFTs as there are many issues with video and music NFTs. Platforms are creating their custom solutions which are going against smart contract cross platform interoperability. \\n\\n### More to explore\\n\\n[NFT Metadata](https://www.nftstandards.wtf/NFT/NFT+Metadata)\\n\\n[Tutorial How to decode NFT file from ERC-721 using etherscan](https://hackmd.io/@Bnkhqf0tSbi1lX2Xc-WXYQ/H1bvfcOcY)\\n\\nDive into [NFT Standards wiki](https://www.nftstandards.wtf/NFT+Standards+Wiki+-+READ.me)\\n\\nJoin the community on [GitHub](https://github.com/NFT-Standards-WG) and [Telegram](https://www.nftstandards.wtf/Working+Group/Communications)\\n\\n*Excited to see new NFT standards being created and surge in NFT ecosystem development!* \\n\\n**We are going to host the NFT Dev Meetup in Denver! More updates are coming soon!**\\n\\n \\n \",\"timestamp\":1641376556,\"title\":\"Deep dive into NFT Metadata\",\"publication\":\"anett\"},\"digest\":\"VWvEzO6lBAwrRBduC0_tlY4-OQaBsDbagUSswNRDnvI\",\"authorship\":{\"contributor\":\"0x16D2AD8Cc04888b537bB7B631715335a901B57cA\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"tTXU4SdYj-sYJooHyy5um0E-D4NLujE05dhiY2jDykk\\\",\\\"y\\\":\\\"kuQh91Si6o74SCdUY0VSwXZfSmkA3u-J8iUro20mnzU\\\"}\",\"signature\":\"SyLFIqbUK7j1omf1zHaGb3ZvUAh9lA_NZNWAIbHc9bt1a7WLyIKsbHcvgD1Gpd9mI6ao8fgMOu6oAolIBTGz1g\",\"signingKeySignature\":\"0x739a129d173f5b939c3991f4184200a45ef2b9d04dabc1c771882b329070a7777399fabc6909333bc6441ea7d954f6b689c91455138102058d9c0ee9e6cf53831c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"tTXU4SdYj-sYJooHyy5um0E-D4NLujE05dhiY2jDykk\\\",\\\"y\\\":\\\"kuQh91Si6o74SCdUY0VSwXZfSmkA3u-J8iUro20mnzU\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"VWvEzO6lBAwrRBduC0_tlY4-OQaBsDbagUSswNRDnvI\"}"