"{\"content\":{\"body\":\"In this post I have added fictitious scenario where I will define the problem and develop the simple solution that outlines an automated workflow that utilizes the tools that I wrote about in my first post [How To Validate Internal Security Compliance With AWS Native Tools.](https://mirror.xyz/devonartis.eth/ULawMO3jH55XC3ERje-fLB3VOUEgo36mL2lx2g8qHwE)\\n\\n***Here is the scenario, a company called WantToBeAgile, Inc has started their migration to AWS Public Cloud. The Security Compliance team has mandated that all resources in AWS be tagged. If a resource is not tagged a Jira Issue should be created and assigned to the SOC team.***\\n\\n***The Cloud Operations team has already enabled AWS Config in all accounts as their Cloud Asset and Resource management tool. The organization has requested that the Cloud Security Engineers implement a solution that will be used as the automated baseline.***\\n\\n## AWS Config\\n\\n![](https://miro.medium.com/max/1400/0\\\\*jJq5RPSpve8PjEc_)\\n\\nIn Jira, create an API token and make sure that you copy the key, as this key will be used in the next step.\\n\\nAWS System Manager Parameter Store provides secure hierarchical storage for configuration data management and secrets management. You can store data such as passwords, database strings, and license codes as parameter values. I will be using it to store the API key.\\n\\n## Store your Jira Token in AWS SSM Parameter Store\\n\\n```\\n# Store your Jira Token in Paramter Store resource \\\"aws_ssm_parameter\\\" \\\"paramtoken\\\" {\\n  name        = \\\"jiraToken\\\"\\n  description = \\\"Jira Token used in the AWS Config Create Jira Issue\\\"\\n  value       =  var.jiraToken\\n  type        = \\\"SecureString\\\"}\\n```\\n\\n## Create IAM Role that will be used for the Lambda Function\\n\\n```\\n# IAM Role For Lambda Functions\\nresource \\\"aws_iam_role\\\" \\\"iam_for_lambda\\\" {\\n  name = \\\"iam_for_lambda\\\"\\n  assume_role_policy = <<EOF\\n{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n      \\\"Action\\\": \\\"sts:AssumeRole\\\",\\n      \\\"Principal\\\": {\\n        \\\"Service\\\": \\\"lambda.amazonaws.com\\\"\\n      },\\n      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Sid\\\": \\\"\\\"\\n    }\\n  ]\\n}\\nEOF\\n}\\n```\\n\\n## Create the lambda function that will be used for SSM Document\\n\\n```\\n# Archive the python code for that will be used for the lambda function\\ndata \\\"archive_file\\\" \\\"lambda_zip\\\" {\\n  type = \\\"zip\\\"\\n  source_file = \\\"../index.py\\\"\\n  output_path = \\\"lambda_function.zip\\\"\\n}\\n# Create your lambda function\\nresource \\\"aws_lambda_function\\\" \\\"ssm_lambda\\\" {\\n  filename = \\\"lambda_function.zip\\\"\\n  function_name = var.lambda_name\\n  role = \\\"${aws_iam_role.iam_for_lambda.arn}\\\"\\n  handler = \\\"index.handler\\\"\\n  source_code_hash = \\\"${data.archive_file.lambda_zip.output_base64sha256}\\\"\\n  runtime = \\\"python2.7\\\"\\n  depends_on = [\\n    \\\"aws_iam_role_policy_attachment.lambda_ssm\\\",\\n    \\\"aws_iam_role_policy_attachment.lambda_logs\\\",\\n    \\\"aws_cloudwatch_log_group.createJiraIssuelogs\\\"\\n  ]\\n}resource \\\"aws_cloudwatch_log_group\\\" \\\"createJiraIssuelogs\\\" {\\n  name = \\\"/aws/lambda/${var.lambda_name}\\\"\\n  retention_in_days = 14\\n}resource \\\"aws_iam_policy\\\" \\\"policy_logging\\\" {\\n  name = \\\"lambda_logging\\\"\\n  path = \\\"/\\\"\\n  description = \\\"IAM policy for logging from a lambda\\\"\\n  policy = <<EOF\\n{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n      \\\"Action\\\": [\\n        \\\"logs:CreateLogStream\\\",\\n        \\\"logs:PutLogEvents\\\"\\n      ],\\n      \\\"Resource\\\": \\\"arn:aws:logs:*:*:*\\\",\\n      \\\"Effect\\\": \\\"Allow\\\"\\n    }\\n  ]\\n}\\nEOF\\n}\\nresource \\\"aws_iam_role_policy_attachment\\\" \\\"lambda_logs\\\" {\\n  role       = \\\"${aws_iam_role.iam_for_lambda.name}\\\"\\n  policy_arn = \\\"${aws_iam_policy.policy_logging.arn}\\\"\\n}\\nresource \\\"aws_iam_policy\\\" \\\"policy_ssm\\\" {\\n  name        = \\\"lambda_readssm\\\"\\n  path        = \\\"/\\\"\\n  description = \\\"IAM policy for SSM Paramater Store for a lambda\\\"\\n  policy = <<EOF\\n{\\n    \\\"Version\\\": \\\"2012-10-17\\\",\\n    \\\"Statement\\\": [\\n        {\\n\\n                       \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Action\\\": \\\"ssm:*\\\",\\n            \\\"Resource\\\": \\\"*\\\"\\n        }\\n    ]\\n}\\nEOF\\n}\\n\\nresource \\\"aws_iam_role_policy_attachment\\\" \\\"lambda_ssm\\\" {\\n  role = \\\"${aws_iam_role.iam_for_lambda.name}\\\"\\n  policy_arn = \\\"${aws_iam_policy.policy_ssm.arn}\\\"\\n}\\n```\\n\\n## Create the SSM Document that you will use with AWS Config\\n\\n```\\n# Create SSM Document that will be used in AWS Config\\nresource \\\"aws_ssm_document\\\" \\\"jiraDocument\\\" {\\n  content = <<EOF\\n{\\n  \\\"description\\\": \\\"Creates a Jira issue.\\\",\\n  \\\"schemaVersion\\\": \\\"0.3\\\",\\n  \\\"assumeRole\\\": \\\"{{ AutomationAssumeRole }}\\\",\\n  \\\"parameters\\\": {\\n    \\\"JiraUsername\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Required) The name of the user the issue will be created with.\\\"\\n    },\\n    \\\"SSMParameterName\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Required) The name of an encrypted SSM Parameter containing the API key or password for the Jira user.\\\"\\n    },\\n    \\\"JiraURL\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Required) The url of the Jira instance.\\\"\\n    },\\n    \\\"ProjectKey\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Required) The key of the project the issue should be created in.\\\"\\n    },\\n    \\\"IssueSummary\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Required) A brief summary of the issue.\\\"\\n    },\\n    \\\"IssueDescription\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Required) A detailed description of the issue.\\\"\\n    },\\n    \\\"IssueTypeName\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Required) The name of the type of issue you want to create (ex. Task, Sub-task, Bug, etc).\\\"\\n    },\\n    \\\"PriorityName\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Optional) The name of the priority of the issue.\\\",\\n      \\\"default\\\": \\\"\\\"\\n    },\\n    \\\"AssigneeName\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Optional) The username of the person the issue should be assigned to.\\\",\\n      \\\"default\\\": \\\"\\\"\\n    },\\n    \\\"DueDate\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Optional) The due date for the issue in yyyy-mm-dd format.\\\",\\n      \\\"default\\\": \\\"\\\"\\n    },\\n    \\\"CreatedBy\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Optional) The due date for the issue in yyyy-mm-dd format.\\\",\\n      \\\"default\\\": \\\"\\\"\\n    },\\n    \\\"LambdaAssumeRole\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Optional) The ARN of the role that allows Lambda created by Automation to perform the actions on your behalf. If not specified a transient role will be created to execute the Lambda function.\\\",\\n      \\\"default\\\": \\\"\\\"\\n    },\\n    \\\"AutomationAssumeRole\\\": {\\n      \\\"type\\\": \\\"String\\\",\\n      \\\"description\\\": \\\"(Optional) The ARN of the role that allows Automation to perform the actions on your behalf. \\\",\\n      \\\"default\\\": \\\"\\\"\\n    }\\n  },\\n  \\\"mainSteps\\\": [\\n    {\\n      \\\"name\\\": \\\"createJiraIssue\\\",\\n      \\\"action\\\": \\\"aws:invokeLambdaFunction\\\",\\n      \\\"inputs\\\": {\\n        \\\"FunctionName\\\": \\\"createComplainceJiraIssue\\\",\\n        \\\"Payload\\\": \\\"{\\\\\\\"JiraUsername\\\\\\\": \\\\\\\"{{JiraUsername}}\\\\\\\", \\\\\\\"SSMParameterName\\\\\\\": \\\\\\\"{{SSMParameterName}}\\\\\\\", \\\\\\\"JiraURL\\\\\\\": \\\\\\\"{{JiraURL}}\\\\\\\", \\\\\\\"ProjectKey\\\\\\\": \\\\\\\"{{ProjectKey}}\\\\\\\", \\\\\\\"IssueSummary\\\\\\\": \\\\\\\"{{IssueSummary}}\\\\\\\", \\\\\\\"IssueDescription\\\\\\\": \\\\\\\"{{IssueDescription}}\\\\\\\", \\\\\\\"IssueTypeName\\\\\\\": \\\\\\\"{{IssueTypeName}}\\\\\\\", \\\\\\\"PriorityName\\\\\\\": \\\\\\\"{{PriorityName}}\\\\\\\", \\\\\\\"AssigneeName\\\\\\\": \\\\\\\"{{AssigneeName}}\\\\\\\", \\\\\\\"DueDate\\\\\\\": \\\\\\\"{{DueDate}}\\\\\\\"}\\\"\\n      }\\n    }\\n  ],\\n  \\\"outputs\\\": [\\n    \\\"createJiraIssue.Payload\\\"\\n  ]\\n}\\nEOF\\n  document_type   = \\\"Automation\\\"\\n  name            = \\\"Security-ComplainceWorkflowDemo\\\"\\n  document_format = \\\"JSON\\\"\\n}\\n```\\n\\nNow that automation system has been built the last thing we have to do is choose the SSM document that we created in the code above.\\n\\nSetting Up AWS Config\\n\\n1. Sign in to the AWS Management Console and open the AWS Config console at <https://console.aws.amazon.com/config/>.\\n2. Choose Rules on the left, then on the Rules page in the search field, type in “required-tags”\\n3. On the Edit *name of the rule* page, in the Choose remediation action section, select Security-ComplainceWorkflowDemo. Fill out the the required fields.\\n4. Choose Save.\\n\\nNow when a “required-tag” resource violation has occurred the “Security-ComplainceWorkflowDemo.” remediation action will be executed.\",\"timestamp\":1634136867,\"title\":\"Remediating Noncompliant AWS Resources using AWS Native Tools\"},\"digest\":\"tBPi13TByUt8zFwTke0j_jU52TgOTeYNGArvWklWbTs\",\"authorship\":{\"contributor\":\"0xBA555C40F3B1A87a4835BF134e7B3E56c57EbC4A\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Ic2X5J5cjyRGs6vYn2v-nFKEF0az3sfOmTSqVNdty-A\\\",\\\"y\\\":\\\"KCp1Xa_cFUL4r6T2HF0bgEuRpSAJYqaBkxBAbvyPR6I\\\"}\",\"signature\":\"bhKmKgjw3_ecSPC_SQ7aGFV9L5S9PClfW2ecFdrgXd9bx5J0lCF6_v3b_EZl5Sr7MC9M4Uu9Nefn-VjTN6O0cA\",\"signingKeySignature\":\"0x0314fc1416eb79193a60be03968ac4f9316a42c3e6e34f16b2bf72bbf34d50385d2b060942ff8332d67b7d552a3a60335cccdce2096a6d4d51f988e9408be6831b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Ic2X5J5cjyRGs6vYn2v-nFKEF0az3sfOmTSqVNdty-A\\\",\\\"y\\\":\\\"KCp1Xa_cFUL4r6T2HF0bgEuRpSAJYqaBkxBAbvyPR6I\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"7af1ASm6RtnDfupaXmkQkEHUU2wumJofk5YaAgZBbpY\"}"