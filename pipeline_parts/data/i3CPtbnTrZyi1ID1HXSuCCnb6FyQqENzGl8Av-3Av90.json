"{\"content\":{\"body\":\"In order to create a keypair for Mainnet or to fully participate in a Mina test network, the first step is to generate a Keypair, which consists of a Public Key and a Private Key. Currently there are two supported tools for generating keypairs mina-generate-keypair and ledger-app-mina. We also have a tool for validating that your private key is created properly.\\n\\nNote that you may want to generate more than one keypair. For example, if you'd like to run a block producer most securely, you'll want a hot wallet / cold wallet block production setup.\\n\\n## Methods\\n\\n### mina-generate-keypair\\n\\nWe've created a simple command-line utility called `mina-generate-keypair`. This is the simplest method and instructions can be found below.\\n\\n### Ledger Hardware Wallet\\n\\nYou can use your [Ledger Nano S](https://www.ledger.com/) hardware wallet to securely store your Mina private keys. We are in the process of an independent security audit which currently has found no vulnerabilities, and development is nearly completed. Please see our ledger-app-mina documentation to get started with this tool.\\n\\n### Client SDK\\n\\nWe've also created a client SDK that is able to generate key pairs and sign transactions. Please note that this method is unadvised and should only be used by experienced security professionals. Please use our \\\\`mina-generate-keypair tool instead for creating key pairs. See our client SDK documentation for more information.\\n\\n \\n \\n\\nWARNING\\n\\nNever give out your private key and make sure they are stored safely. If you lose your private key or if a malicious actor gains access to your private key, you will lose access to your account and will lose your account funds. Always give out your public keys instead. Mina will never ask you for your private keys.\\n\\n \\n \\n\\n## Using mina-generate-keypair\\n\\nTo simplify the process of creating a keypair, we've created a simple command-line utility called `mina-generate-keypair`. The `mina-generate-keypair` tool has easy to use functionality to create your own Keypair to start participating in the Mina network. Please see below to see how to install and use on your local system.\\n\\n## Installation\\n\\nWe support several different operating systems for the `mina-generate-keypair` tool. Follow the instructions below to install the tool onto your system.\\n\\n### macOS\\n\\nIf you are using macOS please install Docker and follow the docker based instructions below.\\n\\n### Ubuntu 18.04 / Debian 9\\n\\nAfter adding the Mina repo you can simply run the following command.\\n\\n```\\necho \\\"deb [trusted=yes] http://packages.o1test.net stretch stable\\\" | sudo tee /etc/apt/sources.list.d/mina.list\\nsudo apt-get update\\nsudo apt-get install mina-generate-keypair=1.2.2-feee67c\\n```\\n\\nCheck that keygen tool installed correctly by running `mina-generate-keypair -version`. The output should read `Commit feee67cc2836bf12e792510a2440f28a0275740e on branch master `.\\n\\n### Windows / Other Platforms\\n\\nInstall Docker and follow the Docker-based instructions in step 3b. below.\\n\\n## Usage\\n\\nCreating a keypair is simple and is accomplished in a few short steps.\\n\\n1. First make sure you have a folder on your system where you can store the key files. We recommend using the `~/keys` folder.\\n\\n```\\nmkdir ~/keys\\n```\\n\\n2. Next, ensure the permissions are set properly this folder, this prevents unwanted processes from accessing these files.\\n\\n```\\nchmod 700 ~/keys\\n```\\n\\n3. Generate a key using either the instructions in Step 3a on Debian/Ubuntu, or Step 3b in Docker\\n\\n \\n \\n\\nWARNING\\n\\nMake sure to set a new and secure password for the following commands. Mina will never ask you for this password, and you should not share it with anyone.\\n\\n \\n \\n\\n3a. In Ubuntu/Debian: Generate your keys using the `mina-generate-keypair` command. When prompted, type in the password you intend to use to secure this key. If is set, the tool will use the password from the CODA_PRIVKEY_PASS environment variable instead of prompting you. *Do NOT forget this password.*\\n\\n```\\nmina-generate-keypair --privkey-path ~/keys/my-wallet\\n```\\n\\n3b. In Docker on Windows/MacOS/Linux: Generate your keys using the `minaprotocol/generate-keypair` docker image. When prompted, type in the password you intend to use to secure this key. *Do NOT forget this password.*\\n\\n```\\ncd ~\\ndocker run  --interactive --tty --rm --volume $(pwd)/keys:/keys minaprotocol/mina-generate-keypair:1.2.2-feee67c --privkey-path /keys/my-wallet\\n```\\n\\nThis will create two files on your system, `~/keys/my-wallet` which contains the encrypted private key and `~/keys/my-wallet.pub` which contains the public key in plain text. Please store the private key file and password you used in a secure place, such as a password manager.\\n\\n \\n \\n\\nWARNING\\n\\nNever give out your private key and make sure they are stored safely. If you lose your private key or if a malicious actor gains access to your private key, you will lose access to your account and will lose your account funds. Always give out your public keys instead. Mina will never ask you for your private keys.\\n\\n \\n \\n\\n4. Finally, ensure the permissions are set properly for the private key file, this prevents unwanted processes from accessing it.\\n\\n```\\nchmod 600 ~/keys/my-wallet\\n```\\n\\n## Validate your private key\\n\\nNow that you've created your key -- you'll want to validate that it works. It's sufficient to verify that you can sign a transaction. You can verify this using the `mina-validate-keypair` tool.\\n\\nOn Linux run the following command:\\n\\n```\\nmina-validate-keypair --privkey-path <path-to-the-private-key-file>\\n```\\n\\nIf you are using Docker run the following command:\\n\\n```\\ndocker run --interactive --tty --rm --volume $(pwd)/keys:/keys minaprotocol/mina-generate-keypair:1.2.2-feee67c --privkey-path /keys/my-wallet\\n```\\n\\n## Next steps\\n\\nNow that we have created our keypair, we can finally connect to the network or share your public key. \\n  \\n \\n\\nConnect to the Network\\nIn this section, we'll connect to the Mainnet network and send our first transaction. Let's first start up the node so that we can begin issuing commands.\\n\\nUpdate your software\\nThe first step in connecting to Mainnet is installing the latest daemon version. Follow the instructions for your operating system below.\\n\\nUbuntu 18.04 / Debian 9\\nFollow along below to install the latest Stable Mina Release 1.2.2 or visit the Github Releases Page to discover and install pre-release (Beta) builds.\\n\\nYou can set up the new debian stretch stable respository and install the latest version as follows:\\n\\necho \\\"deb \\\\[trusted=yes\\\\] <http://packages.o1test.net> stretch stable\\\" | sudo tee /etc/apt/sources.list.d/mina.list\\nsudo apt-get update\\nsudo apt-get install -y curl unzip mina-mainnet=1.2.2-feee67c\\nCheck that daemon installed correctly by running mina version. The output should read Commit feee67cc2836bf12e792510a2440f28a0275740e on branch master.\\n\\nStart up a node\\nSince this technology is still relatively new, there are a few rare situations where your node can run into some issues. We don't want for your nodes to break and you not realize! So we've made some officially supported auto-restart flows for you. We'll be iterating on these in future releases.\\n\\nHowever, first we'll want to make sure everything works by running it manually before starting with the auto-restart flows.\\n\\nNote: If you are using the Hetzner hosting provider, we are currently experiencing an issue where Hetzner believes our software is being malicious. See the Networking section of the troubleshooting page to learn how to mitigate this before starting a node.\\n\\nRun the following command to start up a Mina node instance and connect to the live network:\\n\\nmina daemon --peer-list-url <https://storage.googleapis.com/mina-seed-lists/mainnet_seeds.txt>\\nIf you have a key with stake and would like to produce blocks, also provide --block-producer-key \\\\~/keys/my-wallet, replacing \\\\~/keys/my-wallet with the path to your private key if not the default.\\n\\nThe --peer-list argument specified above refer to the seed peer address - this is the initial peer we will connect to on the network. Since Mina is a peer-to-peer protocol, there is no single centralized server we rely on.\\n\\nSee here for common issues when first running a node.\\n\\nYou're not done yet! Now that you've confirmed things are okay by running the standalone process, it is important we start Mina in a manner that will auto-restart itself when it dies.\\n\\nFirst kill the existing mina daemon process with Ctrl-C, and then keep reading:\\n\\nUbuntu 18.04 / Debian 9\\nTo produce blocks or otherwise customize the configuration for the mina daemon, create a file \\\\~/.mina-env containing the following:\\n\\nCODA_PRIVKEY_PASS=\\\"My_V3ry_S3cure_Password\\\"\\nLOG_LEVEL=Info\\nFILE_LOG_LEVEL=Debug\\nEXTRA_FLAGS=\\\" --block-producer-key <BLOCK_PRODUCER_KEY_PATH>\\\"\\nEnsure to replace <BLOCK_PRODUCER_KEY_PATH> with the full path to your block producer private key, for example, /home/ubuntu/keys/my-wallet.\\n\\nIf you do not intend to produce blocks then you can keep \\\\~/.mina-env empty for now.\\n\\nTo change how mina is configured, simply specify flags to the mina daemon process with space-separated arguments between the quotes in EXTRA_FLAGS=\\\"\\\".\\n\\nThe mina systemd service no longer expects a peers.txt file, it just uses the PEERS_LIST_URL variable to determine where to fetch initial peers from, and the PEERS_LIST_URL for the mainnet package defaults to <https://storage.googleapis.com/mina-seed-lists/mainnet_seeds.txt> .\\n\\nOnce your .mina-env is ready, run the following commands to start up a Mina node instance and connect to the live network:\\n\\nsystemctl --user daemon-reload\\nsystemctl --user start mina\\nsystemctl --user enable mina\\nsudo loginctl enable-linger\\nThese commands will allow the node to continue running after you logout, and restart automatically when the machine reboots.\\n\\nBy default, the node connects to the network using the default external-port of 8302. This can be changed using the -external-port flag, just add that to EXTRA_FLAGS.\\n\\nYou can also look into the mina process itself that's running in the background and auto-restarting.\\n\\nThis command will let you know if mina had any trouble getting started.\\n\\nsystemctl --user status mina\\nYou can stop mina gracefully, and stop automatically-restarting the service:\\n\\nsystemctl --user stop mina\\nManually Restart it:\\n\\nsystemctl --user restart mina\\nAnd look at logs:\\n\\njournalctl --user -u mina -n 1000 -f\\nIn some cases in order to view logs you need to run the following command instead:\\n\\njournalctl --user-unit mina -n 1000 -f\\nThat command will show you the last 1000 lines and follow from there.\\n\\nDocker\\nWhen running your daemon using Docker, first ensure that your private key has the correct permissions.\\n\\ncd \\\\~\\nchmod 700 \\\\~/keys\\nchmod 600 \\\\~/keys/my-wallet\\nmkdir \\\\~/.mina-config\\nNow simply run the image with your keys and \\\\~/.mina-config mounted: \\n  \\n Send a payment with Mina\\n\\nIn this section, we'll give a brief overview on how to send a transaction with the Mina client and how to get started with interacting with the blockchain.\\n\\n## Using an offline signed-transaction\\n\\nIf you want to send a transaction without running a node yourself, but by delegating to someone else running a node, keep following along here. If you wish to send the transaction directly with a running node, skip to [using a connected node](https://docs.minaprotocol.com/en/using-mina/send-payment#using-a-connected-node).\\n\\n### Using a Ledger device\\n\\nTo generate a signed transaction offline if your private key is on a Ledger device, see Ledger Offline Mode.\\n\\n### Using a keypair generated with the generate-keypair tool\\n\\nA better tool is coming soon: <https://github.com/MinaProtocol/mina/issues/8928>. For now, please use the [workaround](https://github.com/MinaProtocol/mina/issues/8928#issuecomment-857095846) provided in a comment on that issue.\\n\\n### Using a keypair generated with the offline client-sdk\\n\\nTo generate a signed transaction using the client-sdk, log the signed payment created as shown on the [client-sdk readme page](https://github.com/MinaProtocol/mina/tree/develop/frontend/client_sdk).\\n\\n### Send the transaction\\n\\nYou can use a hosted service to broadcast your signed transaction. Sending your signed transaction *does not* leak your private key.\\n\\nTransactions signed with the client-sdk can use: <https://minaexplorer.com/broadcast-tx>\\n\\nTransactions signed with the ledger can use: <https://minaexplorer.com/broadcast-ledger>\\n\\n## Using a connected node\\n\\nWe are assuming in the rest of section that you have the Mina client installed on your system, if you do not have Mina installed please see the Getting Started.\\n\\n## Import your account\\n\\nOnce our node is synced, we'll need to import our public/private keypair so that we can sign transactions and generate an address to receive payments. For security reasons, we'll want to put the keys under a directory that is harder for attackers to access.\\n\\nRun the following command to import your previously generated keypair file:\\n\\n```\\nmina accounts import --privkey-path ~/keys/my-wallet\\n```\\n\\nYou will be prompted for the password you entered when the account was created.\\n\\nWARNING\\n\\nThe public key can be shared freely with anyone, but be very careful with your private key file. Never share this private key with anyone, as it is the equivalent of a password for your funds.\\n\\nThe response from this command will look like this:\\n\\n```\\n😄 Imported account!\\nPublic key: B62qjaA4N9843FKM5FZk1HmeuDiojG42cbCDyZeUDQVjycULte9PFkC\\n```\\n\\nAdditionally you can use the `mina accounts create` command to generate new accounts to send and receive transactions.\\n\\nSince the public key is quite long and difficult to remember, let's save it as an environment variable. Use the following command but replace `<YOUR-PUBLIC-KEY>` with the public key output from the previous command:\\n\\n```\\nexport MINA_PUBLIC_KEY=<YOUR-PUBLIC-KEY>\\n```\\n\\nNow we can access this everywhere as `$MINA_PUBLIC_KEY` -- check if it saved properly by trying `echo $MINA_PUBLIC_KEY`.\\n\\nNote that these environment variables will only be saved for the current shell session, so if you want to save them for future use, you can add them to `~/.profile` or `~/.bash_profile`.\\n\\nNOTE\\n\\nIf you are running the node on a cloud virtual machine, make sure to export and save the key file. You can export the key with:\\n\\n```\\nmina accounts export --public-key <PUBLIC-KEY> --privkey-path <EXPORT-PATH>\\n```\\n\\nThen save it to your local machine, maybe using [scp](https://linux.die.net/man/1/scp):\\n\\n```\\nscp <EXPORT-PATH> <LOCAL-DESTINATION>\\n```\\n\\nLater, when starting up a new VM, you can upload the key and then import it:\\n\\n```\\nmina accounts import --privkey-path <PRIVATE-KEY-FILE>\\n```\\n\\nIf you ever forget what keypairs you've already created, you can see them all with:\\n\\n```\\nmina accounts list\\n```\\n\\n## Check account balance\\n\\nWe can check the balance of all our accounts using this command:\\n\\n```\\nmina accounts list\\n```\\n\\nYou might see `Balance: 0 mina` for your account. Depending on the traffic in the network, it may take a few blocks before your transaction goes through.\\n\\nNOTE\\n\\nTip: You can run `mina client status` to see the current block height updating.\\n\\n## Make a payment\\n\\nFinally, we get to the good stuff–sending our first transaction! Before you send a payment, you'll need to unlock your account:\\n\\n```\\nmina accounts unlock --public-key $MINA_PUBLIC_KEY\\n```\\n\\nFor testing purposes, we will specify your public key as the receiver and sender. This just means that we are sending a transaction to ourselves, you can see your public key by issuing the following command:\\n\\n```\\necho $MINA_PUBLIC_KEY\\n```\\n\\nWARNING\\n\\nIf the receiving account has not received any transactions, there will be an additional Account Creation Fee of `1 MINA` that will be deducted from the transaction amount.\\n\\nLet's send some of our Mina to ourselves to see what a payment looks like:\\n\\n```\\nmina client send-payment \\\\\\n  --amount 1.5 \\\\\\n  --receiver $MINA_PUBLIC_KEY \\\\\\n  --fee 0.1 \\\\\\n  --sender $MINA_PUBLIC_KEY\\n```\\n\\nIf you're wondering what we passed in to the commands above:\\n\\n* For `amount`, we're sending a test value of `1.5` mina which is enough to cover the Account Creation Fee\\n* The `receiver` is the public key of the account receiving the transaction, eg. `B62qjaA4N9843FKM5FZk...`\\n* For `fee`, let's use 0.1 mina\\n* The `sender` is the public key of the account sending the transaction, eg. `B62qjaA4N9843FKM5FZk...`\\n\\nIf this command is formatted properly, we should get a response that looks like the following:\\n\\n```\\nDispatched payment with ID 3XCgvAHLAqz9VVbU7an7f2L5ffJtZoFega7jZpVJrPCYA4j5HEmUAx51BCeMc232eBWVz6q9t62Kp2cNvQZoNCSGqJ1rrJpXFqMN6NQe7x987sAC2Sd6wu9Vbs9xSr8g1AkjJoB65v3suPsaCcvvCjyUvUs8c3eVRucH4doa2onGj41pjxT53y5ZkmGaPmPnpWzdJt4YJBnDRW1GcJeyqj61GKWcvvrV6KcGD25VEeHQBfhGppZc7ewVwi3vcUQR7QFFs15bMwA4oZDEfzSbnr1ECoiZGy61m5LX7afwFaviyUwjphtrzoPbQ2QAZ2w2ypnVUrcJ9oUT4y4dvDJ5vkUDazRdGxjAA6Cz86bJqqgfMHdMFqpkmLxCdLbj2Nq3Ar2VpPVvfn2kdKoxwmAGqWCiVhqYbTvHkyZSc4n3siGTEpTGAK9usPnBnqLi53Z2bPPaJ3PuZTMgmdZYrRv4UPxztRtmyBz2HdQSnH8vbxurLkyxK6yEwS23JSZWToccM83sx2hAAABNynBVuxagL8aNZF99k3LKX6E581uSVSw5DAJ2S198DvZHXD53QvjcDGpvB9jYUpofkk1aPvtW7QZkcofBYruePM7kCHjKvbDXSw2CV5brHVv5ZBV9DuUcuFHfcYAA2TVuDtFeNLBjxDumiBASgaLvcdzGiFvSqqnzmS9MBXxYybQcmmz1WuKZHjgqph99XVEapwTsYfZGi1T8ApahcWc5EX9\\nReceipt chain hash is now A3gpLyBJGvcpMXny2DsHjvE5GaNFn2bbpLLQqTCHuY3Nd7sqy8vDbM6qHTwHt8tcfqqBkd36LuV4CC6hVH6YsmRqRp4Lzx77WnN9gnRX7ceeXdCQUVB7B2uMo3oCYxfdpU5Q2f2KzJQ46\\n```\\n\\nYou may not see the `Receipt chain hash` on the first transaction from the account, but in following transactions, this will show you the head of the receipt chain hash list.\\n\\n## Staking and Snarking\\n\\nOnce you feel comfortable with the basics of creating an address, and sending & receiving mina, we can move on to the truly unique parts of the Mina network like participating in consensus and helping compress the blockchain.\\n\\n## Advanced\\n\\n### Sending Many Transactions\\n\\nSometimes you may wish to send many transactions: for example, to payout rewards to those delegating to you if you're running a staking pool.\\n\\nAll information here is relevant as of the 1.2.2 build:\\n\\n### Rate limiting\\n\\nCurrently, nodes on the network will rate limit receiving messages from a given node. As of the 1.2.2 build, your node will also follow this rate limit when sending transactions. Specifically, the limit is currently set at 10 transactions every 15 seconds computed over a 5 minute window. If you attempt to send transactions faster than this rate, your node will queue them up and flush them as older transactions expire from the window upon which the rate limit is computed. You do not need to throttle sending these transactions yourself.\\n\\nNote that older releases of the mina daemon do not perform this rate limiting; if you are running an older version, you should manually limit the number of transactions. Due to overheads from rebroadcasting transactions, we do not recommend sending more than 50 transactions every 5 minutes if you need to manually rate limit.\\n\\n### My node crashed or disconnected before I could finish sending transactions\\n\\nThe Mina daemon does *not* currently persist the transaction pool. This means that the transactions that your node will be unaware of any transactions that you've sent so far if your node crashes in the middle of this process. As of the 1.2.2 build, you can resend all transactions (exactly in the same manner as before) and they will be rebroadcasted on the network.\\n\\nIf you believe you were temporarily disconnected from the network, but your node stayed online (i.e. the gossip network may have missed one or more of your transactions), as of the 1.2.2 build, you can resend any of the transactions locally and they will be broadcasted again to the network even if your node thinks they've already been shared.\\n\\n### Cancelling a transaction and setting a new fee\\n\\nTo cancel a transaction, you'll need to have all the transactions that haven't been committed to the chain yet before in your local transaction mempool. This means if your node crashed (see above) you'll need to resend those earlier transactions. Finally, to cancel a transaction, all you need to do is send a transaction with the same nonce of the one you want to cancel with a larger fee. There is no minimum increment, it just needs to be slightly larger (and large enough such that a block producer will choose your transaction).\\n\\nGet Updates\\n\\nMina is growing fast! Subscribe to stay updated\\n\\n[SUBMIT](https://docs.minaprotocol.com/en/using-mina/send-payment)\\n\\nConnect\\n\\nJoin the conversation.\\n\\n#### GET STARTED\\n\\n[Documentation](https://docs.minaprotocol.com/getting-started)[Run a Node](https://minaprotocol.com/node-operators)[Build on Mina](https://docs.minaprotocol.com/)[Join Genesis](https://minaprotocol.com/genesis)[Apply for Grants](https://minaprotocol.com/grants)\\n\\n#### RE\\n\\n \\n  \\n Staking & Snarking\\n\\nLet's turn our attention to the other ways we can interact with the Mina network - namely, participating in consensus, and helping compress data by generating zk-SNARKs. By operating a node that helps secure the network, you can receive mina for your efforts.\\n\\n## Participating in Consensus\\n\\nThe Mina network is secured by Proof-of-Stake consensus. With this model of consensus, you don't need to have complex equipment like in Bitcoin mining. By simply having mina in our wallet, we can choose to either stake it ourselves, or delegate it to another node. Let's first see how to stake mina ourselves:\\n\\nWARNING\\n\\nTo properly remain synced to the network and participate in consensus, it is important that your server is running some form of a [clock synchronization protocol](https://en.wikipedia.org/wiki/Clock_synchronization). We recommend using [NTP](https://en.wikipedia.org/wiki/Network_Time_Protocol), which is relatively easy to setup and comes already installed as a default service on many popular linux distros.\\n\\n### Staking mina\\n\\nWe can try out staking with our mina by issuing the following command:\\n\\n```\\nmina client set-staking --public-key $MINA_PUBLIC_KEY\\n```\\n\\nAlternatively, you can restart the daemon with the `-block-producer-pubkey` flag:\\n\\n```\\nmina daemon \\\\\\n    -peer-list ~/peers.txt \\\\\\n    -block-producer-pubkey $MINA_PUBLIC_KEY\\n```\\n\\nWe can always check which accounts we're currently staking with, by using the `mina client status` command:\\n\\n```\\nmina client status\\n\\nMina daemon status\\n-----------------------------------\\n\\nGlobal number of accounts:  372\\nBlock height:               20\\nMax observed block length:  20\\nLocal uptime:               1m48s\\nLedger Merkle root:         ...\\nProtocol state hash:        ...\\nStaged Hash:                ...\\nGit SHA-1:                  ...\\nConfiguration directory:    ...\\nPeers:                      5 (...)\\nUser_commands sent:         0\\nSNARK worker:               None\\nSNARK work fee:             1\\nSync status:                Synced\\nBlock producers running:    1 (...)\\nBest tip consensus time:    epoch=0, slot=133\\nNext proposal:              None this epoch… checking at in 5.284h\\nConsensus time now:         epoch=0, slot=134\\nConsensus mechanism:        proof_of_stake\\nConsensus configuration:    ...\\nAddresses and ports:        ...\\nLibp2p PeerID:              ...\\n```\\n\\nThe `Block producers running` field in the response above returns the number of accounts currently staking, with the associated key.\\n\\nWARNING\\n\\nKeep in mind that if you are staking independently with funds in a account, you'll need to remain connected to the network at all times to successfully produce blocks. If you need to go offline frequently, it may be better to delegate your stake.\\n\\nIf you'd like to send your coinbase to an account other than the one that is staking, you can use the `-coinbase-receiver` flag when you start your daemon. You can even point the coinbase at a cold wallet!\\n\\n### Delegating mina\\n\\nDelegating mina is an alternative option to staking it directly, with the benefit of not having to maintain a node that is always connected to the network.\\n\\nFirst make sure you've unlocked your account:\\n\\n```\\nmina account unlock --public-key $MINA_PUBLIC_KEY\\n```\\n\\nAnd then run this command to delegate your stake:\\n\\n```\\nmina client delegate-stake \\\\\\n    --receiver <DELEGATE-PUBLIC-KEY> \\\\\\n    --sender $MINA_PUBLIC_KEY \\\\\\n    --fee 0.1\\n```\\n\\nThe fields in this command:\\n\\n* The `receiver` flag is the public key of the receiver of your stake delegation\\n* `sender` is the public key of the account from which you want to delegate\\n* `fee` is the cost to send your transaction. It is paid to the network’s block producers.\\n* Note there is no *amount* parameter. Your full Mina balance will be delegated automatically.\\n\\nYou'll notice that this command looks suspiciously like a payment transaction. That's because a stake delegation is also a transaction! This is why we have to pay a small transaction fee in order to change this setting.\\n\\nDelegating your stake might be useful if you're interested in:\\n\\n* Running your own staking node that uses funds from a \\\"cold wallet\\\"\\n* Delegating to a \\\"staking pool\\\" which will provide token payouts periodically\\n* Or if you don't have enough tokens to make managing a block producer full-time worthwhile\\n\\nNOTE\\n\\nThere is a latency period of a 2-4 weeks before your new stake delegation comes into effect\\n\\n## Compressing data in the Mina network\\n\\nThe Mina protocol is unique in that it doesn't require nodes to maintain the full history of the blockchain like other cryptocurrency protocols. By recursively using cryptographic proofs, the Mina protocol effectively compresses the blockchain to constant size. We call this compression, because it reduces terabytes of data to a few kilobytes.\\n\\nHowever, this isn't data encoding or compression in the traditional sense - rather nodes \\\"compress\\\" data in the network by generating cryptographic proofs. Node operators play a crucial role in this process by designating themselves as \\\"snark-workers\\\" that generate zk-SNARKs for transactions that have been added to blocks.\\n\\nYou can start a snark-worker using these commands:\\n\\n```\\nmina client set-snark-work-fee <FEE>\\nmina client set-snark-worker --address $MINA_PUBLIC_KEY\\n```\\n\\nAlternatively, you can restart the daemon with these flags:\\n\\n```\\nmina daemon \\\\\\n    -peer-list ~/peers.txt \\\\\\n    -run-snark-worker $MINA_PUBLIC_KEY \\\\\\n    -snark-worker-fee <fee>\\n```\\n\\nAs a snark worker, you get to share some of the block reward for each block your compressed transactions make it in to. The block producer is responsible for gathering compressed transactions before including them into a block, and will be incentivized by the protocol to reward snark-workers.\\n\\nSnark workers can be fairly compute intensive, so if you need to limit their CPU usage, you can specify the number of threads snark workers use with the `-snark-worker-parallelism` flag. This can be especially useful if you're trying to run a block producer and snark worker on the same machine and having issues producing blocks in time.\\n\\nThat about covers the roles and responsibilities as a Mina node operator. Since Mina is a permissionless peer-to-peer network, everything is managed and run in a decentralized manner by nodes all over the world. Similarly, the Mina project is also distributed and permissionless to join. The code is all open source, and there is much work to be done, both technical and non-technical. To learn more about how you can get involved with Mina, please check out the Contributing to Mina section.\\n\\n### Using daemon.json to configure your mina daemon\\n\\nBy creating a file at `~/.mina-config/daemon.json`, you can configure your mina daemon without needing to provide options on the commandline. This can be useful for running mina as a service as well as just for avoiding repetitive typing!\\n\\nMost of the options that can be passed to `mina daemon` on the commandline can also be provided as options in the config file. See `mina daemon -help` for more documentation of the options. Below is an example of usage of all the usable configuration parameters (in your file, you only need to specify the ones you want to change):\\n\\n```\\n{\\n  \\\"daemon\\\": {\\n    \\\"client-port\\\": 1000,\\n    \\\"external-port\\\": 1001,\\n    \\\"rest-port\\\": 1002,\\n    \\\"block-producer-key\\\": \\\"/path/to/privkey-file\\\",\\n    \\\"block-producer-password\\\": \\\"mypassword\\\",\\n    \\\"block-producer-pubkey\\\": \\\"<MY PUBLICKEY>\\\",\\n    \\\"coinbase-receiver\\\": \\\"<MY PUBLICKEY>\\\",\\n    \\\"log-block-creation\\\": false,\\n    \\\"log-received-blocks\\\": false,\\n    \\\"log-snark-work-gossip\\\": false,\\n    \\\"log-txn-pool-gossip\\\": false,\\n    \\\"peers\\\": [\\\"seed-one.o1test.net\\\", \\\"seed-two.o1test.net\\\"],\\n    \\\"run-snark-worker\\\": \\\"<MY PUBLICKEY>\\\",\\n    \\\"snark-worker-fee\\\": 10,\\n    \\\"snark-worker-parallelism\\\": 1,\\n    \\\"work-reassignment-wait\\\": 420000,\\n    \\\"work-selection\\\": \\\"seq\\\"\\n  }\\n}\\n```\\n\\n \\n CLI Reference\\n\\nThe Mina CLI (command-line interface) is the primary way for users to interact with the Mina network. It provides standard client functionality to create accounts, send transactions, and participate in consensus. There are also advanced client and daemon commands for power users.\\n\\nThe CLI is installed when you install Mina.\\n\\nWARNING\\n\\nMina APIs are still under construction, so these commands will likely change. See `mina help` for the most up-to-date version.\\n\\n### Mina Accounts\\n\\n```\\n$ mina accounts help\\n\\nClient commands concerning account management\\n\\n  mina accounts SUBCOMMAND\\n\\n=== subcommands ===\\n\\n  list    List all owned accounts\\n  create  Create new account\\n  import  Import a password protected private key to be tracked by the daemon.\\n          Set CODA_PRIVKEY_PASS environment variable to use non-interactively\\n          (key will be imported using the same password).\\n  export  Export a tracked account so that it can be saved or transferred\\n          between machines.\\n          Set CODA_PRIVKEY_PASS environment variable to use non-interactively\\n          (key will be exported using the same password).\\n  unlock  Unlock a tracked account\\n  lock    Lock a tracked account\\n  help    explain a given subcommand (perhaps recursively)\\n\\n```\\n\\n### Mina Client\\n\\n```\\n$ mina client help\\n\\nLightweight client commands\\n\\n  mina client SUBCOMMAND\\n\\n=== subcommands ===\\n\\n  get-balance           Get balance associated with a public key\\n  get-tokens            Get all token IDs that a public key has accounts for\\n  send-payment          Send payment to an address\\n  delegate-stake        Delegate your stake to another public key\\n  create-token          Create a new token\\n  create-token-account  Create a new account for a token\\n  mint-tokens           Mint more of a token owned by the command's sender\\n  cancel-transaction    Cancel a transaction -- this submits a replacement\\n                        transaction with a fee larger than the cancelled\\n                        transaction.\\n  set-staking           Start producing blocks\\n  set-snark-worker      Set key you wish to snark work with or disable snark\\n                        working\\n  set-snark-work-fee    Set fee reward for doing transaction snark work\\n  export-logs           Export daemon logs to tar archive\\n  export-local-logs     Export local logs (no daemon) to tar archive\\n  stop-daemon           Stop the daemon\\n  status                Get running daemon status\\n  help                  explain a given subcommand (perhaps recursively)\\n\\n```\\n\\n### Mina Daemon\\n\\n```\\n$ mina daemon -help\\n\\nMina daemon\\n\\n  mina daemon\\n\\n=== flags ===\\n\\n  [--all-peers-seen-metric true|false]                whether to track the set\\n                                                      of all peers ever seen for\\n                                                      the all_peers metric\\n                                                      (default: false)\\n  [--archive-address HOST:PORT/LOCALHOST-PORT]        Daemon to archive process\\n                                                      communication. If HOST is\\n                                                      omitted, then localhost is\\n                                                      assumed to be HOST.\\n                                                      (examples: 3086,\\n                                                      154.97.53.97:3086)\\n  [--archive-rocksdb]                                 Stores all the blocks\\n                                                      heard in RocksDB\\n  [--background]                                      Run process on the\\n                                                      background\\n  [--bind-ip IP]                                      IP of network interface to\\n                                                      use for peer connections\\n  [--block-producer-key KEYFILE]                      Private key file for the\\n                                                      block producer. You cannot\\n                                                      provide both\\n                                                      `block-producer-key` and\\n                                                      `block-producer-pubkey`.\\n                                                      (default: don't produce\\n                                                      blocks)\\n  [--block-producer-password PASSWORD]                Password associated with\\n                                                      the block-producer key.\\n                                                      Setting this is equivalent\\n                                                      to setting the\\n                                                      CODA_PRIVKEY_PASS\\n                                                      environment variable. Be\\n                                                      careful when setting it in\\n                                                      the commandline as it will\\n                                                      likely get tracked in your\\n                                                      history. Mainly to be used\\n                                                      from the daemon.json\\n                                                      config file\\n  [--block-producer-pubkey PUBLICKEY]                 Public key for the\\n                                                      associated private key\\n                                                      that is being tracked by\\n                                                      this daemon. You cannot\\n                                                      provide both\\n                                                      `block-producer-key` and\\n                                                      `block-producer-pubkey`.\\n                                                      (default: don't produce\\n                                                      blocks)\\n  [--client-port PORT]                                local RPC-server for\\n                                                      clients to interact with\\n                                                      the daemon (default: 8301)\\n  [--coinbase-receiver PUBLICKEY]                     Address to send coinbase\\n                                                      rewards to (if this node\\n                                                      is producing blocks). If\\n                                                      not provided, coinbase\\n                                                      rewards will be sent to\\n                                                      the producer of a block.\\n  [--config-directory DIR]                            Configuration directory\\n  [--config-file PATH]                                Path to a configuration\\n                                                      file (overrides\\n                                                      CODA_CONFIG_FILE, default:\\n                                                      <config_dir>/daemon.json).\\n                                                      Pass multiple times to\\n                                                      override fields from\\n                                                      earlier config files\\n  [--current-protocol-version NN.NN.NN]               Current protocol version,\\n                                                      only blocks with the same\\n                                                      version accepted\\n  [--demo-mode]                                       Run the daemon in\\n                                                      demo-mode -- assume we're\\n                                                      \\\"synced\\\" to the network\\n                                                      instantly\\n  [--direct-peer /ip4/IPADDR/tcp/PORT/p2p/PEERID]     Peers to always send new\\n                                                      messages to/from. These\\n                                                      peers should also have you\\n                                                      configured as a direct\\n                                                      peer, the relationship is\\n                                                      intended to be symmetric\\n  [--disable-node-status]                             Disable reporting node\\n                                                      status to other nodes\\n                                                      (default: enabled)\\n  [--discovery-keypair KEYFILE]                       Keypair (generated from\\n                                                      `mina advanced\\n                                                      generate-libp2p-keypair`)\\n                                                      to use with libp2p\\n                                                      discovery (default:\\n                                                      generate per-run temporary\\n                                                      keypair)\\n  [--enable-flooding true|false]                      Publish our own\\n                                                      blocks/transactions to\\n                                                      every peer we can find\\n                                                      (default: false)\\n  [--enable-mina-peer-exchange true|false]            Help keep the mesh\\n                                                      connected when closing\\n                                                      connections (default:\\n                                                      true)\\n  [--enable-peer-exchange true|false]                 Help keep the mesh\\n                                                      connected when closing\\n                                                      connections (default:\\n                                                      false)\\n  [--external-ip IP]                                  External IP address for\\n                                                      other nodes to connect to.\\n                                                      You only need to set this\\n                                                      if auto-discovery fails\\n                                                      for some reason.\\n  [--external-port PORT]                              Port to use for all libp2p\\n                                                      communications (gossip and\\n                                                      RPC) (default: 8302)\\n  [--file-log-level LEVEL]                            Set log level for the log\\n                                                      file\\n                                                      (Spam|Trace|Debug|Info|Warn|Error|Faulty_peer|Fatal,\\n                                                      default: Trace)\\n  [--gc-stat-interval INTERVAL]                       in mins for collecting GC\\n                                                      stats for metrics\\n                                                      (Default: 15.000000)\\n  [--generate-genesis-proof true|false]               Deprecated. Passing this\\n                                                      flag has no effect\\n  [--genesis-ledger-dir DIR]                          Directory that contains\\n                                                      the genesis ledger and the\\n                                                      genesis blockchain proof\\n                                                      (default: <config-dir>)\\n  [--insecure-rest-server]                            Have REST server listen on\\n                                                      all addresses, not just\\n                                                      localhost (this is\\n                                                      INSECURE, make sure your\\n                                                      firewall is configured\\n                                                      correctly!)\\n  [--isolate-network true|false]                      Only allow connections to\\n                                                      the peers passed on the\\n                                                      command line or configured\\n                                                      through GraphQL. (default:\\n                                                      false)\\n  [--libp2p-metrics-port PORT]                        libp2p metrics server for\\n                                                      scraping via Prometheus\\n                                                      (default no\\n                                                      libp2p-metrics-server)\\n  [--limited-graphql-port PORT]                       GraphQL-server for limited\\n                                                      daemon interaction\\n  [--log-block-creation true|false]                   Log the steps involved in\\n                                                      including transactions and\\n                                                      snark work in a block\\n                                                      (default: true)\\n  [--log-json]                                        Print log output as JSON\\n                                                      (default: plain text)\\n  [--log-level LEVEL]                                 Set log level\\n                                                      (Spam|Trace|Debug|Info|Warn|Error|Faulty_peer|Fatal,\\n                                                      default: Info)\\n  [--log-precomputed-blocks true|false]               Include precomputed blocks\\n                                                      in the log (default:\\n                                                      false)\\n  [--log-snark-work-gossip true|false]                Log snark-pool diff\\n                                                      received from peers\\n                                                      (default: false)\\n  [--log-txn-pool-gossip true|false]                  Log transaction-pool diff\\n                                                      received from peers\\n                                                      (default: false)\\n  [--max-connections NN]                              max number of connections\\n                                                      that this peer will have\\n                                                      to neighbors in the gossip\\n                                                      network. Tuning this\\n                                                      higher will strengthen\\n                                                      your connection to the\\n                                                      network in exchange for\\n                                                      using more RAM (default:\\n                                                      50)\\n  [--metrics-port PORT]                               metrics server for\\n                                                      scraping via Prometheus\\n                                                      (default no\\n                                                      metrics-server)\\n  [--minimum-block-reward AMOUNT]                     Minimum reward a block\\n                                                      produced by the node\\n                                                      should have. Empty blocks\\n                                                      are created if the rewards\\n                                                      are lower than the\\n                                                      specified threshold\\n                                                      (default: No threshold,\\n                                                      transactions and coinbase\\n                                                      will be included as long\\n                                                      as the required snark work\\n                                                      is available and can be\\n                                                      paid for)\\n  [--no-super-catchup]                                Don't use super-catchup\\n  [--open-limited-graphql-port]                       Have the limited GraphQL\\n                                                      server listen on all\\n                                                      addresses, not just\\n                                                      localhost (this is\\n                                                      INSECURE, make sure your\\n                                                      firewall is configured\\n                                                      correctly!)\\n  [--peer /ip4/IPADDR/tcp/PORT/p2p/PEERID]            initial \\\"bootstrap\\\" peers\\n                                                      for discovery\\n  [--peer-list-file /ip4/IPADDR/tcp/PORT/p2p/PEERID]  initial \\\"bootstrap\\\" peers\\n                                                      for discovery inside a\\n                                                      file delimited by\\n                                                      new-lines (\\\\n)\\n  [--peer-list-url URL]                               URL of seed peer list\\n                                                      file. Will be polled\\n                                                      periodically.\\n  [--precomputed-blocks-file PATH]                    Path to write precomputed\\n                                                      blocks to, for replay or\\n                                                      archiving\\n  [--proof-level]                                     full|check|none\\n  [--proposed-protocol-version NN.NN.NN]              Proposed protocol version\\n                                                      to signal other nodes\\n  [--rest-port PORT]                                  local REST-server for\\n                                                      daemon interaction\\n                                                      (default: 3085)\\n  [--run-snark-coordinator PUBLICKEY]                 Run a SNARK coordinator\\n                                                      with this public key\\n                                                      (ignored if the\\n                                                      run-snark-worker is set)\\n  [--run-snark-worker PUBLICKEY]                      Run the SNARK worker with\\n                                                      this public key\\n  [--seed]                                            Start the node as a seed\\n                                                      node\\n  [--snark-worker-fee FEE]                            Amount a worker wants to\\n                                                      get compensated for\\n                                                      generating a snark proof\\n                                                      (default: 100000000)\\n  [--snark-worker-parallelism NUM]                    Run the SNARK worker using\\n                                                      this many threads.\\n                                                      Equivalent to setting\\n                                                      OMP_NUM_THREADS, but\\n                                                      doesn't affect block\\n                                                      production.\\n  [--stop-time UPTIME]                                in hours after which the\\n                                                      daemon stops itself (only\\n                                                      if there were no slots won\\n                                                      within an hour after the\\n                                                      stop time) (Default: 24)\\n  [--tracing]                                         Trace into\\n                                                      $config-directory/trace/$pid.trace\\n  [--upload-blocks-to-gcloud true|false]              upload blocks to gcloud\\n                                                      storage. Requires the\\n                                                      environment variables\\n                                                      GCLOUD_KEYFILE,\\n                                                      NETWORK_NAME, and\\n                                                      GCLOUD_BLOCK_UPLOAD_BUCKET\\n  [--uptime-submitter-key KEYFILE]                    Private key file for the\\n                                                      uptime submitter. You\\n                                                      cannot provide both\\n                                                      `uptime-submitter-key` and\\n                                                      `uptime-submitter-pubkey`.\\n  [--uptime-submitter-pubkey PUBLICKEY]               Public key of the\\n                                                      submitter to the Mina\\n                                                      delegation program, for\\n                                                      the associated private key\\n                                                      that is being tracked by\\n                                                      this daemon. You cannot\\n                                                      provide both\\n                                                      `uptime-submitter-key` and\\n                                                      `uptime-submitter-pubkey`.\\n  [--uptime-url URL]                                  URL of the uptime service\\n                                                      of the Mina delegation\\n                                                      program\\n  [--validation-queue-size NN]                        size of the validation\\n                                                      queue in the p2p network\\n                                                      used to buffer messages\\n                                                      (like blocks and\\n                                                      transactions received on\\n                                                      the gossip network) while\\n                                                      validation is pending. If\\n                                                      a transaction, for\\n                                                      example, is invalid, we\\n                                                      don't forward the message\\n                                                      on the gossip net. If this\\n                                                      queue is too small, we\\n                                                      will drop messages without\\n                                                      validating them. If it is\\n                                                      too large, we are\\n                                                      susceptible to DoS attacks\\n                                                      on memory. (default: 150)\\n  [--work-reassignment-wait WAIT-TIME]                in ms before a snark-work\\n                                                      is reassigned (default:\\n                                                      420000ms)\\n  [--work-selection seq|rand]                         Choose work sequentially\\n                                                      (seq) or randomly (rand)\\n                                                      (default: rand)\\n  [--working-dir PATH]                                path to chdir into before\\n                                                      starting (useful for\\n                                                      background mode, defaults\\n                                                      to cwd, or / if\\n                                                      -background)\\n  [-help]                                             print this help text and\\n                                                      exit\\n                                                      (alias: -?)\\n\\n```\\n\\n### Mina Advanced\\n\\n```\\n$ mina advanced help\\n\\nAdvanced client commands\\n\\n  mina advanced SUBCOMMAND\\n\\n=== subcommands ===\\n\\n  add-peers                   Add peers to the daemon\\n                              Addresses take the format\\n                              /ip4/IPADDR/tcp/PORT/p2p/PEERID\\n  archive-blocks              Archive a block from a file.\\n                              If an archive address is given, this process will\\n                              communicate with the archive node directly;\\n                              otherwise it will communicate through the daemon\\n                              over the rest-server\\n  batch-send-payments         Send multiple payments from a file\\n  chain-id-inputs             Print the inputs that yield the current chain id\\n  client-trustlist            Client trustlist management\\n  compile-time-constants      Print a JSON map of the compile-time consensus\\n                              parameters\\n  compute-receipt-chain-hash  Compute the next receipt chain hash from the\\n                              previous hash and transaction ID\\n  constraint-system-digests   Print MD5 digest of each SNARK constraint\\n  dump-keypair                Print out a keypair from a private key file\\n  generate-keypair            Generate a new public, private keypair\\n  generate-libp2p-keypair     Generate a new libp2p keypair and print out the\\n                              peer ID\\n  get-nonce                   Get the current nonce for an account\\n  get-peers                   List the peers currently connected to the daemon\\n  get-public-keys             Get public keys\\n  get-trust-status            Get the trust status associated with an IP address\\n  get-trust-status-all        Get trust statuses for all peers known to the\\n                              trust system\\n  hash-transaction            Compute the hash of a transaction from its\\n                              transaction ID\\n  next-available-token        The next token ID that has not been allocated.\\n                              Token IDs are allocated sequentially, so all lower\\n                              token IDs have been allocated\\n  node-status                 Get node statuses for a set of peers\\n  object-lifetime-statistics  Dump internal object lifetime statistics to JSON\\n  pending-snark-work          List of snark works in JSON format that are not\\n                              available in the pool yet\\n  pooled-user-commands        Retrieve all the user commands that are pending\\n                              inclusion\\n  reset-trust-status          Reset the trust status associated with an IP\\n                              address\\n  send-rosetta-transactions   Dispatch one or more transactions, provided to\\n                              stdin in rosetta format\\n  set-coinbase-receiver       Set the coinbase receiver\\n  snark-job-list              List of snark jobs in JSON format that are yet to\\n                              be included in the blocks\\n  snark-pool-list             List of snark works in the snark pool in JSON\\n                              format\\n  start-tracing               Start async tracing to\\n                              $config-directory/trace/$pid.trace\\n  status-clear-hist           Clear histograms reported in status\\n  stop-tracing                Stop async tracing\\n  time-offset                 Get the time offset in seconds used by the daemon\\n                              to convert real time into blockchain time\\n  validate-keypair            Validate a public, private keypair\\n  validate-transaction        Validate the signature on one or more\\n                              transactions, provided to stdin in rosetta format\\n  verify-receipt              Verify a receipt of a sent payment\\n  visualization               Visualize data structures special to Mina\\n  vrf                         Commands for vrf evaluations\\n  wrap-key                    Wrap a private key into a private key file\\n  help                        explain a given subcommand (perhaps recursively)\\n```\\n\\n \\n next…\\n\\ndocker run --name mina -d -p 8302:8302 --restart=always --mount \\\"type=bind,source=`pwd`/keys,dst=/keys,readonly\\\" --mount \\\"type=bind,source=`pwd`/.mina-config,dst=/root/.mina-config\\\" -e CODA_PRIVKEY_PASS=\\\"My_V3ry_S3cure_Password\\\" minaprotocol/mina-daemon:1.2.2-feee67c-mainnet daemon --block-producer-key /keys/my-wallet --peer-list-url https://storage.googleapis.com/mina-seed-lists/mainnet_seeds.txt\\nRun docker logs -f mina to follow the logs, and if it crashes save the log output to a file with docker logs mina > mina-log.txt and post the output to the #mentor-nodes channel or attach the full \\\\~/.mina-config/mina.log to a github issue and link the issue in discord.\\n\\nRun docker exec -it mina mina client status to monitor connectivity to the network, you should quickly find at least 10 peers and watch the block height / max observed block height climb.\\n\\nNOTE\\n\\nIf you encounter \\\\[Warn\\\\] Shutdown before Mina instance was created, not saving a visualization when attempting to run your Docker container, increase the resources that the Docker container is allowed to use.\\n\\nChecking connectivity\\nNow that we've started up a node and are running the Mina daemon, open up another shell and run the following command:\\n\\nmina client status\\nNOTE\\n\\nIt may take up to a minute before mina client status connects to the daemon when first starting up. So if you see Error: daemon not running. See mina daemon, just a wait a bit and try again.\\n\\nMost likely we will see a response that include the fields below:\\n\\n...\\nPeers:                                         Total: 4 (...)\\n...\\nSync Status:                                   Bootstrap\\nIf you see Sync Status: Bootstrap, this means that the node is bootstrapping and needs to sync with the rest of the network. You may need to be patient here as this step might take some time for the node to get all the data it needs.\\n\\nAfter a while, your node should connect to more peers and then should move into Sync Status: Catchup, which means we're gathering the most recent blocks and state trying to catch up the the highest block.\\n\\nWhen sync status reaches Synced and the node is connected to 1 or more peers, we will have successfully connected to the network. We will also see a corresponding daemon log once we've synced: \\\\[Info\\\\] Mina daemon is now synced.\\n\\nIf you the Bootstrap state persists for more than an hour, there may be an issue with your port configuration.\\n\\nStepping up your game\\nNow that we have a fully synced node, we can learn about some of the more advanced features of the daemon such as Sending a payment and Staking & Delegating. And if you want to earn more tokens, check out the Foundation Delegation Program.\",\"timestamp\":1638975504,\"title\":\"Generating a Keypair\"},\"digest\":\"7aVYZI6M6YhCldPgvaQxL-8Cyt3IxQxFQmcgza3MhuA\",\"authorship\":{\"contributor\":\"0xe22cbcAA0324DfA1d83cB939239e11C306c9A03f\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"amBt_wohYAdH2f8eLZiUfK6TO18ka0eiE2VlhKy_Z78\\\",\\\"y\\\":\\\"SgtL63YeKkPZ2jOqF07SXB5nvjXiyP2cXFDzht1NSIA\\\"}\",\"signature\":\"GEHN84AAWSzvN36l8YwPzMPR_BM0UXgo-VXIYv57lugPbyllLhLLcA2H2GmYbgwDr6ex3bvC81zPpX_zlWlUNA\",\"signingKeySignature\":\"0x85189da7075d676c0a7629bb286aca46d47a91aeaf831b635c915a2df22b359a33daaf630e6935327953a216f291885badc011d73e16af632d9d13e02fe1fd061c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"amBt_wohYAdH2f8eLZiUfK6TO18ka0eiE2VlhKy_Z78\\\",\\\"y\\\":\\\"SgtL63YeKkPZ2jOqF07SXB5nvjXiyP2cXFDzht1NSIA\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"7aVYZI6M6YhCldPgvaQxL-8Cyt3IxQxFQmcgza3MhuA\"}"