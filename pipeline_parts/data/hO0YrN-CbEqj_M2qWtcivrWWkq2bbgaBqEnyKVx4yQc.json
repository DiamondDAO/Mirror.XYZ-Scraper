"{\"content\":{\"body\":\"## 问题背景\\n\\n工作中，在和其他服务供应商对接时，有时需要使用AES加密方式实现接口的联调。算法逻辑需要自己实现，现把流程整理如下: \\n 另，基于这篇文章 [使用 PyCrypto 进行 AES/ECB/PKCS#5(7) 加密](https://link.zhihu.com/?target=http%3A//likang.me/blog/2013/06/05/python-pycrypto-aes-ecb-pkcs-5)，PKC7填充方式等同于PKC5填充方式。\\n\\n## 安装依赖\\n\\n`pip3 install crypto`\\n\\n## 代码实现\\n\\n包括完整的代码及注解\\n\\n```\\nimport base64\\nfrom Crypto.Cipher import AES\\n\\nclass AESCipher:\\n\\n    def __init__(self, key):\\n        self.key = key[0:16] #只截取16位\\n        self.iv = \\\"\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\" # 16位字符，用来填充缺失内容，可固定值也可随机字符串，具体选择看需求。\\n\\n    def __pad(self, text):\\n        \\\"\\\"\\\"填充方式，加密内容必须为16字节的倍数，若不足则使用self.iv进行填充\\\"\\\"\\\"\\n        text_length = len(text)\\n        amount_to_pad = AES.block_size - (text_length % AES.block_size)\\n        if amount_to_pad == 0:\\n            amount_to_pad = AES.block_size\\n        pad = chr(amount_to_pad)\\n        return text + pad * amount_to_pad\\n\\n    def __unpad(self, text):\\n        pad = ord(text[-1])\\n        return text[:-pad]\\n\\n    def encrypt(self, raw):\\n        \\\"\\\"\\\"加密\\\"\\\"\\\"\\n        raw = self.__pad(raw)\\n        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)\\n        return base64.b64encode(cipher.encrypt(raw))\\n\\n    def decrypt(self, enc):\\n        \\\"\\\"\\\"解密\\\"\\\"\\\"\\n        enc = base64.b64decode(enc)\\n        cipher = AES.new(self.key, AES.MODE_CBC, self.iv )\\n        return self.__unpad(cipher.decrypt(enc).decode(\\\"utf-8\\\"))\\n\\n\\nif __name__ == '__main__':\\n    e = AESCipher('8ymWLWJzYA1MvLF8')\\n    secret_data = \\\"6860795567181583<REQDATA></REQDATA>242BB99CE386F2B1EA19CCCF606D20E2\\\"\\n    enc_str = e.encrypt(secret_data)\\n    print('enc_str: ' + enc_str.decode())\\n    dec_str = e.decrypt(enc_str)\\n    print('dec str: ' + dec_str)\\n输出:\\n>>> enc_str: gO80A2YMTzkYTzSe6MDjwYLq2X3Du6WXP5CEj1qdaX7b39Egp1Dxj+CGs+PqWkuRkKhPNTt8BPQZfRpi4zj+1UxXjYkO51sRLwgARTlZDKY=\\n>>> dec str: 6860795567181583<REQDATA></REQDATA>242BB99CE386F2B1EA19CCCF606D20E2\\n```\",\"timestamp\":1635362412,\"title\":\"AES Encrypt\"},\"digest\":\"ZA3cLs3z8CV9ceON817AgmRUB7ob8TRImliaamyd_7k\",\"authorship\":{\"contributor\":\"0xa35b1A0A77cB41E27a598d783362303395B89f9E\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"9aH9p-0uk-JbhUT0eC0ed_HX9wV2NLhLTQxUnnoj5UE\\\",\\\"y\\\":\\\"s795MCuEJnlVJbw4siTrfgNPZtrjJmrqOdVgyqTXTos\\\"}\",\"signature\":\"ubygHQNZciWleKNXFTAduNqf_gJPghfoucGO0-NiNuJb9i_QfmPczjIJXqDVXvUfUIqHG1tB-ATTjljKfhDZNQ\",\"signingKeySignature\":\"0x44b11c5fcab39fa41774eb81a670c793f6197b1cc78ad3baea2144fc9c3280ca1b7c73b54f88192e3bf78db04c6ade1e4d35d73dff14e6927cdc9110dbbfcd781b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"9aH9p-0uk-JbhUT0eC0ed_HX9wV2NLhLTQxUnnoj5UE\\\",\\\"y\\\":\\\"s795MCuEJnlVJbw4siTrfgNPZtrjJmrqOdVgyqTXTos\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"ZA3cLs3z8CV9ceON817AgmRUB7ob8TRImliaamyd_7k\"}"