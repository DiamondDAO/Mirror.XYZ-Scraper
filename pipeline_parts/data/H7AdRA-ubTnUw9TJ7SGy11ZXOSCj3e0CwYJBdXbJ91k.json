"{\"content\":{\"body\":\"## [](#introduction)Introduction\\n\\nThis article assumes that you have a basic understanding and fundamentals of PHP and the Laravel framework.\\\\\\nBefore we get into the topic we first must understand what is Repository pattern:\\n\\n> The Repository pattern. Repositories are classes or components that encapsulate the logic required to access data sources. They centralize common data access functionality, providing better maintainability and decoupling the infrastructure or technology used to access databases from the domain model layer.\\n\\nSource: [https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design#:\\\\~:text=of%20Work%20patterns.-,The%20Repository%20pattern,from%20the%20domain%20model%20layer](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design#:%7E:text=of%20Work%20patterns.-,The%20Repository%20pattern,from%20the%20domain%20model%20layer).\\n\\n## [](#create-a-fresh-laravel%C2%A0project)Create a fresh Laravel project\\n\\nNow open up a terminal and install a fresh Laravel project,\\\\\\n\\n\\n    composer create-project laravel/laravel laravel-repository-pattern\\n\\n\\n\\nThen open this in your code editor (VS Code).\\n\\nI am not going to go through the installation process since this article does not aim to teach about installing a Laravel project. Go to the official docs for reference instead, <https://laravel.com/docs/8.x#installation-via-composer>\\n\\n## [](#creating-a-base-interface-and-base-repository-class)Creating a base interface and base repository class\\n\\nCreate a directory inside the app and name it as Repository and inside it create another directory Eloquent then create a file named `BaseRepository.php` inside Eloquent directory and create an interface and name it `EloquentRepositoryInterface.php` inside Repository . If you did it correctly you will have the following file structure.\\\\\\n\\n\\n    - app\\n      - Repository\\n        - Eloquent\\n          - BaseRepository.php\\n        - EloquentRepositoryInterface.php\\n\\n\\n\\nThen inside the interface EloquentRepositoryInterface.php , write an interface that will contain all the common methods that are used when we are accessing our database to retrieve, store, and remove data. (CRUD)\\n\\nWe also want to set standards when creating our repository interface, because we want the method names to be self-describing and that we should know what we get when we use the method. We can use the following verbs: 'find', 'get', 'remove', 'update' and etc that simply describes what it does.\\n\\nThe interface does not care about the implementation details, we only define the method names, what arguments are being passed into it and what we expect it returns. We can simply do that by type hinting it. This what makes it beautiful because whenever we had to change a Data Provider (I am talking about Eloquent ORM, DB, or any 3rd party APIs if there's any), we only have to create another class specifically for it and we do not need to replace code.\\n\\n## [](#defining-methods-inside-the-eloquentrepositoryinterface)Defining methods inside the EloquentRepositoryInterface\\n\\nNow let us define the methods that we will be using throughout our entire application in this interface.\\\\\\nHere is an example,\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--IcfYTEA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kktlg68m2e3r0hwr6925.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--IcfYTEA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kktlg68m2e3r0hwr6925.png)\\n\\nAs you may have noticed the method names are verbose and contains the verbs we just described. Making method names verbose actually makes everything easier.\\n\\n## [](#implementing-the-eloquentrepositoryinterface-inside-the-baserepository-class)Implementing the EloquentRepositoryInterface inside the BaseRepository class\\n\\nInside the `BaseRepository` we created a protected property named as $model and it will receive an instance of class Model. In our constructor we inject the Model class and assign the instance into the $model property so it will be available to all methods. These are the important part of our `BaseRepository` class since any new repositories will be extending to this base repository and they won't have to rewrite what we just wrote regarding the implementation details that we interfaced against the `EloquentRepositoryInterface`.\\n\\nHere is an example,\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--g4JhcNb8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgihckmhr5kxr8xyoskb.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--g4JhcNb8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgihckmhr5kxr8xyoskb.png)\\n\\n## [](#binding-the-interface-and-the-repository-class-in-repositoryserviceprovider-class)Binding the interface and the repository class in RepositoryServiceProvider class\\n\\nTo your terminal and execute this command to create the class,\\\\\\n\\n\\n    php artisan make:provider RepositoryServiceProvider\\n\\n\\n\\nThen inside that class, inside `register()` method is here me bind the `EloquentRepositoryInterface.php` and the actual repository, in this case it it the `BaseRepository.php` that we created.\\\\\\nMake sure to import these files into the `RepositoryServiceProvider` class.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--\\\\_1bPJ5NR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsqocemz0ifwjzk7hd5v.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--\\\\_1bPJ5NR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsqocemz0ifwjzk7hd5v.png)\\n\\nAnd now to make these changes available in our entire application, we register the `RepositoryServiceProvider` class inside the `AppServiceProvider`\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--wVHxwrYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxjnxj7cgph4q7q8c7zj.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--wVHxwrYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxjnxj7cgph4q7q8c7zj.png)\\n\\nThen execute this composer command in your terminal to read the bindings,\\\\\\n\\n\\n    composer dump-autoload\\n\\n\\n\\nIf it doesn't work you must delete the cache manually if you are having problems. These files should be deleted specifically as they will get auto-generated by Laravel whenever we run a caching command. And normally these files are being ignored by git.\\\\\\n\\n\\n    - app\\n      - bootstrap\\n        - cache (Delete these files below)\\n          - config.php\\n          - packages.php\\n          - services.php\\n\\n\\n\\n## [](#adding-a-userrepository)Adding a UserRepository\\n\\nNow that we have a our BaseRepository defined, when we create another module or feature it should give us a boost in development time since we eliminated it by applying abstraction using the Repository Pattern.\\n\\nNow just create another interface and a repository class.\\\\\\nIn your terminal execute these commands to create the files,\\\\\\n\\n\\n    touch app/Repository/UserRepositoryInterface.php\\n    touch app/Repository/Eloquent/UserRepository.php\\n\\n\\n\\nNow inside `UserRepositoryInterface` we only have to define the interface and extend on to the `EloquentRepositoryInterface`\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s---nAeUd5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj5qh1e4zxfu0hege3b7.png)](https://res.cloudinary.com/practicaldev/image/fetch/s---nAeUd5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj5qh1e4zxfu0hege3b7.png)\\n\\nAnd then inside the `UserRepository` class, we still implement the `UserRepositoryInterface` that we just created and extend `BaseRepository` class, by doing this we are applying Inheritance, we inherit all the methods that we just defined from our `BaseRepository` class and we will be able to access to the fields inside `BaseRepository` class so we do not have to rewrite everything. One thing we only want to override is the first parameter in our constructor, from the base repository it is the Model class, but since it is a user repository then we should replace it with the User model.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--PDz4szmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/huplf6ced8vhe3dq3ii9.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--PDz4szmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/huplf6ced8vhe3dq3ii9.png)\\n\\nAnd now inside our user repository also contains the methods that we implemented inside the base repository.\\n\\nAnd now bind the UserRepositoryInterface with the UserRepository inside the RepositoryServiceProvider class so our application will recognize this new repository that we created in the entire application.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s---jonewb\\\\_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgnfg25epej6u2ucwo5t.png)](https://res.cloudinary.com/practicaldev/image/fetch/s---jonewb\\\\_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgnfg25epej6u2ucwo5t.png)\\n\\nThen execute the command again,\\\\\\n\\n\\n    composer dump-autoload\\n\\n\\n\\nI typically execute this command every time I add a new repository, if I don't then Laravel does not know or recognize about this new repository that we just created.\\n\\n## [](#creating-a-usercontroller-and-applying-dependency-injection-to-use-userrepository)Creating a UserController and applying Dependency Injection to use UserRepository\\n\\nIn your terminal execute this command,\\\\\\n\\n\\n    php artisan make:controller UserController\\n\\n\\n\\nand define a route inside `routes/api.php`,\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--APCJGpsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9hlbz4592q874mivdww.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--APCJGpsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9hlbz4592q874mivdww.png)\\n\\nAnd now inside our `UserController` let us define method index() but before that in our constructor we want to inject the `UserRepository` into the `Contoller` so that we will have all the methods available at our disposal. In this case the index() method in the Controller is commonly known to return a list of resources, so let's make that as is.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--CSp7rtpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy03wq4avouxcm0myo3q.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--CSp7rtpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy03wq4avouxcm0myo3q.png)\\n\\nThe Repository Pattern also allows us to write less code inside our Controllers and that makes it even better rather having a giant code in the Controller which isn't what we want if we are aiming for better maintainability and readability. Let's keep it that way, clean controllers.\\n\\nIn case you don't agree with me because I am only showing a simple example and it's for retrieving all users only, then for creating a new user and sometimes we have to put some logic into it, maybe some if-else statements, that actually is considered a code smell and we don't want to do that. And also what about if you have to use the same logic in a different Controller, without creating a repository you will have to copy and paste these code. So when we are using the Repository Pattern we just inject it to the class that we need it for without having to rewrite logic.\\n\\nSo let us test that the route that we created by accessing this link in your browser `http://localhost:8000/api/users`\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--RnYvSA7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm2qs33ntzcd1xbcszgs.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--RnYvSA7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm2qs33ntzcd1xbcszgs.png)\\n\\nWe should see an empty set. That means everything we did worked and it makes sense because we haven't created any users yet.\\n\\nSo let us create users using the factory, open to your terminal and go to tinker CLI,\\\\\\n\\n\\n    php artisan tinker\\n\\n\\n\\nThen execute this command to create 10 users\\\\\\n\\n\\n    User::factory(10)->create()\\n\\n\\n\\nThen go back to your browser and hit refresh and you should see 10 users being returned from the API.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--Bl11xlfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nljem0ne2a5l7rql35q.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--Bl11xlfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nljem0ne2a5l7rql35q.png)\\n\\nAnd there we have it!\\n\\n## [](#conclusion)Conclusion\\n\\nIn leveraging on this design pattern we took some time to set it up in exchange for better readability and maintainability of our codebase. By doing abstraction and encapsulation we eliminate code duplications as we created a `BaseRepository` that shares all the common methods in every new repository that uses Eloquent ORM.\\n\\nSo for any small changes that we will make in the future, we don't have to bother updating every single file because we extended the common methods and by apply a single change saves us ample time and reduces cognitive load and that makes us happy.\\n\\nOn the other hand, this will make our code testable and we can easily scale it. But this isn't a silver bullet unfortunately, we might have sacrificed a little bit of performance as having these repositories are at the center between our data provider and our Controllers or any class that we might need to get data from.\\n\\nIf you aren't using Repository Pattern yet, make sure to try it out yourself. Thank you for taking the time to read and I hope this helps you out in getting started with Repository Pattern in Laravel.\\n\\nFull source code: <https://github.com/carlomigueldy/laravel-repository-pattern>\\n\",\"timestamp\":1636676736,\"title\":\"Getting Started with Repository Pattern in Laravel using Inheritance and Dependency Injection\"},\"digest\":\"gRbj2R30fKHH_9VE3BItOxu63AJnatOlR9BQRgCt77g\",\"authorship\":{\"contributor\":\"0x3E8c686F499C877D8f4aFB1215b6f0935796b986\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XNAfCibxrmGjSr-VHADLIVoKcpjQ6AvgUiRVqATl37k\\\",\\\"y\\\":\\\"3RuY7Uw61mZNEnJyyzr7ObM928gt-QoWvGAdLDb2gy4\\\"}\",\"signature\":\"6KLaK4OGy6txG9kADnkugd_uwD7yXq-WMCbStJLmX5cbeyyKDGoOxCMizlVhYtZSgq0RMshOqCbpiqiTpgo0AQ\",\"signingKeySignature\":\"0xc823d2ab2ee5864fc5495382efb960b4461c3fb598b3be4e5e068c6312ab60ce014c7378c1f02beed8fce37236dc1e3eb8dd28a6f911b33ec4172a1fa8b17f101b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XNAfCibxrmGjSr-VHADLIVoKcpjQ6AvgUiRVqATl37k\\\",\\\"y\\\":\\\"3RuY7Uw61mZNEnJyyzr7ObM928gt-QoWvGAdLDb2gy4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"gRbj2R30fKHH_9VE3BItOxu63AJnatOlR9BQRgCt77g\"}"