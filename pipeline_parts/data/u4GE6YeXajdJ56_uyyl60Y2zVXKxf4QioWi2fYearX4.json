"{\"content\":{\"body\":\"**定义 web3 堆栈**\\n\\n\\n在基于 web3 构建的下一部分中，Edge 和 Node 开发人员关系工程师 Nader Dabit 扩展了 web3 堆栈以及开发人员如何概念化基于 web3 构建的各个方面。\\n\\n在成为传统的全栈开发人员大约 10 年后，我于 2021 年 4 月过渡到 web3。 在深入研究所有这些新技术和想法时，我想知道的第一件事是“什么是 web3 堆栈？”。\\n\\n在构建传统的 Web 或移动应用程序时，我经常依靠少量构建块来完成工作。\\n1、API / 应用服务器（REST 或 GraphQL）\\n2、身份验证层（托管或手动）\\n3、数据库\\n4、客户端框架、平台和库\\n5、文件存储\\n\\n使用这些核心组件，我可以构建我想要的大多数类型的应用程序，或者至少可以完成大部分工作。 那么这在 web3 中是什么样子的呢？\\n\\n事实证明，这个问题的答案并不那么简单，因为：\\n\\n1、范式在很多方面都完全不同\\n2、web3 的工具、技术和生态系统不如 web2 成熟\\n\\n我也更难理解如何启动、运行和构建 web3 应用程序，因为我处理这些问题的方式与我在 web2 世界中的方式相同。\\n\\n在过去 8 个月左右的时间里工作、研究、实验和构建东西之后，我想分享我所学到的东西。\\n\\n**什么是web3？**\\n\\n\\n在定义 web3 堆栈之前，让我们尝试定义 web3。 有无数的定义取决于你问谁，但对我来说，我发现这个定义点在：\\n\\nWeb3 是支持完全去中心化应用程序的协议栈。\\n\\n有了这个去中心化的技术栈，我们就可以开始构建去中心化的应用程序，这些应用程序有自己的固定含义和特征。\\n\\nweb3 启用的一些特性是：\\n·去中心化的网络基础设施\\n·所有权（数据和平台的）\\n·原生数字支付\\n·自主身份\\n·分布式、去信任和健壮的基础设施\\n·开放的、公共的、可组合的后端\\n\\n让我们开始深入研究 web3 堆栈，分为以下几类：\\n·区块链\\n·区块链开发环境\\n·文件存储\\n·P2P 数据库\\n·API（索引和查询）\\n·身份\\n·客户端（框架和库）\\n·其他协议\\n\\n**区块链**\\n您可以选择在无数区块链上进行构建。 没有一个是“最好的”，您应该考虑它们之间的各种权衡。\\n在学习新事物时，对我来说通常很重要的一件事是将帕累托原则应用于我正在学习的东西的想法。 即，从这些时间和精力中获得最大收益的最有效方法是什么。 遵循这个想法，我可以获得最大的牵引力和动力，同时在最短的时间内学习新事物。\\n在区块链世界中，学习 Solidity 和 EVM（或以太坊虚拟机）可能是作为区块链开发人员起步的最佳选择。 使用此技能集（和技术堆栈），您不仅可以为以太坊构建，还可以为其他以太坊第 2 层、侧链，甚至其他区块链（如 Avalanche、Fantom 和 Celo）构建。\\n话虽如此，Rust 开始在区块链世界中变得越来越流行，Solana、NEAR、Polkadot 等都拥有一流的 Rust 支持。 学习也可能不会出错，但是对于初学者来说，如果今天有人问我，我会说 Solidity 仍然是更好的选择。\\n除了这些建议之外，这里还有一个不完整的区块链样本，这些区块链结合了技术、效用、社区、动力和未来的可行性：\\n·以太坊 - 原创智能合约平台\\n·ZK 汇总：ZKSync、Starknet、Hermez - 高吞吐量以太坊第 2 层，但不与本机 EVM 兼容\\n·Arbitrum & Optimism - 以太坊第 2 层，EVM 兼容\\n·Polygon - 以太坊侧链\\n·Solana - 高吞吐量、廉价交易、快速出块时间，但比 EVM (Rust) 更难学习\\n·NEAR - 第 1 层区块链，可以用 Rust 或 Assemblyscript 编写智能合约\\n·Cosmos - 互操作区块链的生态系统\\n·Polkadot - 基于区块链的计算平台，使建立在其之上的区块链能够在它们之间执行交易，创建一个互连的区块链互联网\\n·Fantom - EVM 兼容层 1\\n·Avalanche - EVM 兼容第 1 层\\n·Celo - EVM 兼容层 1，旨在让任何拥有智能手机的人都可以轻松发送、接收和存储加密\\n·Tezos - 非 EVM 兼容层 1，很多 NFT 项目都在使用它\\n\\n**区块链开发环境**\\n对于 EVM 开发，有几个很好的开发环境可用：\\n·Hardhat是一种较新的选择，但越来越受欢迎。 他们的文档很棒，工具和开发人员体验也很完美，这也是我个人一直用来构建 dapp 的东西。\\n·Truffle 是一套用于在 EVM 上构建和开发应用程序的工具。 它很成熟，经过实战测试，并且有据可查。 它已经存在了一段时间，许多开发人员都在使用它。\\n·Foundry 是来自 Paradigm 的一个新的 Solidity 开发环境，它显示了很多前景。 关键的突出之处是能够在 Solidity 中编写测试、支持模糊测试和速度（它是用 Rust 编写的）。\\n\\n对于 Solana 开发，Anchor 正迅速成为新开发者的切入点。 它提供了一个 CLI，用于搭建、构建和测试 Solana 程序以及可用于构建前端的客户端库。 它还包括一个 DSL，它抽象了开发人员在开始 Solana 和 Rust 开发时经常遇到的许多复杂性。\\n\\n**文件存储**\\n我们在 web3 中将图像、视频和其他文件存储在哪里？ 在链上存储任何大的东西通常都非常昂贵，所以我们可能不想将它们存储在那里。\\n相反，我们可以使用少数文件存储协议之一：\\n·IPFS——点对点文件系统协议\\n·Arweave - 允许您永久存储数据，只需支付一笔交易费。\\n·Filecoin - 来自构建 IPFS 的同一团队 Protocol Labs，它是一种旨在提供持久数据存储系统的协议。 开发人员可以通过多种方式在 Filecoin 上进行构建，包括非常好的 web3.storage。\\n·Skynet - 我还没有在生产中使用它，但已经尝试过了，它似乎工作得很好。 这里的 API 看起来很棒。 我有一些问题，例如数据保留多长时间，以及天网与其他协议的互操作性。\\n\\n**P2P 数据库**\\n除了文件存储和链上存储之外，您可能还需要在链下存储数据。 您可以使用这些类型的解决方案，类似于在传统技术堆栈中使用数据库的方式，但它们在分散网络上的 n 个节点之间复制，因此更可靠（至少在理论上）。\\n\\n就成熟度而言，我的看法是，链下存储解决方案的生态系统尚未达到构建一些开发人员可能想要的更高级用例的需要。 这里的一些挑战是实时数据、冲突检测和冲突解决、编写授权、文档和一般开发人员经验。\\n\\n在我们拥有能够支持任何类型应用程序的完全去中心化的协议栈之前，将链下数据解决方案与区块链协议集成是我们需要跨越的最后一个大障碍之一。\\n\\n**API（索引和查询）**\\n与传统技术堆栈中的数据库相比，我们与区块链交互并在其上构建的方式存在很多差异。 使用区块链，数据不会以一种可以高效或轻松地直接从其他应用程序或前端使用的格式存储。\\n区块链针对写操作进行了优化。 你经常听到围绕每秒交易、出块时间和交易成本的创新。 随着时间的推移，区块链数据以块的形式写入，除了基本的读取操作之外，其他任何操作都是不可能的。\\n\\n在大多数应用程序中，您需要诸如关系数据、排序、过滤、全文搜索、分页和许多其他类型的查询功能等功能。 为此，需要对数据进行索引和组织，以实现高效检索。\\n\\n传统上，这是数据库在集中式技术堆栈中所做的工作，但在 web3 堆栈中缺少索引层。\\n\\nGraph 是一种用于索引和查询区块链数据的协议，它使这个过程变得更加容易，并为此提供了一个分散的解决方案。 任何人都可以构建和发布开放的 GraphQL API，称为子图，使区块链数据易于查询。\\n\\n**身份**\\n身份是 web3 中完全不同的范式。 在 web2 中，身份验证几乎总是基于用户的个人信息。 此信息通常通过表单或 OAuth 提供程序收集，要求用户交出以换取对应用程序的访问权限。\\n在 web3 中，身份完全围绕着钱包和公钥密码学的思想展开。\\n\\n虽然“钱包”这个名字起到了它的作用，但我发现 web3 的新手发现这个术语令人困惑，因为它与身份验证和身份相关。 我希望在未来我们可以找到其他方式来表达钱包是什么，因为它结合了金融的各个方面，也结合了身份和声誉。\\n\\n作为开发人员，您需要了解如何以各种方式访问用户的钱包和地址并与之交互。\\n\\n在一个非常基本的层面上（也是一个非常普遍的要求），你可能想要请求访问用户的钱包。 为此，您通常可以在窗口上下文（Web 浏览器）中访问用户的钱包，或者使用 WalletConnect 或 Solana 的 Wallet Adapter 之类的工具。\\n\\n例如，如果他们有可用的以太坊钱包，您就可以访问 window.ethereum。 Solana (window.solana)、Arweave (window.arweaveWallet) 和其他一些产品也是如此。 WalletConnect 适用于移动网络和 React Native，因为它允许用户直接从设备授权使用他们的移动钱包。\\n\\n如果您想自己处理身份验证，您可以允许用户签署交易，然后在某处对其进行解码以对用户进行身份验证，但这通常需要服务器。 这是使用 EVM 钱包的示例，以及如何使用 Solana / Phantom 执行此操作的示例。\\n\\n**客户端**\\n\\n就 JavaScript 框架而言，您真的可以使用任何您想要的东西进行构建，因为客户端区块链 SDK 大多与框架无关。 话虽如此，绝大多数项目和示例都是在 React 中构建的。 还有一些像 Solana Wallet Adapter 这样的库为 React 提供了额外的实用程序，所以我想说学习或熟悉 React 可能是一个明智的举动。\\n\\n对于以太坊中的客户端 SDK，有 web3.js 和 ethers.js。 对我来说 Ethers 更平易近人并且有更好的文档，尽管 web3.js 已经存在的时间更长了。\\n\\n在 Solana 中，您可能会使用 @solana/web3.js 和/或 Anchor。 我发现 Anchor 客户端库是我构建 Solana 程序的首选，因为我无论如何都在使用 Anchor 框架，而且我发现它比 @solana/web3.js 更容易理解。\\n\\n**其他协议**\\nRadicle 是一个基于 Git 的去中心化代码协作协议。 它可以被认为是 GitHub 的去中心化版本。\\n\\nLivepeer 是一个去中心化的视频流网络。 它已经成熟并被广泛使用，网络上有超过 70,000 个 GPU。\\n\\nChainlink 是一个 Oracle，它允许访问真实世界的数据和链下计算，同时保持区块链技术固有的安全性和可靠性保证。\",\"timestamp\":1640327458,\"title\":\"深度好文：Graph大佬解读什么是真正的Web3.0，以及区块链中的应用\"},\"digest\":\"D-Fa3rAaskVgVgcG1x_qwV_eW1WeUCgxttucrPLFMo0\",\"authorship\":{\"contributor\":\"0x785120399F14a5D913E0E4E8d580110514e94F29\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ifbh1DiMlVaoa5Njptr5HpI3M5Hv-GlzHOxiFd85Kwk\\\",\\\"y\\\":\\\"MKL1mB-ja7FxGkq6uVcR0hJVg7C6DEG1ZNkVt2I7GQU\\\"}\",\"signature\":\"dMpLbDuuvDrS_9lndd8_OGO0MiKalQsRwbzzG7BDvG1TjlQCnq_VSeNpgaCGoALm9dkrr850HU1E2976i8FIAw\",\"signingKeySignature\":\"0x391500f2c3e266e9ce1961025c75b8a57d67ee4967c2a614b61f1f9eb1ba2e495e04f69841ea86836f9d4a6a756cdc2825defe1101bf491d195aabe6d48328321b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ifbh1DiMlVaoa5Njptr5HpI3M5Hv-GlzHOxiFd85Kwk\\\",\\\"y\\\":\\\"MKL1mB-ja7FxGkq6uVcR0hJVg7C6DEG1ZNkVt2I7GQU\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"D-Fa3rAaskVgVgcG1x_qwV_eW1WeUCgxttucrPLFMo0\"}"