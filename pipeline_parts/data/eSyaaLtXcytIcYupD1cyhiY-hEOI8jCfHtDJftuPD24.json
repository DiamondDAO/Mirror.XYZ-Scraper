"{\"content\":{\"body\":\"## 前言与版本\\n\\n笔者最近在结合[以太坊黄皮书](https://ethereum.github.io/yellowpaper/paper.pdf)读[以太坊源码](https://github.com/ethereum/go-ethereum)，结合自己的理解解析下黄皮书内的公式，与大家共同学习进步，若大家在阅读以太坊黄皮书时，对公式产生理解上的困惑，可以参阅本文一起看。文章基于当前（2022/1/10）的黄皮书，版本号为 `BERLIN VERSION fabef25` ，若有不准确之处，欢迎指出。由于该黄皮书内除附录外有 183 个公式，为了让文章篇幅不过长，该解析会由三部分组成一个系列，每个系列解析约 60 个公式，本文为下篇。\\n\\n## 公式解析\\n\\n![(130)](https://static.cnodejs.org/FveR5j3SqZob3TZ4Iob5hPpx1FrM)\\n\\n* 此处 Ξ 为 EVM 指令执行函数。\\n* σ 为执行前世界状态。\\n* σ' 为执行后世界状态。\\n* g 为执行前 Gas 剩余。\\n* g' 为执行后 Gas 剩余。\\n* I 所包含的字段参阅公式 (91) - (99)。\\n* A' 为执行后子状态。\\n* o 为执行输出内容（output）。\\n\\n公式 (130) 给出了 EVM 指令执行函数的输入输出定义。\\n\\n![(144)](https://static.cnodejs.org/FownwvEpOFlOFfqRxNl-AXXlTA1u)\\n\\n* u 为机器状态（machine state），包含：\\n  * ug： 剩余可用 Gas 。\\n  * upc：当前执行程序计数器。\\n  * um：内存的内容。\\n  * ui：内存中激活的字节数。\\n  * us：栈的内容。\\n\\n公式 (144) 定义了当前待执行指令 w ，即为待执行指令集位于索引 upc 中的指令，或者为 STOP 。\\n\\n![(145) (146)](https://static.cnodejs.org/FtlyqG_7xo7S8q831xzQlrEvi39v)\\n\\n* Z 为异常检查函数。\\n\\n公式 (146) 定义了 W 函数判断，当 w 的指令在 CREATE, CREATE2, SSTORE, SELFDESTRUCT 之一，在 LOG0 - LOG4 之一，或是 CALL 且对应栈索引上的数据不为空时，返回真。 \\n\\n公式 (145) 定义异常状态的可能情况：Gas 费不足、非法指令（指令 w 的 δw 未定义，详细后文会阐述）、栈中参数不足、JUMP\\\\\\\\JUMPI 的目的地非法、新的栈大小超过 1024、企图在 static 调用中修改状态。\\n\\n![(150)](https://static.cnodejs.org/FmegAAxnXGYhVeo2OZjRMumEBJ32)\\n\\n公式 (150) 定义了正常停止函数 H 。当指令会 RETURN 或 REVERT 时，会返回一个特殊函数 HRETURN 。若是 STOP 或 SELFDESTRUCT，则返回空序列，或者则返回空集合（表示返回不正常）。\\n\\n![(131) - (143)](https://static.cnodejs.org/FjYf1ubJUl5kntaZClMF7Lrcbayp)\\n\\n公式 (140) 定义了 o 为正常停止函数 H 对当前机器状态和入参 I 的输出。\\n公式 (141) 定义了 · 操作会将其之后的项放入集合中。\\n公式 (142) (143) 表示机器状态的更新会伴随 Gas 的消耗。\\n公式 (139) 定义了指令执行函数 X ，它会被递归调用（公式中第 4 种情况），除非检测到异常（通过异常检查函数 Z 检查）、操作为 REVERT 或正常停止（通过正常停止函数 H 检查）。\\n公式 (133) - (138) 定义了机器状态 u 的初始状态。\\n公式 (131) - (132) 表示 Ξ EVM 执行函数的具体逻辑为对入参进行 X 函数（即公式(139)）的调用。\\n\\n![(149)](https://static.cnodejs.org/Fk0EOJXgMFX0VHIEbBM2gYb_0dLw)\\n\\n公式 (149) 定义了 N 函数，接受当前指令索引以及指令，返回下一个有效指令在代码中的位置。会区分给定的指定入参是否为 PUSH1， PUSH2 。\\n\\n![(147) (148)](https://static.cnodejs.org/FrKcyTbzjup-3lmZ11pgKHBDW0nQ)\\n\\n公式 (147) 的 D 函数返回正在运行的代码所给定的有效跳转地址集合。如果位置越界，则返回空集合。如果指令为 JUMPDSET ，则会递归调用 N 函数保存到一个位置集合，否则直接调用 N 函数返回下一个位置。\\n\\n![(151) - (154)](https://static.cnodejs.org/FlA9FAgeXMmcbQlG-4Yl5vjsGeCI)\\n\\n公式 (151) - (154) 描述了指令的栈执行模型，栈变化大小由入栈指令个数减去出栈指令个数（公式(152)）。公式 (153) 表示栈是低位索引（lower-indexed）的，即栈顶索引为 0 。公式 (154) 则表示在指令从索引 0 开始往栈内推入后，会从栈顶开始一条条执行指令，索引也会逐渐变小。\\n\\n![(155) (156)](https://static.cnodejs.org/FiGTF-KFuwbqYXnHGACqwncyEpe5)\\n\\n公式 (155) 表示，随着不同计算的执行，ug 会被相应的消耗。公式 (156) 则表示，upc 会根据是否是 JUMP/JUMPI 来判断，或者是调用公式 (149) 定义的 N 函数。\\n\\n![(157) - (160)](https://static.cnodejs.org/Fize5uRgR7rJfRml_CIbi9_4Hkx3)\\n\\n公式 (157) - (160) 则表示，假定在执行中，机器状态内的，内存（m, i），子状态（A）和世界状态（σ）不会改变。\\n\\n![(161) - (162)](https://static.cnodejs.org/FkEEmLra4qyLx2S_kWMNkb9q2IHO)\\n\\n* Bt 为链上的总难度。\\n* Bd 为当前区块难度。\\n\\n公式 (162) 定义了 B' 为当前区块的父区块。公式 (161) 则表达了链上的总难度是累计的。\\n\\n![(165)](https://static.cnodejs.org/FihKS12LWxG9A8oDDEr_ZH0Tq-4e)\\n\\n公式 (165) 定义了如何判断两个区块是否是兄妹（sibling）：即两个区块的父区块相同，两个区块自身是不同区块，相互不为叔块。\\n\\n![(164)](https://static.cnodejs.org/FlfhkI2XQaOoSd31eh0Lr4IE5kgr)\\n\\n公式 (164) 定义了如果判断两个区块是否是亲属（kin）：如果 n 代之内是兄妹（sibling），则为亲属。\\n\\n![(163)](https://static.cnodejs.org/FiszkS52UMKqrRog1XYrXXIqgBZO)\\n\\n* V 为区块头验证函数，参阅公式 (52) 。\\n\\n公式 (163) 表示，当前区块最多可以引用两个叔块，叔块都验证有效，且叔块都与当前区块在 6 代以内。\\n\\n![(164)](https://static.cnodejs.org/FsjtG-Zbphrhp38gt4awXHD0tpcc)\\n\\n公式 (164) 表示，区块头中记录的总累计 Gas 使用量，必须为区块中最后一个区块执行后的累计 Gas 使用量相同。\\n\\n![(165) - (171)](https://static.cnodejs.org/FvaPUhfTKoUFJ1wIpKCBKQUzUkWl)\\n\\n* Rblock 为当前挖出一个区块所能获得的奖励。\\n\\n公式 (171) 定义了当初挖出这个叔块的矿工的收益，从公式可以看出，该叔块离当前区块越亲，则奖励越高，并且会把奖励加入到账户状态中（公式(170)），前提是收益账户不是空账户（公式(169)）。公式 (168) 定义了挖出当前区块的矿工收益，除了固定的挖出区块所得收益之外，也与其引用的叔块的数量相关。公式 (167) 则将上述这些行为，统一定义为区块奖励函数 Ω 。\\n\\n![(172)](https://static.cnodejs.org/Fjr9z1Gx5b3-szrRakDW-B5N3IQg)\\n\\n公式 (172) 定义了不同以太坊版本中，挖出区块的固定收益。\\n\\n![(173)](https://static.cnodejs.org/FsLSOeTWiB7yull8RGYT7OcfCx_A)\\n\\n* LS 为世界状态函数，具体定义参阅公式 (10) 。\\n\\n公式 (173) 定义了函数 Γ ，映射区块 B 至它的初始世界状态。若区块 B 没有父区块（即它就是创世区块），那么为创世状态。否则就是它的初始世界状态就是其父区块的 storageRoot 。\\n\\n![(182)](https://static.cnodejs.org/Fl5cFc0eYiUm3Vj7FOZHFcoEzoBp)\\n\\n公式 (182) 定义了区块状态转换函数 Π ，定义是从最新的世界状态，再加上接收过 Ω 函数奖励后的区块的状态。\\n\\n![(174) - (177)](https://static.cnodejs.org/FsFhUzX_3esTru1VtQP26F0jW8AH)\\n\\n公式 (174) - (177) 定义了区块状态转换函数 Φ ：首先更新当前区块的 storageRoot 为父区块的世界加上区块中所有交易对状态的改变（公式(177)）；将矿工挖矿算出的最终结果记录在区块的 mixHash 中（公式(176)）；更新区块的 nonce （公式(175)），且最大值由区块的 difficulty 限定。\\n\\n![(179)](https://static.cnodejs.org/FkrysqazY0Hjl8BeJtzZMhBB2wUf)\\n\\n* Υg 为区块交易 Gas 花销状态计算函数。\\n\\n公式 （179) 表达了区块的 Gas 花销，会随着一个个交易的处理而累积。\\n\\n![(180)](https://static.cnodejs.org/FjcCZGvMpmN56bnkNSq5lybHNrO2)\\n\\n* Υl 为区块交易日志状态计算函数。\\n\\n公式 （180) 表达了区块的日志，会随着一个个交易的处理而累积。\\n\\n![(181)](https://static.cnodejs.org/FnXFJzwhSY7MADe1dqCwqwIZelaM)\\n\\n* Υz 为区块交易状态码计算函数。\\n\\n公式 （181) 表达了区块的状态码，会随着一个个交易的处理而更新。\\n\\n![(178)](https://static.cnodejs.org/FvI2qy_G8rjP9PRLllcK70w-1Dq5)\\n\\n* Υ 为区块交易整体状态计算函数。\\n\\n公式 (178) 是公式 (179) - (181) 定义了 σ\\\\[n\\\\] 为基于区块内的第 N 个交易后所产生的状态。表示区块状态会从区块的初始状态开始，通过一个个交易来累积更新状态。\\n\\n![(183)](https://static.cnodejs.org/Fp-cgeihi23ZAbMUpP0Lf7BGrWNl)\\n\\n公式 (183) 描述了工作量证明函数 PoW ，接受三个参数，第一个为不包含 nonce 和 mixHash 的新区块头状态，第二个参数为当前区块头 nonce，第三个参数为当前 DAG （用来计算 mixHash 的大型数据集合），输出 mixHash 和 nonce 。nonce 的最大值由区块的 difficulty 限定。\",\"timestamp\":1642130418,\"title\":\"以太坊黄皮书公式解析（下）\"},\"digest\":\"G8ISFEoKCYHraYz0Wa5UvVXtxZlxl_Ra1x_FdrKcHaE\",\"authorship\":{\"contributor\":\"0x56706F118e42AE069F20c5636141B844D1324AE1\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"rKZ2yc3z4TB0PNZEAZGA4_FoCZg-zKNFLh7vQdreDn0\\\",\\\"y\\\":\\\"FitFAYoHsYPIVYhQgPJb2PSz1_wUjsiHOKXfnKfsaMg\\\"}\",\"signature\":\"-SgjNj4Vb6YFbxQMTwHm-JH6NpCLxX5_hu0Zi78EF-9jENFXZJygkcL0d5VyI_nwqlGg08t09FIJepqM-k_xHg\",\"signingKeySignature\":\"0xda9dbb0f25c702865e1a681c49d141cf941fc1a5c7a62b7b08043cacf54096e03aaef5415c7c1eca69d97277b88d643b617c51bf609ff807d1a56181976933321b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"rKZ2yc3z4TB0PNZEAZGA4_FoCZg-zKNFLh7vQdreDn0\\\",\\\"y\\\":\\\"FitFAYoHsYPIVYhQgPJb2PSz1_wUjsiHOKXfnKfsaMg\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"G8ISFEoKCYHraYz0Wa5UvVXtxZlxl_Ra1x_FdrKcHaE\"}"