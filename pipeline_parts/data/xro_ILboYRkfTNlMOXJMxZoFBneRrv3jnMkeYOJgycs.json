"{\"content\":{\"body\":\"PirateDAO is a novel DAO with two primary mandates:\\n\\n1. Think, design, develop and deploy NFT-related dApps, across chains, with a focus on products sitting at the intersection of the NFTs and DeFi ecosystems\\n2. Build PirateDAO itself into a long-lasting decentralized organization that can guarantees funding its own operations, through smart treasury management (such as re-investing revenues from previously shipped products)\\n\\nPirateDAO wants to be different from many DAOs that have come before it. To date, DAOs have mostly been synonymous with a treasury of funds + group signal-voting on where to send those funds; with very little input from communities on the kind products that are to be built, or on the development direction for existing ones. PirateDAO aims to achieve something more fun and valuable: **a fully decentralized organization that  ships new products**.\\n\\nToday, following up right away on our own motto, we are releasing Programmable Loot on Polygon (more on this below), along with our completely fair-launched initial offering for **JollyRoger** (üè¥‚Äç‚ò†Ô∏è), PirateDAO governance and only token; with a soft-capped, **ultra-scarce supply of 818 units available for minting to early users of our first product**.\\n\\n\\\\*JollyRoger (`0x0c80963e7228A81D6F805418531E44C48975d6D5`) rewards table for [ProgrammableLoot](https://polygonscan.com/address/0x76ade2d575e5db76f1c9b977575a9b324c5d23ea):\\n\\n* SACK = ***0.000213 üè¥‚Äç‚ò†Ô∏è***\\n* BARREL = ***0.00213 üè¥‚Äç‚ò†Ô∏è***\\n* CRATE = ***0.00426 üè¥‚Äç‚ò†Ô∏è***\\n* URN = ***0.0106 üè¥‚Äç‚ò†Ô∏è***\\n* COFFER = ***0.0213 üè¥‚Äç‚ò†Ô∏è***\\n* CHEST = ***0.05 üè¥‚Äç‚ò†Ô∏è***\\n* TROVE = ***0.2 üè¥‚Äç‚ò†Ô∏è***\\n* RELIQUARY = ***0.4 üè¥‚Äç‚ò†Ô∏è***\\n\\n## Programmable Loot\\n\\nProgrammable Loot (or pLOOT) is a big upgrade over the concept of scarce, general-purpose, on-chain loot metadata originally introduced by [dom](https://twitter.com/dhof/status/1431316631934967815) in multiple variants, that inspired many of us in the Ethereum community and naturally spurred derivatives and tooling to augment the project.\\n\\nAs a TLDR:\\n\\n* There are 8 Container classes (*SACK, BARREL, CRATE, URN, COFFER, TROVE, RELIQUARY*), each with unique base properties that affect what Items can be found within after genesis\\n* The containers baseline attributes only compound the random genesis seed provided by the Chainlink VRF oracles, which is the ultimate factor in determining both the number and rarity of the generated Loot Items\\n* Minting a Loot Container (and the Loot Items within) is a process made up of two asynchronous, distinct phases: a genesis step (where the container minting floor price fee is transferred to PirateDAO treasury and randomness is requested from  Chainlink VRF service) and a claim step (where the container and items, if any, are actually minted)\\n* Loot is composable; that is, containers can accept and transfer items at the will of their owners. This allows for any arrangement of loot composability and shifts the balance of value towards Loot Items themselves\\n* Rarity (only applicable to Loot Items) is made up of 7 classes (UNCOMMON, COMMON, RARE, EPIC, LEGENDARY, MYTHIC, RELIC), dictates what attributes a particular Item will exhibit, and is derived from the original container seed\\n\\n### Minting Loot Containers with the UI\\n\\nIn pLOOT there are Loot Containers and Loot Items, the latter is what can be valuable (e.g. based on their rarity, or usefulness in a particular application or game) but can only be obtained by minting the former; in other words, you will need to generate and claim (mint) Loot Containers (there are 8 classes of them, with different properties), in order to mint Loot Items.\\n\\n**Minting containers is a two-step process:**\\n\\n* First, you request a ContainerGenesis event, in exchange for that container class mint floor price; besides reserving the container for yourself, this will initiate a Chainlink VRF request that will eventually seed (usually within a few blocks) and permanently associate your container with a truly random genesis seed\\n* Second, and only after the Chainlink VRF oracle will have fulfilled the randomness, the container is ready to be claimed and any Loot Items inside it unveiled (and minted in the same tx); initially these will be owned by the container itself\\n\\nSpeaking of ownership: in pLOOT, every Loot Item is ownable (and per above, initially belonging to the container that minted it) which makes for programmable Loot Containers (able to host any Loot Item combination), from which owners can freely deposit (items that they now own, e.g. because they acquired them on the market) and withdraw them (if they were transferred inside the container).\\n\\nFollows a visual guide showcasing said features:\\n\\n![1-time WETH approval for Programmable Loot](https://images.mirror-media.xyz/publication-images/Rhz4Tnwli_mVdMxNskA9X.PNG?height=769&width=997)\\n\\n![Pick the container class you wish to generate](https://images.mirror-media.xyz/publication-images/PFVs9gHw80cBuirrGOle6.PNG?height=765&width=994)\\n\\n![After genesis, the container shows up (give it a few blocks) in the SEEDING state](https://images.mirror-media.xyz/publication-images/CF22S6qpOe22_-HOLYLdc.PNG?height=317&width=994)\\n\\n![After a few blocks time, Chainlink will seed the genesis event with randomness, allowing you to mint the container, and all items within](https://images.mirror-media.xyz/publication-images/vkpLItSgJdiH8Xk35xObw.PNG?height=316&width=993)\\n\\n![After claiming, you can browse the newly minted container by ID and see what came with it (though luck here). You can also use the \\\"Withdraw/Deposit\\\" interface to manipulate the items inside](https://images.mirror-media.xyz/publication-images/B2dMLayhJerh_uG_wxSSk.PNG?height=668&width=995)\\n\\n### Technical notes\\n\\npLOOT contracts are available on GitHub at this repository\\n\\n* ProgrammableLoot.sol is the sole owner and minter of LootContainer(s).sol\\n* ProgrammableLoot.sol is governed by this Timelock\\n* All smart contracts are immutable, non-proxied, non-upgradable\\n* New minting operations are guaranteed provided that:\\n  * either the Sushiswap WETH/LINK pool has enough liquidity for the Chainlink VRF fee or ProgrammableLoot.sol LINK balance is otherwise replenished\\n  * the Chainlink PegSwap service remains accessible, permissionless and has enough WLINK/LINK liquidity\\n  * the Chainlink VRF service remains accessible and permissionless\\n  * the Containers‚Äô inflationary threshold as determined by the inflation gauge is not breached\",\"timestamp\":1635344267,\"title\":\"PirateDAO: Initial NFTs Offering and Programmable Loot\"},\"digest\":\"j_PkpWa2qkOKpKyyLdk5EYHSp5Mc3IPB0LI8U_YPDV4\",\"authorship\":{\"contributor\":\"0x08F55ce05312d79B7525AB70BfF689ee48b2b53C\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"e5I7GZ-HYAk5jd5VdUsy6T_ydl6VKTAKsLzuuHA58Wo\\\",\\\"y\\\":\\\"WE2gwmJRF5EJt5EIjJsiLyNgUbUfHLLrBgv-qHlZd2o\\\"}\",\"signature\":\"uuEE8p7CaKjDA-U-Uoin-EGC6XybeB-8JQfFyUfI48ejDQwKPuFdXugA-cuRzfpLP0IiZsV4nbWYJ1DA44yGfA\",\"signingKeySignature\":\"0x49885ba2e5842c236aa1430bca1c5c21bf989eef462f1d43976211dbd870412c18c30521cc77091e3c7f2ad48b4abaea0efa1d5b1ad9e4f13ae19bedfef9ecf81c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"e5I7GZ-HYAk5jd5VdUsy6T_ydl6VKTAKsLzuuHA58Wo\\\",\\\"y\\\":\\\"WE2gwmJRF5EJt5EIjJsiLyNgUbUfHLLrBgv-qHlZd2o\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"P65d889f1Y5JYrybe0VU8Dq0Gb2cpN09MuqCzvViLBs\"}"