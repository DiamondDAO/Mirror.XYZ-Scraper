"{\"content\":{\"body\":\"前段时间AC搞的Rarity游戏比较火，召唤了一堆角色，但是每天得一个个地手动去调用合约完成冒险任务比较累。目前也有一些网站可以提供日托服务（也就是定时24h帮你去调一次合约），但是需要额外收费，作为一个一穷二白的码农怎么能被反撸呢？动动小手写个脚本帮你挂机吧！\\n\\n首先我们需要用npm安装3个基础库：\\n\\n* web3\\n* ethereumjs-common\\n* ethereumjs-tx\\n\\n然后在代码里引入：\\n\\n```\\nconst Web3 = require(\\\"web3\\\");\\nconst Tx = require(\\\"ethereumjs-tx\\\").Transaction;\\nconst Common = require('ethereumjs-common').default;\\n```\\n\\n接下来定义几个常量，分别是钱包地址、私钥（注意保密）、合约地址（Rarity）：\\n\\n```\\n// wallet address (change to your own)\\nconst walletAddr = \\\"0x1D09...7fab\\\";\\n\\n// private key (change to your own)\\n// note: no 0x prefix\\nconst privKey = new Buffer.from(\\\"61ae...8b36\\\", \\\"hex\\\");\\n\\n// contract address\\nconst contractAddr = \\\"0xce761d788df608bd21bdd59d6f4b54b2e27f25bb\\\";\\n```\\n\\n由于Rarity是在Fantom上的，我们还需要提供一下blockchain跟web3 provider的信息：\\n\\n```\\n// blockchain info\\nconst blockchain = Common.forCustomChain(\\n  'mainnet', {\\n      name: 'Fantom Opera',\\n      networkId: 250,\\n      chainId: 250\\n  },\\n  'petersburg'\\n)\\n\\n// web3 provider\\nconst web3Api = \\\"https://rpc.fantom.network/\\\"\\n\\nconst web3 = new Web3;\\nweb3.setProvider(new Web3.providers.HttpProvider(web3Api));\\n```\\n\\n这些信息在哪里可以找到呢？可以访问[chainlist.org](https://chainlist.org/)搜索Fantom，把网络切换过去，然后在Metamask的“设置”→“网络”里找到Fantom的配置信息：\\n\\n![](https://images.mirror-media.xyz/publication-images/kuRLG7hcC0DYNPoEOi9S2.png?height=1228&width=742)\\n\\n接下来我们编写一个通用的发送交易的函数。创建交易需要下面这几个参数：\\n\\n* nonce：一个自增的值，每交易一笔就会加1\\n* gasPrice：这个web3库提供了一个函数可以获取当前的油价，也可以自己配置\\n* gasLimit：油量，可以在ftmscan上查自己以前的交易或取\\n* value：由于我们不是转账而是合约调用，所以这个值填0\\n* data：合约调用数据\\n\\n创建交易对象后，经过签名、序列化等操作后，就可以发送出去了，具体参考下面的代码：\\n\\n```\\nconst sendTransaction = async (fromAddr, toAddr, data) => {\\n  let nonce = await web3.eth.getTransactionCount(fromAddr);\\n  let gasPrice = await web3.eth.getGasPrice();\\n  let rawTransaction = {\\n      \\\"from\\\": fromAddr,\\n      \\\"nonce\\\": web3.utils.toHex(nonce),\\n      \\\"gasPrice\\\": web3.utils.toHex(gasPrice),\\n      \\\"gasLimit\\\": web3.utils.toHex(gasLimit),\\n      \\\"to\\\": toAddr,\\n      \\\"value\\\": \\\"0x0\\\",\\n      \\\"data\\\": data\\n  };\\n\\n  let tx = new Tx(rawTransaction, {common: blockchain});\\n  tx.sign(privKey);\\n  let serializedTx = tx.serialize();\\n\\n  web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'),\\n      function(err, hash) {\\n          if (!err) {\\n              console.log(hash);\\n          } else {\\n              console.log(err);\\n          }\\n      });\\n};\\n```\\n\\n最后我们封装一个函数用了调用Rarity合约的adventure方法：\\n\\n```\\nconst adventure = async (id) => {\\n  let hexId = web3.utils.toHex(id).substr(2);\\n  sendTransaction(walletAddr, contractAddr, \\\"0xb00b52f1\\\" + \\\"0\\\".repeat(64 - hexId.length) + hexId);\\n}\\n```\\n\\nRarity里每个NFT都有一个编号，也就是这里的参数id，可以在ftmscan上查看自己目前拥有的ERC721 token的id。\\n\\n接下来就是拼接data的过程了：前面4个字节是adventure()的函数签名，然后需要把你的token id转成16进制拼接到最后面。最简单的方法就是随便找一个之前的交易，看下发送的数据：\\n\\n![](https://images.mirror-media.xyz/publication-images/oOrn19DozvnZXfdGT5ip4.png?height=540&width=2738)\\n\\n好了，现在你就可以直接用脚本来完成adventure调用啦！如果你召唤了多个角色，可以调用另外一个参数类型是数组的adventure()函数。还可以再加上crontab定时任务，就可以完成“日托”的工作啦！\\n\\n完整代码参见github：\\n\\n[https://github.com/qianxin2016/RarityDayCare](https://github.com/qianxin2016/RarityDayCare)\\n\\n\",\"timestamp\":1636535184,\"title\":\"如何用脚本调用Rarity合约\"},\"digest\":\"wzD52HkDwCnH0pJoW3gVNPmSWNfyqoUXkROoNvTfEFQ\",\"authorship\":{\"contributor\":\"0x1D0998850A9f7031db2fb7Ae1919BC43093C7faB\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"q3eHi8E62CZgeNmLkSwIlhWlerL7ArR4msX07KJFzLc\\\",\\\"y\\\":\\\"6y6f5F1-INAtNYFgWgvEwJNjw8AnEeCMaFmMz_ulwFU\\\"}\",\"signature\":\"DKd3O55R8xzCKDDBTvi-TeXDWolZZOVJT8TnvAuvRPP_SQRTQJF4LVZk0mI-hQ8G0cMN74-ma_Jv00zD2Lu7lQ\",\"signingKeySignature\":\"0xb3a2e714f7b64e87f15487f5fd789dfd416573cb90a35b8ce7eadde72c74072511ae0e823db149e756996932fdf93169abe080bc0c55ceb6d4158339472970471b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"q3eHi8E62CZgeNmLkSwIlhWlerL7ArR4msX07KJFzLc\\\",\\\"y\\\":\\\"6y6f5F1-INAtNYFgWgvEwJNjw8AnEeCMaFmMz_ulwFU\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"OYnWN9tZm3n5Ue2IBfrc3-VSqqWpDukIuMjPlNCAyLw\"}"