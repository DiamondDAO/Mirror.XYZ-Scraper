"{\"content\":{\"body\":\"## A brief “what is Solana?”\\n\\nSolana is an emerging high-performance, permissionless blockchain that offers fast, cheap, and scalable transactions and supports smart contracts being built with the Rust, C++, and C programming languages. One of the primary differentiators of the Solana network is its [Proof of History](https://medium.com/solana-labs/proof-of-history-a-clock-for-blockchain-cf47a61a9274) (PoH) verification mechanism. Without getting overly technical, the most notable improvement offered by this is parallel processing of transactions. This is part of the explanation why the number of transactions per second (TPS) looks like this ([source](https://www.reddit.com/r/solana/comments/ms0hfn/solana_vs_ethereum_vs_binance_smart_chain_vs/)):\\n\\n![A (slightly dated) comparison of Solana vs. Other Blockchains](https://images.mirror-media.xyz/publication-images/p4g91cSgmLd_OUp7RdFBx.png?height=1560&width=2748)\\n\\nThe only other architectural improvements worth noting (for the purposes of this article) is Solana’s divergent smart contract architecture. On most networks (like Ethereum) smart contract code, logic and state are wrapped up into the on-chain deployed contract. This is why smart contracts are typically thought of as “immutable” once deployed, there is not an interaction layer after you send your smart contract “out to the wolves” Solana unbundles this experience, developers deploy a read-only contract which can then be interacted with by external [accounts](https://docs.solana.com/developing/programming-model/accounts). One additional way Solana facilitates this type of external interaction is through [their CLI](https://docs.solana.com/developing/clients/jsonrpc-api) which allows decentralized applications to interact with their blockchain. \\n\\n## Prerequisites:\\n\\n* [NodeJS & NPM](https://nodejs.org/en/)\\n* [Rust](https://rustup.rs/)\\n* [Solana CLI](https://docs.solana.com/cli/install-solana-cli-tools)\\n* [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\\n\\n## How does this actually work\\n\\nLets start with a simple contract Solana Labs put together is their [Hello World Program](https://github.com/solana-labs/example-helloworld/blob/master/src/program-rust/src/lib.rs) Open up vscode and clone this repo:\\n\\n```\\ngit clone git@github.com:solana-labs/example-helloworld.git\\n```\\n\\nNext, we are going to set our network to the solana test network (this will allow us to deploy a smart contract\\n\\n```\\nsolana config set --url https://api.devnet.solana.com\\n```\\n\\n**Note:** after running this command you may get a message noting the export PATH for your solana install. **if you do, be sure to copy and paste it into your terminal to prevent Solana commands from erroring.**  if you continue getting are getting an error (namely zsh: command not found: solana) it is because your PATH environment variable is not updated to include your solana install. If the error persists, refer to [this video](https://www.youtube.com/watch?v=3CEY2oGcxSg) for additional help + instruction.\\n\\n## Post Installation\\n\\nAfter ensuring Solana is installed + configured correctly, you will need a keypair for your account (this allows you to interact with deployed smart contracts on the solana blockchain as a developer):\\n\\n```\\nsolana-keygen new --force\\n```\\n\\nNext, we need to get some tokens on our account in order to deploy our smart contract. the maximum airdrop request is currently two SOL, some older articles may attempt to request larger amounts but those will give you an error.\\n\\n```\\nsolana airdrop 2\\n```\\n\\nNow that we are locked and loaded with solana on our identified development account, we can build our hello world program:\\n\\n```\\nnpm run build:program-rust\\n```\\n\\nThis will take a minute or so, but once completed you will see a message like this:\\n\\n![Finished compilation of our program](https://images.mirror-media.xyz/publication-images/sEzz9yLAspmljneIEf1Dr.png?height=502&width=799)\\n\\nNow we are ready to actually deploy the program to solana’s test network. the output of the prior build command is what we need to run, in my case this is: \\n\\n```\\nsolana program deploy /Users/jamesburns/Desktop/flatiron/Crypto/example-helloworld/dist/program/helloworld.so\\n```\\n\\nAfter this program runs (which repeats the message approximately 60 times), you will recieve a program ID. this ID is searchable on the [Solana’s Devnet Explorer](https://solana program deploy /Users/jamesburns/Desktop/flatiron/Crypto/example-helloworld/dist/program/helloworld.so). In my case, the link to the account (and subsequent transaction history) can be found [here.](https://explorer.solana.com/address/EjhA2JxF6SwkofEGP3rS5MN2LQpCC7euRBqrGtXW6pCE?cluster=devnet)\\n\\n## How do we interact with this long string of letters?\\n\\nNow that our program has been deployed, we want to interact with it. The example-helloworld program comes prebuilt with a simple client written in typescript - in order to setup and visualize what exactly we have done by deploying this program we install our client dependencies:\\n\\n```\\nnpm install\\n```\\n\\nThen, we start our client.\\n\\n```\\nnpm run start\\n```\\n\\n \\n our result displays the number of times that the program has executed, which “greets” our account.\\n\\n![Our terminal after running our command interacting with the solana blockchain once](https://images.mirror-media.xyz/publication-images/56uqD7O0P2I4TjRHaTrwJ.png?height=215&width=792)\\n\\nIf we run the program again, the number of “greetings” will increase.\\n\\n![The second run of our program](https://images.mirror-media.xyz/publication-images/tSAzPrPm0MqiNJOQvp5Lz.png?height=202&width=790)\\n\\n## Takeaways\\n\\n* This is a novel example with no practical applications, but in going through this process we were able to setup a solana development environment, and interact with a blockchain in less than 20 minutes.\\n* **Compared to deploying a smart contract on the Ethereum network**, from a developers standpoint **this was significantly easier**, and offers better interoperability for individual developers, as well as amongst developers.\",\"timestamp\":1639415330,\"title\":\"Building and Deploying a Solana Smart Contract\"},\"digest\":\"dlWMIEcm1gewgqp-ZN85NDakRYhYQz2an2aT0ZxCUko\",\"authorship\":{\"contributor\":\"0xaea01704d80288FA97B0de0bc0758d5D2B0b81E1\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"htRwUAf8C92SQFrqDSAk4tiBFLJWLxB9RYe9c5cH0Og\\\",\\\"y\\\":\\\"zj7DgXS6-8qVvTZ0PrjFPFlMpHIcefRnAeShoa1odxo\\\"}\",\"signature\":\"TItT84DyjPd1DXvmMZW5UnwKF7zSEQH_kRpYu3CE_RLZYLF6vDuw-zLX2Yq7kQzfIqhJ-e91s3aMTz0BnqUclw\",\"signingKeySignature\":\"0x7c58b64c3240bf2788f064b921500d4dd2db3010796102315b2525e8a88fbf315a69948aab763ff468a5c75affe69ab240b65f135ef6fed8cbfa74c5ca7fc8841b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"htRwUAf8C92SQFrqDSAk4tiBFLJWLxB9RYe9c5cH0Og\\\",\\\"y\\\":\\\"zj7DgXS6-8qVvTZ0PrjFPFlMpHIcefRnAeShoa1odxo\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"dlWMIEcm1gewgqp-ZN85NDakRYhYQz2an2aT0ZxCUko\"}"