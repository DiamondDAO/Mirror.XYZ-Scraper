"{\"content\":{\"body\":\"Welcome! This is a gentle 10 minute introduction to Oracles on web3: **How can we feed real world data into a blockchain?**\\n\\n## What an oracle does\\n\\nSaid simple:\\n\\n> \\\"An oracle is a **bridge** between the blockchain and the real world. They act as **on-chain APIs** you can query to get information into your smart contracts. This could be anything from price information to weather reports. Oracles can also be bi-directional, used to **\\\"send\\\" data out to the real world**.\\\" ([@minimalism, October 2021](https://ethereum.org/en/developers/docs/oracles/#:\\\\~:text=Oracles%20are%20data%20feeds%20that,settle%20payments%20based%20on%20events.&text=They%27ll%20use%20an%20oracle,and%20payout%20to%20the%20winners.)).\\n\\nSuppose a smart contract handles betting on a 'real world' (off-chain, from now on) outcome. For example, who wins the next presidential election. **The Oracle would confirm this 'real world' result**.\\n\\nNote that there are no API calls from a blockchain. This will be resolved by the Oracle.\\n\\nYes, the Oracle is an intermediary.\\n\\n\\n---\\n\\n## The problem the Oracles seek to solve\\n\\n* **Blockchains are designed to be deterministic**. That is why, in principle, we cannot make on-chain API calls. We must do this through services such as Chainlink. Decentralization requires that all nodes in a system confirm the **same result**. There should be no ambiguity. Common APIs may not meet the no-change requirement. For example, Juan sends Carla the equivalent of $10 in ETH. Then use a off-chain API to get the ETH/USD value at that time. Transactions are recorded at a node on the blockchain and other nodes must validate the transaction by calling the same API that provided the ETH/USD value. However, this API service is likely to be dynamic and change the value within a minute. So if a single validator calls the API and gets a different value, the transaction will not validate. **This is why blockchains need to be deterministic, so that validation can happen**: if we replay every transaction from the first block, then we should be able to get the same results ([this amazing video](https://www.youtube.com/watch?v=ZJfkNzyO7-U&t=99s) was the source of inspiration for this example).\\n* **The Oracle problem**. An Oracle is only as good as the data sources it uses. A single source of truth would be insecure and violate the goal of decentralization. An API provided by a private company, for example, could be manipulated or hacked to pursue particular objectives. Even a source like government agencies or big tech companies could, and have been, hacked and manipulated. (see [this](https://www.wired.com/story/navy-facebook-page-hack-russia-phishing-syniverse-hack-security-news/) and [this](https://edition.cnn.com/2021/10/06/politics/russian-solarwinds-hackers-active/index.html)). This could be solved by a decentralized oracle that gets the information from various data sources. If one source fails, the others will continue to provide the required information.\\n\\n\\n---\\n\\n## How an Oracle works\\n\\nAn Oracle requests from an off-chain API and writes the result to the blockchain. Other contracts will need to get the data from the contract where the Oracle wrote it.\\n\\nTo provide the most accurate and safe ETH/USD price possible, MakerDAO collates multiple data sources (gets the median value). It would only update the price if the (1) new price, collected from different external sources, differs by more than 1% from the last price; and (2) the last price update was made more than 6 hours ago. This would allow not to change the price relationship if it is not necessary ([MakerDAO](https://developer.makerdao.com/feeds/)).\\n\\nOnce MakerDAO decides that it should update the ETH/USD price ratio, based on the decision criteria outlined above, it writes the new one onto the blockchain through its price feed contracts, called Medianizers. I *believe* the Medianizer name comes in because it calculates the median value of all prices feeds and this is the value it writes. This would allow a permanent record of that price on the blockchain, keeping it deterministic and capable of being validated by all nodes.\\n\\nAn Oracle like this is called a Decentralized Oracle Network (DON). It processes several off-chain sources in a way that would allow to deal with (1) deterministic blockchains and (2) the Oracle problem. This provides end-to-end decentralization.\\n\\nIn what applications can an Oracle be used?\\n\\n> \\\"Major industries benefit from combining oracles and smart contracts including asset prices for finance, weather information for insurance, randomness for gaming, IoT sensors for supply chain, ID verification for government, and much more.\\\" ([Chainlink](https://chain.link/education/blockchain-oracles)).\\n\\n\\n---\\n\\n## How to send custom off-chain data to the blockchain\\n\\nChainlink, for example, allows you to interact with off-chain data with API calls (see [here](https://docs.chain.link/docs/request-and-receive-data/)). The service advertises itself as being able to call any API (read [here](https://docs.chain.link/docs/make-a-http-get-request/) for how to make GET requests) :\\n\\n> \\\"Whether your contract requires sports results, the latest weather, or any other publicly available data, the  [Chainlink contract library](https://github.com/smartcontractkit/chainlink/tree/master/contracts) provides the tools required for your contract to consume it.\\\" ([Chainlink documentation](https://docs.chain.link/docs/request-and-receive-data/)).\\n\\nThe exact mechanics on how we can request data from **any** external API, even using a Chainlink, would be material for other text. **The question of how not to fall into the Oracle problem remains**: What if the data we want to GET is only available through a single source of truth? Only one company provides this information. Theoretically, this would violate decentralization and vulnerize the blockchain.\\n\\n[Here's a very cool contract in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/APIConsumer.sol&optimize=false&runs=200&evmVersion=null&version=soljson-v0.8.7+commit.e28d00a7.js) that GETs data from an external API using Chainlink.\\n\\n\\n---\\n\\n## Thanks for reading!\\n\\nFeel free to reach out to me with thoughts, comments and feedback via Twitter.([@espejelomar](https://twitter.com/espejelomar)) or email ([espejelomar@protonmail.ch](mailto:espejelomar@protonmail.ch)).\",\"timestamp\":1635257991,\"title\":\"Oracles: Getting Real-World Data into the Blockchain\"},\"digest\":\"Xmtcmf2DGr6jqy84S1YsFig_SMdAIpOafp-xCwNT2ZA\",\"authorship\":{\"contributor\":\"0xC606d7ea8fE2c134CC35874Bf05EEB76f6371F44\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Q-xx-StMMZOKJPBqJ1F7NISKpeAvov0klxsb1CqR7So\\\",\\\"y\\\":\\\"JdyVX__aiOYj5zEYItX8hPEXlWIIIOn1gxLt0nUw9-M\\\"}\",\"signature\":\"mMFTCLhE0nHM4GU1oHZL8i0zYa6f7sbxZ-4Pdd0-Te7oz0UFhzVc3deMcj4R1FF7L1p1I-F8iaOClLAf7YV1uA\",\"signingKeySignature\":\"0xd54dc228145f076c0b1546a8acc65f0b00533bbe1d4685a0255c4840c0fc9c2834a0686567909f7a99b5cc275fe36961ef2d7f3437632fc6b89dc8ff9c188a321b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Q-xx-StMMZOKJPBqJ1F7NISKpeAvov0klxsb1CqR7So\\\",\\\"y\\\":\\\"JdyVX__aiOYj5zEYItX8hPEXlWIIIOn1gxLt0nUw9-M\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"vhdPl84lhYDCTgf8dV_3XZ1U0fWkEU9yN3cFi2_EXCk\"}"