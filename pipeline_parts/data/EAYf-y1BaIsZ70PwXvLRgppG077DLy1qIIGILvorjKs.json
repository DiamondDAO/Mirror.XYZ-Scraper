"{\"content\":{\"body\":\"一、channel简介\\n1、channel 简介\\npkg/client/channel支持访问Fabric网络上的通道。channel客户端实例提供与指定通道上的Peer节点进行交互的处理函数。channel客户端可以在指定通道上查询链码，执行链码以及注册或注销链码事件。如果应用程序需要与Fabric网络的多条通道进行交互，需要为每条通道创建一个单独的通道客户端实例。\\n官方文档：\\n <https://godoc.org/github.com/hyperledger/fabric-sdk-go/pkg/client/channel>\\n\\n2、channel使用流程\\nchannel使用流程如下：\\nA、准备通道客户端上下文\\nB、创建通道客户端\\nC、执行链码\\nD、查询链码\\nchannel使用示例如下：\\n\\nc, err := New(mockChannelProvider(\\\"mychannel\\\"))\\nif err != nil {\\nfmt.Println(\\\"failed to create client\\\")\\n}\\n\\nresponse, err := c.Query(Request{ChaincodeID: \\\"testCC\\\", Fcn: \\\"invoke\\\", Args: \\\\[\\\\]\\\\[\\\\]byte{\\\\[\\\\]byte(\\\"query\\\"), \\\\[\\\\]byte(\\\"data\\\")}})\\nif err != nil {\\nfmt.Printf(\\\"failed to query chaincode: %s\\\\\\\\n\\\", err)\\n}\\n\\nfmt.Println(string(response.Payload)) // output: // abc  二、channel常用接口 1、类型定义 // Request 包含查询和执行一个调用交易的参数 type Request struct { ChaincodeID  string Fcn          string Args         \\\\[\\\\]\\\\[\\\\]byte TransientMap map\\\\[string\\\\]\\\\[\\\\]byte\\n\\n```\\n// InvocationChai包含元数据，某些选择服务实现使用元数据来选择满足调用链中所有链码的背书\\t\\n // 策略的背书节点\\n// Each chaincode may also be associated with a set of private data collection names\\n// which are used by some Selection Services (e.g. Fabric Selection) to exclude endorsers\\n// that do NOT have read access to the collections.\\n// The invoked chaincode (specified by ChaincodeID) may optionally be added to the invocation\\n// chain along with any collections, otherwise it may be omitted.\\nInvocationChain []*fab.ChaincodeCall\\n```\\n\\n}\\n\\n//Response包含执行和查询一个调用交易的响应参数 type Response struct { Proposal         \\\\*fab.TransactionProposal Responses        \\\\[\\\\]\\\\*fab.TransactionProposalResponse TransactionID    fab.TransactionID TxValidationCode pb.TxValidationCode ChaincodeStatus  int32 Payload          \\\\[\\\\]byte }   2、获取客户端实例 type Client struct { context      context.Channel membership   fab.ChannelMembership eventService fab.EventService greylist     \\\\*greylist.Filter clientTally  // nolint } 1. 2. 3. 4. 5. 6. 7. 通道客户端支持访问Fabric网络上的通道。为了与特定通道的Peer节点进行交互，通道客户端实例提供了一个处理程序。 如果应用程序需要与多个通道进行交互，应该为每个通道创建一个单独的通道客户端实例。 通道客户端只支持非管理功能。\\n\\ntype ClientOption func(\\\\*Client) error\\nfunc New(channelProvider context.ChannelProvider, opts ...ClientOption) (\\\\*Client, error)\\n1\\\\.\\n2\\\\.\\n返回通道Client实例。通道客户端可以在特定通道上查询链码，执行链码以及注册/注销链码事件。\\n使用示例：\\n\\nctx := mockChannelProvider(\\\"mychannel\\\")\\n\\nc, err := New(ctx)\\nif err != nil {\\nfmt.Println(err)\\n}\\n\\nif c != nil { fmt.Println(\\\"channel client created\\\") } else { fmt.Println(\\\"channel client is nil\\\") } // output: // channel client created1.   3、执行交易 func (cc \\\\*Client) Execute(request Request, options ...RequestOption) (Response, error) 使用请求和可选的请求选项进行准备并执行事务。 参数:  request包含必备链码ID和函数的相关信息 options包含可选的请求选项 返回Peer的提案回复 使用示例：\\n\\nc, err := New(mockChannelProvider(\\\"mychannel\\\"))\\nif err != nil {\\nfmt.Println(\\\"failed to create client\\\")\\n}\\n\\n_, err = c.Execute(Request{ChaincodeID: \\\"testCC\\\", Fcn: \\\"invoke\\\", Args: \\\\[\\\\]\\\\[\\\\]byte{\\\\[\\\\]byte(\\\"move\\\"), \\\\[\\\\]byte(\\\"a\\\"), \\\\[\\\\]byte(\\\"b\\\"), \\\\[\\\\]byte(\\\"1\\\")}})\\nif err != nil {\\nfmt.Println(err.Error())\\n}\\n\\nfmt.Println(\\\"Chaincode transaction completed\\\") // output: // Chaincode transaction completed1.   4、调用交易处理 func (cc \\\\*Client) InvokeHandler(handler invoke.Handler, request Request, options ...RequestOption) (Response, error) InvokeHandler使用提供的请求和可选请求选项来调用处理程序 参数: handler为要调用的处理程序 request包含必备的链码ID和函数的相关信息 options包含可选的请求选项 返回Peer的提案回复 使用示例：\\n\\nc, err := New(mockChannelProvider(\\\"mychannel\\\"))\\nif err != nil {\\nfmt.Println(\\\"failed to create client\\\")\\n}\\n\\nresponse, err := c.InvokeHandler(&exampleHandler{}, Request{ChaincodeID: \\\"testCC\\\", Fcn: \\\"invoke\\\", Args: \\\\[\\\\]\\\\[\\\\]byte{\\\\[\\\\]byte(\\\"query\\\"), \\\\[\\\\]byte(\\\"data\\\")}})\\nif err != nil {\\nfmt.Printf(\\\"failed to query chaincode: %s\\\\\\\\n\\\", err)\\n} \",\"timestamp\":1637720619,\"title\":\"channel\"},\"digest\":\"amN3EmMTsN7iKBYBN2fisixWoPN2bKMnwnzn9jHlcKk\",\"authorship\":{\"contributor\":\"0x7A6aA273319F921E276248c397AA83A43afF775F\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Yu3gCr12R5vCL5vIoF5H8OkJcxNJFF-dhFq4fwc1hdQ\\\",\\\"y\\\":\\\"HKfeM1Jwdsay3Jxl1sBWEm1usSTdW01-n4RUr_gLz6k\\\"}\",\"signature\":\"xiZ2iHjAuvduvCQvhahH1d1gNkae0llYFFrNCozqJkzGxkjXKGCtReBWXtSB-0N18CrSpSdKyKP6QcR9WNtcmw\",\"signingKeySignature\":\"0x80c92bdab24cf97879f5c6b4f42064fa7904f20616948b24339a7c7c8229958757b7157e2d799a1112d31b83cad0351a569eb9055ab1368f2a64a27942ecb6d21b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Yu3gCr12R5vCL5vIoF5H8OkJcxNJFF-dhFq4fwc1hdQ\\\",\\\"y\\\":\\\"HKfeM1Jwdsay3Jxl1sBWEm1usSTdW01-n4RUr_gLz6k\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"amN3EmMTsN7iKBYBN2fisixWoPN2bKMnwnzn9jHlcKk\"}"