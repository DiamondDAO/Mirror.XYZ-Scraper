"{\"content\":{\"body\":\"In my previous [post](https://dev.to/abdulrauf11/how-to-create-a-motherfcking-nft-using-solidity-5b5d), I explained how you can mint an NFT using Solidity. But what if you don't want to learn Solidity?\\n\\n> *Ain't nobody got time for that b\\\\*tch.*\\n\\nYou want to stick with your ol' pal JavaScript. Let me tell you that there's a way to do it. I present to you [thirdweb](https://thirdweb.com/portal) - a library of smart contracts, SDK, and UI components that developers can use in their app.\\n\\nHow cool would it be if you could just call a `mint` function, give the token's metadata as an argument, and it mints an NFT for you? All without writing a single line of Solidity code. Let's see if that's possible.\\n\\n## Introduction to thirdweb\\n\\nThe first thing you need to learn about is the concept of `projects` and `modules`. In short, projects are smart contracts that act as containers for your modules. On the other hand, modules are packages that contain smart contracts and other functionalities. Head over to this [link](https://thirdweb.com/portal/learn/introduction) to learn more about them.\\n\\n### All the steps we need to take\\n\\nThe following are the steps we need to take to mint our NFT:\\n\\n1. Create a project using thirdweb\\n2. Deploy an NFT module inside our project\\n3. Mint our NFT\\n\\nAll of these steps will be done using just JavaScript. I will be separating these steps into 3 different `.js` files.\\n\\n## Setup\\n\\nBefore we start writing the code, we need to create a `MetaMask` wallet. Since we'll be deploying our contracts on the `Rinkeby` network, we'll also need some testnet ETH to approve the transactions. [Here's a guide on how to create a MetaMask Wallet and get testnet ETH](https://thirdweb.com/portal/guides/create-a-metamask-wallet).\\n\\nNow, head over to your thirdweb dashboard and create a project. Give it a name and a description of your choice. Make sure you've switched your network to Rinkeby.\\n\\n![Create project - thirdweb dashboard](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cnx0gk0byz34q9z81nb.png)\\n\\nWe'll do everything else using code.\\n\\n## The code\\n\\nGo ahead and create an empty project and install all the necessary packages:\\n\\n* **@3rdweb/sdk** - to use the smart contracts provided by thirdweb\\n* **ethers** - to connect our MetaMask wallet\\n* **dotenv** - to source sensitive data from a `.env` file\\n\\n```shell\\nnpm init -y\\nnpm install @3rdweb/sdk ethers dotenv\\n```\\n\\nLet's create 3 separate files to code all the steps I mentioned above.\\n\\n```shell\\ntouch 1-init-sdk.js 2-deploy-collection.js 3-mint-nft.js\\n```\\n\\n### 1. Let's initialize the SDK\\n\\nI like to show the entire code first before explaining it. Therefore, before further ado, here's the code for the first file i.e. `1-init-sdk.js`\\n\\n```js\\nimport { ThirdwebSDK } from '@3rdweb/sdk';\\nimport ethers from 'ethers';\\n\\nimport dotenv from 'dotenv';\\ndotenv.config();\\n\\nconst sdk = new ThirdwebSDK(\\n  new ethers.Wallet(\\n    // Your wallet private key. ALWAYS KEEP THIS PRIVATE, DO NOT SHARE IT WITH ANYONE.\\n    // Add it to your .env file and do not commit that file to github!\\n    process.env.PRIVATE_KEY,\\n    // RPC URL, we'll use our Alchemy API URL from our .env file.\\n    ethers.getDefaultProvider('https://rinkeby-light.eth.linkpool.io/')\\n  )\\n);\\n\\n(async () => {\\n  try {\\n    const apps = await sdk.getApps();\\n    console.log('Your app address is:', apps[0].address);\\n  } catch (err) {\\n    console.error('Failed to get apps from the sdk', err);\\n    process.exit(1);\\n  }\\n})();\\n\\n// We are exporting the initialised thirdweb SDK so that we can use it in our other scripts\\nexport default sdk;\\n```\\n\\nThe code is really simple. We're importing thirdweb and then initializing the SDK. We're exporting it at the end so we can re-use it in the next script.\\n\\nWe're also running this:\\n\\n```js\\n(async () => {\\n  try {\\n    const apps = await sdk.getApps();\\n    // Get the address of the most recently created project\\n    console.log(\\\"Your app address is:\\\", apps[0].address);\\n  } catch (err) {\\n    console.error(\\\"Failed to get apps from the sdk\\\", err);\\n    process.exit(1);\\n  }\\n})(\\n```\\n\\nThis code returns the address of your app or project. It's the address of the container that will hold all your modules. Remember, we created a project using our dashboard in the beginning? This will return its address.\\n\\nGo ahead and run the following command in your terminal:\\n\\n```shell\\nnode 1-init-sdk.js\\n```\\n\\nHere's what I get when I run the script:\\n\\n```bash\\nlilcoderman % node scripts/1-init-sdk.js\\nYour app address is: 0x25320e23DCd1813D11787aD836865a64CC69897A\\n```\\n\\n### 2. Deploying the NFT module\\n\\nNow that we have our project/app, let's use the `deployNftModule` provided by thirdweb to deploy our collection. It is one of the methods available to the SDK we initialized in the first step.\\n\\nWe're not creating our NFT here, yet. This module will only help us create + deploy an ERC-721 collection to the Rinkeby testnet. We're just setting up the metadata of the collection itself. You know stuff like the name (e.g. Bored Ape Yacht Club), description, and image associated with the entire collection.\\n\\nGo ahead and copy the following code to the `2-deploy-collection.js` file:\\n\\n```js\\nimport sdk from './1-init-sdk.js';\\nimport { readFileSync } from 'fs';\\n\\nimport dotenv from 'dotenv';\\ndotenv.config();\\n\\nconst app = sdk.getAppModule('YOUR_APP_ADDRESS');\\n\\n(async () => {\\n  try {\\n    const nftModule = await app.deployNftModule({\\n      // The collection's name, ex. CryptoPunks\\n      name: 'JavaScript NFTS',\\n      // A description for the collection.\\n      description:\\n        'How to mint an NFT using Javascript - a tutorial by @lilcoderman',\\n      // The image for the collection that will show up on OpenSea.\\n      image: readFileSync('assets/collection.png'),\\n      // The amount of royalty collected on all royalties represented as basis points. The default is 0 (no royalties).\\n      // 1 basis point = 0.01%\\n      // For example: if this value is 100, then the royalty is 1% of the total sales.\\n      sellerFeeBasisPoints: 0,\\n      // The address of the royalty recipient. All royalties will be sent to this address.\\n      feeRecipient: process.env.WALLET_ADDRESS,\\n      // The symbol for the NFT Collection\\n      symbol: 'JS',\\n    });\\n\\n    console.log(\\n      '✅ Successfully deployed nft module, address:',\\n      nftModule.address\\n    );\\n  } catch (error) {\\n    console.log('failed to deploy nft module', error);\\n  }\\n})();\\n```\\n\\nThe code is pretty self-explanatory. We're importing our SDK from the previous file and calling one of its methods. This method will deploy an NFT module (i.e collection) for us. We've also provided the necessary metadata as an argument to the `deployNftModule` function.\\n\\nOnce you run this script, it will return the collection's address. Here's what I get:\\n\\n```bash\\nlilcoderman % node scripts/2-deploy-collection.js\\n✅ Successfully deployed nft module, address: 0x1C267DC8841999de9B9C4F33D63a8d6bC81b8e2D\\n```\\n\\n### 3. Time to mint our NFT\\n\\nWe're almost done now! It's time to mint our NFT, and we haven't even written a single line of Solidity. This is probably the simplest code we've written so far. Copy the following code to the final file `3-mint-nft.js`:\\n\\n```js\\nimport sdk from './1-init-sdk.js';\\nimport { readFileSync } from 'fs';\\n\\nconst nft = sdk.getNFTModule('YOUR_NFT_MODULE_ADDRESS');\\n\\n(async () => {\\n  try {\\n    await nft.mint({\\n      name: 'LCM',\\n      description: 'Follow me on twitter @lilcoderman',\\n      image: readFileSync('assets/nft.png'),\\n      properties: {},\\n    });\\n    console.log('✅ Successfully created a new NFT in the collection!');\\n  } catch (error) {\\n    console.error('failed to create the new NFT', error);\\n  }\\n})();\\n```\\n\\nJust like before, we're importing the SDK from the first file. However, we are using the module `getNFTModule` this time around. This module returns our ERC-721 contract.\\n\\nThen, we can call the `mint` function from the contract to create an actual NFT! The mint function requires an object containing the metadata of the token. I've passed in the NFT's name, description, and image as arguments. You can also set its properties if you'd like.\\n\\nNow, let's run it:\\n\\n```bash\\nlilcoderman % node scripts/3-mint-nft.js\\n✅ Successfully created a new NFT in the collection!\\n```\\n\\nYou can now view the NFT on your thirdweb [dashboard](https://thirdweb.com/rinkeby/).\\n\\n![NFT collection - thirdweb dashboard](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4radw9vks53jstm2efdu.png)\\n\\nWe can also find our NFT on **OpenSea** by using its address. Go to this [link](https://testnets.opensea.io/assets/0x1c267dc8841999de9b9c4f33d63a8d6bc81b8e2d/0) to check mine.\\n\\nThat's it. You've now minted an NFT using JavaScript only. Pretty f\\\\*cking cool, won't you say?\\n\\nAnyway, here's the Github repo with all the code: <https://github.com/abdulrauf11/tutorial-thirdweb-nft>\\n\\n## What next...\\n\\nthirdweb can do much more than just minting an NFT collection. It has modules for creating a custom token, a marketplace for NFTs, and even a DAO! In the future, they also plan to support other chains like Solana and Flow.\\n\\nWe're using JavaScript to do all the steps, however, it is not a requirement. You can do all this manually using your dashboard. In my opinion, doing it with code just gives you more flexibility.\\n\\nKeep in mind, if you're going to use thirdweb in production, they will take a minor 5% cut from your royalties. I think that's fair given how they're making our lives much easier with their product.\\n\\n<hr />\\n\\nGet in touch if you want to know more about NFTs and Web dev. You can find me on Twitter [@lilcoderman](https://twitter.com/lilcoderman)\",\"timestamp\":1641383969,\"title\":\"How to create a motherf*cking NFT using JavaScript\"},\"digest\":\"pV7aafMiZeYDDIruzt0aM2fblQuuZIKslGc_UvT4Ios\",\"authorship\":{\"contributor\":\"0x004Ad8C4e22c96d8FDB0A659fF6ff92Bdf97beD2\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"W9C2tH645OBaCEfeedHeHaQ0B6nQeNcHcQsqi-D49Vc\\\",\\\"y\\\":\\\"yG71RKabL6yeGkgstPRPFEEvNQ90F96ykV39hS80E_k\\\"}\",\"signature\":\"0z_R-Ct6cO8y4DGU7PS5H4sJq-rV8a5Hbc5qoZLxYxX6FmLHbIW8T2TkaZJzveiOOyNIqcg63-qnJPX-M8E4FQ\",\"signingKeySignature\":\"0x2bdb8f8b106bb0c91e01aa6d4f0b41f95d295bc66eeb8d5f3afa6c25c57d350e3d8ceb7db70eff57647bca7f61cff72f275fa3ca70cef61befb20034ec94ff271c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"W9C2tH645OBaCEfeedHeHaQ0B6nQeNcHcQsqi-D49Vc\\\",\\\"y\\\":\\\"yG71RKabL6yeGkgstPRPFEEvNQ90F96ykV39hS80E_k\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"cENqJV2vzPynfNXtcIFCwK7hzXuP3vt5Hm-YRIpfWuY\"}"