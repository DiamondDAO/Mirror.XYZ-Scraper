"{\"content\":{\"body\":\"#### 1、把其它类型「原始值」转为对象\\n\\n```js\\n// 方法：\\nObject([value])\\n```\\n\\n#### 2、其它类型转为数字\\n\\n```js\\n// 1. Number([value])\\n* 隐式转换「数学运算、isNaN、==比较」\\n* 字符转 ->> 数字：\\n    空字符串对应的结果是 0\\n    只要字符串中包含非有效数字，结果就是 NaN\\n* 布尔 ->> 数字：\\n    true  ->> 1\\n    false ->> 0\\n* null ->> 0\\n* undifined ->> NaN\\n* Symbol ->> 报错\\n* 对象 ->> 数字：\\n    遵循规则：Symbol.toPrimitive/valueOf/toString\\n\\n\\n// 2. parserInt([value]) / parseFloat([value])\\n首先会把[value]变为字符串，从字符串左侧第一个字符开始查找，\\n直到找到一个非有效数字字符为止，把找到的结果转换为数字，\\n一个都没找到，结果就是NaN「parseFloat多识别一个小数点」\\n```\\n\\n#### 3、把其它类型转换为字符串\\n\\n```js\\n// 1. 原始值直接用引号包起来「BigInt去除n」，对象转为字符串是比较特殊的\\n// 2. toString「排除Object.prototype.toString（检测数据类型用的）」\\n// 3. 字符串/模板字符串拼接「‘+’号除了数学运算还有字符串拼接（其他运算符一般都是数学运算）」\\n\\n// CASE1: \\\"+\\\"号只有一边\\nlet n = '10'\\nconsole.log(+n)  // 转换为数字\\nconsole.log(++n) // 11: 转换为数字后累加1\\nconsole.log(n++) // 10: 转换为数字后累加1\\n\\nlet i = 10;\\nconsole.log(5 + (++i)); //先i累加1，累加后的结果运算  16 i->11\\nconsole.log(5 + (i++)); //先运算 再累加1  15 i->11\\n\\n// CASE2: “+”号有一边出现对象\\nlet n = 10;\\n{}+n ->> 10  把左侧的{}当做代码块，不参与运算，运算的只有 +n\\nn+{} ->> '10[object Object]' 字符串拼接\\n\\n// CASE3: 不是所有对象都是字符串拼接\\n// 规则：\\n* 先去调取对象的 Symbol.toPrimitive 属性值，如果没有这个属性\\n* 再去调取对象的 valueOf 获取原始值，如果不是原始值\\n* 再去调用对象的 toString 转换为字符串「如果是想转换为数字，则还会调用Number处理」\\n\\nconsole.log(10 + [10, 20]); \\n[10, 20][Symbol.toPrimitive]  ->>  undefined\\n[10, 20].valueOf()  ->>  [10, 20] (非原始值)\\n[10, 20].toString()  ->> \\\"10,20\\\"\\n10 + [10, 20] = 10 + \\\"10,20\\\" = \\\"1010,20\\\"\\n\\nconsole.log(10 + new Number(10));\\nnew Number(10)[Symbol.toPrimitive]  ->>  undefined\\nnew Number(10).valueOf()  ->> 10 (是原始值)\\n10 + new Number(10) = 10 + 10 = 20\\n\\nconsole.log(+new Date());  // 1629171828461\\n\\nlet obj = { x: 10 }\\nconsole.log(10 + obj)  ->> \\\"10[object Object]\\\"\\n\\nlet obj2 = {\\n  x: 10,\\n  [Symbol.toPrimitive](hint) {\\n    return this.x\\n  }\\n}\\nconsole.log(10 + obj2)  // 20\\n\\n// “+”左右两边，有一边出现了 字符串或者部分对象 则都是按照字符串拼接处理的\\nconsole.log(1 + 1); //->2\\nconsole.log(1 + '1'); //->'11'\\nconsole.log(1 - '1'); //->0\\n```\\n\\n#### 4、其他类型转为布尔类型\\n\\n```js\\n// 1. 规则：\\n只有 0、-0、null、undifined、空字符串、NaN 这几个结果是false，其余都是true\\n// 2. 转换方式\\n* Boolean([value])\\n* ![value]\\n* 条件判断：例如：if([value])\\n* A || B, A && B(逻辑或，逻辑与)\\n```\\n\\n#### 练习\\n\\n> let result = 100 + true + 21.2 + null + undefined + \\\"Tencent\\\" + \\\\[\\\\] + null + 9 + false;\\n\\n1. 101 + 21.2 + null + undefined + \\\"Tencent\\\" + \\\\[\\\\] + null + 9 + false\\n2. 122.2 + null + undefined + \\\"Tencent\\\" + \\\\[\\\\] + null + 9 + false\\n3. 122.2 + undefined + \\\"Tencent\\\" + \\\\[\\\\] + null + 9 + false\\n4. NaN + \\\"Tencent\\\" + \\\\[\\\\] + null + 9 + false\\n5. \\\"NaNTencent\\\" + \\\\[\\\\] + null + 9 + false\\n6. \\\"NaNTencent\\\" + null + 9 + false\\n7. \\\"NaNTencentnull\\\" + 9 + false\\n8. \\\"NaNTencentnull9\\\" + false\\n9. \\\"NaNTencentnull9false\\\"\\n\\n> let a = ？\\n> if (a == 1 && a == 2 && a == 3) {\\n> console.log('OK');\\n> }\\n\\n```js\\n// 方法一\\nlet a = {\\n  i: 1,\\n  [Symbol.toPrimitive](hint) {\\n     return this.i++\\n  }\\n}\\n\\n// 方法二\\nlet a = [1, 2, 3]\\na.toString = a.shift\\n\\n// 方法三：我们可以劫持对象的成员访问\\n//   + 全局下声明的变量是window的一个属性\\n//   + Object.defineProperty数据劫持的办法\\nlet i = 0\\nObject.defineProperty(window, a, {\\n  get() {\\n    return ++i;\\n  }\\n})\\n```\",\"timestamp\":1636600606,\"title\":\"02 JS中的数据类型转换规则\"},\"digest\":\"pfE9D2VB0zeXXWu5Lq1HOn9uR1chQSlGi2r7E513VUM\",\"authorship\":{\"contributor\":\"0xbDc5607670Fc1d3411c5791f194eD1Fe61C964b6\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"JllKBoC8ilgNmfvYothEgOHD5J6DvDWhBfte_PPSnnk\\\",\\\"y\\\":\\\"hVpOItgC01St2wY7c53r5Sx0_ipQQXaQi-_4dN-tv_g\\\"}\",\"signature\":\"HriJ9DNBRKjFUjDUBdZ7pBBKjm1JA13Unp99zXRojXpO84k5NdQvY4WfpJDWRIMTjQF9lJlH-exACA4iS6zvPw\",\"signingKeySignature\":\"0xf08839b49cc46ceed7fc6daf90e2518ab9a05f164eb2e8ebf3f0c8f6da2a30996788a498330523a621af7695946038001a12d90f01018d4674ceda2675a18c8a1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"JllKBoC8ilgNmfvYothEgOHD5J6DvDWhBfte_PPSnnk\\\",\\\"y\\\":\\\"hVpOItgC01St2wY7c53r5Sx0_ipQQXaQi-_4dN-tv_g\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"pfE9D2VB0zeXXWu5Lq1HOn9uR1chQSlGi2r7E513VUM\"}"