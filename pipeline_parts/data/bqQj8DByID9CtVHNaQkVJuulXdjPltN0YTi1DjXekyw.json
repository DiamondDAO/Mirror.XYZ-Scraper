"{\"content\":{\"body\":\"If you spend any time in the world of Web3 (or even just on Twitter), you will have inevitably noticed the proliferation of PFP communities as of late. Projects like BAYC have raked in literally millions of dollars and inspired an avalanche of analysis about the future of communities, the web and even identity itself.\\n\\nIf you're an artist, you've probably wondered how to break into this space. After all, programmatically generating 10,000 dynamic NFT's isn't in every artist's bag of tricks. That got me thinking ... how could I simplify things for non-programmers looking to dip their toes into this world? \\n\\nTurns out it's possible to automate a lot of the heavy lifting with no-code tools üëÄ \\n\\nLet‚Äôs break it down.\\n\\n## Anatomy of a PFP Collection\\n\\nAt their most basic, many PFP projects are just stacks of images that are assembled together, usually programmatically, in many different combinations. An avatar might have one layer for its mouth, one for its eyes and one for its clothing. Each variation of a given layer is called a ‚Äútrait,‚Äù and different traits might have different ‚Äúrarities‚Äù associated with them. So a collection might feature 100 characters with brown eyes, but only 10 with green eyes.\\n\\nSounds simple enough, right?\\n\\nNow imagine you have a collection comprised of four layers, each consisting of 10 possible traits. To determine how many combinations are possible for this collection, we must multiply the sums of all traits in each layer by one another. Let‚Äôs write that out for the mathematically challenged üôã‚Äç‚ôÇÔ∏è\\n\\n`10 x 10 x 10 x 10 = 10,000 Combinations`\\n\\nOuch.\\n\\nGenerating that many images manually would take A LOT of time. Too much time. That‚Äôs why NFT artists typically rely on custom coding to generate these collections. If you‚Äôre a programmer, this is a fairly trivial lift. If you‚Äôre not a programmer, don‚Äôt know any programmers and don‚Äôt have any cash to hire one, it seems a lot more daunting.\\n\\n## A Simpler Way\\n\\nThankfully, it‚Äôs possible to automate this whole process using no-code tools, and I‚Äôve created a free, open-source template to make it even easier.\\n\\n[https://coda.io/@tsstrickland1/nft-machine](https://coda.io/@tsstrickland1/nft-machine)\\n\\nThis template is built on Coda, which is basically Notion on steroids ‚Äî¬†allowing non-technical users to create micro-applications that incorporate custom data schema, workflows and automations. \\n\\nIn this case, I‚Äôve used it to create a slick, customizable front-end where you can create your own NFT collections; define layers, traits and rarities; and then generate all possible variants with the click of a button. The template integrates with [Placid](https://placid.app/), a simple and affordable image generation-service, to assemble the finished PFP artwork.\\n\\n## What‚Äôs Next?\\n\\nSo now you have a whole bunch of artwork, but none of it is actually on-chain. To mint your NFT‚Äôs, you‚Äôll need to use a service like Mirror (on which this blog post is published), OpenSea or Rarible.\\n\\nUnfortunately, automating the minting process is outside the scope of this post, though it should be possible to do so using a browser automation tool like [Axiom](https://axiom.ai). I might tackle that in a later tutorial, but, for now at least, we‚Äôve streamlined one of the thorniest pieces of creating your own PFP collection ‚Äî¬†allowing you to generate thousands of pieces of unique artwork in minutes, with minimal cost and no code.\\n\\nI hope you find this resource helpful. If you use it to build something awesome ‚Äî or if you have ideas to make it better ‚Äî I‚Äôd love to know. Give me a shout on Twitter üëá \\n\\nIn the meantime, happy building!\\n\\n[https://twitter.com/TSStrickland1/status/1447628773906698246?s=20](https://twitter.com/TSStrickland1/status/1447628773906698246?s=20)\\n\\n\",\"timestamp\":1634582332,\"title\":\"Generate your own NFT collection without writing a single line of code\"},\"digest\":\"EgalJ7QSqJAk5KppcIMm_bFmTiq8OmOH1H9MR-tgBHw\",\"authorship\":{\"contributor\":\"0xE8BA9a74840a421EDe15ED6310B9eC9511391930\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"PYr6wlNV6SqcsZOCw6Lp8Y4Fi6tcC3gN5sXyBQtJrfM\\\",\\\"y\\\":\\\"feLX2t8-KLg8QBmIhX_MOknTVk-tzJrMu9cCodiBSUk\\\"}\",\"signature\":\"pF_OjzDHY1ez-Jh0R0TzN3lWbVSLTqVUKkpChgfuRC_4VBwaTg7oH_xxMOv4qcG7aKtiwCjJwQxPMPaA8WedGg\",\"signingKeySignature\":\"0x753974c7593feb32dfa166379efdbfbec0febadb8e369f47a433975c9dc19b117e8d3cf7790d964f0c9f4d49694e57ea2e2939c6908644ae3f504e87bbd6e6df1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"PYr6wlNV6SqcsZOCw6Lp8Y4Fi6tcC3gN5sXyBQtJrfM\\\",\\\"y\\\":\\\"feLX2t8-KLg8QBmIhX_MOknTVk-tzJrMu9cCodiBSUk\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"EgalJ7QSqJAk5KppcIMm_bFmTiq8OmOH1H9MR-tgBHw\"}"