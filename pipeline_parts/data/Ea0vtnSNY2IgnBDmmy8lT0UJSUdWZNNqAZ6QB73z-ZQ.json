"{\"content\":{\"body\":\"<h2 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n22px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">xy=k</span><span style=\\\"box-sizing:\\nborder-box;\\\"></span></h2>\\n<p>关于这个 V1 和 V2 版本的核心公式，相信大家已经很熟悉了，不了解的小伙伴可以看这篇\\n<https://github.com/rebase-network/Dapp-Learning/blob/main/basic/13-decentralized-exchange/uniswap-v1-like/README.md>\\n。</p>\\n<p>虽然它是很经典的 AMM 公式，但存在一个很大问题，就是资金利用率不高。</p>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">v2 的价格区间</span></h3>\\n<p>我们先简单回顾一下在一个流动性池子中，如何表达资产的价格。</p>\\n<p>假设有资产 X 和资产 Y，现在存在一个以 X 和 Y 资产组成的交易对池子。当我们要用资产 X 来标价 Y 的时候，<code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">PriceY = x的数量 / y的数量</code>，这很容易想到。</p>\\n<p>我们在直角坐标系上，用 x 轴表示资产 X 的数量，y 轴表示资产 Y 的数量，那么将上面的式子变换可以得到 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">y = p \\\\* x</code>，为了简化，我们用 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">p</code> 来表示 priceY。</p>\\n<p>于是我们可以在坐标系上添加一条直线，其斜率的倒数 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">x/y</code>，就是价格 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">p</code>。当价格变化的时候，就是这条直线的斜率在变化。</p>\\n<p>流动性就可以用一个矩形的面积来表示。因为<code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">k</code>的实际意义就是用来衡量一个池子的流动性数量，而<code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">x*y=k</code>，所以池子中<code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">资产X的数量 \\\\* 资产Y的数量 = 流动性数量</code>。</p>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_gif/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp308Z6UugaZQ5Xns1QOaDwx7NQugRB5b8Yd4cU7wEML5OAgYI6iceB8BQ/640?wx_fmt=gif>\\\"></p>\\n<p>\\n在上图中，资产 Y 的价格在下跌（X 的价格在上涨），绿色区域的面积是流动性数量\\nk，需要保持恒定不变，于是随着价格变化，矩形右上方端点（图中的红点）就能划出一条我们熟悉的双曲线。随着价格下跌，红点逐渐上移，矩形的高度(y)不断变大，而宽度(x)不断变小。当价格趋近于 0 时，红线会无限接近和 y\\n轴重叠，但却不可能真正重叠，因为绿色的双曲线是不会和坐标轴相交的。所以我们的池子做市的价格下限是 0，同理，价格上限是无穷大（因为双曲线和 x 轴也不会相交）。\\n<br>\\n</p>\\n<p>所以在 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">x*y=k</code> 的情况下，做市的价格区间是 (0, ∞)。</p>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">资金利用率</span></h3>\\n<p>价格区间(0, ∞)看起来很理想，我们的资金在任何时候（任意价格点）都能为我们赚取手续费。</p>\\n<p>但我们忽略了另一个影响收益的重要因素，那就是资金的利用率。当一个用户来用我们的池子做交易时，其交易的量相比我们的流动性来说是很小的。</p>\\n<p>假设现在池子内资产 X 和 Y 都有 8 个，价格 p 为 1。</p>\\n<p>现在有一笔订单，用 1 个 X 来换取 1 个 Y，我们先不考虑滑点和手续费的影响，这一笔交易为我们带来的手续费收益是 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">fee = 1 \\\\* 0.3%</code>，实际参与赚取手续费的流动性就是输出的 1 个\\ny，这相比于总流动性是很小的，在这一笔交易中，资金利用率是大约是 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">1 / 8</code>。也就是说，我们只需要极少一部分流动性就能承载这一笔交易，而大部分流动性在交易过程中只是躺在那做收益的分母而已……</p>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_png/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp3jurkdgiclC43bN2dcia3yic3kCOdGZc8xmeQ98Jibb7kIOSqYDUVSrdRDQ/640?wx_fmt=png>\\\"></p>\\n<p>\\n回到我们的坐标系上，当用户用 X 换取 Y 的时候，价格会从低点涨到高点，红点从 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">p_lower</code> 移动到 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">p_upper</code> 的过程中（X\\n的价格），实际参与交易的流动性仅仅是橙色的矩形区域。这里为了便于查看，夸大了价格的变动区间，实际交易过程中，价格变动不会这么大，所以橙色区域是极小的。\\n<br>\\n</p>\\n<p>所以提高利用率的关键是既要移除那些躺在那不干活的流动性（绿色区域），又要保证这个函数模型不变。于是我们将其换成了虚拟的流动性，即 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">x_virtual</code> 和 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">y_virtual</code>，而添加流动性时，只需要注入橙色区域的流动性即可。于是公式变成了如下模样：</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\n(x + x_virtual)*(y + y_virtual)=k\\n<br>\\n</code>\\n</pre>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_png/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp3nBRbfLAeJpy0xDbHdzicSI52dbVgOhVEicsDX4O5D9MjbJy3uLc6cQ4Q/640?wx_fmt=png>\\\"></p>\\n<p>\\n整个图形向左下方平移了，因为价格是直线的斜率，所以平移对于实际交易是没有影响的。<strong style=\\\"box-sizing: border-box;\\\">前提是价格没有超出限定的区间</strong>。\\n<br>\\n</p>\\n<p>正如上图所示，如果价格上涨，超出了 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">p_upper</code>，代表价格的点会来到 y 轴左侧，即这个时候 x\\n的数量为负数。这是不可能存在的情况，因为在实际情况中，为负的资产数量是没有意义的。所以当我们给池子增加了虚拟流动性之后，我们向其中注入的真实流动性，都只能在特定的价格区间做市，一旦价格超过区间，流动性就枯竭了，或者说，池中其中一种资产的数量变为 0，无法再为市场提供流动性，除非价格再次回到区间内。关于池中资产由 X 全部转换成 Y，这一特性后面我们还会展开讨论，这里先回到资金利用率的问题。</p>\\n<p>如果你的线性代数不好，可能会被平移的方向绕晕，那么这里我有一个不太恰当的比喻帮助你理解虚拟流动性。回到图 02，你可以想象虚拟流动性就是在 x 轴和 y\\n轴方向上，给真实的流动性（橙色区域）的两个增高垫，也就是绿色区域补足的部分，帮助我们可以用较少的资金达到原先的做市效果。</p>\\n<p>事实上，对于使用交易功能的用户来说，v3 的模型和 v2 的模型没有区别，整个价格还是在 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">xy=k</code> 的曲线上运行（把<code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">(x + x_virtual)</code> 整体当成 x， y 同理）。不论 V2 还是\\nV3，交易过程中，实际使用的流动性都只是橙色区域，而更多的绿色区域是虚拟的还是真实的流动性，对于他们来说没有区别，观察到的仍是图 02 的模型。</p>\\n<p>而提供流动性的用户看到的样子，是图 03，在设定的价格区间内，我们解决了资金利用率的问题。</p>\\n<h2 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n22px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">V3 的核心公式</span><span style=\\\"box-sizing:\\nborder-box;\\\"></span></h2>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">核心公式的推导</span></h3>\\n<p>V3 的核心公式，其实刚才已经出现了，我们只需要将虚拟流动性具体算出来就好了。为了方便后面的计算，我们将代表流动性的 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">k</code> 换成 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">𝐿^2</code> 即 L 的平方。</p>\\n<p>现在我们回到图 02，可以看出 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">x_virtual</code> 的长度实际是 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">p_upper</code> 点的 x，而 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">y_virtual</code> 的长度实际上是 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">p_lower</code> 点的\\ny。所以在确定价格上下区间的情况下，我们可以利用价格的公式 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">y = p*x</code> 和 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">xy=L^2</code> 来换算虚拟流动性的长度。(这里为了变量名称统一，将价格点统一称为 lower 和 upper，白皮书中是 a 和\\nb，不影响结果。)</p>\\n<p>将前者代入后者，得到 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">p \\\\*\\nx^2 = L^2</code>, 进而就能得到如何用 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">L</code> 和 根号价格 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">√p</code> 表达 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">x</code> 和 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">y</code>：</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nx = L / √p\\n<br>\\ny = L \\\\* √p\\n<br>\\n</code>\\n</pre>\\n<p>于是两个虚拟流动性就可以写为：</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nx_virtual = L / √p_upper\\n<br>\\ny_virtual = L \\\\* √p_lower\\n<br>\\n</code>\\n</pre>\\n<p>核心公式就呼之欲出了：</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\n(x + L / √p_upper) \\\\* (y + L \\\\* √p_lower) = L^2\\n<br>\\n</code>\\n</pre>\\n<p>可以看到，公式中是将 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">p_upper</code> 和 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">p_lower</code> 作为已知的变量，所以在 V3 中添加流动性，是需要用户自己设置需要做市的价格区间的。V3\\n中创建者不同或者价格区间不同（或手续费水平不同，后面展开讨论）都是不同的流动性头寸 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">position</code>。</p>\\n<blockquote style=\\\"box-sizing: border-box;margin-top: 20px;margin-bottom: 20px;border-top: none;border-right:\\nnone;border-bottom: none;border-left-color: rgba(0, 0, 0, 0.4);font-size: 0.9em;overflow: auto;background: rgba(0,\\n0, 0, 0.05);color: rgb(106, 115, 125);padding: 10px 10px 10px 20px;font-family: Optima-Regular, Optima,\\nPingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times New\\nRoman\\\", serif;text-align: left;white-space: normal;\\\">\\n<p>在 V2 中代表用户提供了流动性的凭证是 ERC20 类型的 LP token （liquidity provider token），因为所有流动性都可以被认为是价格区间为 (0, ∞) 的流动性，因此可以用同质化代币流通。但\\nV3 中每个流动性可能价格区间都不同，因此需要用 ERC721 类型（NFT）的非同质化代币表示。</p>\\n</blockquote>\\n<p>需要注意的是，当池子中的交易价格，移动到做市的价格区间之外，我们注入的流动性将不再赚取手续费，也就是未激活状态，而当价格再次回到区间内时，流动性再次变为激活状态。</p>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">流动性资产的变化</span></h3>\\n<p>当价格变化时，流动性内的资产 Y 和资产 X 数量会发生变化，在 V2 中这个变化会引起无常损失，而在 V3\\n中，它的影响会被放大很多倍。因为当价格移动到区间以外的时候，你的流动性头寸中，其实已经变为了单一品种的资产，而另一个资产数量已经清零。</p>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_gif/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp3oT4YvibpNzG5fjOjOFswBjI1yfeUqoCdjbeFib7fm1zSAAOo2Cx83DVw/640?wx_fmt=gif>\\\"></p>\\n<p>\\n观察图中橙色区域的变化可以很容易理解这点，当价格不断上涨，x 的数值是不断减小，直至到达价格上限时，x 完全清零。这一点和 V2 差别很大，其原因就是因为 V3 引入了虚拟流动性。这也是为了提高资金利用率而需要承担的风险。\\n<br>\\n</p>\\n<h4 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n18px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">价格区间的风险与收益</span></h4>\\n<p>当出现价格在区间以外的情况，此时流动性头寸不但不能继续赚取手续费，同时必定全部变成了单一资产，且一定是当时市场中处于弱势一方的资产。比如当资产 Y 涨价，将会有大量订单用资产 X 从池子中换取 Y，于是池子中的 X 越来越多，而 Y\\n最终会清零。因为 AMM 自动做市，实际上也是一种被动的做市，永远需要和市场中的订单做对手盘。</p>\\n<p>也就是说，价格区间越窄，价格移出区间的概率越大，风险越大，而区间越宽，风险就越小。如果你厌恶这种价格移出区间的风险，那么大可直接将价格区间设置为 (0, ∞) ，官方的 UI\\n界面也支持这个操作，那么你就会得到一个完全没有虚拟流动性，和 V2 差不多的全价格区间流动性了。</p>\\n<p>当然这么做的代价就是，资金利用率和 V2 也没差别，非常的低。这就相当于你将资金均匀分散到一个很长的价格轴上，虽然每次交易都能赚取手续费，但由于资金在每个价格点上被摊薄的太厉害，导致每次赚取手续费的占比权重非常低。</p>\\n<h4 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n18px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">添加流动性和移除流动性</span></h4>\\n<p>添加流动性的计算过程，是已知当前价格和输入的其中一种资产数量，计算另一种资产的数量和添加的流动性数量。</p>\\n<p>V2 中添加流动性，因为价格就是两个资产的比值，所以很容易计算另一种资产数量，然后将两个资产数量相乘就得到了流动性的数量（ <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">xy=k</code>）。但 V3 引入了价格区间的概念，使得计算变得比较复杂。</p>\\n<p>回顾一下刚才计算虚拟流动性的过程，其中我们推导出了如何用 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">L</code> 和 根号价格 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">√p</code> 表达 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">x</code> 和 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">y</code>：</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nx = L / √p\\n<br>\\ny = L \\\\* √p\\n<br>\\n</code>\\n</pre>\\n<h5 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight:\\nbold;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">价格 p 在区间内</span></h5>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_png/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp3jurkdgiclC43bN2dcia3yic3kCOdGZc8xmeQ98Jibb7kIOSqYDUVSrdRDQ/640?wx_fmt=png>\\\"></p>\\n<p><code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">p_lower < p <\\np_upper</code></p>\\n<p>假定添加的流动性是图 02 中的情况，当前价格包含在设定的价格区间内，橙色区域是我们实际需要添加的流动性，虚拟流动性是绿色区域扣除橙色的部分的宽度和高度。</p>\\n<p>如果我们需要计算橙色部分，为了和上述公式中的 x,y 区分开，我们将橙色部分的宽高称之为 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">delta x</code> <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">delta y</code>。<code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">delta x</code> 就是 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">p</code>（红点） 和 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">p_upper</code> 在 x 轴上的距离， <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">delta y</code> 就是 <code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">p</code> 和 <code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">p_lower</code> 在 y\\n轴上的距离。于是我们可以将公式写成这样：</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\ndelta x = L / √p - L / √p_upper = L \\\\* (√p_upper - √p) / (√p \\\\* √p_upper)\\n<br>\\ndelta y = L \\\\* √p - L \\\\* √p_lower = L \\\\* (√p - √p_lower)\\n<br>\\n</code>\\n</pre>\\n<p>再变换一下，改写成求 L（流动性数量）的等式</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nL = delta x \\\\* (√p \\\\* √p_upper) / (√p_upper - √p)\\n<br>\\nL = delta y / √(p - p_lower)\\n<br>\\n</code>\\n</pre>\\n<p><code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">deleta x</code> 和 <code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">delta\\ny</code> 就是橙色区域的宽高，在这里我们是已知其中一个的，因为那就是我们输入的其中一种将要注入流动性的资产数量。上面两个等式任意一个就能求得 L，所以不论给定的是 x 的数量，还是 y\\n的数量，我们都能得到将要添加的流动性数量 L。拿到 L 之后，根据另一个等式可以求得另一个资产的数量。</p>\\n<h5 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight:\\nbold;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">价格 p 大于区间</span></h5>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_png/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp3G9IiaDicrzNmSME8cIbJqrQmr0Pe3NgfI0ib7Dm1a9ibgajSZJ9rnzIR2Q/640?wx_fmt=png>\\\"></p>\\n<p>\\n<code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">p_upper < p</code>\\n<br>\\n</p>\\n<p>此时橙色区域已经消失，资产 X 的数量为 0，流动性全部变为资产 Y，其数量就是 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">p_upper</code> 到 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">p_lower</code> 的 y 轴距离，也就是图中的紫色虚线部分。我们根据 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">delta y</code> 求得 <code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">L</code> :</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nL = delta y / √(p_upper - p_lower)\\n<br>\\n</code>\\n</pre>\\n<h5 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight:\\nbold;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">价格 p 小于区间</span></h5>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_png/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp3ymONPprWZpTpop4Ul9wS1iaibEK1RxFTp9XLMAiawAzWtosWUcQcrzzdw/640?wx_fmt=png>\\\"></p>\\n<p>\\n<code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">p < p_lower</code>\\n<br>\\n</p>\\n<p>此时橙色区域已经消失，资产 Y 的数量为 0，流动性全部变为资产 X，其数量就是 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">p_upper</code> 到 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">p_lower</code> 的 x 轴距离，也就是图中的蓝色虚线部分。我们根据 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">delta x</code> 求得 <code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">L</code> :</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nL = delta x \\\\* (√p_upper \\\\* √p_lower) / (√p_upper - √p_lower)\\n<br>\\n</code>\\n</pre>\\n<h5 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight:\\nbold;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">移除流动性</span></h5>\\n<p>移除的过程实际上是上述添加过程的逆运算，也是分三种情况，这里就不赘述。</p>\\n<p>\\n<br style=\\\"box-sizing: border-box;color: rgb(0, 0, 0);font-family: Optima-Regular, Optima, PingFangSC-light,\\nPingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times New Roman\\\",\\nserif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);\\\">\\n</p>\\n<p><strong style=\\\"box-sizing: border-box;\\\">总结一下</strong>:V3 的流动性计算过程是需要先确定价格范围 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">p_upper</code> <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">p_lower</code>、当前价格 <code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">p</code> 和其中一种资产的数量 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">delta x</code>或 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">delta y</code>，求流动性数量 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">L</code> 和另一种资产的数量。</p>\\n<h4 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n18px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">限价单</span></h4>\\n<p>事实上，这种资产 X 全部转为资产 Y 的特性并不能算是缺陷，反而是一种可以利用的特性。比如当我们与市场看法相反的时候，市场大部分人看好 X，而你却看好 Y（或者看空\\nX），于是你故意设置了一个比较窄的价格区间（容易被价格穿过），放在比当前价格高的地方，此时注入流动性，将会全部是资产 X。当资产 X 价格上涨时，先进入你的流动性价格区间，不断有人用资产 Y 换走你池内的资产\\nX，直至价格完全穿过价格区间的上限，池内的资产 X 被全部换成了资产 Y。实际上就是图 04 中展示的过程。</p>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_gif/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp3oT4YvibpNzG5fjOjOFswBjI1yfeUqoCdjbeFib7fm1zSAAOo2Cx83DVw/640?wx_fmt=gif>\\\"></p>\\n<p>\\n回看整个过程，我们在一个价格区间内，完成了资产 X 到资产 Y 的转换，这就是一种变相的限价单功能。和传统的限价单不同的有两点：\\n<br>\\n</p>\\n<ul style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\">如果价格不能完全穿过整个价格区间，那么只会有部分资产被转换成另一种资产</li><li style=\\\"box-sizing:\\nborder-box;\\\">在转换完成后，请一定要记得将流动性移除，否则当价格再次回到区间内，又会做一次逆向的交易（将资产 Y 又换成了资产 X）</li></ul>\\n<h2 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n22px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">交易</span><span style=\\\"box-sizing:\\nborder-box;\\\"></span></h2>\\n<p>在 V2 中，当用户在 UI 界面中填入想要交易的种类和某一方的精确数量（输入或者输出），UI 的就会自动根据 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">xy=k</code> 这个公式本地计算出预估的另一方的数量和交易的滑点。如果去查看 V2 的路由合约 <code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">Route</code>，就会发现估算交易量的函数 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">quote</code>，实际是一个 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">pure</code> 函数，即仅做纯计算的函数。因为计算过程就是根据池子中两种资产的总量和你的输入（或者输出）等比换算的过程。</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\namountB = amountA \\\\* reserveB / reserveA\\n<br>\\n</code>\\n</pre>\\n<p>观察上述 V2 的 quote 公式，你会发现计算数量其实只用查询池子两种资产的总量 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">reserveA</code>, <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">reserveB</code>，就能进行换算，而这两个数据是池子合约 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">pair</code> 的 public 属性，是可以直接访问获得的。</p>\\n<p>而在 V3 的机制里，不可能实现用本地计算估算交易量，因为价格的变动是不确定的。</p>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_png/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp31AcibILVkbZic1icrxuGMEn48JPEWYem7Vu8vBNd8yrNm2BibicbeSCGGTw/640?wx_fmt=png>\\\"></p>\\n<p>\\n上图中，左边是 V2 的流动性分布，可以看到是覆盖在整个价格轴均匀分布的。中间的是 V3 的单个流动性头寸(<code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break:\\nbreak-all;\\\">position</code>)的分部，也就是当一个池子内，只注入了一次流动性的时候的状态，在一个价格区间内，均匀分布。而最右侧，是当很多个流动性叠加后，池内流动性的分布，也就是说因为每笔注入的流动性价格区间不同，他们会有重叠的区域，于是在重叠的区域上，流动性是会叠加的，也就形成了右侧这种不同价格区间内，堆叠高度不同的柱状分布。\\n<br>\\n</p>\\n<p>当然上述的堆叠图也只是一个示意图，在真实情况的流动性分布，会是如下的样子：</p>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_png/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp3sfb1otp9Iuy4csfG1e3XPooBUDeZsPXRtqb3Lc9zILiajUyNLag8TtQ/640?wx_fmt=png>\\\"></p>\\n<p>\\n现在假设价格处于一个持续上涨的趋势，当价格开始从左至右穿过这些价格区间时，会不断用一种资产换取另一种资产，而被换出的资产储备是不断减小的，一旦当前价格区间的某种资产被耗尽，价格会穿过当前区间，进入下一个区间，由此产生了价格的变化（因为价格右移了，变大了）。在价格移动消耗池内资产数量的过程中，输入的资产数量也会不断减少，一旦在某个区间输入资产被耗尽，那么价格就会停留在该区间内。\\n<br>\\n</p>\\n<p>当然只是让价格停留在区间内，是不精确的，这个时候我们就需要借助计算添加流动性推导出来的公式，去反推计算出一个精确的价格（在该价格区间内）。</p>\\n<p>为了实现上述计算，就必须清楚每一个 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">tick</code> 上的流动性分布，然后像真实交易的过程那样，逐个计算每个 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">tick</code> 区间内流动性是否被耗尽，最后得出交易的价格，才能确认这一笔交易的滑点水平。（UI 界面中并没有这么干，而是很 tricky\\n的使用了<code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco,\\nMenlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left:\\n2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">ethers.staticCall</code>去模拟调用合约的交易功能，最后在 revert 信息中读取预估数据，这一点感兴趣的同学可以去阅读 interface 的解析部分，这里不展开讨论）。</p>\\n<p>细心的同学可能发现，刚才的描述中出现了名为 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">tick</code> 的新概念，这就是接下来我们需要深入探讨的问题。</p>\\n<h2 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n22px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">手续费</span><span style=\\\"box-sizing:\\nborder-box;\\\"></span></h2>\\n<p>在 V2 中，因为大家提供的流动性都是统一的手续费标准（0.3%），统一的价格区间(0,\\n∞)，所以大家的资金都是均匀分布在整个价格轴之上的，因此在每一笔交易的过程中，大家收取手续费的权重计算比例也应该是相等的。即每一笔手续费的收益分配，只基于用户提供的流动性相对于总流动性的比例来分配，出资多的得到的收益多，这很好理解。</p>\\n<p>然而 V3 的价格区间做市机制，让 V2 的分配机制不再公平，因为流动性都有不同的做市区间，也就是说不同的交易价格，使用的流动性是不同的，那么这个时候，再用出资比例来分配，是不合适的。</p>\\n<p>正确的方式应该是记录每一笔交易，都使用了哪些流动性头寸 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">position</code>，再将这么些头寸汇总，按比例分配。</p>\\n<p>这样在理论上来说是合理的，如果是中心化的网络这么干的成本可能承受的起，但放到区块链的运行环境中，频繁的进行高昂的读写操作是不可行的，会为用户带来极高的 gas 费用，使得交易的摩擦成本飙升，变得不划算。</p>\\n<p>我们需要一个节省 gas 的实施方案。</p>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">离散的价格点 Ticks</span></h3>\\n<p>优化的第一步，先从价格轴开刀。一个连续的价格轴上，可以拥有无穷多个价格点，因为即使是 (0,1) 这个区间，你都能将其划分成无限多个小数。如果我们在 V3 中仍用连续的价格轴来记录，那将会是一个无限膨胀的 storage\\n变量。</p>\\n<p>那么我们确定了第一个条件，价格轴必须是不连续的，即一个个离散的点组成的集合。交易的价格只能限定在这些点之中。</p>\\n<p>限定价格点，当然会带来价格不精确的问题，毕竟我们将相邻两个点之间的价格都去掉了。为了保证这种精度的误差不至于对交易有过大的影响，我们设置的点的间隔也不能太大，那么就先定为相差 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">0.0001</code> 好了。</p>\\n<p>于是我们得到了一个差为 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">0.0001</code> 的等差数列。因为 solidity 不支持小数，所以我们决定对这些等差元素进行编号，比如 0.0001 是 1 号， 0.0002 是 2 号...</p>\\n<p>然后很快你就排不下去了，因为 solidity 最大的整数是 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">2^256</code>，大约在 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">1.158e73</code> 的价格就到头了。看起来上限也足够大了，但我们忽略另一种情况，那就是比公差小的价格，也就是 (0,0.0001) 之间的价格，很多小币值 token\\n如果和 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">btc</code>, <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">eth</code> 组成交易对，都在这个区间。所以等差数列也不太合适。</p>\\n<p>实际上等比数列虽然表现好点，但问题本身还存在。</p>\\n<p>我们其实在设置等差或等比数列的时候忽略了一个前提，当价格的值越大的时候，对价格精度的要求会越来越低（想象一下当价格在几万刀的时候，价格的波动会局限于 0.0001\\n的差距吗？），所以价格的间隔也就没必要那么小。反过来，当价格越小的时候，需要的价格精度也就越高，需要的间隔也就越小。所以我们需要的是一个间隔由极小逐渐增大的数列。</p>\\n<p>也就是 V3 使用的等幂数列。即：</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\np(i)=1.0001^i\\n<br>\\n</code>\\n</pre>\\n<p>这里的 i 是价格的序号，一个 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">int24</code> 类型（有符号）。当 i 为 0 的时候，价格为 1，这就是价格的基点。当 i 越来越大，其间隔会越来越大，而当 i 越来越小，其间隔会越来越小。这里当 i\\n为负数时，实际上是对 1.0001 开根号，价格是 (0,1) 区间内的数值。</p>\\n<p>由于在实际计算过程中使用的不是价格 p 而是根号价格 √p(例如之前流动性与 token 数量的换算中)，我们需要将价格表达调整为：</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\n√p(i)=(√1.0001)^i\\n<br>\\n</code>\\n</pre>\\n<p>在 V3 中的价格是从 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">(√1.0001)^(int24).min</code> 到 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">(√1.0001)^(int24).max</code> ，这是一个足够宽广的价格区间，且满足交易中的精度要求。</p>\\n<p>这里的 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">i</code> 也就是价格的序号，我们称之为 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">tick</code>，而由所有序号组成的集合称之为 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">Ticks</code>。在合约代码中，主要是以 tick 来记录流动性的区间。</p>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">交易费率水平和 tickspacing</span></h3>\\n<p>我们用等幂数列将连续的价格轴变成了离散的点集合，已经简化了一大步，可惜并不够。因为市场中的交易对，其价格波动的幅度并不是统一的，比如两个稳定币组成的交易对（dai+usdc) 其波动是集中在一个非常小的幅度内的，而如果是两个\\nAltCoin(山寨币)，那么价格波动可能就非常大。对于波动幅度小的交易对，需要比较密集的价格点来提高精度，而本身波动非常大的交易对，则不需要耗费太多 gas 在密集的价格点计算上，即比较稀疏的价格点分布。</p>\\n<p>不仅是价格点的密度需求不同，不同波动幅度的交易对需要的手续费等级也不同。比如稳定币交易对，由于波动非常小，交易产生的价差也不可能太大，如果收取 0.3%\\n或更高的手续费是不合适的，不利于市场的流动性，而两个山寨币的交易对，由于波动幅度非常大，其产生的价差也可能非常大，即使是 1% 的手续费也有很多人愿意执行交易。</p>\\n<p>于是 V3 引入了费率三档可选等级和相应的 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">tick</code> 疏密程度，也就是 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">tickspacing</code> 。对于每一种交易对而言，都有三档可选费率等级，0.05%, 0.3%,\\n1%，并且以后通过社区治理，还有可能永久增加可选的挡位。每种交易费率等级都由给定的 tickspacing，比如稳定币交易对，就是 tick 之间需要间隔 10 个才是有效的可使用的 tick 。位于间隔内的 tick\\n虽然存在，但程序不会去初始化和使用，也就不会产生 gas 费用。因此，我们在等幂数列的基础上，进一步节省了计算消耗。</p>\\n<p>V3 设定的费率等级：</p>\\n<table>\\n<thead style=\\\"box-sizing: border-box;\\\">\\n<tr style=\\\"box-sizing: border-box;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style:\\ninitial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color:\\ninitial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\\\"><th style=\\\"box-sizing:\\nborder-box;text-align: left;border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240,\\n240, 240);min-width: 85px;\\\">费率</th><th style=\\\"box-sizing: border-box;text-align: left;border-top-width:\\n1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);min-width: 85px;\\\">tickspacing</th><th\\nstyle=\\\"box-sizing: border-box;text-align: left;border-top-width: 1px;border-color: rgb(204, 204,\\n204);background-color: rgb(240, 240, 240);min-width: 85px;\\\">建议的使用范围</th></tr>\\n</thead>\\n<tbody style=\\\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;\\\">\\n<tr style=\\\"box-sizing: border-box;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style:\\ninitial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color:\\ninitial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\\\">\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">0.05%</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">10</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">稳定币交易对</td>\\n</tr>\\n<tr style=\\\"box-sizing: border-box;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style:\\ninitial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color:\\ninitial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);\\\">\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">0.3%</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">60</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">适用大多数交易对</td>\\n</tr>\\n<tr style=\\\"box-sizing: border-box;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style:\\ninitial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color:\\ninitial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\\\">\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">1%</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">200</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">波动极大的交易对</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">liquidityNet 和 liquidityGross</span></h3>\\n<p>这两个是存于 tick 上和流动性相关的数据。</p>\\n<p><code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">liquidityGross</code>:\\n很好理解，每当有流动性将该 tick 设为价格区间时，不论是价格上限还是价格下限， <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">liquidityGross</code> 都会增加。换言之，当 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">liquidityGross > 0</code> 说明该 tick\\n已经初始化，正在被流动性使用，而 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">liquidityGross == 0</code> 则该 tick 未初始化，没有流动性使用，计算时可以忽略。</p>\\n<p><code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">liquidityNet</code>: 表示当价格穿过该\\ntick 时，处于激活的流动性需要变化的数量。</p>\\n<p>在注入或移除数量为 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">l</code> 的流动性时，具体规则如下：</p>\\n<ul style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\">注入流动性，tick 是价格下限，<code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">liquidityNet</code> 增加 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">l</code></li><li style=\\\"box-sizing:\\nborder-box;\\\">注入流动性，tick 是价格上限，<code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">liquidityNet</code> 减少 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">l</code></li><li style=\\\"box-sizing: border-box;\\\">移除流动性，tick 是价格下限，<code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">liquidityNet</code> 减少 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">l</code></li><li style=\\\"box-sizing: border-box;\\\">移除流动性，tick 是价格上限，<code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">liquidityNet</code> 增加 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">l</code></li></ul>\\n<p>你可能初见此规则，感到很迷惑，为何在注入流动性的时候，<code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">liquidityNet</code> 有减少的情况，移除的时候反而有增加的情况。其实你需要将这个变量理解为 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">delta L</code>。</p>\\n<p>在流动性的章节，我们已经说过流动性有激活和非激活两个状态，即价格区间���含当前价格属于激活状态，反之则是未激活状态。那么一个池子内，处于激活状态的流动性数量总是随着价格的变动在变化的。而 <code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">liquidityNet</code> 记录的就是当价格穿过该 tick 时，需要增加或减少的数量。</p>\\n<p>举个栗子：假设现在有两个首尾相连的价格区间(a,b) 和 (b,c)，分别有 1 和 2 的流动性。当价格从 a 点左侧进入 (a,b) 区间，此时池子的激活流动性应该增加 1，那么我们在 a 的 tick\\n上写入 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">liquidityNet += 1</code> ，当价格走到 b 点，此时已经离开了 (a,b) 区间，池子的激活流动性应该减少 1，所以 b 点的 tick 上写入 <code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">liquidityNet -=\\n1</code>。然后进入了第二个区间，池内刚刚减少的激活流动性，又要增加了，于是 b 的 tick 上又写入 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">liquidityNet += 2</code>，直至价格穿过 c 点，池内激活流动性又需要减少 2 ， c 点的 tick 上写入 <code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">liquidityNet -= 2</code>。</p>\\n<p>我们需要的是一个可以精确控制池内激活流动性总数的差值，这就是 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">liquidityNet</code> 有增有减的原因。实际上，类似图 08 那样的，在 UI 界面绘制出精确的流动性分布图，就是利用当前池内激活流动性总量和每个 tick\\n上的 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">liquidityNet</code> 去累加或者累减的结果。</p>\\n<p>现在知道了 tick 上的流动性分布情况，是不是就能来计算手续费的收益情况了呢？</p>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">直接累加手续费的方案</span></h3>\\n<p>现在我们来设计一套手续费的计算方案。既然之前已经拿到了流动性的分布情况，那么每笔交易的进行过程中，我们就能根据相应的交易量，对应相应的流动性头寸，将其产生的手续费数量加上去。</p>\\n<ul style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\">\\n<p>一笔交易开始，根据之前交易部分的过程描述，交易会在已有流动性的 tick 之间，逐个进行</p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p>当价格来到一个 tick 区间内（相邻的两个具有流动性的 tick），我们只要记录这个 tick 区间内的交易量，根据费率算出该区间的总手续费</p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p>然后找出所有包含该 tick 区间的流动性头寸 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35,\\n0\\\\.05);word-break: break-all;\\\">position</code>，先将他们的数量汇总</p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p>再根据出资比例逐个分配手续费，将数值累加到待每个头寸的待收取手续费的变量上</p>\\n</li></ul>\\n<p>这个过程符合直觉，而且逻辑其实并不算复杂。但是<strong style=\\\"box-sizing: border-box;\\\">十分消耗 gas</strong>。</p>\\n<p>先不谈一笔交易可能会横跨很多个 tick ，单就一个 tick 的计算，就有可能涉及到非常多的流动性头寸 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">position</code>，这不但需要一个耗时的遍历查找的过程，更严重的问题是，每个流动性头寸的待收取手续费肯定是一个 storage\\n变量，当我们去逐个写入新的数值的时候，gas 费用就起飞了。</p>\\n<p>上述方案让交易者承担了做市者的 gas 费用，因为记录手续费的分配细节，是做市商们的事务。对于交易者来说，本就承担了手续费，然后还要负责耗费大量 gas\\n去帮他的对手盘们记录怎么分钱，这肯定不是什么美妙的体验。其实就算是做市商也不会愿意承受。</p>\\n<p>高昂的 gas 费用是该方案的最大障碍，不得不使用遍历的原因在于分配方案需要保证公平性：</p>\\n<ul style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\">\\n<p>在任意区间内，根据出资比例和参与时长保证分配的公平性</p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p>在不同的价格区间之间，根据出资比例和参与时长保证分配的公平性</p>\\n</li></ul>\\n<p>如果既要避免高昂的遍历操作，又要保证上述两个公平性，就需要换一种方式。</p>\\n<p>我们不妨将任务拆分开来实现。</p>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">相同区间 position 之间的分配</span></h3>\\n<p>为了简化问题，我们假设这个池子内所有的流动性价格区间都是 (0, ∞)。</p>\\n<p>对于计算流动性大小的比例（出资比例），不得不在交易过程中去遍历的原因在于，池内所有流动性头寸 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break:\\nbreak-all;\\\">position</code> ，他们的数量和头寸之间的大小比例是会不断变化的。你无法缓存一个固定的比例，然后在每次交易时按照这个固定的比例分配。</p>\\n<p>因为流动性头寸可能随时会移除或注入，这个比例是无法保证一直正确的，每次交易都需要遍历计算。</p>\\n<p>所以我们应该放弃计算流动性大小的比例，转而去计算每单位流动性能够获取的手续费数量（即 1 个流动性产生的手续费收益）。</p>\\n<p>在提供流动性的用户提取手续费的时候，我们是可以获取他提供的流动性数量的，那么只要将其数量和每单位获取的手续费收益相乘，就是他应得的手续费数量。每单位流动性应得的手续费数量只需要用全局的总手续费除以全局的流动性总量即可。</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nfee = delta L \\\\* (fee_global / liquidity_global)\\n<br>\\n</code>\\n</pre>\\n<p>我们设置一个记录全局的每单位流动性赚取手续费的累计值 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">feeGrowthGlobal</code> （注意有 growth，表示它是累计值）。</p>\\n<p>相关的全局变量有 2 个：</p>\\n<ul style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\">\\n<p><code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco,\\nMenlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left:\\n2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">feeGrowthGlobal</code>:\\n每当有交易发生，就会把每单位流动性赚取的手续费累加到该变量上，这是一个随时间推移 单调递增的变量。（这个变量其实有两个，因为手续费的收取是两种资产分别收取的，所以累计的变量也对应了两个。但因为他们的逻辑完全一样，就不分开讲了）</p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p><code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco,\\nMenlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left:\\n2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">liquidity</code>:\\n池内当前处于激活状态的总流动性数量。<strong style=\\\"box-sizing:\\nborder-box;\\\">注意并非是注入的所有流动性总量，而是只计算价格区间包含当前价格的流动性数量，这个变量的含义非常容易误解</strong>。关于 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left:\\n2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">liquidity</code> 的更新机制，参考之前的 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">liquidityNet</code> 讲解。</p>\\n</li></ul>\\n<p>在交易的过程中，有一个相关的局部变量：</p>\\n<ul style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\"><code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">delta fee</code>: 交易过程中，每一步产生的手续费数量。具体参见之前的交易过程章节。</li></ul>\\n<p>我们只需要用 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">delta\\nfee</code> 除以 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">liquidity</code> 就能得到 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">feeGrowthGlobal</code> 每次需要增加的量。</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nfeeGrowthGlobal += delta fee / liquidity\\n<br>\\n</code>\\n</pre>\\n<p>对于任意相同价格区间的 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">position</code> （不同用户注入的），只需要在流动性发生变化时（注入或移除），计算这段时间内 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">feeGrowthGlobal</code> 的增量再乘以该 <code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">position</code> 的流动性数量，就可以知道这段时间内该 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">position</code> 收取的手续费增量。最后将 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">position</code> 内手续费的增量累加起来就是它应得的数量。</p>\\n<p><strong style=\\\"box-sizing: border-box;\\\">梳理一下</strong>：</p>\\n<ul style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\">\\n<p>我们不需要遍历流动性数量算出流动性数量比例，而是去关注每单位收益的增量，当我们需要计算手续费数量时候，乘以流动性数量即可。</p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p>在 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">position</code> 流动性数量发生变化之前，需要将之前这段时间的手续费增量计算出来，累加记录到相关变量中。（因为流动性数量在变化，不能将所有时间段的手续费都以最后的数量来计算）</p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p>全局的 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">feeGrowthGlobal</code> 是会随着交易进行实时更新的，而 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">position</code> 中的手续费数量不会实时更新，只会在调用\\nmint 和 burn 这两个会改变流动性数量的函数时触发更新。</p>\\n</li></ul>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">不同区间之间的分配</span></h3>\\n<p>我们刚刚解决了同一个区间内的分配方案，或者说是统一的 (0, ∞) 区间。计算过程中使用的是 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break:\\nbreak-all;\\\">feeGrowthGlobal</code>，当池内出现了不同的价格区间，计算就没办法进行了。因为每个区间对于手续费的贡献不同，我们也不能在全局手续费增加的时候，去计算不同区间之间的比例（和之前一样，遍历会让\\ngas 飙升）。</p>\\n<p>我们要如何把 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">feeGrowthGlobal</code> 公平且省 gas 的分配给不同的区间呢？</p>\\n<p>回顾交易的过程，每当价格移动到某个 tick 上，会不断的消耗其上的流动性，这才是产生手续费的根源。那么，如果我们把每次的手续费增量记录到 tick 上，用户收取手续费的时候再汇总其区间内的所有 tick\\n数据，是不是就能实现呢？</p>\\n<p>听起来不错，但依然有问题，因为价格区间内的 tick 也可能非常多，那样就又回到了遍历的问题上。</p>\\n<p>我们需要打破注意力的局限性，把目光移到价格区间之外，会发现有一种变量是不需要遍历计算的： <strong style=\\\"box-sizing: border-box;\\\">区间外的手续费</strong>。</p>\\n<p>如果我们在收取手续费的时候，能知道区间外的手续费数量，不是就能间接知道区间内的手续费了嘛？这里我们依旧以每单位流动性可收取手续费数量作为累加的增量。</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nfeeGrowthInside = feeGrowthGlobal - feeGrowthOutside\\n<br>\\n</code>\\n</pre>\\n<p>假如交易在一个 (a,b) 的价格区间内进行，手续费会在区间内不断累加，但是区间外是一直不变的，即 (0, a) 和 (b, ∞) 区间内的手续费并没有增加。想要计算 (a,b)\\n区间内的手续费，其实只要用池子内所有流动性赚取的总手续费数量减去区间两边外侧的手续费就行了。</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nfeeGrowthInside = feeGrowthGlobal - feeGrowthOutside_below - feeGrowthOutside_above\\n<br>\\n</code>\\n</pre>\\n<p><code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">feeGrowthOutside_below</code> 对应 (0, a) 区间， <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">feeGrowthOutside_above</code> 对应 (b, ∞) 区间。接下来看看如何去获取这两个的数量。</p>\\n<p>我们需要在 tick 上新增一个 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">feeGrowthOutside</code> 变量，记录该 tick 作为流动性边界时，区间外的手续费总量。</p>\\n<p>如果以某个 tick 作为中轴，价格点所在的一侧是内侧，而相对的另一侧是外侧。于是触发其更新的条件其实只有一个：当价格穿过该 tick 时（不论方向左右）。因为只有此时，tick 左右两侧会互换内侧和外侧的定义。</p>\\n<p>另外当没有流动性将该 tick 作为边界时，我们是不用考虑这个变量的，所以我们将 tick 的初始化放在注入流动性的时候，初始化价格边界对应的两个 tick，而当某个 tick 上流动性重新归零 （<code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">liquidityGross ==\\n0</code>），我们在计算时可以再次忽略它。</p>\\n<p><strong style=\\\"box-sizing: border-box;\\\">梳理一下</strong></p>\\n<p>假设价格在第 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">i_current</code> 个 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">tick</code> ，对于第 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">i</code> 个 tick 而言</p>\\n<p>每当有流动性注入的时候，在价格的边界对应的 tick 上有如下初始化规则：</p>\\n<ul style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\">\\n<p>当 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">i_current < i</code> 则 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">feeGrowthOutside = fee_global</code></p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p>当 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">i_current >= i</code> 则 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">feeGrowthOutside = 0</code></p>\\n</li></ul>\\n<p>在交易过程中，<code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco,\\nMenlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left:\\n2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">feeGrowthOutside</code> 有如下更新规则：</p>\\n<ul style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;\\\"><li style=\\\"box-sizing: border-box;\\\">\\n<p><span style=\\\"background-color: rgb(255, 255, 255);\\\">当价格穿过某个已初始化的 tick 时，该 tick 上的 </span><code\\nstyle=\\\"background-color: rgba(27, 31, 35, 0.05);box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);word-break:\\nbreak-all;\\\">feeGrowthOutside</code><span style=\\\"background-color: rgb(255, 255,\\n255);\\\"> 需要翻转，因为外侧手续费永远要在当前价格的另一侧，</span>故<span style=\\\"background-color: rgb(255, 255,\\n255);\\\"> \\\\`feeGrowthOutside = feeGrowthGlobal</span></p>\\n</li><li style=\\\"background-color: rgb(255, 255, 255);box-sizing: border-box;\\\">\\n<p>feeGrowthOutside 有了 tick 上的 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35,\\n0\\\\.05);word-break: break-all;\\\">feeGrowthOutside</code> 变量，区间外两边的外侧手续费就能得出了。</p>\\n</li></ul>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nfeeGrowthOutside_below = feeGrowthOutside_a // a点所对应的tick的feeGrowthOutside\\n<br>\\nfeeGrowthOutside_above = feeGrowthOutside_b // b点所对应的tick的feeGrowthOutside\\n<br>\\n</code>\\n</pre>\\n<p>代入之前的公式</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nfeeGrowthInside = feeGrowthGlobal - feeGrowthOutside_a - feeGrowthOutside_b\\n<br>\\n</code>\\n</pre>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">V3 手续费的完整流程</span></h3>\\n<p>现在我们将两个方案连起来，就是 V3 的解决方案了。</p>\\n<ol style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\">\\n<p>首先我们需要记录池子内全局的每单位流动性收取手续费的数量的累加变量 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">feeGrowthGlobal</code></p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p>在每个有流动性的 tick 上记录外侧的手续费数量 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35,\\n0\\\\.05);word-break: break-all;\\\">feeGrowthOutside</code></p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p>对于任意区间，利用公式计算出区间内的手续费总量 feeGrowthInside</p>\\n</li></ol>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nfeeGrowthInside = feeGrowthGlobal - feeGrowthOutside_lower - feeGrowthOutside_upper\\n<br>\\n</code>\\n</pre>\\n<ol start=\\\"4\\\" style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family:\\nOptima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia,\\nTimes, \\\"Times New Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><li style=\\\"box-sizing: border-box;\\\">该区间内会存在不同用户注入的不同流动性头寸 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">position</code>，在 <code\\nstyle=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">position</code> 流动性数量发生变化时，累加距离上次变化到现在这段时间的手续费数量增量到 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">tokensOwed</code> 变量（该 positioin\\n总共可回收的流动性数量）</li></ol>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\ntokensOwed += feeGrowthInside \\\\* liquidity_position (position的流动性数量)\\n<br>\\n</code>\\n</pre>\\n<ol start=\\\"5\\\" style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family:\\nOptima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia,\\nTimes, \\\"Times New Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><li style=\\\"box-sizing: border-box;\\\">用户收取手续费，从 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">tokensOwed</code> 中扣除，其他变量不受影响。</li></ol>\\n<blockquote style=\\\"box-sizing: border-box;margin-top: 20px;margin-bottom: 20px;border-top: none;border-right:\\nnone;border-bottom: none;border-left-color: rgba(0, 0, 0, 0.4);font-size: 0.9em;overflow: auto;background: rgba(0,\\n0, 0, 0.05);color: rgb(106, 115, 125);padding: 10px 10px 10px 20px;font-family: Optima-Regular, Optima,\\nPingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times New\\nRoman\\\", serif;text-align: left;white-space: normal;\\\">\\n<p>V3 的 position 实际上有两种，一种是 Pool 合约中的（属于底层合约，一般不与用户直接交互），只要价格区间相同，就是同一种 position；而另一种是 PositionManager\\n合约中的，属于用户交互合约，该合约的 position 会区分不同用户。这里为了描述逻辑的连贯性并没有对两种 position 做区分。感兴趣的小伙伴可以具体参考合约代码部分的解析。</p>\\n</blockquote>\\n<blockquote style=\\\"box-sizing: border-box;margin-top: 20px;margin-bottom: 20px;border-top: none;border-right:\\nnone;border-bottom: none;border-left-color: rgba(0, 0, 0, 0.4);font-size: 0.9em;overflow: auto;background: rgba(0,\\n0, 0, 0.05);color: rgb(106, 115, 125);padding: 10px 10px 10px 20px;font-family: Optima-Regular, Optima,\\nPingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times New\\nRoman\\\", serif;text-align: left;white-space: normal;\\\">\\n<p>V2 的手续费计算流程是隐式的，合并在交易和移除流动性的流程中，逻辑比较简单。首先因为所有流动性都有相同的价格区间，再者 V2 没有考虑做市时长的因素，也就是说后注入的流动性会摊薄之前流动性的手续费收益。</p>\\n</blockquote>\\n<h2 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n22px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">预言机</span><span style=\\\"box-sizing:\\nborder-box;\\\"></span></h2>\\n<p>V2 的预言机提供了 TWAP (time-weighted average price 时间加权平均价格)，更新时间是每个区块的第一笔交易的价格，其数值是上一次的数值加上当前价格乘以时间差。</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\na(t) = a(t-1) + price \\\\* delta_t\\n<br>\\n</code>\\n</pre>\\n<p>外部用户可以通过记录该数值的变化和时间点，获得在一段时间内受短期波动影响较小的时间加权价格。</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\np(t1,t2) = (a(t2) - a(t1)) / (t2 - t1)\\n<br>\\n</code>\\n</pre>\\n<p>上述公式得出了在 t1 到 t2 的时间内，预言机提供的时间加权价格。因为其值是经过时间加权的（累加的是价格乘以时间差），所以受短期波动影响较小，这样能有效防止恶意的价格波动。</p>\\n<p>V2 的预言机在核心合约上只保留最新的一个值，所以如果外部用户想要使用这个预言机，需要自己搭建一套监控和记录的设施，增加了使用者成本。</p>\\n<p>V3 相比于 V2 的预言机，有以下较大改动：</p>\\n<ol style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\">\\n<p>相比 V2 累加的是价格的加权数值，V3 累加的是价格的 log 值，即 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">log(price, 1.0001)</code></p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p>在核心合约中增加了存储预言机数值的空间，最大 65536 个数值，至少 9 天的数值，建立监控和记录设施不再是必要条件</p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p>增加关于流动性的预言机数值，记录周期和价格一致（每个区块的第一笔交易），其值是当前激活状态的流动性数量的倒数，即 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">1/liquidity</code></p>\\n</li></ol>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">算术平均与几何平均</span></h3>\\n<p>V2 的方式是直接记录价格的累加值，而使用时再除以时间间隔，这就是一种算术平均 (arithmetic mean)。而 V3 累加的是 <code style=\\\"box-sizing:\\nborder-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">log(price,\\n1\\\\.0001)</code> 也就是价格的幂，使用时再除以时间间隔，这是几何平均 (geometric mean)。</p>\\n<p>所以 V3 的预言机公式需要改成如下:</p>\\n<p><code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color:\\nrgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">a(t)</code> 是时间 t\\n时，预言机记录的值（累加价格的 log 值）。</p>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_png/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp3icZTVOfc1T1AckaqExOawPGB7TTMafzLhyGlfFLM0ahcpD2Nfia27USQ/640?wx_fmt=png>\\\"></p>\\n<p>这里的 log 数值后面其实还有一个 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">\\\\*\\n1s</code> 即以每秒作为时间间隔。然而实际情况中，合约中是以区块的时间戳作为标记时间的，所以合约中的代码跟公式不同。每个区块的头一笔交易时更新，此时距离上一次更新时间间隔肯定大于\\n1s，所以需要将更新值乘以两个区块的时间戳的差。<code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\",\\nConsolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">tickCumulative</code> 是 tick 序号的累计值，tick 的序号就是 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">log(√price, 1.0001)</code>。</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\ntickCumulative += tick_current \\\\* delta_time\\n<br>\\ntickCumulative += tick_current \\\\* (blocktimestamp_current - blocktimestamp_before)\\n<br>\\n</code>\\n</pre>\\n<p>当外部用户使用时，求 t1 到 t2 时间内的时间加权价格 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator\\nMono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius:\\n4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">p(t1,t2)</code> ，需要计算两个时间点的累计值的差 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">a(t2) - a(t1)</code> 除以时间差。</p>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_png/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp3MkDbcOGJQTCoIOMdsyQAics7qxY47wjReFIPVIECZLmyZLFPQ3NgTGA/640?wx_fmt=png>\\\"></p>\\n<p>\\n<br>\\n</p>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_png/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp3XqWOuJ2dLASH42CzG9SM8AfwbHuYhnZ9rpmZrk2IIrPJNGYqVbCA0A/640?wx_fmt=png>\\\"></p>\\n<p>\\n<br>\\n</p>\\n<p>\\n<br>\\n</p>\\n<p><img\\nsrc=\\\"<https://mmbiz.qpic.cn/mmbiz_png/dQFmOEibdOILP5KG5dGqR8AQK7oNvDhp3odlZLWoxTkFuhCVLfNuCsyALvVVxicckFPf3B061tEN1A6vHHia8v8EA/640?wx_fmt=png>\\\"></p>\\n<p>使用几何平均的原因：</p>\\n<ul style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\">\\n<p>因为合约中记录了 tick 序号，序号是整型，且跟价格相关，所以直接计算序号更加节省 gas。（全局变量中存储的不是价格，而是根号价格，如果直接用价格来记录，要多比较复杂的计算）</p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p>V2 中算数平均价格并不总是倒数关系（以 token1 计价 token0，或反过来），所以需要记录两种价格。V3 中使用几何平均不存在该问题，只需要记录一种价格。</p>\\n</li><ul style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: black;list-style-type: square;\\\"><li\\nstyle=\\\"box-sizing: border-box;\\\">举个例子，在 V2 中如果 USD/ETH 价格在区块 1 中是 100，在区块 2 中是 300，USD/ETH 的均价是 200 USD/ETH，但是\\nETH/USD 的均价是 1/150</li></ul><li style=\\\"box-sizing: border-box;\\\">\\n<p>几何平均比算数平均能更好的反应真实的价格，受短期波动影响更小。白皮书中的引用提到在几何布朗运动中，算数平均会受到高价格的影响更多。</p>\\n</li></ul>\\n<blockquote style=\\\"box-sizing: border-box;margin-top: 20px;margin-bottom: 20px;border-top: none;border-right:\\nnone;border-bottom: none;border-left-color: rgba(0, 0, 0, 0.4);font-size: 0.9em;overflow: auto;background: rgba(0,\\n0, 0, 0.05);color: rgb(106, 115, 125);padding: 10px 10px 10px 20px;font-family: Optima-Regular, Optima,\\nPingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times New\\nRoman\\\", serif;text-align: left;white-space: normal;\\\">\\n<p>在<code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco,\\nMenlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left:\\n2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">oracleCompare.ipynb</code>中简单模拟了算数平均和几何平均的预言机机制，实际结果是算数平均受高价影响较大，而几何平均受低价影响较大。</p>\\n</blockquote>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">流动性预言机</span></h3>\\n<p>相比于 V2，任何时刻活跃的流动性就是池子内所有流动性数量总和（因为都是全价格区间），V3 有了不同价格区间，所以不同时刻，激活状态的流动性数量并不是池子内的总流动性数量。为了便于外部使用者更好的观测激活流动性的数量，V3\\n添加了预言机的 <code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas,\\nMonaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right:\\n2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">secondsPerLiquidityCumulative</code> 变量。</p>\\n<pre style=\\\"box-sizing: border-box;font-size: 16px;font-family: SFMono-Regular, Consolas, \\\"Liberation Mono\\\",\\nMenlo, Courier, monospace;margin-top: 10px;margin-bottom: 10px;overflow: auto;color: rgb(0, 0, 0);text-align:\\nleft;background-color: rgb(255, 255, 255);\\\">\\n<code style=\\\"box-sizing: border-box;font-size: 12px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo,\\nmonospace;display: -webkit-box;overflow-x: auto;padding: 16px;color: rgb(171, 178, 191);background: rgb(40, 44,\\n52);border-radius: 0px;\\\">\\nsecondsPerLiquidityCumulative += delta_time / liquidity {liquidity > 0}\\n<br>\\n<br>\\nsecondsPerLiquidityCumulative += delta_time / 1 {liquidity = 0}\\n<br>\\n</code>\\n</pre>\\n<p>（因为 liquidity 可能为 0，此时分母为 1）</p>\\n<p>这里的具体含义是每单位流动性参与的做市时长，即一段时间内，参与的流动性越多，那么每单位流动性参与的时长越短，因为分摊收益的流动性数量变多了，反之亦然。</p>\\n<p>其记录机制和价格逻辑一致，不再赘述。这里介绍一下它的用途。</p>\\n<h3 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n20px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">Tick 上辅助预言机计算的数据</span></h3>\\n<p>每个已初始化的 tick 上（有流动性添加的），不光有流动性数量和手续费相关的变量(<code style=\\\"box-sizing: border-box;font-size: 14px;font-family:\\n\\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding: 2px\\n4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27, 31,\\n35, 0.05);word-break: break-all;\\\">liquidityNet</code>, <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">liquidityGross</code>, <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap: break-word;padding:\\n2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107, 184);background-color: rgba(27,\\n31, 35, 0.05);word-break: break-all;\\\">feeGrowthOutside</code>)，还有三个可用于做市策略。</p>\\n<p>tick 变量一览：</p>\\n<table>\\n<thead style=\\\"box-sizing: border-box;\\\">\\n<tr style=\\\"box-sizing: border-box;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style:\\ninitial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color:\\ninitial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\\\"><th style=\\\"box-sizing:\\nborder-box;text-align: left;border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240,\\n240, 240);min-width: 85px;\\\">Type</th><th style=\\\"box-sizing: border-box;text-align: left;border-top-width:\\n1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);min-width: 85px;\\\">Variable\\nName</th><th style=\\\"box-sizing: border-box;text-align: left;border-top-width: 1px;border-color: rgb(204, 204,\\n204);background-color: rgb(240, 240, 240);min-width: 85px;\\\">含义</th></tr>\\n</thead>\\n<tbody style=\\\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;\\\">\\n<tr style=\\\"box-sizing: border-box;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style:\\ninitial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color:\\ninitial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\\\">\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">int128</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">liquidityNet</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">流动性数量净含量</td>\\n</tr>\\n<tr style=\\\"box-sizing: border-box;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style:\\ninitial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color:\\ninitial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);\\\">\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">int128</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">liquidityGross</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">流动性数量总量</td>\\n</tr>\\n<tr style=\\\"box-sizing: border-box;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style:\\ninitial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color:\\ninitial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\\\">\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">int256</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">feeGrowthOutside0X128</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">以 token0 收取的 outside\\n的手续费总量</td>\\n</tr>\\n<tr style=\\\"box-sizing: border-box;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style:\\ninitial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color:\\ninitial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);\\\">\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">int256</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">feeGrowthOutside1X128</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">以 token1 收取的 outside\\n的手续费总量</td>\\n</tr>\\n<tr style=\\\"box-sizing: border-box;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style:\\ninitial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color:\\ninitial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\\\">\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">int256</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">secondsOutside</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">价格在 outside 的总时间</td>\\n</tr>\\n<tr style=\\\"box-sizing: border-box;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style:\\ninitial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color:\\ninitial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);\\\">\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">int256</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">tickCumulativeOutside</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">价格在 outside 的 tick 序号累加</td>\\n</tr>\\n<tr style=\\\"box-sizing: border-box;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style:\\ninitial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color:\\ninitial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\\\">\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">int256</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width:\\n85px;\\\">secondsPerLiquidityOutsideX128</td>\\n<td style=\\\"box-sizing: border-box;border-color: rgb(204, 204, 204);min-width: 85px;\\\">价格在 outside 的每单位流动性参与时长</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>outside 的含义参考手续费部分的讲解，这些变量前几个都是手续费部分用到的，最后三个则是预言机相关的数据。</p>\\n<p>tick 辅助预言机的变量的使用方法：</p>\\n<ol style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\">\\n<p><code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco,\\nMenlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left:\\n2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">secondsOutside</code>：用池子创建以来的总时间减去价格区间两边 tick 上的该变量，就能得出该区间做市的总时长</p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p><code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco,\\nMenlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left:\\n2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">tickCumulativeOutside</code>：用预言机的 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break: break-all;\\\">tickCumulative</code> 减去价格区间两边 tick\\n上的该变量，除以做市时长，就能得出该区间平均的做市价格（tick 序号）</p>\\n</li><li style=\\\"box-sizing: border-box;\\\">\\n<p><code style=\\\"box-sizing: border-box;font-size: 14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco,\\nMenlo, monospace;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left:\\n2px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">secondsPerLiquidityOutsideX128</code>：用预言机的 <code style=\\\"box-sizing: border-box;font-size:\\n14px;font-family: \\\"Operator Mono\\\", Consolas, Monaco, Menlo, monospace;overflow-wrap:\\nbreak-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(30, 107,\\n184);background-color: rgba(27, 31, 35, 0.05);word-break:\\nbreak-all;\\\">secondsPerLiquidityCumulative</code> 减去价格区间两边 tick\\n上的该变量，就是该区间内的每单位流动性的做市时长（使用该结果乘以你的流动性数量，得出你的流动性参与的做市时长，这个时长比上 1 的结果，就是你在该区间赚取的手续费比例）。</p>\\n</li></ol>\\n<h2 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n22px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">后记</span><span style=\\\"box-sizing:\\nborder-box;\\\"></span></h2>\\n<p>三个月前我作为一名区块链小白加入了 Dapp-Learning 学习小组，从刚开始看到白皮书就抓瞎，变得能看懂 uniV3 的白皮书，期间收获良多。个人的成长离不开小伙伴们的帮助和大佬们的指点，本文是汇集了我们\\nDapp-Learning uniswapV3 学习小组的成果。</p>\\n<p>Dapp-Learning 是一套完全开源免费的区块链 Dapp 开发教程(欢迎 star)，适合有一定语言基础的开发者入门区块链 DAPP 开发，由浅到深了解和开发 DeFi， NFT， DAO，CRYPTO\\n项目。我们是一个秉持开源大学理念的互助型学习组织，提交一次 PR 即可加入开发者群，期待感兴趣的小伙伴加入共同学习进步。详情请参见 Github:\\n<https://github.com/rebase-network/Dapp-Learning></p>\\n<p>学习成果视频分享(B 站账号 Rebase)：<https://space.bilibili.com/382886213></p>\\n<hr style=\\\"box-sizing: initial;height: 1px;overflow: visible;margin-top: 10px;margin-bottom: 10px;border-right:\\nnone;border-bottom: none;border-left: none;border-top-style: solid;border-top-color: black;color: rgb(0, 0,\\n0);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;font-size: 16px;text-align: left;white-space:\\nnormal;background-color: rgb(255, 255, 255);\\\">\\n<h2 style=\\\"box-sizing: border-box;margin-top: 30px;margin-bottom: 15px;color: rgb(0, 0, 0);font-weight: bold;font-size:\\n22px;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria,\\nCochin, Georgia, Times, \\\"Times New Roman\\\", serif;text-align: left;white-space: normal;background-color:\\nrgb(255, 255, 255);\\\"><span style=\\\"box-sizing: border-box;\\\">参考</span><span style=\\\"box-sizing:\\nborder-box;\\\"></span></h2>\\n<ul style=\\\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;color: rgb(0, 0, 0);font-family: Optima-Regular,\\nOptima, PingFangSC-light, PingFangTC-light, \\\"PingFang SC\\\", Cambria, Cochin, Georgia, Times, \\\"Times\\nNew Roman\\\", serif;font-size: 16px;text-align: left;white-space: normal;background-color: rgb(255, 255,\\n255);\\\"><li style=\\\"box-sizing: border-box;\\\">《Uniswap v3 详解系列》 <https://liaoph.com/uniswap-v3-1/></li></ul>\\n<p>\\n<br>\\n</p>\",\"timestamp\":1635858154,\"title\":\"如何理解 UniswapV3白皮书\"},\"digest\":\"xoxm5y1cN1NmbN67QVos3C2y_9IbwUL8WPBWMkQ3nbs\",\"authorship\":{\"contributor\":\"0xDCFd42aCD7b56CC9Cc6B083e5E85E5022322C3C0\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"UayCTnNdpIhx2t5Bqfd6OosvF9ADQkWFC1iXr50HFfA\\\",\\\"y\\\":\\\"tHgOeptro-JYRya3vwV0ioAfj_BgEdlutDh923QtG1I\\\"}\",\"signature\":\"AfIkIOW1hRjTFQPRtZuXWjSQACRC43Ac7IJanGhK-8zDGfM8VEEw7XW1BIUN2DMnvj8KKUXDU4yNLeJZF99EgA\",\"signingKeySignature\":\"0x243d77d92b7ab6c5b71a4b9b93fa2712a1a4c62fc089b4ec86ab4af038b5b4de2270be6e6e18537d56e367d22680d4f7a975ce69fc0ebbe6e07597b75598595c1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"UayCTnNdpIhx2t5Bqfd6OosvF9ADQkWFC1iXr50HFfA\\\",\\\"y\\\":\\\"tHgOeptro-JYRya3vwV0ioAfj_BgEdlutDh923QtG1I\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"xoxm5y1cN1NmbN67QVos3C2y_9IbwUL8WPBWMkQ3nbs\"}"