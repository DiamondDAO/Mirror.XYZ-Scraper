"{\"content\":{\"body\":\"### \\\\*\\\\*零知识证明 - Zkopru Layer2隐私协议介绍[Star.Li](https://www.zhihu.com/people/star-li-44)\\\\*\\\\*2 人赞同了该文章\\n\\n最近翻到一篇利用零知识证明在[以太坊](https://www.zhihu.com/search?q=%E4%BB%A5%E5%A4%AA%E5%9D%8A&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)上实现隐私交易的新方案。Zkopru采用的还是UTXO模型，交易隐私实现的思路和ZCash类似。Zkopru的这篇介绍比较详细的介绍交易的类型，layer1/layer2的交互等等。翻译了一下，方便其他小伙伴查看。对[layer2隐私协议](https://www.zhihu.com/search?q=layer2%E9%9A%90%E7%A7%81%E5%8D%8F%E8%AE%AE&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)感兴趣的小伙伴可以看看。\\n\\n[https://ethresear.ch/t/zkopru-zk-optimistic-rollup-for-private-transactions/7717](https://link.zhihu.com/?target=https%3A//ethresear.ch/t/zkopru-zk-optimistic-rollup-for-private-transactions/7717)\\n\\n很高兴能给大家分享Ethereum的一个隐私层 - Zkopru的实现。去年十一月开始，我和@barryWhiteHat 就开始撰写这个教程，现在终于呈现给大家我们的成果。\\n\\n特别感谢帮助我们修改，支持这个项目的V, W, K, J, JP, L, and A 等人。\\n\\n### **Zkopru是什么?**\\n\\n* 是**隐私交易**中的一个**layer 2**解决方案\\n* 使用 \\\\*\\\\*[optimistic rollup](https://www.zhihu.com/search?q=optimistic+rollup&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)\\\\*\\\\*来管理区块\\n* 使用 **zk SNARK** 来建立隐私交易\\n\\n### **性能**\\n\\n* Ethereum上每个隐私交易消耗 **8800 gas**\\n* 当gas limit为11.95M，block time为13.2s时，最大TPS是105\\n\\n### **功能强大**\\n\\n* 支持 **ETH, ERC20, 甚至是 ERC721**\\n* 支持 **private atomic swap**，可用于私人的对盘系统\\n* **Subtree rollup缩减了更新merkle tree大概20倍的成本**\\n* 区块结束前**即时提取资产**\\n* 通过使用大量存款和**大规模迁移**，我们可以构建一个inter-layer-2的网络.\\n\\n重中之重，来这里试试我们的测试版 [https://zkopru.network](https://link.zhihu.com/?target=https%3A//zkopru.network)\\n\\n## **简介**\\n\\nZkopru 使用zk-SNARK和optimistic rollup，是实现隐私交易的layer-2扩展解决方案。Zkopru在layer-2网络中支持ETH, ERC20, ERC721间隐私交易和原子互换，并且成本很低。同时，它的提前支付功能使用户可以在layer-2上状态确定前提取资产。\\n\\n### **交易**\\n\\nzk交易接受几种UTXO输入并且创建新的UTXO输出，所以验证UTXO的输入输出是非常重要的步骤。\\n\\n![https://pic3.zhimg.com/80/v2-5da05461c04b2e73c902af93349e73da_720w.jpg](https://pic3.zhimg.com/80/v2-5da05461c04b2e73c902af93349e73da_720w.jpg)\\n\\n注：交易采用的是UTXO模型。支持三种交易：一般交易，图的最左边。提取交易，图的最右边，链上交易，layer1和layer2之间。\\n\\n### **UTXO输入验证**\\n\\nZkopru通过使用信息提交-作废协议（commitment-nullifer）实现隐私性。这意味着zk交易在不揭示使用的是哪一个交易（note）的同时使用UTXO。与此相对的，通过生成nullifer，“断开“和UTXO交易的连接。\\n\\n使用UTXO需要满足以下几个条件:\\n\\n### **UTXO 存在性证明**\\n\\n通过提交每一个UTXO的Merkle证明来证明其存在。为了提升SNARK计算的性能，UTXO树使用Poseidon来作为它的hash function。\\n\\n### **所有权证明**\\n\\n只有所有者拥有使用UTXO的权限。为达成这个条件，每一个note都有一个公钥（Babyjubjub点）。通过使用对应的密钥，所有者可以创建EdDSA签名来证明他/她的所有权。\\n\\n### **Commitment证明**\\n\\n电路需要输入UTXO交易的具体信息来计算输入交易的总和。并且，交易的Poseidon [hash值](https://www.zhihu.com/search?q=hash%E5%80%BC&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)应当与Merkle证明和所有权证明的叶子结点hash值相等。\\n\\n### **Nullifier证明**\\n\\n提供的Nullifer应当从输入UTXO中正确计算获取。\\n\\n### **UTXO输出验证**\\n\\nzk交易可以产生三种不同的输出：一般UTXO交易（layer2的普通交易），提取交易（layer2中的特殊交易），迁移交易（layer1和layer2交互交易）。如果zk交易产生UTXO交易，将它们加到 UTXO树上。当产生提取交易输出时，Zkopru将它们加到withdrawal 树上。最后，迁移交易，也就是layer-2区块的一部分， 包含了区块中每一个zk交易的迁移输出。\\n\\n输出交易需要满足以下几点:\\n\\n1. 当输出是UTXO交易时，输出的hash值等于SNARK电路上的计算值。\\n2. 当输出是withdrawal或迁移，它应该将正确数量的资产移出layer2。\\n\\n### **Zero-sum证明**\\n\\n最后，zk交易应当保证UTXO输入和UTXO输出金额相等，包括手续费。\\n\\n## **[区块结构](https://www.zhihu.com/search?q=%E5%8C%BA%E5%9D%97%E7%BB%93%E6%9E%84&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)**\\n\\n![https://pic2.zhimg.com/80/v2-6e98e1587563d258a9388f933f595d69_720w.jpg](https://pic2.zhimg.com/80/v2-6e98e1587563d258a9388f933f595d69_720w.jpg)\\n\\n### **区块头信息**\\n\\n区块头372个字节，包含了以下信息：\\n\\n![https://pic4.zhimg.com/80/v2-accc4cdbad9ad4fb20dabbff99329dbb_720w.jpg](https://pic4.zhimg.com/80/v2-accc4cdbad9ad4fb20dabbff99329dbb_720w.jpg)\\n\\n### **区块内容**\\n\\n区块内容由交易，充值和迁移组成。而且区块头应该包含了区块的正确信息。如果区块头不正确，区块视为无效。\\n\\n### **交易**\\n\\n![https://pic3.zhimg.com/80/v2-cf412ccb2bc02b7e315ed7ee47165e46_720w.jpg](https://pic3.zhimg.com/80/v2-cf412ccb2bc02b7e315ed7ee47165e46_720w.jpg)\\n\\n### **充值**\\n\\n![https://pic1.zhimg.com/80/v2-788da838017fb86e66bb9f54ff642124_720w.jpg](https://pic1.zhimg.com/80/v2-788da838017fb86e66bb9f54ff642124_720w.jpg)\\n\\n### **迁移**\\n\\n![https://pic1.zhimg.com/80/v2-8eff2556350933a269e8ae18068ac700_720w.jpg](https://pic1.zhimg.com/80/v2-8eff2556350933a269e8ae18068ac700_720w.jpg)\\n\\n## **账户系统**\\n\\n> 新的\\n>\\n> [公钥结构](https://www.zhihu.com/search?q=%E5%85%AC%E9%92%A5%E7%BB%93%E6%9E%84&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)\\n\\nZkopru账户系统同时管理layer-1和layer-2的钥匙串。首先，账户里必须有一个随机生成私钥的Ethereum账户，用来在layer-1上进行操作。其次，Zkopru钱包从Ethereum账户的私钥中创建一个Babyjubjub私钥和公钥对。这个Babyjubjub 钥匙对会被用于EdDSA和layer-2上的加密备忘录字段。\\n\\n![https://pic1.zhimg.com/80/v2-3d0958cbc8a32c90771e1855b4a92134_720w.jpg](https://pic1.zhimg.com/80/v2-3d0958cbc8a32c90771e1855b4a92134_720w.jpg)\\n\\n## **UTXO**\\n\\n> 新的UTXO说明近期将更新\\n\\n![https://pic1.zhimg.com/80/v2-eadef947d98e5b594519d49fc5cf7c48_720w.jpg](https://pic1.zhimg.com/80/v2-eadef947d98e5b594519d49fc5cf7c48_720w.jpg)\\n\\n然后Zkopru通过Poseidon hash计算Commitment:\\n\\n`var intermediate_hash = poseidon(ether, pub_key.x, pub_key.y, salt) var result_hash = poseidon(intemediate_hash, token_address, erc20, nft)`\\n\\n## **接收者如何知道?**\\n\\n一笔zk交易可以包含81字节给接收者的加密备忘录字段。因为零知识的特性，即使是接收者也无法在没有一定操作的情况下了解到这些信息，因此当我们想保持操作的简便性，我们可以在备忘录字段上为接收者添加一些保密信息。\\n\\n### **加密**\\n\\n使用Diffie-Hellman密钥交换协议生成共享的钥匙，对于发信者生成共享钥匙的具体步骤如下：\\n\\n1. 创建一个临时密钥和其同态计算值 ehemeral = e public_ephemeral = g^e\\n2. 用临时密钥乘以接收者的公钥 [recipient_pubkey](https://www.zhihu.com/search?q=recipient_pubkey&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D) = g^a shared_key = (g^a)^e\\n3. 准备用于加密的压缩数据 data = { salt // 16 byte tokenId, // 1 byte value, // 32 byte }\\n4. 使用[chacha20算法](https://www.zhihu.com/search?q=chacha20%E7%AE%97%E6%B3%95&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)加密数据，并用临时公钥来创建备忘录数据 ephemeral = random.new() public_ephemeral = generator.multiply(ephemeral) shared_key = recipient_jubjub.multiply(ephemeral) ciphertext = chacha20.encrypt(data, shared_key) memo = public_ephemeral + ciphertext\\n\\n### **解密**\\n\\n使用Diffie-Hellman密钥交换协议，接收者同样通过临时公钥和密钥创建共享钥匙。\\n\\n1. 解析备忘录，利用私钥获取共享钥匙 public_ephemeral, ciphertext = parse(memo) shared_key = public_ephemeral.multiply(private_key)\\n2. 使用共享钥匙解密密文 decrypted = ciphertext.decrypt(shared_key)\\n3. 加密数据仅有49字节以尽量减小数据大小，接收者用解密结果验证多个UTXO的输出。\\n\\n![https://pic2.zhimg.com/80/v2-b5c236bc0ca2b8db7662a4ba73a0fafd_720w.jpg](https://pic2.zhimg.com/80/v2-b5c236bc0ca2b8db7662a4ba73a0fafd_720w.jpg)\\n\\n### **压缩数据**\\n\\n为了尽量减小数据大小，Zkopru将原始数据压缩成49个字节。首先，公钥不包括在加密信息中，接收者可以用自己的公钥来推断。Zkopru采用代币ID来映射被支持的代币地址，指标范围0～255。value可以是ether，erc20Amount或者nftId。最后，如果推断出的UTXO存在于交易输出的列表中，接收者便能成功收到UTXO。\\n\\n### **限制**\\n\\nZkopru并没有采用电路证明加密协议。因此，如若发交易者没有使用恰当的共享钥匙或数据，接收者将不会收到该货币。\\n\\n## **原子交换**\\n\\nZkopru支持原子交换的方式非常直接。如果A和B想交换他们的资产，他们创建各自的note，并在交易信息中透露适当的数据。然后打包者应当将相对的交易配对或删除。\\n\\n举个例子，Alice想用她的50ETH换取Bob的1000DAI：\\n\\n1. Alice 消费60 ETH币，创建10 ETH币给她自己，50 ETH币给Bob。\\n2. Alice 同时为她将收到的1000DAI币计算hash值，并将该数值记录在她交易的swap中。\\n3. Bob 消费3000 DAI 币，创建2000 DAI给他自己，1000 DAI币给Alice。\\n4. Bob 同时为他将收到的 50 ETH计算hash值，并将该数值记录在他交易的swap中。\\n5. 当打包者将交易池中的这两笔交易配对，将交易对打包进一个区块里。\\n6. 如果区块只有配对交易的其中一个交易，打包者将被惩罚。\\n\\n![https://pic4.zhimg.com/80/v2-612f617dceddaf0d0ee87a76b48237fb_720w.jpg](https://pic4.zhimg.com/80/v2-612f617dceddaf0d0ee87a76b48237fb_720w.jpg)\\n\\nZkopru采用的是简单版的原子交换。如果你想查看一个MPC的zk原子交换模型，你可以在 这里 读到更多细节。\\n\\n## **Merkle树结构**\\n\\n> 注意Zkopru从下一版本开始将使用深度64的UTXO树和withdrawal树，以替代原本的深度32。\\n\\n[Zkopru森林](https://www.zhihu.com/search?q=Zkopru%E6%A3%AE%E6%9E%97&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)由UTXO树，nullifier树和withdrawal树组成。\\n\\nUTXO树是由UTXO组成的仅允许追加的Merkle树。用户可以通过提交包含Merkle证明，使用UTXO作为交易的流入，交易的结果将被加入UTXO树。\\n\\n同理，如果zk交易创建的是withdrawal输出，Zkopru将它们加入withdrawal树。一旦树的根被标记为确定状态，所有者在证明所有权之后可以提取资产。\\n\\n随后，依据承诺-无效符方案，被使用的UTXO的无效符会在nullifier树中被标记成已使用， nullifier树是一个唯一稀疏merkle树。如果一笔交易试图使用一个已经废除的叶子，这笔交易将被作废，同时区块提交者将被惩罚。\\n\\n![https://pic4.zhimg.com/80/v2-7c1e24ab9eeeff091f17ebd5fc99a4cf_720w.jpg](https://pic4.zhimg.com/80/v2-7c1e24ab9eeeff091f17ebd5fc99a4cf_720w.jpg)\\n\\n## **Merkle树说明**\\n\\nUTXO 树Nullifier 树Withdrawal 树种类稀疏Merkle树稀疏Merkle树稀疏Merkle树深度3125631HashPoseidonKeccak256Keccak256How to update仅许追加，5层深度树rollupSMT rollup仅许追加，5层深度树rollup成本(gas/leaf)180k351k5.2k\\n\\n> UTXO 树和 withdrawal 树在Burrito 版本中将有64层深度.\\n>\\n> [https://github.com/zkopru-network/zkopru/issues/35](https://link.zhihu.com/?target=https%3A//github.com/zkopru-network/zkopru/issues/35)\\n\\n## **如何管理UTXO树**\\n\\n一个单一的UTXO是为了存在性证明的稀疏Merkle树。它采用的是Poseidon hash，SNARK中最便宜的[hash函数](https://www.zhihu.com/search?q=hash%E5%87%BD%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)之一，来生成zk-SNARK证明以隐藏哈希和它的路径。\\n\\n协调者采用以下步骤来给UTXO树添加新叶子：1. 准备一个数组；2. 协调者选择添加的MassDeposits并将MassDeposits中每一笔存款加入数组；3. L2交易生成新的UTXO，将新生成的UTXO加入到数组；4. 将准备好的数组打散成chunk size 32；5. 构建子树并执行子树rollup\\n\\n假定UTXO树由(2^31)项填满，系统封存被填满的树并开始一个新树。被封存的树允许被用作交易存在证明的参考。\\n\\nZkopru 积极地更新树的根并仅当挑战存在时进行确认。对于挑战，Zkopru运用子树rollup方法生成链上防欺诈。子树rollup不是一个一个加入，而是将固定大小的子树一次性加入。当子树深度为5时，它将一次加入32个。如果子树仅包含18个，剩下的14个将会永远设置成0值。这个子树rollup的方法相比较于rollup，极大地减小了gas成本——大约20倍。请到 contracts/controllers/challenges/RollUpChallenge.sol查看源代码，想知道子树的运作原理请查看packages/contracts/contracts/libraries/Tree.sol。\\n\\n![https://pic1.zhimg.com/80/v2-10d8f378b389f9767c59ff6a19b8bba4_720w.jpg](https://pic1.zhimg.com/80/v2-10d8f378b389f9767c59ff6a19b8bba4_720w.jpg)\\n\\n## **无效符树**\\n\\n每一次转账，提取，和迁移交易都使用了包含证明的UTXO，并从树上将派生的nullifier标志成已使用。因此，nullifier树是一个巨大的稀疏Merkle树，在254层深的稀疏Merkle树中记录了使用的UTXO。所以Zkopru 使用了最廉价的keccak256作为 nullifier树的[哈希函数](https://www.zhihu.com/search?q=%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)。\\n\\n协调者通过下列步骤来更新nullifier树：\\n\\n1. 选择交易（转账，提取，迁移）并收集交易中所有的nullifier。\\n2. 确认不存在已被使用的nullifier。\\n3. 将所有nullifier标记成已使用。在更新过程中，如果树根没有被任何nullifier改变，废弃这笔交易因为该交易试图尝试双花。\\n\\n同UTXO树一样，Zkopru积极更新nullifier树根。如果过程存在任何问题，我们可以通过生成一个链上反欺诈来证明nullifier被多次使用，想知道这是如何运作的请查看RollUpChallenge.sol 和 SMT.sol。\\n\\n## **Withdrawal树**\\n\\nwithdrawal树和UTXO树唯一不同点在于withdrawal tree使用keccak256作为哈希函数，使用keccak256的原因在于Zkopru在智能合约上需要withdrawal树的Merkle证明，同时需要UTXO树的Merkle证明。withdrawal树在layer-1智能合约上树根确定后，可以提取相应的资产。\\n\\n协调者需要通过下列步骤来更新withdrawal树：\\n\\n1. 收集被选出的交易中所有的提取交易\\n2. 以32的块大小来打散收集好的交易\\n3. 构建子树，进行子树rollup\\n\\n## **大额存款**\\n\\n### **当用户在Zkropu存入资产时会发生什么**\\n\\n1. Zkopru合约将给定数目的资产从用户账户转移到自己的账户\\n2. 确认note具有合法哈希值\\n3. 把note合并入MassDeposit\\\\[\\\\] 清单上最后一项\\n\\n### **MassDeposit是什么?**\\n\\nMassDeposit是用于rollup证明的mergedLeaves（bytes32）。如果协调者提出了一个含有 MassDeposits的区块，区块将MassDeposit中所有Note加入它的UTXO Merkle树。\\n\\n### **协调者如何处理MassDeposits?**\\n\\n协调器可以只包含确定的不会再改变的MassDeposits。协调者通过监控Deposit 事件来添加MassDeposit。\\n\\n### **MassDeposit什么时候变成“承诺的”?**\\n\\n存款需要尽快被推送到layer-2。协调者提出每个新区块时，冻结最新一笔 MassDeposit 。\\n\\n### **协调者可以包含多于一个MassDeposit吗?**\\n\\n是的，在最大成本的区间里同时包含多笔MassDeposits是可能的。\\n\\n## **大规模迁移**\\n\\n大规模迁移的基本思想很简单。当layer-1合约上的 deposit交易建立一个 MassDeposit对象， “迁移” 类别的交易输出可以创建一个 MassMigration，为目标网络创建 MassDeposit 。\\n\\n> 一笔交易可以有UTXO, 迁移, 或提取 类型的输出。\\n\\n在Zkopru里，针对迁移[有源网络](https://www.zhihu.com/search?q=%E6%9C%89%E6%BA%90%E7%BD%91%E7%BB%9C&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)和目的网络两个概念。一旦源网络的大规模迁移完成（代码在 这里），源网络上的 migrateTo函数 被执行。这个函数移动包含Ether, ERC20, 和ERC721在内的资产，并在目的网络建立一个MassDeposit对象。\\n\\n因此，目的网络应当调用 acceptMigration 函数。详情见 这里\\n\\n> rollup间的迁移标准将通过EIP确立。\\n\\n## **即时提款**\\n\\n在Zkopru中，取款者可以通过为每个即时提款支付费用完成及时提款。所有人都可以为尚未确定的取款提前支付并得到手续费。\\n\\n为了申请即时提款，持有人为她的note生成一个ECDSA签名并进行广播。任何持有足够资产的人可以通过使用该签名为此次提款提前支付。一旦Zkopru完成这笔交易，[智能合约](https://www.zhihu.com/search?q=%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)将所提取note的拥有权转让给支付方。最后，预付方在确定状态后获得支付。\\n\\n> 我们可以为即时提款建立一个分散的公开市场。对这个话题有兴趣的话请关注这个github issue\\n>\\n> [https://github.com/zkopru-network/zkopru/issues/33](https://link.zhihu.com/?target=https%3A//github.com/zkopru-network/zkopru/issues/33)\\n>\\n> [https://github.com/zkopru-network/zkopru/issues/33](https://link.zhihu.com/?target=https%3A//github.com/zkopru-network/zkopru/issues/33)\\n\\n## **总结**\\n\\n我们就成功地通过Circom, Solidity, Typescript等搭建了测试网：\\n\\n[https://github.com/zkopru-network/zkopru](https://link.zhihu.com/?target=https%3A//github.com/zkopru-network/zkopru)\\n\\n首先，每笔zk交易的gas费用都是可以我们承担的，平均在8800 gas。当gas limit是11,950,000，block time是13.2秒时，[理论TPS](https://www.zhihu.com/search?q=%E7%90%86%E8%AE%BATPS&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A338134232%7D)最大值为105。在Zkopru中，交易数据仅占534字节。因为证明数据是256字节，在未来我们可以通过证明聚合来减少两倍的交易成本。除此以外，每个区块提出和确定的存储费用分别是168k和55k。当完成350次交易时，这个成本大概是区块生成成本的6.7 %。\\n\\n此外，运用Optimistic Rollup的灵活性我们可以实现很多功能。第一，Zkopru支持多种交易类型。你甚至可以进行一个输入，四个输出或者四个输入，一个输出的交易。因为Optimistic Rollup灵活性，多种类型的交易是很容易支持。第二，Zkopru实现了pin-point的挑战方式，这意味着如果区块中第n个交易出了问题，挑战会仅仅针对这个交易进行检查。\\n\\n另一个需要重视的点是Zkopru让你在自己的机器上运行节点。因此SNARK效率和轻节点成为软件开发中需要考虑的很重要的一个环节。相应地，项目是由Typescript和NodeJS实现的，支持未来在react-native架构下移动应用的使用。轻节点期望仅消耗50\\\\~100 MB的存储空间。\\n\\n简而言之，我们希望Zkopru可以在Ethereum的隐私交易层中被采用。它具有快捷，廉价，并且可迁移到更新的版本的特性。\\n\\n欢迎关注 “**星想法**”，交流区块链和零知识证明技术。\\n\\n发布于 2020-12-19 19:45\",\"timestamp\":1639209228,\"title\":\"Zkopru Layer2隐私协议介绍\"},\"digest\":\"7Lmo8p0jxpeIhx2fGjxaipKSQZfYHNKajxG9gQBY97s\",\"authorship\":{\"contributor\":\"0xf3FE8c6c75bE4afB2F8200Fc77339abE4D7CFF33\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"jMBCqqQ-oG9HvvVCgi3AUypOhndSu9x03ivXkjS5rsA\\\",\\\"y\\\":\\\"dSfdNvTkULxhYfMLG8_0I65r4vcjXkSKEyR27inkK-c\\\"}\",\"signature\":\"YrGcS5bx03m-MPTuYJPnEDKu5t7QU8SNi7z-f4mCsP0G-8csXcYxHNb7VHJ_LOE7l5J1isoVkGTjBBUDtPHP7A\",\"signingKeySignature\":\"0x4d22044a2afbb8b1d1a98995ebf8225a4e2e88652e2965c0b59f06fc1c0c65bf0be3f7090db1775cfb6885d10d484aa89171d1bd95a1455cf39f9ddfbe6f894f1c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"jMBCqqQ-oG9HvvVCgi3AUypOhndSu9x03ivXkjS5rsA\\\",\\\"y\\\":\\\"dSfdNvTkULxhYfMLG8_0I65r4vcjXkSKEyR27inkK-c\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"7Lmo8p0jxpeIhx2fGjxaipKSQZfYHNKajxG9gQBY97s\"}"