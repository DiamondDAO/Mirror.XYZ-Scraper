"{\"content\":{\"body\":\"We've been working at @ClassLambda on an anonymity tool for  @TornadoCash.\\n\\nTornado Cash is a mixer that allows users to deposit Ethereum and then withdraw it with another account, breaking the on-chain link between them. Below, a thread with details of what we are doing:\\n\\n* For the [@0xPARC](https://twitter.com/0xPARC) applied ZK course, we had to do a lightning talk. For my talk I chose to ELI5 [@TornadoCash](https://twitter.com/TornadoCash).It's one of the simplest useful application of zkSNARKs and let me understand how snarks work in an real app A thread going into detail how it works under the hood:\\n\\n  Tornado cash is a mixer that allows you to take some ETH and hide the link between the account you deposit in and the account you withdraw in. Tornado cash is a smart contract that holds the funds as well as a merkle tree of all participants.\\n\\n  A merkle tree is a tree-like data structure that has data on the leaves and creates hashes all the way up til you get a root hash. It is an efficient data structure to prove inclusion in a set of participants without having to provide every single piece of data.\\n\\n  When you deposit you create a secret offline and then hash that into a commitment. It is this commitment that is added to the merkle tree on-chain. When you withdraw you want to prove you are within the merkle tree so the contract allows you to withdraw your funds.\\n\\n  To prove inclusion in a merkle tree, you normally have to provide the data itself, the sibling hash, plus all the sibling hashes going up until you get to the root hash However if you provided this, you would reveal which leaf you are and when that deposit was made.\\n\\n  So on withdrawal instead of providing the actual data, you only provide a zk proof of inclusion. This proof is created using a secret you generated on deposit.\\n\\n  However if you create a proof of inclusion using a zkSNARK, there is one issue. How does the contract know if you have withdrawn before? It doesnâ€™t actually know who you are so it does not know if you have withdrawn in the past.\\n\\n  This means there is a double spend problem that needs to be solved as a proof could be used multiple times to drain the contract of funds. The proof proves you are in the tree, but there is no way to know if the proof has been used before.\\n\\n  This is solved by adding a salt to the commitment in addition to your secret. When you create your commitment on deposit, you are hashing both the secret and the salt together. They call this a nullifier in Tornado cash, which is a unique identifier of your commitment.\\n\\n  When you generate your proof, this is also provided with your secret. And when you withdraw, your nullifier is also provided and is recorded in the smart contract so the proof cannot be used again.\\n\\n  The last piece of the puzzle are relayers. Relayers allow the actual withdrawal to happen without any ETH in the new address. And additionally it doesn't allow any link to be created between the deposit address and withdrawal address (other than they both used Tornado)\\n\\n  Relayers take the proof and submit them to the Tornado cash smart contract on your behalf. They cannot steal the ETH as the proof has been created with the recipient as an input. If the recipient is changed, this will invalidate the proof itself and the withdrawal will fail.\\n\\n  Relayers are pivotal to keeping anonymity in Tornado Cash. They stop any link from connecting the deposit and withdrawal address. If you use the same address (or an address that links to it) you break all the anonymity the zk proof has helped you provide.\\n\\n  In summary Tornado cash is a proof of inclusion in a merkle tree, where snarks are used to do the proof without revealing the leaf node you are and with double spend protection to stop the proof being used twice.\\n\\n  For this tweet thread I mainly read the code at: <https://github.com/tornadocash/tornado-core>\\n\\n  I would encourage anyone getting into zkSNARKs to take a look as the circuits are much more approachable than others I've seen.\\n\\n  Also Tornado also uses [@ensdomains](https://twitter.com/ensdomains) for additional censorship resistance for all their relayers, which is pretty cool too! But not integral to Tornado cash working, so I'll just add it in here at the end!\\n\\n  ***Original article from Twitter***\\n\\n  > <https://twitter.com/_jefflau/status/1468065457190350850>\\n\\nCurrently, TCash lets you deposit a fixed amount of ETH in their pools. With that deposit you receive a note. Later, using that note you can withdraw your deposit to any wallet of your choice.\\n\\nThe idea is that, as many people deposited the same amount of currency in the same node, each withdrawal could have come from any of these people. This concept is called Anonymity Set.\\n\\n![Anonymity Set](https://images.mirror-media.xyz/publication-images/G7oM0N44MJPJr9ZCj5khd.png?height=392&width=679)\\n\\nAs the number of deposits grows, the privacy of the pool grows too since each deposit is mixed with the rest. Unfortunately, there are many ways in which users can carelessly use Tornado Cash and compromise their privacy.\\n\\nThis is not only bad for the user who misused the application, but also diminishes the privacy of all depositors. Why is that?\\n\\nBecause if one can match a withdrawal with its deposit without uncertainty, one infer that the rest of the withdrawals is not linked to that deposit! In other words, that deposit will no longer be a part of the Anonymity Set.\\n\\nThis is why the TCash community launched a bounty in which we participated with a team from Stanford to help its users. We're creating a tool to let users know the true size of the anonymity set of each pool and point out if they are doing mistakes that de-anonymize them.\\n\\nWe developed a series of heuristics that allow us to link deposits and withdrawals. Below is an explanation of each one. We're working on more at the moment, we're migrating them to Julia and Pluto. Also you can see the implementation here!\\n\\n[https://github.com/lambdaclass/tornado_cash_anonymity_tool/blob/main/python_notebooks/unified_heuristics_python.ipynb](https://github.com/lambdaclass/tornado_cash_anonymity_tool/blob/main/python_notebooks/unified_heuristics_python.ipynb)\\n\\n### Heuristic 1: reuse of the deposit address for withdrawal. \\n\\nThis is the most trivial heuristic: if a user deposits from a wallet and uses the same wallet to withdraw, their anonymity is completely nullified.\\n\\n![](https://images.mirror-media.xyz/publication-images/gVMuAJ5V-9Yx5wq4PfHMk.png?height=360&width=680)\\n\\n### Heuristic 2: Usage of a unique gas price Many of the wallets have gas price.\\n\\nrecommendation systems. However if the user manually sets the amount of gas to pay, that amount will remain the default price that the wallet will use for other transactions.\\n\\nSo what happens if you find a deposit that has a unique gas price among all depots and then you find a withdrawal that has that specific, unique gas price? That's right! Those two transactions can be linked. That is the logic of our second heuristic.\\n\\n### Heuristic 3: Transactions outside Tornado Cash \\n\\nThe third heuristic is concerned with relating all deposit and withdrawal addresses that have transactions between them. Simply put, it can be assumed that wallets that interact with each other belong to the same entity.\\n\\n![](https://images.mirror-media.xyz/publication-images/D0OGoJvG8O0urDMzvjQqt.png?height=437&width=680)\\n\\nThe idea of this heuristic is simple, but its implementation is not, due to the large amount of computation required. It is necessary to traverse the entire Ethereum transaction graph, looking for transactions between addresses.\\n\\n![](https://images.mirror-media.xyz/publication-images/NMRrMpc5p-kdakjjSwTWz.png?height=457&width=680)\\n\\n### Heuristic 4: Multi-Denomination Reveal \\n\\nLet's suppose that your source wallet mixes a specific set of denominations and your destination wallet withdraws them all (example: you mix 3x 10 ETH, 2x 1 ETH, 1x 0.1 ETH in order to get 32.1 ETH).\\n\\nIn this case the anonymity set will be reduced to only those depositing addresses that have made the same mix. And it would be completely annulled if no other wallet has mixed this exact denomination set. In this case all involved transactions would be linked.\\n\\n### Heuristic 5: Careless usage of anonymity mining \\n\\nAnonymity mining is an incentive to increase the level of privacy (number of deposits) by rewarding participants anonymity points (AP) dependent on how long they left their assets in a pool.\\n\\n![](https://images.mirror-media.xyz/publication-images/I1KzK0LdrGlCc5OhEnkQ3.png?height=343&width=680)\\n\\nTornado cash rewards users with a fixed amount of anonymity points for each block spent with assets deposited into any pool. After having withdrawn their assets, users can claim their Anonymity Points. The amount withdrawn is recorded in the transaction.\\n\\nWe are still working on Heuristic 5 but we already linked 385 addresses!\\n\\nSo if a user uses the same withdrawal or deposit address to claim anonymity points, you can calculate the exact amount of blocks the assets were in the pool! Then you just calculate in which block the deposit or withdrawal should be in!\\n\\nThe heuristics were designed and implemented by [@ClassLambda](https://twitter.com/ClassLambda) team ([@herman_obst](https://twitter.com/herman_obst), Mariano Nicolini, Pedro Fontana) and [@Istvan_A_Seres](https://twitter.com/Istvan_A_Seres) from the [@eotvos_uni](https://twitter.com/eotvos_uni) and Manuel Puebla from [@UBAonline](https://twitter.com/UBAonline).\\n\\nThe information provided by these heuristics is used by an app that was created by Kaili Wang ([https://github.com/kkailiwang](https://t.co/CIvlANVzJF)), Mike Wu ([https://github.com/mhw32](https://t.co/nqSdtWXnPQ)), Will McTighe ([https://github.com/Tiggy560](https://t.co/hgXtOkGmLl)) from [@Stanford](https://twitter.com/Stanford) and [@bax1337](https://twitter.com/bax1337)\\n\\n ([https://github.com/nickbax](https://t.co/WbeeQqXUwN)) from [@convexlabs](https://twitter.com/convexlabs).\\n\\n[https://github.com/nickbax](https://github.com/nickbax)\\n\\nThey had to modify a graph clustering algorithm based in this paper [https://fc20.ifca.ai/preproceedings/31.pdfâ€¦](https://t.co/FTsYGcc5hi) to cluster ETH addresses. They also added Diff2Vec [https://arxiv.org/pdf/2001.07463.pdfâ€¦](https://t.co/N5lPDviv5i) to always be able to find clusters in Ethereum addresses.\\n\\nThe application is still being developed but you can check it **[https://tutela.xyz](https://t.co/8dFls21UYw)**. Tutela will show related addresses and anonymity score.\\n\\nIt has been an interesting multidisciplinary work between people from different continents. It isn't easy to work with people you don't know, but ain't the case when there is a common goal. This work of the [@TornadoCash](https://twitter.com/TornadoCash) community is another example of the power of DAOs.\\n\\nWe are writing a post explaining this for our blog [https://notamonadtutorial.com](https://t.co/f7XhwUh2WW) In the coming weeks we will write a chapter about this experience in our book [https://datasciencejuliahackers.com](https://t.co/2rWJOogZds). If you liked this thread please follow \\n\\n[@federicocarrone](https://twitter.com/federicocarrone) or send me a PM if you want to hire us.\\n\\n[https://datasciencejuliahackers.com/](https://datasciencejuliahackers.com/)\\n\\n***Original article from Twitter***\\n\\n[https://twitter.com/federicocarrone/status/1473665998519742475](https://twitter.com/federicocarrone/status/1473665998519742475)\\n\\n### \",\"timestamp\":1640850573,\"title\":\"[NOTE2021.12.30]Privacy audit tool\"},\"digest\":\"5-EkeH3dfvLNx9YOe1RteHiBymjJucTSCkTfq_h1fAE\",\"authorship\":{\"contributor\":\"0x5FBce71b1b74d0d8511dC708ceED3250a1aBDacA\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"RBwqX_txPf5TCte2yZXMQ_9A3riZj4S7We4xehttYCs\\\",\\\"y\\\":\\\"RRY8HwLGBx5CXF1Mm4FIHYSG6jiOHqw2IxOvQTBn0Cc\\\"}\",\"signature\":\"JfzoIDBMbThXu1-eU6v1lZuPHY5oBan-fxHJmMEzXt8oTp8GI_UXEWrZVMgx0kbocPEwjLdhHLzoAC8uECYWgg\",\"signingKeySignature\":\"0x6b2eee9f92cfa9ecfc6d0615635888c4f773dbd221107bb2cf9c0ad7519448986bcc8166e2c218113125c78087ddddf4ff28df8da3f800dd5e5344e74f0f25101c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"RBwqX_txPf5TCte2yZXMQ_9A3riZj4S7We4xehttYCs\\\",\\\"y\\\":\\\"RRY8HwLGBx5CXF1Mm4FIHYSG6jiOHqw2IxOvQTBn0Cc\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"Kd1f21iGWKm3V6YB5cTqRo5R8nv-BCgJ0uifY7PDF1M\"}"