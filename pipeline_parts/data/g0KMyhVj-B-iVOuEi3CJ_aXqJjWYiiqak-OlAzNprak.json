"{\"content\":{\"body\":\"Learn about decision making, managing ETH, the `require` function, tracking trades, and enforcing terms of a smart contract.\\n\\nBy the end of this post, readers will be able to:\\n\\n* Define the `payable` function's role in smart contracts.\\n* Develop the syntax in Solidity to withdraw and deposit ether.\\n* Use conditional statements in Solidity in order to obtain the desired results in your smart contract.\\n* Demonstrate how the `require` function works in Solidity smart contracts.\\n* Develop a smart contract using the `require` function to enforce smart contract terms.\\n\\nIn the previous lesson, we defined the basic structure of a smart contract, and wrote a function as well as variables for storing data. In this lesson, we’ll create functions that add functionality to a smart contract.\\n\\n## Deposit/Withdraw ETH\\n\\nIn order for our functions to receive ether, they must be attached to a modifier called `payable`. `payable` is a reserved keyword in Solidity. Usually, there is a `no name` function that accepts ether that is to be sent to a contract. This is called a fallback function, which we’ll dive into a bit later.\\n\\n```\\nfunction () payable {}\\n```\\n\\nAn exception is when you have more than one `payable` function that is used to perform different tasks, such as registering a deposit to your contract:\\n\\n```\\nfunction deposit() payable {\\n  deposits[msg.sender] += msg.value;\\n}; \\n```\\n\\n \\n Each time you deploy a smart contract, a public Ethereum address is assigned to it.\\n\\n* A smart contract can store and send ETH like a cryptocurrency wallet with its Ethereum account address.\\n* It’s up to developers to create functions that manage this address.\\n\\nIn the contract below, anyone can add ETH via the contract address or the `deposit` function. Anyone can also send any amount of ETH to any address that we specify to the `withdraw` function, as long as we have enough in our balance.\\n\\n```\\npragma solidity ^0.5.0;\\n\\ncontract CustomerSavings {\\n\\nfunction withdraw(uint amount, address payable recipient) public {\\n  return recipient.transfer(amount);\\n}\\n\\nfunction deposit() public payable {}\\n\\nfunction() external payable {}\\n}\\n```\\n\\n \\n The function at the end without a name is known as a **fallback function.** If we don't add the fallback function, and ETH gets sent to our contract address, the ETH will be returned. This forces other users to send ETH via the `deposit` function.\\n\\nA fallback function is used in two scenarios:\\n\\n* (1) if the function identifier doesn't match any other function in the contract, or \\n* (2) if the sending function doesn't supply any data, so we have to add the `external` keyword so that other contracts or transactions can call this contract. We also add the `payable` keyword so that the contract can collect any amount of ETH that gets sent to it via the contract address.\\n\\n## Conditional Statements\\n\\nBelow, you will gain practical experience with using conditional statements in Solidity. We’ll use basic logical operators and a control flow—an order of statements and functions—to build a smart contract that tracks trades in the Ethereum blockchain.\\n\\nThe code snippet below showcases using **if/else statements** and **stacked conditionals**:\\n\\n```\\npragma solidity ^0.5.0;\\n\\ncontract TradeController {\\n    uint previousPrice;\\n    string tradeType;\\n\\n    function makeTrade(uint currentPrice, bool buyAnyway) public {\\n        if (currentPrice < previousPrice || buyAnyway) {\\n            tradeType = \\\"Buy\\\";\\n            previousPrice = currentPrice;\\n        }\\n        else if (currentPrice > previousPrice) {\\n                tradeType = \\\"Sell\\\";\\n                previousPrice = currentPrice;\\n        }\\n        else {\\n            tradeType = \\\"Hold\\\";\\n        }\\n    }\\n}\\n```\\n\\n## Require Function\\n\\nAn alternative to conditionals in Solidity is the `require` function. Use cases for the `require` function include:\\n\\n* Verifying that a recipient is someone you know after completing a withdrawal transaction.\\n* Verifying that the sender smart contract has enough ETH to cover the requested amount.\\n\\nThe `require` function checks a condition just like an `if` statement does. But if the condition is false, it will return the unused gas and any ETH and roll back the entire transaction. Consider it a hard stopping point: you require a specific condition to be true to continue.\\n\\n```\\npragma solidity ^0.5.0;\\n\\ncontract BankAccount {\\n    address payable accountOwner = 0xc3879B456DAA348a16B6524CBC558d2CC984722c;\\n\\n    function withdraw(uint amount, address payable recipient) public {\\n        require(recipient == accountOwner, \\\"You don’t own this account!\\\");\\n        return recipient.transfer(amount);\\n    }\\n\\n    function deposit() public payable {}\\n\\n    function() external payable {}\\n}\\n```\\n\\nIn the preceding code, we use the `require` function to check if the recipient is the account owner. If the conditional statement is false, the recipient isn’t the account owner. So, the code **raises** (returns) an exception that **throws** (displays) a message reading \\\"You don't own this account!\\\"\\n\\nUntil next time, here’s a twitter thread summary of this post:\\n\\n[https://twitter.com/jackofcrypto/status/1480208333034246147?s=20](https://twitter.com/jackofcrypto/status/1480208333034246147?s=20)\\n\\n\",\"timestamp\":1641744182,\"title\":\"Interacting with Smart Contracts\"},\"digest\":\"HoAafrSVEDYIdBERf8vPoRPkc1VIwd050Tx2q1pRGcE\",\"authorship\":{\"contributor\":\"0xf15F5cD3e0C293fC37480124F3Fa22005774deBf\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Sk0Du1I4JzI09Vb5SeY5E1PB-FukmZKlKW0AZW45osA\\\",\\\"y\\\":\\\"0ueT6y_wr9ga1aY8-ubsZEj0NEZRswrjD-illjCkxjE\\\"}\",\"signature\":\"Eh5-Iv1TCdX1aEbM3kzAVzgSaIdPbh_8sAtbAQjnttJT2n7EuO_XgiWIckbpv-qo6cjLhlfiQU0UYQ942vuGSQ\",\"signingKeySignature\":\"0xdeb4cd01172d31cafa3f999651c8e79f443d93a88185df3b03a416124772d930212c7a13f79e6b1a6137302a6d4cbb76e9d8521ca8fdd47c40a9ed3e3e7f35a01c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Sk0Du1I4JzI09Vb5SeY5E1PB-FukmZKlKW0AZW45osA\\\",\\\"y\\\":\\\"0ueT6y_wr9ga1aY8-ubsZEj0NEZRswrjD-illjCkxjE\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"HoAafrSVEDYIdBERf8vPoRPkc1VIwd050Tx2q1pRGcE\"}"