"{\"content\":{\"body\":\"The goal is to create a scrolling machnism to be able to display infinite number of entries. The core idea is limit the number of elements displayed on the screen, also other requirements:\\n\\n1. Should only display a limited number of the elements based on the viewport size.\\n2. Scrollbar should not be covered by its children, e.g., mouse drag on scrollbar should still work.\\n3. Should not block mouse event on the children, e.g., content should receive mouse click event.\\n4. Easy to layout, avoid absolute and fixed which requires manual layout, e.g., changing scrollable container size and children will layout based on gneric css.\\n5. The position of the content should not affect scrolling machanic, e.g., if scrolling content to the bottom and it overflow at the bottom, should not be able to keep scrolling(because it keeps overflow); or the content should not be allow to overflow at all.\\n\\nLet's elaborate the technical details\\n\\n# Display limit number of element\\n\\nIn order to display infinite number of items on the screen is to not display all of them at once. It is necessary to pick subset of the data according to the viewport position.\\n\\nIf the data (array of entries) is sorted and viewport position is aquired. We can easily find the start element should be display on the screen.\\n\\nIn DOM if an element *container* is scrollable, we can call `container.scrollTop` to give the current viewport position (top position), divided by the table row height will give you the start index.\\n\\n```\\n// rowHeight is the predefined row height \\nstartIndex = Math.floor(container.scrollTop / rowHeight)\\n```\\n\\nFor example, if viewport position is 20, and row height is 10, the start index should be 2. Basically there are 2 row are outside of viewport from the top, and we start display the 3rd element in the array.\\n\\nThe number of elements needs displaying is slightly trickier. You would imagine it is simply just *Math.ceil(viewport height / row height)* However, it actually needs display 1 more row to allow smooth scroll. Imagine viewport is at 5 (row height is still 10), and viewport height is 30, since the first element is half in the viewport, but the 4th element is also half in the viewport which needs displaying as well, that is: `Math.ceil(viewport height / row height) + 1`\\n\\nUsing both start index and max row count inside viewport will allow display the subset of the inifinte data.\\n\\n# Display scrollbar\\n\\nSince only elements covered by viewport are display in DOM it will be impossible to display native scrollbar. We need a different fake element with correct scroll height to force displaying the scrollbar., \",\"timestamp\":1641482164,\"title\":\"How to render and scroll infinite data in a perfomance way\"},\"digest\":\"isaW912-mHsziO_u7UPrrr5sxCnvUEysIOHxzdAH4aA\",\"authorship\":{\"contributor\":\"0xD075a1Dd927F9bCd3279CF4B86043a903D12D8f0\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"37HcyBt638v4wYoBHSgWSbfX32bgjl2F0fuEFCiU1Rc\\\",\\\"y\\\":\\\"FXd1WBhrw7gnrrHN_EcH1MGm8N3wvSEJ1vKO1KZuOI8\\\"}\",\"signature\":\"W7TDqXBm3kE5hLn98WnmjYaP8kQikrDrwR0RyEp-AFHqvp1fe-vHcanfMshO_EfK8HfedDxsx_xUYK9Mefhy7g\",\"signingKeySignature\":\"0xb28641c1bd8ed8954070c42e6ce55289d223c8fd97439a4870d840d03d71d7767b5b04bf9f2d6084c390c2fdc4c2096cb8adde349de1da99cb12e72b1c394dc51b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"37HcyBt638v4wYoBHSgWSbfX32bgjl2F0fuEFCiU1Rc\\\",\\\"y\\\":\\\"FXd1WBhrw7gnrrHN_EcH1MGm8N3wvSEJ1vKO1KZuOI8\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"isaW912-mHsziO_u7UPrrr5sxCnvUEysIOHxzdAH4aA\"}"