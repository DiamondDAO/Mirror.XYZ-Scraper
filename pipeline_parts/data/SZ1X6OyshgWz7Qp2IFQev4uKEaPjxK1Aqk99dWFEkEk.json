"{\"content\":{\"body\":\"NFT marketplace [Foundation](https://foundation.app/) recently [launched ](https://twitter.com/withFND/status/1465727613297512456)*[Collections](https://twitter.com/withFND/status/1465727613297512456)* — a way for artists to mint groups of NFTs on their own smart contracts.\\n\\nCollections allow artists to express a thematic relation among a group of their NFTs (just as a musician would for an album) and to describe the collection using the NFT's *metadata*. Collections also allow Foundation to aggregate and present data about a collection for potential buyers — such as its total sales, limits on the collection size, and floor price.\\n\\nEach collection is described by a name, symbol, description, and an optional limit on the collection size.\\n\\n![An example collection by Jen Stark that has a unique namespace (Cosmos), a description of the collection, and information important for collectors, such as the collection size (60 NFTs), the other collectors, and the floor price. Although featured in Foundation's announcement tweet, this particular collection does not use Foundation's Collections contract — instead, it uses Manifold's Creator Core contracts, which provides similar functionality.](https://images.mirror-media.xyz/publication-images/BDE6GIFYyOfUY1z_pNx4Q.png?height=506&width=990)\\n\\nFoundation's creators understood the implications of the feature quickly, as 228 artists deployed a collection within 24 hours (over 450 deployments at time of writing) — despite paying an Ethereum transaction fee to do so.\\n\\n[https://twitter.com/saturnial/status/1466198872875667460?s=20](https://twitter.com/saturnial/status/1466198872875667460?s=20)\\n\\nPreviously, all of Foundation's artists minted NFTs on a single shared contract deployed by the platform. Although this made it cheaper to mint, it also meant that all artists were represented under the Foundation brand (instead of their own) on third-party marketplaces like OpenSea.\\n\\n![Previously, all 100k NFTs minted on Foundation sat in a single collection called Foundation — with the symbol FND. This prevented artists from presenting under their own brand on marketplaces like OpenSea.](https://images.mirror-media.xyz/publication-images/5I-IS9OlTbx8bG7H_z5r0.png?height=342&width=1132)\\n\\nIn our technical review, we explain how Collections are cheap to deploy, what the ownership and trust properties are, and generally dissect the engineering decisions that went into the most relevant features of the contracts.\\n\\n## Efficient Deploys: The Foundation Collection Factory\\n\\nCollections are deployed via the [Foundation Collection Factory](https://etherscan.io/address/0x3b612a5b49e025a6e4ba4ee4fb1ef46d13588059#code). Deploying a Collection costs around 168k in Ethereum gas, which is very cheap — enabled by using OpenZeppelin's *[Clones](https://docs.openzeppelin.com/contracts/4.x/api/proxy#Clones)* library, which implements the [EIP-1167 standard](https://eips.ethereum.org/EIPS/eip-1167). Foundation also used this pattern in their [Splits](https://etherscan.io/address/0x1EF0159071b2A5898024cef4b4f78C171b7f48a8#code) feature.\\n\\nThe goal of the standard is to deploy a minimal amount of code to Ethereum for any functionality that is intended to be used by many contracts. It achieves this by separating the contract's storage from its functionality.\\n\\nThe state is deployed many times as separate, minimal, identical contracts (hence called a \\\"clone\\\"), and the large logic contract is only deployed once. The clones simply delegate transaction calls to the logic contract, which can modify the clone's state. This delegation pattern is known as a [proxy pattern](https://blog.openzeppelin.com/proxy-patterns/).\\n\\nAs a result, artists on Foundation only pay for deploying a small clone that holds information about the collection (including its name and symbol) but that has the full functionality of a collection (such as minting and transferring).\\n\\nA drawback of using a factory is that it makes the deployment an [internal deploy call](https://etherscan.io/tx/0xf0755a0fa646f2386ace2f7b2c20d8bf9679ba5a279adaff82dc9bfb1e2c2ed0/advanced#internal) from the factory, and so some platforms might interpret the \\\"creator\\\" as the factory's address rather than the user's wallet. We've seen this happen on OpenSea before when using factories to deploy ERC721 contracts.\\n\\nOn the other hand, using a factory makes tracking collections easier (e.g. via a subgraph on The Graph Protocol), and it's easy enough to define the creator as the wallet where the transaction originated.\\n\\nAdditionally, an optimization could be to deploy the contract and perform the first mint in the same transaction; currently, two transactions are needed to get to the point where a token is minted.\\n\\nAnother thing to note: The minimal proxy standard should not be confused with \\\"upgradable\\\" proxies — the proxies deployed through the Foundation Collection Factory are **not** upgradable.\\n\\n## Enforced Rarity: Limiting the Number of Tokens Per Collection\\n\\n*Collections* provide an optional way for artists to guarantee rarity in their collections — by allowing them to set a limit to the number of tokens that can be minted.\\n\\nEach collection has a field *maxTokenId*, which defaults to zero, but can be set to a positive integer by the owner. Since each token's ID is effective an index — starting from zero and increasing once per mint — this field is used to prevent a token from being minted if its ID will be greater than the intended limit.\\n\\n### Limits\\n\\nIf the *maxTokenId* is never set and remains at zero, the owner can mint an unlimited number of tokens to the collection. However, once set, it can only be modified to a value that is *lower than the current value.* In other words, once the artist has committed to a limit for the collection's size, the collection is guaranteed never to grow beyond that limit.\\n\\n## Royalties\\n\\nEach token can have its own royalty payment address defined by the owner when minting. Royalties are set to a fixed amount of 1000 basis points (10%). Royalty payment addresses can also be left blank, effectively turning off royalties. The collections contract implements the royalties system defined originally by [Rarible](https://etherscan.io/address/0x44d6e8933f8271abcf253c72f9ed7e0e4c0323b3#code).\\n\\nThe royalties implementation differs from the NFT Royalty Standard defined by [EIP-2981](https://eips.ethereum.org/EIPS/eip-2981). Builders in the space will benefit if a large platform like Foundation implements the EIP royalty standard as it allows for easier interoperability. [Manifold](https://www.manifold.xyz/) has recently written a meticulous library for marketplaces to aggregate all royalty implementations into a standard. Standardization reduces the need to use libraries that [aggregate many disparate strategies in a single function](https://github.com/manifoldxyz/royalty-registry-solidity/blob/main/contracts/RoyaltyEngineV1.sol#L85) as added optionality is error-prone.\\n\\n## Ownership and Trust Assumptions\\n\\nThe collections factory and logic have roles that manage different privileges.\\n\\n### **Factory Contract**\\n\\nThe collections factory contract has a roles contract set to Foundation's treasury, which extends OpenZeppelin's [Access Control](https://docs.openzeppelin.com/contracts/4.x/api/access) implementation. The roles contract serves two purposes:\\n\\n* It defines the admin role that has privileges such as updating the implementation of the collections contract, meaning it can update which \\\"logic\\\" gets deployed with the proxies\\n* It defines the operator roles queried from the collections contract\\n\\n### **Collections Contract**\\n\\nThe collection contract implements a standard ERC-721 with two roles. An owner role that is set to the user's wallet; and an operator role that is set to a role contract specified by the factory.\\n\\nOwner capabilities:\\n\\n* Set the maximum number of tokens that can be minted in the collection\\n* Update the baseURL\\n* Burn any tokens owned by the collection owner. Collectors cannot burn tokens.\\n* Mint tokens with a combination of automatically approving a specified operator (auction house, marketplace, etc) and setting a royalties recipient\\n\\nOperator capabilities:\\n\\n* Migrate tokens from one account to another with the original token owner's permission (using signatures)\\n\\n## Final Thoughts\\n\\nWeb3 is about ownership. Foundation has taken a necessary step towards giving creators more ownership over their work and image while making it as accessible as possible through opinionated product decisions and inexpensive deployments. We like the collections.\\n\\n**References:**\\n\\n* [Factory Contract](https://etherscan.io/address/0x3b612a5b49e025a6e4ba4ee4fb1ef46d13588059#code)\\n* [Implementation Contract](https://etherscan.io/address/0x331c421106619d4217d41c3e073b1e64f4974563#code)\",\"timestamp\":1638899979,\"title\":\"Foundation Collections\",\"publication\":\"review\"},\"digest\":\"JJJ8IMKAogvU_WR5syjaoA-YjpNOTm0vFZt35zZRU0Q\",\"authorship\":{\"contributor\":\"0xCC65fA278B917042822538c44ba10AD646824026\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"x6vqWvB45TUsluLJDDrctJTtp82jXCsoS3JW6Wn4FKU\\\",\\\"y\\\":\\\"YVVXbkiwAU3yk0xituR-e2X0VqbQ4z33qJ5YtBJAE1M\\\"}\",\"signature\":\"if8OzRIeQ7nDgdTYYSwwS66d7VcL2JkqcexNRkB_5DZX8icjlZTotU8cYqbwTpveOPvAAxxjuTOczF13VwMzRw\",\"signingKeySignature\":\"0xc7a78d78b2b41ef6c317b75b621a6d81b1f684529e29c3e5d82aada079021bc805a08eef7684676c5acdbef51b6d509a521ca32be3832567049dad700a50cca11c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"x6vqWvB45TUsluLJDDrctJTtp82jXCsoS3JW6Wn4FKU\\\",\\\"y\\\":\\\"YVVXbkiwAU3yk0xituR-e2X0VqbQ4z33qJ5YtBJAE1M\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"1PzVPTYHu5qniXCnNfKnDRBC3rg6p7-JyEIo5CxDQjQ\"}"