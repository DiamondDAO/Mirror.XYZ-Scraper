"{\"content\":{\"body\":\"> ~~TODO 内部分享文字稿，有时间需要斟酌文笔以及要点准确性~~\\n\\n> 原文链接\\n>\\n> ([https://github.com/remix-run/react-router/blob/main/docs/upgrading/v5.md)\\\\[https://github.com/remix-run/react-router/blob/main/docs/upgrading/v5.md\\\\]](https://github.com/remix-run/react-router/blob/main/docs/upgrading/v5.md)%5Bhttps://github.com/remix-run/react-router/blob/main/docs/upgrading/v5.md%5D)\\n\\n## 新特性\\n\\n注：本文带有部分我的主观意识，删除了一些自认为不重要的内容，详细推荐阅读原文。\\n\\n按照惯例提前总结全文关键内容，感兴趣可以下滑详细阅读。\\n\\n升级的前提：\\n\\n1. router 团队建议先升级到 5.1 版本并使用新的 API 来渐进式升级到 v6\\n2. 不再兼容 react v16.8 以下版本\\n\\n主要改动内容：\\n\\n 1. 废弃 `Switch` 组件，由 `Routes` 代替（使用了智能匹配路径算法）\\n 2. 废弃 `Redirect` 组件，由 `Navigate` 代替\\n 3. 废弃 `useHistory` 方法，由 `useNavigate` 代替\\n 4. `Route` 组件移除原有 `component` 及 `render` 属性，统一通过 `element` 属性传递：`<Route element={<Home />}>`\\n 5. `Route` 组件支持嵌套写法（v3 版本用法回归）\\n 6. `Route` 组件的 `path` 规则变更，不再支持类正则写法\\n 7. 消除了 `v5` 版本中带后斜杠的路径时，`Link` 组件的跳转模糊的问题\\n 8. `Link` 组件支持自动携带当前父路由，以及相对路径写法`../home`\\n 9. 新增 `useRoutes` 方法，代替之前的`react-router-config`写法，同样支持嵌套\\n10. 其他一些 API 名称变更\\n\\n## 开始升级\\n\\n### 升级 react 版本至 16.8 以上\\n\\n> React Router v6 makes heavy use of React hooks, so you'll need to be on React 16.8 or greater before attempting the upgrade to React Router v6. The good news is that React Router v5 is compatible with React >= 15, so if you're on v5 (or v4) you should be able to upgrade React without touching any of your router code.\\n\\n新版本大量使用 hooks，所以必须要安装 16.8 版本以上的 react。\\n\\n目前大多数 react 项目都已经使用 17 版本了，没什么可说的。至于巨石项目，还是暂时先死了这条心...\\n\\n### 升级 react-router-dom 至 5.1\\n\\n> It will be easier to make the switch to React Router v6 if you upgrade to v5.1 first. In v5.1, we released an enhancement to the handling of elements that will help smooth the transition to v6. Instead of using and props, just use regular element everywhere and use hooks to access the router's internal state.\\n\\nreact router 团队建议先升级到 v5.1 版本，并采用一些新的 API，有助于渐进式升级到 v6。\\n\\n不过我都想要升级了，还在乎那一哆嗦吗（主要还是为了巨石..）\\n\\n* 在 5.1 版本之前的使用方法\\n\\n```\\nimport { Switch, Route } from 'react-router-dom';\\n\\nconst User = ({ id }: { id: string }) => {\\n  return <div>user id: {id}</div>;\\n};\\n\\nconst App = () => {\\n  return (\\n    <Switch>\\n      <Route exact path=\\\"/\\\" component={Home} />\\n      <Route path=\\\"/user/:id\\\" render={(route) => <User id={route.match.params.id} />} />\\n    </Switch>\\n  );\\n};\\n```\\n\\n* 5.1 推荐用法\\n\\n```\\nimport { Switch, Route, useParams } from 'react-router-dom';\\n\\nconst User = () => {\\n  const { id } = useParams<{ id: string }>();\\n  return <div>user id: {id}</div>;\\n};\\n\\nconst App = () => {\\n  return (\\n    <Switch>\\n      <Route exact path=\\\"/\\\">\\n        <Home />\\n      </Route>\\n      {/* 同时支持props.children属性传递 */}\\n      <Route path=\\\"/user/:id\\\" children={<User />} />\\n    </Switch>\\n  );\\n};\\n```\\n\\n[React Router hooks 使用文档及基本原理](https://reacttraining.com/blog/react-router-v5-1/)\\n\\n> In general, React Router v5.1 (and v6) favors elements over components (or \\\"element types\\\"). There are a few reasons for this, but we'll discuss more further down when we discuss v6's API.\\n\\n5\\\\.1 版本之后，react router 更加倾向于 ReactElement 类型而不是 ReactComponent 类型，在后面的文档会详细介绍\\n\\n> When you use regular React elements you get to pass the props explicitly. This helps with code readability and maintenance over time. If you were using to get a hold of the params, you can just useParams inside your route component instead.\\n\\n`useParams()`比`<Route render={(route) => <User id={route.match.params.id} />}>`可读性以及维护性更好。\\n\\n> Along with the upgrade to v5.1, you should replace any usage of withRouter with hooks. You should also get rid of any \\\"floating\\\" elements that are not inside a . Again, the blog post about v5.1 explains how to do this in greater detail.\\n\\n[5.1 版本发布文档](https://reacttraining.com/blog/react-router-v5-1/)\\n\\n在 5.1 版本中，应该使用 hooks 代替 withRouter，也应该移除掉在 Switch 外部的 Route 节点。\\n\\n总之，升级到 5.1 之后需要做以下几件事情：\\n\\n* 使用`<Route children>`替换`<Route render>`或`<Route children>`\\n* 使用`hooks`获取当前 router 信息，例如`useLocation()`或`useParams()`\\n* 移除`withRouter`装饰器写法\\n* 将在`<Switch>`外部的`<Route>`统一替换为`useRouteMatch`或将他们挪到`<Switch>`中\\n\\n#### 移除 Switch 内部的 Redirect 节点\\n\\n> If you want to redirect on the initial render, you should move the redirect logic to your server (we wrote more about this here).\\n\\n如果需要初始化渲染的时候就执行重定向，推荐将重定向逻辑放在服务端实现「[详细说明](https://gist.github.com/mjackson/b5748add2795ce7448a366ae8f8ae3bb)」。\\n\\n文章中描述了几点初始化时重定向的弊端，主要如下：\\n\\n* 客户端并不是真正的重定向，此时的 HTTP 状态码是 200。爬虫读取页面时并不会执行客户端的重定向方法，不利于 SEO\\n* 在 SSR 时，执行`ReactDOMServer.renderToString()`得到的结果是一次重定向，浪费时间和资源\\n\\n> If you want to redirect client-side, move your into a prop.\\n\\n客户端执行重定向推荐使用 Route 的 render 属性来渲染 Redirect\\n\\n```\\n// 5.1 之前\\n<Switch>\\n  <Redirect from=\\\"about\\\" to=\\\"about-us\\\" />\\n</Switch>\\n\\n// 5.1\\n<Switch>\\n  <Route path=\\\"about\\\" render={() => <Redirect to=\\\"about-us\\\" />} />\\n</Switch>\\n```\\n\\n> Normal elements that are not inside a are ok to remain. They will become elements in v6.\\n\\n这是第一个破坏性变更：在 v6 版本中废弃`Redirect`，由`Navigate`代替。\\n\\n#### 重写你的「自定义 Route」\\n\\n> Replace any elements inside a that are not plain elements with a regular . This includes any -style custom components.\\n\\n应该很少会有自定义 Route 的场景出现，这段先暂时不关心。\\n\\n\\n---\\n\\n### 升级到 v6 版本\\n\\n#### 使用 Routes 替换 Switch\\n\\n> React Router v6 introduces a Routes component that is kind of like Switch, but a lot more powerful.\\n\\nv6 版本提供了功能更强大的`Routes`组件来代替`Switch`，主要优点如下：\\n\\n算了...原文的几个优点基本都很少用过。比如示例中的嵌套路由，在实际项目中一般直接写好 config 文件通过 map 渲染，不过`Routes`不再按顺序匹配路径，而是采用了一种自动匹配最佳路径的方法，这块之后有时间可以阅读下源码或等等大佬们的源码分析贴。\\n\\n对优点和示例感兴趣的话可以直接查看[原文](https://github.com/remix-run/react-router/blob/main/docs/upgrading/v5.md#upgrade-all-switch-elements-to-routes)\\n\\n这算是文章中的第二个破坏性变更：废弃`Switch`，由`Routes`代替\\n\\n#### <Route element>的优势\\n\\n> For starters, we see React itself taking the lead here with the <Suspense fallback={}> API. The fallback prop takes a React element, not a component.\\n\\n在 React 的 Suspense 组件中，fallback 使用了 Element 类型而不是 Component，这样的写法可以使开发者更加方便的注入想要的 props\\n\\n> Using elements instead of components means we don't have to provide a passProps-style API so you can get the props you need to your elements.\\n\\n使用 Element 类型代表着 router 不再需要提供类似于`passProps`的 API，开发者可以直接将 props 注入到组件中。\\n\\n另外，原文中提到在 v5 版本下想要自定义 props，要么使用`passProps`，要么使用`render props`或者`hoc`。唉 又一个时代的陨落 😌\\n\\n```\\n// 简单写法\\n<Route path=\\\":id\\\" component={Profile} />\\n// v6写法\\n<Route path=\\\":id\\\" element={<Profile />} />\\n\\n// 需要传入props时\\n<Route path=\\\":id\\\" render={() => (<Profile animate={true} />)} />\\n// v5.1写法\\n<Route path=\\\":id\\\" children={<Profile animate={true} />} />\\n// v6写法\\n<Route path=\\\":id\\\" element={<Profile animate={true} />} />\\n```\\n\\n> Another important reason for using the element prop in v6 is that is reserved for nesting routes.\\n\\nemmm...恢复 v3 版本的嵌套路由写法，👴🏻 青回\\n\\n```\\nconst App = () => {\\n  return (\\n    <BrowserRouter>\\n      <Routes>\\n        <Route path=\\\"/\\\" element={<Home />} />\\n        <Route path=\\\"users\\\" element={<Users />}>\\n          <Route path=\\\"me\\\" element={<OwnUserProfile />} />\\n          <Route path=\\\":id\\\" element={<UserProfile />} />\\n        </Route>\\n      </Routes>\\n    </BrowserRouter>\\n  );\\n};\\n\\nconst User = () => {\\n  return (\\n    <div>\\n      <nav>\\n        {/* v6中会自动跳转到/users/me，这个点需要注意 */}\\n        <Link to=\\\"me\\\">My Profile</Link>\\n      </nav>\\n    </div>\\n  );\\n};\\n```\\n\\n在子路由中直接使用 Link 跳转将默认带上父路由前缀，这个改动要十分注意，算是第三个比较大的破坏性变更\\n\\n#### <Route path>的注意事项\\n\\n> React Router v6 uses a simplified path format. in v6 supports only 2 kinds of placeholders: dynamic :id-style params and _ wildcards.\\n\\n在 v6 版本中 path 的有效写法：\\n\\n```\\n/groups\\n/groups/admin\\n/users/:id\\n/users/:id/messages\\n/files/*\\n/files/:id/*\\n```\\n\\n不再支持以下正则写法：\\n\\n```\\n/users/:id?\\n/tweets/:id(\\\\d+)\\n/files/*/cat.jpg\\n/files-*\\n```\\n\\n> One other thing to notice is that all path matching in v6 ignores the trailing slash on the URL.\\n\\nv6 版本中会忽略掉 path 的尾部斜杠，意味着和两种写法将被认为是同一个路由\\n\\n#### <Link to>的注意事项\\n\\n> In v5, a value that does not begin with / was ambiguous; it depends on what the current URL is.\\n\\n上文有提到这个变更，这里刚好可以深入描述下，\\n\\n对于 v5 版本的的解释，原文举例如下：\\n\\n* 当前 url 为`/users`时，会被解析为`<a href=\\\"/me\\\" />`\\n* 当前 url 为`/users/`时，会被解析为`<a href=\\\"/users/me\\\" />`\\n\\nrouter 团队在 v6 中消除了这种歧义模糊的写法，在`<Route path=\\\"users\\\">`下，无论当前 url 是否拥有后斜杠，`<Link to=\\\"me\\\">`将始终被渲染为`<a href=\\\"/users/me\\\" />`。\\n\\n同时 Link 支持`..`这样的 leading segment 来跳转其他相对路由\\n\\n```\\n// users路由\\nconst User = () => {\\n  return (\\n    <div>\\n      {/* 跳转当前路由 /users */}\\n      <Link to=\\\".\\\">Users</Link>\\n      {/* 跳转路由 /users/:id */}\\n      <Link to={user.id}>{user.name}</Link>\\n    </div>\\n  );\\n};\\n\\n// users/:id 路由下\\nconst UserPrfile = () => {\\n  return (\\n    <div>\\n      {/* 返回父级路由 /users */}\\n      <Link to=\\\"..\\\">Return Users</Link>\\n      {/* 跳转路由 /users/mj */}\\n      <Link to=\\\"../mj\\\">MJ</Link>\\n    </div>\\n  );\\n};\\n```\\n\\n\\n---\\n\\n#### 使用 useRoutes 代替 react-router-config 包\\n\\n> All of the functionality from v5's react-router-config package has moved into core in v6.\\n\\n通常在项目中并不会通过 JSX 的方式来声明 Route，大多数会沉淀成一个 config 文件并通过一个 map 方法自动渲染。\\n\\n而上述场景最常使用的包就是`react-router-config`（很早之前 umi 中就是利用这个包解析 config 中的路由配置）\\n\\n但是在 v6 版本中默认集成了这种 API，真是喜大普奔的一件事。\\n\\n```\\nconst App = () => {\\n  const elements = useRoutes([\\n    { path: '/', element: <Home /> },\\n    { path: 'dashboard', element: <Dashboard /> },\\n    {\\n      path: 'invoices',\\n      element: <Invoices />,\\n      // 通过children属性实现嵌套路由\\n      children: [\\n        { path: ':id', element: <Invoice /> },\\n        { path: 'sent', element: <SentInvoices /> },\\n      ],\\n    },\\n    // 通过*通配符实现404页面\\n    { path: '*', element: <NotFound /> },\\n  ]);\\n};\\n```\\n\\n#### 使用 useNavigate 代替 useHistory\\n\\n> React Router v6 introduces a new navigation API that is synonymous with and provides better compatibility with suspense-enabled apps.\\n\\n这是第三个破坏性变更：废弃`useHistory`，由`useNavigate`代替\\n\\n* v6 版本写法\\n\\n```\\nconst App = () => {\\n  const navigate = useNavigate();\\n\\n  const handleClick = () => {\\n    navigate('/home');\\n  };\\n\\n  return (\\n    <div>\\n      <button onClick={handleClick}>返回首页</button>\\n    </div>\\n  );\\n};\\n```\\n\\n主要写法变更：\\n\\n* `history.push(\\\"/\\\")` => `navigate(\\\"/\\\")`\\n* `history.replace(\\\"/\\\")` => `navigate(\\\"/\\\",{ replace: true })`\\n* `history.goBack()` => `navigate(-1)`\\n* `history.goForward()` => `navigate(1)`\\n* `history.go(2)` => `navigate(2)`\\n\\n另外，navigate 还支持与 Link 相同的相对路径写法\\n\\n\\n---\\n\\n#### Link 不再支持 component 属性\\n\\n> First of all, a should pretty much always render an . If yours does not, there's a good chance your app has some serious accessibility and usability problems, and that's no good.\\n\\n其实就是希望标签更加语义化\\n\\n\\n---\\n\\n#### NavLink 的 exact 属性替换为 end\\n\\n基本没用过，没什么可说的\\n\\n```\\n// v5\\n<NavLink exact>\\n// v6\\n<NavLink end>\\n```\\n\\n\\n---\\n\\n### NavLink 删除 activeClassName 属性和 activeStyle 属性\\n\\n在 v6 版本中，NavLink 的 style 和 className 支持函数写法，所以移除了这两个属性\\n\\n```\\n<NavLink style={({isActive}) => ({color:\\\"#1890FF\\\"})} className={({isActive}) => \\\"active\\\"}>\\n```\\n\\n\\n---\\n\\n#### StaticRouter 方法被移动到react-router-dom/server包中\\n\\n```\\n// v5\\nimport { StaticRouter } from 'react-router-dom';\\n// v6\\nimport { StaticRouter } from 'react-router-dom/server';\\n```\\n\\n\\n---\\n\\n#### 使用 useMatch 替换 useRouteMatch\\n\\n新的 useMatch 方法同样使用了「智能匹配算法」，同时 API 也更改为 v6 中的几个命名\\n\\n感兴趣可以直接查看[API 文档](https://github.com/remix-run/react-router/blob/main/docs/api.md#usematch)\\n\\n\\n---\\n\\n## 最后总结\\n\\n最后按惯例总结下全文的核心内容：\\n\\n升级的前提：\\n\\n1. router 团队建议先升级到 5.1 版本并使用新的 API 来渐进式升级到 v6\\n2. 不再兼容 react v16.8 以下版本\\n\\n主要改动内容：\\n\\n 1. 废弃 `Switch` 组件，由 `Routes` 代替（使用了智能匹配路径算法）\\n 2. 废弃 `Redirect` 组件，由 `Navigate` 代替\\n 3. 废弃 `useHistory` 方法，由 `useNavigate` 代替\\n 4. `Route` 组件移除原有 `component` 及 `render` 属性，统一通过 `element` 属性传递：`<Route element={<Home />}>`\\n 5. `Route` 组件支持嵌套写法（v3 版本用法回归）\\n 6. `Route` 组件的 `path` 规则变更，不再支持类正则写法\\n 7. 消除了 `v5` 版本中带后斜杠的路径时，`Link` 组件的跳转模糊的问题\\n 8. `Link` 组件支持自动携带当前父路由，以及相对路径写法`../home`\\n 9. 新增 `useRoutes` 方法，代替之前的`react-router-config`写法，同样支持嵌套\\n10. 其他一些 API 名称变更\\n\\n**最后祝各位老板身体健康！升官发财！！！**\",\"timestamp\":1640054135,\"title\":\"React-router-v6\"},\"digest\":\"73fJi30rpp5dD8Xqy7fGI5EA5vwUn_l4XMwfDZrMD5M\",\"authorship\":{\"contributor\":\"0xbf69b0a2754f392C2947d9A123f63498b892a3B6\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"vgeeXpPYZ3Vcirm23e2_RFkZkhoNGNfuRKgmnrAFInA\\\",\\\"y\\\":\\\"1h0rUxoXl3hjga98D5ZKOsyjeGmq80kuuOg2wBuoQpg\\\"}\",\"signature\":\"ajwSx4BSA6RH6cW679GCJafM6YVotsbNfsxupdnL20RNuhE-0RsBDhIBESkKhnKSrD52oQksRMEaBPgfS3upGw\",\"signingKeySignature\":\"0x1b104fedd045030be3251ef0f746ca3ea21b2893a8d5ef28b852260c4d060948299b115feb1d17bcf633b2adc2ae6ce09def56ae3b8653b8e4ca2bbeb27791d91b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"vgeeXpPYZ3Vcirm23e2_RFkZkhoNGNfuRKgmnrAFInA\\\",\\\"y\\\":\\\"1h0rUxoXl3hjga98D5ZKOsyjeGmq80kuuOg2wBuoQpg\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"73fJi30rpp5dD8Xqy7fGI5EA5vwUn_l4XMwfDZrMD5M\"}"