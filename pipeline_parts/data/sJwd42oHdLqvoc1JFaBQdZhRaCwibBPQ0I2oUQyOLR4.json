"{\"content\":{\"body\":\"迪杰斯特拉\\n\\n找到某一个顶点到其他所有顶点的最短距离\\n\\n弗洛伊德\\n\\n找到所有顶点之间的最短距离\\n\\n```\\npackage Algorithm.floyd;\\n\\nimport java.util.Arrays;\\n\\npublic class floydDemo {\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\tfinal int N = 65535;\\n\\t\\tchar[] vertex = {'A','B','C','D','E','F','G'};\\n\\t\\tint[][] weight = new int[][] {\\n\\t\\t\\t{0,5,7,N,N,N,2},\\n\\t\\t\\t{5,0,N,9,N,N,3},\\n\\t\\t\\t{7,N,0,N,8,N,N},\\n\\t\\t\\t{N,9,N,0,N,4,N},\\n\\t\\t\\t{N,N,8,N,0,5,4},\\n\\t\\t\\t{N,N,N,4,5,0,6},\\n\\t\\t\\t{2,3,N,N,4,6,0},\\n\\t\\t\\t};\\n\\t\\tGraph graph = new Graph(vertex.length, weight, vertex);\\n\\t\\tgraph.floyd();\\n\\t\\tgraph.showAll();\\n\\t}\\n}\\n\\nclass Graph{\\n\\tprivate char[] vertex;\\n\\tprivate int[][] dis;\\n\\tprivate int[][] pre;\\n\\t\\n\\tpublic Graph(int length, int[][] dis, char[] vertex) {\\n\\t\\tthis.vertex = vertex;\\n\\t\\tthis.dis = dis;\\n\\t\\tthis.pre = new int[length][length];\\n\\t\\tfor(int i=0; i<vertex.length; i++) {\\n\\t\\t\\tArrays.fill(pre[i], i);   //pre[i]是第i行\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic void showAll() {\\n\\t\\t\\n\\t\\tfor(int i=0; i<vertex.length; i++) {\\n\\t\\t\\t//输出pre\\n\\t\\t\\tfor(int j=0; j<vertex.length; j++) {\\n\\t\\t\\t\\tSystem.out.print(pre[i][j] + \\\" \\\");\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println();\\n\\t\\t\\t//输出dis\\n\\t\\t\\tfor(int j=0; j<vertex.length; j++) {\\n\\t\\t\\t\\tSystem.out.print(dis[i][j] + \\\" \\\");\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println();\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic void floyd() {\\n\\t\\tint len;   // 临时变量记录经过中间节点的新的距离\\n\\t\\tfor(int k=0; k<vertex.length; k++) {   // k表示中间节点\\n\\t\\t\\tfor(int i=0; i<vertex.length; i++) {  // i表示出发节点\\n\\t\\t\\t\\tfor(int j=0; j<vertex.length; j++) {\\n\\t\\t\\t\\t\\tlen = dis[i][k] + dis[k][j];\\n\\t\\t\\t\\t\\tif(len < dis[i][j]) {   //如果len小于两点之间的直接距离，就可以替换了\\n\\t\\t\\t\\t\\t\\tdis[i][j] = len;    // update the distance between i and j\\n\\t\\t\\t\\t\\t\\tpre[i][j] = pre[k][j];   // update the pre-vertex of i,j\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n}\\n```\",\"timestamp\":1638619308,\"title\":\"迪杰斯特拉（Dijstra）算法和弗洛伊德（Floyd）算法\"},\"digest\":\"iAzYnHIxV72AwQMwmO0fu9L6W627r_-FTsvEu5npa9c\",\"authorship\":{\"contributor\":\"0xDF123E726Be176617546a46350d67868C8CB27C8\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"qGbtSYw-sIQgqKJTQRNt2MS3oRAEfHge06MiqyW6LNY\\\",\\\"y\\\":\\\"9lA7qTDNX_96M0_KN-_F47Af2Yqo5Wd1-usr9HwluN8\\\"}\",\"signature\":\"AqTbiTYzklv53-8DjAVOMncKUnmU9yETNXOnbGentqw5lf5mQz53p-5JNvUaS0nsEPuyDV309gqISbbfQl2QwQ\",\"signingKeySignature\":\"0xef9a5cb6d8f5cd57decec87f8dd83df4aae56d6928de97d1ff38f235e7d23a195b934db02552455f6c8f6c94c24cf70bd72518d77d575148fc32d736b436f3301c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"qGbtSYw-sIQgqKJTQRNt2MS3oRAEfHge06MiqyW6LNY\\\",\\\"y\\\":\\\"9lA7qTDNX_96M0_KN-_F47Af2Yqo5Wd1-usr9HwluN8\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"iAzYnHIxV72AwQMwmO0fu9L6W627r_-FTsvEu5npa9c\"}"