"{\"content\":{\"body\":\"History articles:\\n\\n> [Eth.build Quickstart | Web3.0 dApp Dev 0x01](https://mirror.xyz/0x769699506f972A992fc8950C766F0C7256Df601f/xcUOEKghOqaBJ3jDv7Spec__NjMChsey2y37yQkDoNM)\\n>\\n> [Web3.0 dApp Developer Growth Path | Web3.0 dApp Dev 0x02](https://mirror.xyz/0x769699506f972A992fc8950C766F0C7256Df601f/CsT6Zya3ucWwSxz0kK8wTJfHMWua_nNZlnDbgT9Chrs)\\n>\\n> [Scaffold-Eth Quickstart | Web3.0 dApp Dev 0x03](https://mirror.xyz/0x769699506f972A992fc8950C766F0C7256Df601f)\\n\\n## 1 Run 1.0 version locally\\n\\nLet's try to run version 1.0 locally.\\n\\nThe 1.0 version don't need us to do much. We just need to clone the repo and start it.\\n\\n### 1.1 Download the code, switch branch and initialize the submodules\\n\\nFirst fork it\\n\\n> <https://github.com/leeduckgo/set-purpose>\\n\\n![image-20211002001028548](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fi3zf7nj30d603iglg.jpg)\\n\\nThen clone it.\\n\\n![image-20211002001126440](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fi7vov2j30ap09jmxf.jpg)\\n\\n```bash\\n# clone Repo\\ngit clone [forked repo]\\n# example: git clone https://github.com/WeLightProject/set-purpose.git\\ncd set-purpose\\n# Checkout another branch\\ngit checkout feat/v0x01\\n# Initialized submodules\\ngit submodule update --init packages/hardhat/contracts\\n```\\n\\n### 1.2 Install dependencies\\n\\n```node\\nyarn\\n```\\n\\n### 1.3 Start local test network\\n\\n```\\nyarn chain\\n```\\n\\n![\\\\[image-20211001211834038\\\\]](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fgwaeoej30dl02djrf.jpg)\\n\\n### 1.4 Deploy the contracts!\\n\\n```\\nyarn deploy\\n```\\n\\n![image-20211001220413508](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fgvatuij30fm03u74j.jpg)\\n\\n### 1.5 Start the application in another terminal\\n\\n```\\nyarn start\\n```\\n\\n### 1.6 Open in the browser!\\n\\nAccess the app:\\n\\n> <http://localhost:3000>\\n\\nNow you see your application.\\n\\n![image-20211001220814439](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fgx45chj30u00braav.jpg)\\n\\n## 2 Debunk contract source code\\n\\n```solidity\\npragma solidity >=0.8.0 <0.9.0; // Solidity version\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"hardhat/console.sol\\\";\\n// The reason why we import console.sol : https://hardhat.org/tutorial/debugging-with-hardhat-network.html, simply that we can do console.log in our contract.\\n//import \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; //https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n\\ncontract PurposeHandler { // Name of contract\\n\\n  //event SetPurpose(address sender, string purpose);\\n\\n  string public purpose = \\\"Building Unstoppable Apps!!!\\\"; // define and assign a variable purpose. This variable is directly stored on the blockchain. That is the unique feature of solidity: Assign is storing.\\n\\n  constructor() {\\n    // what should we do on deploy?\\n  }\\n\\n  function setPurpose(string memory newPurpose) public {\\n  \\t\\t// A function that pass newPurpose as parameter\\n  \\t\\t// You can learn more about memory/storage:\\n  \\t\\t// https://learnblockchain.cn/2017/12/21/solidity_reftype_datalocation\\n      purpose = newPurpose; // Update purpose to be newPurpose\\n      console.log(msg.sender,\\\"set purpose to\\\",purpose);\\n      //emit SetPurpose(msg.sender, purpose);\\n  }\\n}\\n```\\n\\n## 3 Deploy your app on Github-pages\\n\\nBecuase our web3.0 app is a pure front end application, we don't need to purchase or rent a server. We can just deploy the app on GitHub.\\n\\n### 3.1 Switch network to test network in React app\\n\\nAha! Here is the first part that we need to change our code. Locate the following code at `packages/react-app/src/App.jsx`:\\n\\n```javascript\\nconst targetNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\\n```\\n\\nSwitch `localhost` to the test network that we want to deploy, like `ropsten`.\\n\\n```\\nconst targetNetwork = NETWORKS.ropsten;\\n```\\n\\nThen we refresh the page, and we can see that it pops an alert to connect the test network.\\n\\n![image-20211001232356720](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fgxzkjgj30g506v0t1.jpg)\\n\\nUse metamask to connect the test network. Before that, we need some ETH to call the contract:\\n\\n> Ropsten faucet: <https://faucet.ropsten.be/>\\n\\n### 3.2 Switch network to Ropsten network in Hardhat\\n\\nThis determines which network we are connecting in Hardhat.\\n\\nGo to `packages/hardhat/hardhat.config.js`:\\n\\n```javascript\\nconst defaultNetwork = \\\"localhost\\\";\\n```\\n\\nChange `localhost` to `ropsten`。\\n\\n```\\nconst defaultNetwork = \\\"ropsten\\\";\\n```\\n\\n### 3.3 Redeploy the contract\\n\\nSince we changed the network, we need to redeploy our contract\\n\\nWe need to generate a new address in hardhat:\\n\\n```javascript\\nyarn run generate\\n```\\n\\n> Tips No.1：\\n>\\n> You can see all the commands in package.json!\\n\\n![image-20211001234607175](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fgzvb9tj30kw036t8y.jpg)\\n\\n> Tips No.2:\\n>\\n> git basic commands:\\n>\\n> ```Push new changes\\n> git add . # add all changes\\n> git commit -m \\\"[msg]\\\" # commit all changes\\n> git push\\n> ```\\n\\nWell, now we have a new ETH address of `0x1c95a91e74872ead0a4c726712cfdfab3292f284`. We will use this address to deploy contracts.\\n\\nLet's get some test ETH for the address:\\n\\n![image-20211001234619304](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fh1ypa7j30a002v3yd.jpg)\\n\\nThen run `yarn deploy`:\\n\\n![image-20211001234758890](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fgqwl7hj30k7059gm2.jpg)\\n\\nOh, now our contract is on Ropsten test network!\\n\\n<https://ethereum.stackexchange.com/questions/65589/return-a-mapping-in-a-getall-function>\\n\\nWe can find it on Etherscan:\\n\\n![image-20211001234830483](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fgyxe06j30u00cewfa.jpg)\\n\\n### 3.3 Generate static websites\\n\\nFirst we need to have a new branch to host all the static websites:\\n\\n```\\ngit checkout -b gh-pages\\n```\\n\\nThe best practice is to put this branch in another folder, so that our changes to  `gh-pages` won't affect other files:\\n\\n```bash\\ngit checkout feat/v0x01\\ngit worktree add ../set_purpose_gh_pages gh-pages\\n```\\n\\nRun the following commands, and static pages that can be hosted on Github-pages are generated:\\n\\n```bash\\nyarn build\\n```\\n\\n![image-20211002000250805](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fh0y13lj30dq0cudgy.jpg)\\n\\nWebsites are generated at `packages/react-app/build`, then we copy the folder's files to docs folder:\\n\\n```\\nmkdir docs\\ncp -r packages/react-app/build/* ../set_purpose_gh_pages/docs\\n```\\n\\n![image-20211002000605549](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fgsgpnyj30d0064t9f.jpg)\\n\\nDelete the rest of the folders:\\n\\n```\\nrm -rf packages package.json yarn.lock node_modules\\n```\\n\\nEverything look great! Let's push this branch:\\n\\n```bash\\ng add .\\ng commit -m \\\"feat/init gh-pages\\\"\\ngit push --set-upstream origin gh-pages\\n```\\n\\n### 3.4 Github-pages settings\\n\\nWe still need to set something in the Github repo pages. We go to `Settings`>`Pages` to set **Branches** and **Folder**.\\n\\n![image-20211002002301741](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fgrhgmaj30u00etabh.jpg)\\n\\nClick the link in the green box. Now we see the first web3 Dapp we created!\\n\\n> <https://leeduckgo.github.io/set-purpose>\\n\\n![image-20211002005210633](https://tva1.sinaimg.cn/large/008i3skNgy1gw7fguuboij30u007kt95.jpg)\\n\\n## Tips No.3: Git Submodule\\n\\nSometimes our repo may rely on other repos. Then we need to use Git Submodule.\\n\\nOther than that, we need to split the chunks of code to make the project structure better.\\n\\nFor example, we split the code of set-purpose and set-purpose-contracts in this tutorial.\\n\\nHere is the cheatsheet for commands of `git submodule`:\\n\\n```bash\\n# browse the help\\ngit submodule -h\\n# add submodule\\ngit submodule add https://github.com/leeduckgo/set-purpose-contracts.git\\n# clone all the submodules of repo\\ngit clone --recurse-submodules https://github.com/leeduckgo/set-purpose.git\\n# only update selected submodule\\n# --init is the parameter required for the first update. The following is the path of submodule.\\ngit submodule update --init packages/hardhat/contracts\\n```\\n\\n**Authors：**\\n\\n![leeduckgo](https://noncegeek.com/namecards/leeduckgo.svg?display=iframe)\\n\\n![msfew](https://noncegeek.com/namecards/msfew.svg?display=iframe)\\n\\n\",\"timestamp\":1636331233,\"title\":\"Get & Set Value 1.0 |  Web3.0 dApp Dev 0x04\"},\"digest\":\"iqlB8bddq3Rgv7fFc455OfqMNDf6M0hIEo1dWqlkohY\",\"authorship\":{\"contributor\":\"0x769699506f972A992fc8950C766F0C7256Df601f\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"KUpydL26FzlItw03NThMjEIT5T4rCIB6Ac3PG31yEHI\\\",\\\"y\\\":\\\"5Xn77xdlMUSJDlFeEsR9YjUQ1R17B-oLmJyMpCq-Rl0\\\"}\",\"signature\":\"taUEBMUix5bxOXFLFUHb3oXUdRwqAuuboACTCCYqGm76QPTl5XgSB0nvpQySropKeNizXfeOSd7Uxzlg-qfFcA\",\"signingKeySignature\":\"0x3d9b22eb42b9ee4007a5df0d91672d88bb452c2924ca38e485b0dcd8733561442e37dad2eef12f2fe6c181f14fba66c70e86e50000d816837cef983f01b7b8fb1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"KUpydL26FzlItw03NThMjEIT5T4rCIB6Ac3PG31yEHI\\\",\\\"y\\\":\\\"5Xn77xdlMUSJDlFeEsR9YjUQ1R17B-oLmJyMpCq-Rl0\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"iqlB8bddq3Rgv7fFc455OfqMNDf6M0hIEo1dWqlkohY\"}"