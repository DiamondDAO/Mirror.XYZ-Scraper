"{\"content\":{\"body\":\"First of all, we need to know that in the cBridge 2.0 self-managed bridge model, for bridge nodes and users, the occurrence of cross-chain transactions always requires two steps. The sequence is as follows:\\n\\nThe first step of the user: make a \\\"time-locked\\\" transfer to the bridge node on the source chain. The user who initiates the transfer is the only holder of the unlock key for this transfer.\\n\\nThe first step of the bridging node: a locked transfer to a user on the target chain, using the same lock as the user who initiated the transfer.\\n\\nThe user's second step: unlock the transfer received on the target chain and obtain funds from the bridge node.\\n\\nThe second step of the bridge node: the key corresponding to the lock on the target chain is detected, the transfer on the open source chain is unlocked, and the funds are obtained from the user.\\n\\nBut when the bridge node refuses to do the corresponding step 1 after the user has done the first step, or the user refuses to do the second step after the bridge node has done the first step, whether it is due to a system failure or a man-made malicious attempt, it will happen The problem of \\\"being evil\\\".\\n\\nIt should be noted that malicious behavior will not cause loss of funds, but will cause the funds of the user or the bridge node to be stuck in the system, waiting for a long time for the funds to be locked. The challenge in solving this problem is that in both cases, it is impossible to tell who is the perpetrator because the events are on different chains.\\n\\nIn this case, we need some decentralized entities to act as the \\\"arbitrators\\\" of this evil problem. Since SGN is responsible for allocating requests for users, it can track the entire process of any cross-chain transmission, so SGN can easily distinguish who is the real perpetrator.\",\"timestamp\":1634575108,\"title\":\"cBridge2.0, the key information you can't miss\"},\"digest\":\"zZWIuZYvyJYO7wbQtXbKwVzS29fPn8rWirAMPK5zU7o\",\"authorship\":{\"contributor\":\"0x1891f370f03403b2b2D7b54dB871ED98F568Fff0\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"W3WRJzGDCMB_5Zv2maFMNgw-PLys3hQpWBn7VXyVBNk\\\",\\\"y\\\":\\\"rDemq_w0D19fsG4m0p3JHvvsMe3Uh2xwvjQZXp8KTGE\\\"}\",\"signature\":\"SLAhp6VkthJiTSJKz0ePnlJYFlh4MGj549WiEFJCVHg0KSBLOhclvpc8LvDlYU5Rj_A797HzSr3Nal9ynDAm_Q\",\"signingKeySignature\":\"0xe63fe04c1fb5214739b098c0aa732f830d5b3336e1bbcd395320345d47e8cab83347b301d39f323e3c35a09b2c5cc93c8d52e212538f222bc3c9f6df06b1809a1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"W3WRJzGDCMB_5Zv2maFMNgw-PLys3hQpWBn7VXyVBNk\\\",\\\"y\\\":\\\"rDemq_w0D19fsG4m0p3JHvvsMe3Uh2xwvjQZXp8KTGE\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"zZWIuZYvyJYO7wbQtXbKwVzS29fPn8rWirAMPK5zU7o\"}"