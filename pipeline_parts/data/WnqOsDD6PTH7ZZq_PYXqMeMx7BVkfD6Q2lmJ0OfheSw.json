"{\"content\":{\"body\":\"**The Ethereum Name Service (ENS)** is a decentralized, and extensible naming system based on the Ethereum blockchain. In simple terms, it's a single smart contract that holds a list of all user domains along with their resolvers. For example,\\n\\nIn Web2, the DNS names are mapped to the respective public IP as,\\n\\n```text\\nwww.google.com    ->   8.8.8.8\\n```\\n\\nhere in the ENS domain registry, the public user account address or a contract is mapped to each `.eth` domain,\\n\\n```text\\nsasid.eth   ->   0x01d79BcEaEaaDfb8fD2F2f53005289CFcF483464\\n                 ...\\n```\\n\\nENS supports subdomains and multiple resolvers to a single domain. Aims to provide a common web3 user name for users in all the Ethereum services. To know more about ENS, visit [here](https://docs.ens.domains/?ref=lagandlog.com).\\n\\n**The Ethers.js** library aims to be a complete and compact library for interacting with the Ethereum Blockchain and its ecosystem. Created with Typescript support in mind and easy to connect with any Ethereum nodes to interact with smart contracts.\\n\\n![ethers.js](https://lagandlog-uploads.s3.amazonaws.com/2021_12_11_14_28_76aca365b9.png)\\n\\nEthers support ENS provider methods and resolvers, even we can get an avatar of the particular ENS domain. you can find more on [ethers documentation](https://docs.ethers.io/v5/api/providers/provider/#Provider--ens-methods).\\n\\n### Prerequisite:\\n\\n* Basic knowledge in Javascript and Web3.\\n\\n> You should be connected to your ethereum wallet (ex. Metamask) with your site.\\n> In this log, we will write our own custom React Hook to get ENS avatar and name,\\n\\n```jsx\\nimport { ethers } from \\\"ethers\\\";\\nimport { useEffect, useState } from \\\"react\\\";\\n\\nconst useENS = (address: string) => {\\n  const [ensName, setENSName] = useState<string | null>(null);\\n  const [ensAvatar, setENSAvatar] = useState<string | null>(null);\\n  const [loading, setLoading] = useState(false);\\n\\n  useEffect(() => {\\n    const resolveENS = async () => {\\n      setLoading(true);\\n      if (ethers.utils.isAddress(address)) {\\n        try {\\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\\n          let ensName = await provider.lookupAddress(address);\\n          let avatar = ensName ? await provider.getAvatar(ensName) : null;\\n          setENSName(ensName);\\n          setENSAvatar(avatar);\\n        } finally {\\n          setLoading(false);\\n        }\\n      }\\n    };\\n    resolveENS();\\n  }, [address]);\\n\\n  return { ensName, ensAvatar, loading };\\n};\\n\\nexport default useENS;\\n```\\n\\nUsing the above hook in your component results `{ ensName, ensAvatar, loading }`,\\n\\n```jsx\\n  const { ensName, ensAvatar, loading } = useENS(address);\\n```\\n\\nIf the user pointed their address to a `.eth` domain, it will lookup for the name of the domain else it will return `null`, same applies to the avatar.\\n\\nThis hook helps me in many places, I hope you find this useful. Stay tuned for more Web3 logs in the upcoming days.\\n\\nFeel free to leave your comments to improve the quality of the upcoming logs.\\n\\n[Find me on Twitter @sasicodes](https://twitter.com/sasicodes)\\n\\n## Happy hacking üï∏Ô∏è\",\"timestamp\":1639663713,\"title\":\"Custom Hook to resolve ENS\"},\"digest\":\"DudILYw06OhRifh5J-PbtSoTPYQI8k-O6ARh-SLXsZk\",\"authorship\":{\"contributor\":\"0x01d79BcEaEaaDfb8fD2F2f53005289CFcF483464\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"O0So_ExQDGuwVTkMRCWC9v_kKiPZ23xicSmiPibLB84\\\",\\\"y\\\":\\\"lnM8Sq0Y3JY-MxqqWok_-ijEBOEg8DyOxHnXkHW-iF4\\\"}\",\"signature\":\"kJLeHw8oEPJi0ReGp_-CJMfF8sEZIq2ZszURVvNW0f4ZooFjPJiozEyP8x2d0ytlKgPCqkooUQ8IqGLtMEhj1w\",\"signingKeySignature\":\"0x11f3a608deb895ed9141a17b7660c531dcd86bd63c321390fbbc9e8f8159321d689c6523fc9a9359ccb093d1e676522e52577ca0be6c3513ac4603aaa51e08d91b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"O0So_ExQDGuwVTkMRCWC9v_kKiPZ23xicSmiPibLB84\\\",\\\"y\\\":\\\"lnM8Sq0Y3JY-MxqqWok_-ijEBOEg8DyOxHnXkHW-iF4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"DudILYw06OhRifh5J-PbtSoTPYQI8k-O6ARh-SLXsZk\"}"