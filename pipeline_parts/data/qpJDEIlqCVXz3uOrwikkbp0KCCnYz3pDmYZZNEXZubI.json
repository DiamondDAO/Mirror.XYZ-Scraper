"{\"content\":{\"body\":\"By the end of this post, readers will be able to:\\n\\n* Develop code by using Python and Web3.py to connect to a local Ganache blockchain.\\n* Use Web3.py in conjunction with Ganache to test your transaction.\\n* Formulate code to sign and send a transaction by using Web3.py.\\n* Use Streamlit and Web3.py together to build an application that communicates with the blockchain.\\n* Test a blockchain web application by using Ganache.\\n\\n## Truffle Suite - Ganache\\n\\nGanache is a personal local blockchain with accounts that are preloaded with ether. The ether in these accounts have no real value on the Ethereum blockchain, as this blockchain is local only. Ganache is a useful tool for testing transactions and smart contracts. Each time you launch Ganache, a new list of accounts with different addresses and keys are created:\\n\\n![Ganache interface](https://images.mirror-media.xyz/publication-images/4Y2-ed-N69Y9_ntSNN-Y_.png?height=1066&width=1200)\\n\\nHere is the Truffle Suite - Ganache download link: \\n\\n[https://trufflesuite.com/ganache/](https://trufflesuite.com/ganache/)\\n\\n## Web3.py and Streamlit\\n\\nIn this guide, we will be integrating the account functionality of Ethereum's blockchain with the Streamlit web application. Web3.py will handle the transactions in the web application. In most decentralized applications that are built on the blockchain, Web3 is used to interact with smart contracts and read the block data. When you create a new contract object, you give it the JSON interface of the respective smart contract, and web3 will auto-convert all calls into low-level ABI calls over the remote procedure call (RPC).\\n\\nStreamlit can be found here: \\n\\n[https://streamlit.io/](https://streamlit.io/)\\n\\nWe will add functions that automate the process of accessing the balance of an address from the Ganache blockchain as well as sending a signed transaction. We will then incorporate these functions into the Streamlit web application. Visual Studio Code is the IDE used in this material to construct the python script below. \\n\\nimport os\\nimport requests\\nfrom dotenv import load_dotenv\\nload_dotenv()\\nfrom bip44 import Wallet\\nfrom web3 import Account\\nfrom web3 import middleware\\nfrom web3.gas_strategies.time_based import medium_gas_price_strategy\\nfrom web3 import Web3\\n\\nw3 = Web3(Web3.HTTPProvider('http://127.0.0.1:7545'))\\n\\ndef generate_account(w3):\\n   # Access the mnemonic phrase from the \\\\`.env\\\\` file\\n   mnemonic = os.getenv(\\\"MNEMONIC\\\")\\n   # Create Wallet object instance\\n   wallet = Wallet(mnemonic)\\n   # Derive Ethereum private key\\n   private, public = wallet.derive_account(\\\"eth\\\")\\n   # Convert private key into an Ethereum account\\n   account = Account.privateKeyToAccount(private)\\n   # Return the account from the function\\n   return account\\n\\ndef get_balance(w3, address):\\n    # Get balance of address in Wei\\n    wei_balance = w3.eth.get_balance(address)\\n    # Convert Wei value to ether\\n    ether = w3.fromWei(wei_balance, \\\"ether\\\")\\n    # Return the value in ether\\n    return ether\\n\\ndef send_transaction(w3, account, receiver, ether):\\n    # Set a medium gas price strategy\\n    w3.eth.setGasPriceStrategy(medium_gas_price_strategy)\\n    # Convert eth amount to Wei\\n    wei_value = w3.toWei(ether, \\\"ether\\\")\\n    # Calculate gas estimate\\n    gas_estimate = w3.eth.estimateGas({\\\"to\\\": receiver, \\\"from\\\":    account.address, \\\"value\\\": wei_value})\\n    # Construct a raw transaction\\n    raw_tx = {\\n        \\\"to\\\": receiver,\\n        \\\"from\\\": account.address,\\n        \\\"value\\\": wei_value,\\n        \\\"gas\\\": gas_estimate,\\n        \\\"gasPrice\\\": 0,\\n        \\\"nonce\\\": w3.eth.getTransactionCount(account.address)\\n    }\\n    # Sign the raw transaction with ethereum account\\n    signed_tx = account.signTransaction(raw_tx)\\n    # Send the signed transactions\\n    return w3.eth.sendRawTransaction(signed_tx.rawTransaction)\\n\\nDeploy your Streamlit application to read in the python script above.\\n\\nimport streamlit as st\\n\\n\\\\# Import the functions from ethereum.py\\nfrom ethereum import w3, generate_account, get_balance, send_transaction\\nfrom web3 import Web3\\n\\nw3 = Web3(Web3.HTTPProvider('http://127.0.0.1:7545'))\\n\\n\\\\# Streamlit application headings\\nst.markdown(\\\"# Automating Ethereum with Streamlit!\\\")\\n\\\\# Generate the Ethereum account\\naccount = generate_account(w3)\\n\\\\# The Ethereum Account Address\\nst.text(\\\"\\\\\\\\n\\\")\\nst.text(\\\"\\\\\\\\n\\\")\\nst.markdown(\\\"## Ethereum Account Address:\\\")\\n\\\\# Write the Ethereum account address to the Streamlit page\\nst.write(account.address)\\n\\\\# Display the Etheremum Account balance\\nst.text(\\\"\\\\\\\\n\\\")\\nst.text(\\\"\\\\\\\\n\\\")\\nst.markdown(\\\"## Ethereum Account Balance:\\\")\\n\\\\# Call the get_balance function and write the account balance to the screen\\nether_balance = get_balance(w3, account.address)\\nst.write(ether_balance)\\n\\\\# An Ethereum Transaction\\nst.text(\\\"\\\\\\\\n\\\")\\nst.text(\\\"\\\\\\\\n\\\")\\nst.markdown(\\\"## An Ethereum Transaction\\\")\\n\\\\# Create inputs for the receiver address and ether amount\\nreceiver = st.text_input(\\\"Input the receiver address\\\")\\nether = st.number_input(\\\"Input the amount of ether\\\")\\n\\\\# Create a button that calls the \\\\`send_transaction\\\\` function and returns the transaction hash\\nif st.button(\\\"Send Transaction\\\"):\\n    transaction_hash = send_transaction(w3, account, receiver, ether)\\n    # Display the Etheremum Transaction Hash\\n    st.text(\\\"\\\\\\\\n\\\")\\n    st.text(\\\"\\\\\\\\n\\\")\\n    st.markdown(\\\"## Ethereum Transaction Hash:\\\")\\n    st.write(transaction_hash)\\n\\nNavigate to the folder in your terminal and type 'streamlit run <filename>' - The following Streamlit page should open in your browser:\\n\\n![Streamlit web application](https://images.mirror-media.xyz/publication-images/-QfK19KNKLdI8g-55BWEc.png?height=712&width=1370)\\n\\nIt’s that easy to automate an Ethereum transaction and get the results to display on the Streamlit application webpage! Congrats for learning how to use Ganache as a mock blockchain in conjunction with Steamlit and Web3.py.\\n\\nUntil next time, here’s a twitter thread summary of this post:\\n\\n[https://twitter.com/jackofcrypto/status/1478390722944458764?s=20](https://twitter.com/jackofcrypto/status/1478390722944458764?s=20)\\n\\n\\n\\n\",\"timestamp\":1641310837,\"title\":\"Automating Blockchain Transactions\"},\"digest\":\"h7WlaE9lJoHu6YGT8cRM948AgdAbgniQruPy4AWTTbw\",\"authorship\":{\"contributor\":\"0xf15F5cD3e0C293fC37480124F3Fa22005774deBf\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Sk0Du1I4JzI09Vb5SeY5E1PB-FukmZKlKW0AZW45osA\\\",\\\"y\\\":\\\"0ueT6y_wr9ga1aY8-ubsZEj0NEZRswrjD-illjCkxjE\\\"}\",\"signature\":\"zPdO1a4u9wG907hEnD1gm3qY1vLlXi_NYFM1l_jz_46rZ_DBNtmNM8jOIqE80MrR9s8oJ2jLsDqVSAlAmnvjaw\",\"signingKeySignature\":\"0xdeb4cd01172d31cafa3f999651c8e79f443d93a88185df3b03a416124772d930212c7a13f79e6b1a6137302a6d4cbb76e9d8521ca8fdd47c40a9ed3e3e7f35a01c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Sk0Du1I4JzI09Vb5SeY5E1PB-FukmZKlKW0AZW45osA\\\",\\\"y\\\":\\\"0ueT6y_wr9ga1aY8-ubsZEj0NEZRswrjD-illjCkxjE\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"h7WlaE9lJoHu6YGT8cRM948AgdAbgniQruPy4AWTTbw\"}"