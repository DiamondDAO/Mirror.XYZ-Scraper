"{\"content\":{\"body\":\"If you're looking for a way to control the contents of an `<iframe>` via React in a de-facto canonical way, Portals are the way to go. And as with all things Portal: Once you establish a reference to an extisting and mounted DOM node (in this case that would be the contentWindow of a given `<iframe>`) and create a Portal with it, its contents are also considered children of the «parent» virtual DOM, which means a shared (synthetic) event system, contexts and so on.\\n\\nPlease note that, for code brevity, the examples below make use of the Optional chaining operator, which as of this writing is not supported in all browsers.\\n\\nExample: A functional React component including hooks:\\n\\n```\\n// iframe.js\\n\\nimport React, { useState } from 'react'\\nimport { createPortal } from 'react-dom'\\n\\nexport const IFrame = ({\\n  children,\\n  ...props\\n}) => {\\n  const [contentRef, setContentRef] = useState(null)\\n  const mountNode =\\n    contentRef?.contentWindow?.document?.body\\n\\n  return (\\n    <iframe {...props} ref={setContentRef}>\\n      {mountNode && createPortal(children, mountNode)}\\n    </iframe>\\n  )\\n}\\n```\\n\\nExample: A React class component:\\n\\n```\\n// iframe.js\\n\\nimport React, { Component } from 'react'\\nimport { createPortal } from 'react-dom'\\n\\nexport class IFrame extends Component {\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      mountNode: null\\n    }\\n    this.setContentRef = (contentRef) => {\\n      this.setState({\\n        mountNode: contentRef?.contentWindow?.document?.body\\n      })\\n    }\\n  }\\n\\n  render() {\\n    const { children, ...props } = this.props\\n    const { mountNode } = this.state\\n    return (\\n      <iframe\\n        {...props}\\n        ref={this.setContentRef}\\n      >\\n        {mountNode && createPortal(children, mountNode)}\\n      </iframe>\\n    )\\n  }\\n}\\n```\\n\\n**Usage:**\\n\\n```\\nimport { IFrame } from './iframe'\\n\\nconst MyComp = () => (\\n    <IFrame>\\n        <h1>Hello Content!</h1>\\n    </IFrame>\\n)\\n```\\n\\nFurther control, for example over an `<iframe>`s `<head>` contents, can easily be achieved as this Gist shows.\\n\\nThere is also react-frame-component, a package that imho offers pretty much everything you need when working with controlled `<iframe>`s in React.\\n\\n**Caveats:**\\n\\n* This answer only addresses use cases, where the owner of a given `<iframe>` wants to programmatically control (as in decide about) its contents in a React-ish way.\\n* This answer assumes, that the owner of an `<iframe>` complies to the Same-origin policy.\\n* This answer is not suited to track how and when external resources are loaded in an `<iframe src=\\\"https://www.openpgp.org/>` kind of scenario.\\n* If accessibility is something you care about, you should give your iframes meaningful title attributes.\\n\\n**Use cases (that I know of);**\\n\\n* The OP's [use case](https://newbedev.com/java-use-case-of-switch-statement-code-example): Ads and the need to control how and when those can access a safely scoped element on your website.\\n* Embeddable third party widgets.\\n* My use case (and hence my somewhat informed stance on the matter): CMS UI's, where you want to enable users to preview scoped [CSS](https://newbedev.com/customize-list-item-bullets-using-css) styles, including applied media queries.\\n\\n**Adding a given set of CSS styles (or stylesheets) to a controlled** `<iframe>`:\\n\\nAs one comment author pointed out, managing styles between a parent application and the contents of a controlled `<iframe>` can be quite tricky. If you're lucky enough to have (a) dedicated CSS file(s) incorporating all necessary visual instructions for your `<iframe>`, it might suffice to just pass your `IFrame` component a `<link>` tag referencing said style(s), even though this is not the most standard compliant way to go about `<link>`refs:\\n\\n```\\nconst MyComp = () => (\\n  <Frame>\\n    <link rel=\\\"stylesheet\\\" href=\\\"my-bundle.css\\\">\\n    <h1>Hello Content!</h1>\\n  </Frame>\\n) \\n```\\n\\nIn this day and age however, and especially in a React world, most of the time, build setups create styles and stylesheets on the fly: Because they leverage meta-languages like SASS or even more involved solutions like CSS-in-JS stuff (styled-components, emotion).\\n\\nThis sandbox contains examples on how to integrate some of the more popular styling strategies with iframes in React.\\n\\nhttps://codesandbox.io/s/react-iframe-examples-36k1x\\n\\nThis answer used to also give recipes with regards to versions of React prior to 16.3. At this point in time however, I think it's safe to say that most of us are able to pull off a React version including Portals, and, to a lesser extent, hooks. If you're in need of solutions with regards to iframes and React versions < 16, hit me up, I'll gladly offer advice.\\n\\n \\n \\n\\nThere is an easier solution if someone just wants to display small [HTML](https://newbedev.com/html-div-element-disappears-with-no-content) inside the iframe.\\n\\n```\\n<iframe src={\\\"data:text/html,\\\"+encodeURIComponent(content)}/>\\n```\\n\\nThe [max length](https://newbedev.com/python-select-max-length-of-a-column-sql-code-example) of content is 32768 characters.\\n\\nThere is also easy to use react-frame-component package which was mentioned in the accepted answer.\\n\\nThis works too (not supported in IE).\\n\\n```\\nconst myHTML = <h1>Hello World</h1>\\n<iframe srcDoc={myHTML} />\\n```\\n\\nMore info here: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\",\"timestamp\":1637738967,\"title\":\"How to set iframe content of a react component\"},\"digest\":\"3GTYWPjbZb6z1b7C-YF7RQFE_OTrJhuyyjxRaoxk_8o\",\"authorship\":{\"contributor\":\"0x4D98416dd11Ca6E876845b2E6Bf1805197f0348e\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"uq3vVHELegKIa5I4N7Ogwbhl4jr0LhibBTBJs6Bycug\\\",\\\"y\\\":\\\"4yok-KS8WAif2U3Djg9UTaz6TV5bkH38OpDTSWNwMuE\\\"}\",\"signature\":\"OTpY2vrtObtmqK1jHx4tE2biNCU1IzGLa021JlUrz5oU1wBOOzPaPXIhplOhtPtvhTfF5GEeIxV7k7WVoe_5NQ\",\"signingKeySignature\":\"0x04cfaa285bd904f99fc33af1b8188bbd2d373e9eb2650f37144abaeca7de62ed45f32920b9ec80b630db62def77609c7505f2bbe6eef8441eba1d26e6870ec761b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"uq3vVHELegKIa5I4N7Ogwbhl4jr0LhibBTBJs6Bycug\\\",\\\"y\\\":\\\"4yok-KS8WAif2U3Djg9UTaz6TV5bkH38OpDTSWNwMuE\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"3GTYWPjbZb6z1b7C-YF7RQFE_OTrJhuyyjxRaoxk_8o\"}"