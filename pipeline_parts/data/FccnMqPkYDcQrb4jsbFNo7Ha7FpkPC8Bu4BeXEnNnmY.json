"{\"content\":{\"body\":\"I study TLA+ for thinking algorithm of distributed system.\\n\\n# TL;DR\\n\\nConverting C lang code to TLA+.This post contains only information from these videos. [The TLA+ Video Course](http://lamport.azurewebsites.net/video/videos.html)\\n\\n# Follows\\n\\n# Step 1: Start point\\n\\nThis is original code. I will convert this code.\\n\\n```c\\nint i;\\nvoid main(){\\n\\ti = someNumber(); // someNumber() returns a number in {0...1000}\\n\\ti = i + 1; \\n}\\n```\\n\\n# Step 2: Add variables state as comments\\n\\nWrite`Variables state`\\n\\n```c\\nint i;      // i = 0. In C language, global variables is initialized to zero.\\nvoid main(){\\n\\ti = someNumber(); // i in { 0...1000 }\\n\\ti = i + 1; // i = i + 1\\n}\\n```\\n\\n# Step 3: Define program control state variables\\n\\nAdd `program controll state (pc)`\\n\\n```c\\nint i;      // i = 0, pc = \\\"start\\\" \\nvoid main(){\\n\\ti = someNumber(); // i in { 0...1000 }, pc = \\\"middle\\\"\\n\\ti = i + 1; // i = i + 1, pc = \\\"done\\\"\\n} // pc = \\\"done\\\"\\n```\\n\\n# Step 4: Re-Write those function driven by pc\\n\\nThis expression is same as above C code. (In original video, uses `THEN` and block, but this note emits it)\\n\\n```\\nif the current value of pc is \\\"start\\\":\\n\\tnext i is in { 0...1000 }\\n\\tnext pc is \\\"middle\\\"\\nelse if the current value of pc is \\\"middle\\\":\\n\\tnext i is i + 1\\n\\tnext pc = \\\"done\\\"\\nelse:\\n\\tno next state\\n```\\n\\n## Note initial state\\n\\nInitial state formula `i`=0, `pc`=`start`\\n\\n# Step 4: Make it more simple\\n\\nConvert some sentences as follows:\\n\\n* `the current value of pc` => `pc`\\n* `is` => `=`\\n* `next i` => `i'`\\n\\n```\\nif pc = \\\"start\\\":\\n\\ti' = in { 0...1000 }\\n\\tpc' = \\\"middle\\\"\\nelse if pc = \\\"middle\\\":\\n\\ti' = i + 1\\n\\tpc' = \\\"done\\\"\\nelse:\\n\\tno next state\\n```\\n\\n# Step 5: Make it looks like mathematical expression\\n\\nConvert some sentences as follows:`in` => `∈`\\n\\n```\\nif pc = \\\"start\\\":\\n\\ti' ∈ { 0...1000 }\\n\\tpc' = \\\"middle\\\"\\nelse if pc = \\\"middle\\\":\\n\\ti' = i + 1\\n\\tpc' = \\\"done\\\"\\nelse:\\n\\tno next state\\n```\\n\\n# Step 6: Show and, or\\n\\nthis code is single formula, implicit `and(∧)`\\n\\n```\\ni' ∈ { 0...1000 }\\npc' = \\\"middle\\\"\\n```\\n\\nso, show\\n\\n```\\nif pc = \\\"start\\\":\\n\\t(i' ∈ { 0...1000 }) ∧ (pc' = \\\"middle\\\")\\nelse if pc = \\\"middle\\\":\\n\\t(i' = i + 1) ∧ (pc' = \\\"done\\\")\\nelse:\\n\\tno next state\\n```\\n\\n# Step 7: Check whether this expression is correct\\n\\n### Case 1\\n\\n`i`=17, `pc`=`start`,`i'`=`543`, `pc'` = `middle`is **true**, because it enough above expression,\\n\\n### Case 2\\n\\n`i`=17, `pc`=`middle`,`i'`=`123`, `pc'` = `done`is **false**, because `i'` dose not equal `i+1`,\\n\\n# And finish\\n\\n`no next state` => `false`\\n\\n# Step 8: Using ASCII characters\\n\\nToo hard to use ∧ in computer ('∧\\\\`)\\n\\n* `∈` => `\\\\in`\\n* `∧` => `/\\\\`\\n\\n```\\nif pc = \\\"start\\\":\\n\\t(i' \\\\in { 0...1000 }) /\\\\ (pc' = \\\"middle\\\")\\nelse if pc = \\\"middle\\\":\\n\\t(i' = i + 1) /\\\\ (pc' = \\\"done\\\")\\nelse:\\n\\tno next state\\n```\\n\\n# Step 9: Using variables\\n\\nI define two words as follows define **A** = `(i' ∈ { 0...1000 }) ∧ (pc' = \\\"middle\\\")` define **B** = `(i' = i + 1) ∧ (pc' = \\\"done\\\")`when the case of `(pc = 'start') /\\\\ A` or the case of`(pc = 'middle') /\\\\ B`, this formula is **true**.\\n\\n`or` is `||`, so this formula is`((pc = 'start') /\\\\ A || ((pc = 'middle') /\\\\ B) `\\n\\n```\\n((pc = 'start') /\\\\ ((i' ∈ { 0...1000 }) ∧ (pc' = \\\"middle\\\"))) ||\\n  ((pc = 'middle') /\\\\ (i' = i + 1) ∧ (pc' = \\\"done\\\")) \\n```\\n\\n# Step 10: ReFactoring\\n\\nRemove useless parentheses\\n\\n```\\n(pc = 'start' /\\\\ i' ∈ { 0...1000 } /\\\\ pc' = \\\"middle\\\") ||\\n  (pc = 'middle' /\\\\ i' = i + 1 /\\\\ pc' = \\\"done\\\") \\n```\\n\\n```\\n(pc = 'start' /\\\\ i' ∈ { 0...1000 } /\\\\ pc' = \\\"middle\\\")\\n```\\n\\nAdd `/\\\\` to the front of`pc = 'start'`\\n\\n```\\n\\t/\\\\ pc = 'start'\\n\\t/\\\\ i' ∈ { 0...1000 }\\n\\t/\\\\ pc' = \\\"middle\\\"\\n\\\\/\\n\\t/\\\\ pc = 'middle'\\n\\t/\\\\ i' = i + 1\\n\\t/\\\\ pc' = \\\"done\\\"\\n```\\n\\n# Step 11: Result code\\n\\n```TLA+\\nInit == (pc = \\\"start\\\") /\\\\ (i = 0)\\n\\nNext == \\n  /\\\\ pc = 'start'\\n\\t/\\\\ i' ∈ { 0...1000 }\\n\\t/\\\\ pc' = \\\"middle\\\"\\n\\\\/\\n\\t/\\\\ pc = 'middle'\\n\\t/\\\\ i' = i + 1\\n\\t/\\\\ pc' = \\\"done\\\"\\n```\\n\\n# Step 12: Add extends, variables\\n\\n```TLA+\\nExtends Integer\\nVariables i, pc\\n\\nInit == (pc = \\\"start\\\") /\\\\ (i = 0)\\n\\nNext == \\n  /\\\\ pc = 'start'\\n\\t/\\\\ i' ∈ { 0...1000 }\\n\\t/\\\\ pc' = \\\"middle\\\"\\n\\\\/\\n\\t/\\\\ pc = 'middle'\\n\\t/\\\\ i' = i + 1\\n\\t/\\\\ pc' = \\\"done\\\"\\n```\\n\\n### Extends\\n\\n`Extends` is like import context. `Extends Integer` loads some arithmetic operator `+`,`-`,`*`, ... If you want to use prefix `-`, you should write `Extends Naturals`\\n\\n### Variables\\n\\nDeclares all variables in code.\\n\\n## Ref\\n\\n[The TLA+ Home Page](https://lamport.azurewebsites.net/tla/tla.html)[A Summary of TLA+](https://lamport.azurewebsites.net/tla/summary.pdf)\",\"timestamp\":1637807562,\"title\":\"Study TLA+\"},\"digest\":\"OhqCPb91Taw36NXAH2ZKV_FoI1ibFDHnc0KjAnL0Veg\",\"authorship\":{\"contributor\":\"0xDB10E4a083B87e803594c12c679422dCe5FCCCB9\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"321j8C_BP8_IRF5tFIH3qfLW6GSz1Uip5vpx0HRBPuI\\\",\\\"y\\\":\\\"MCwVnuK_T1MO6tIUio08pt0EBQWL2iBs7Aj4fNQyErE\\\"}\",\"signature\":\"H4zGeQzL-om9yjZpfFFSJZd6idv4UQe3eVH0IOSX-bn2cewGuLpAN5z_3ccfmZf_xMbOmRBMKGgXfobqFtkM1g\",\"signingKeySignature\":\"0x2f4d43d0099aa2ce0a94d25a3f2134ab8734f8493204c3a1fdb2739515aa3f5360092d995b4502dc123bc51faa63e2a7ce712b58439e2b987534383990a765061c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"321j8C_BP8_IRF5tFIH3qfLW6GSz1Uip5vpx0HRBPuI\\\",\\\"y\\\":\\\"MCwVnuK_T1MO6tIUio08pt0EBQWL2iBs7Aj4fNQyErE\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"OhqCPb91Taw36NXAH2ZKV_FoI1ibFDHnc0KjAnL0Veg\"}"