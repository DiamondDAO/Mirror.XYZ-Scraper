"{\"content\":{\"body\":\"## The ultimate guide to mastering the Data Layer\\n\\nThe data layer is the solution to enrich the Matomo Tag Manager with data, to provide information to the existing tags and triggers and to use this data for the control of the Tag Manager. Without the data layer, Matomo’s Tag Manager would have no variables or triggers and that is what the tag firing is based on. So the data layer is the linchpin to unfold the full potential of the Matomo Tag Manager. In this article I will go into all important points concerning Matomo and Data Layer, which you should know.\\n\\nIt is at the same time a help to explain:\\n\\n## Content\\n\\n*   What is the data layer?\\n*   Installing the Data Layer – How to implement it\\n*   How does the Matomo Tag Manager use this information – What do I do with it?\\n*   Summary\\n\\n### What is the data layer?\\n\\nFor many, the data layer is a great unknown, complicated to understand and full of inconsistencies. He is the key to unfolding the full potential of the Matomo Tag Manager. And also not so difficult to understand.\\n\\nTechnically speaking, the data layer is a JavaScript array that stores the required information. The Tag Manager then uses this information in the tags, triggers and variables. This information may also be transferred to other systems, for example via marketing tags on Facebook and Google.\\\\~\\\\~(Even if this does not necessarily correspond to the basic principle of Matomo)\\\\~\\\\~So this array is like a temporary, invisible, further layer of the website. The visitors of the website do not see the information and content that the data layer layer has. Since it is an invisible part of the website. [Nevertheless, if you know how to do it, you can still access the information.](https://www.trackingninja.de/en/retrieve-matomo-data-layer-via-the-browser-console/?lang=en)\\n\\nImagine the data layer is like a bucket. The bucket can contain different balls, on each ball some information is printed as numbers or words. This can be product information, user IDs or the category of the page, for example. What is in the bucket of your website can also be recorded and used by the Matomo Tag Manager. If you add information, i.e. more balls, to the bucket, the Tag Manager can use them from that point on. This can then be used to control triggers for tags or the Matomo Tracking can be enriched with information that it cannot know by default.\\n\\nThe following figure shows the function of the data layer.\\n\\n![Matomo Tag Manager Data Layer](https://www.trackingninja.de/wp-content/uploads/2020/09/Matomo-Tag-Manager-Data-Layer.png)\\n\\nMatomo Tag Manager Data Layer\\n\\nIt happens again and again that developers do not know the data layer. Because not every website owns it, not everyone who has implemented tracking uses it. But to have a clean tracking and to simplify the work between analysts, developers and external consultants, it is recommended to know it and also to know how such a data layer works.\\n\\n### Installing the Data Layer – How to implement it\\n\\nIt often happens that the question is asked how a data layer is to be built into the website. [The documentation of Matomo](https://developer.matomo.org/guides/tagmanager/settingup) can be somewhat confusing. [Also in the help for embedding the Tag Manager](https://developer.matomo.org/guides/tagmanager/embedding) it is often not immediately clear what to do. If no additional page information needs to be available at the time of loading the Tag Manager, such as user IDs or product data, there is nothing else to do than to include the Matomo Tag Manager code in the source code of the page. Because as soon as the JavaScript snippet of the Matomo Tag Manager is inserted into the source code of the website and it is loaded by a page visit, the data layer is automatically initiated by the JavaScript snippet. Now the data layer is available, but it is still empty.\\n\\nBut as you can imagine it is possible to extend the Matomo Data Layer. For this purpose, data and information is added or overwritten. They are present until a page change takes place or the page is reloaded. Adding user- or page-specific information I will explain in more detail in the further course of this article. But since such information mostly comes from the backend or is collected via a tracking script, it is good if a web developer takes care of it.\\\\\\\\\\n\\n**Here is an example of the container snippet of Matomo Tag Manager.**\\n\\nIt is available for every Matomo installation and can be easily removed in the settings by copy\\\\&paste.\\n\\n    <Matomo Tag Manager.>\\n    <script type=\\\"text/javascript\\\">\\n      var _mtm = window._mtm = window._mtm [];\\n      _mtm.push({'mtm.startTime': (new Date().getTime()), 'event': 'mtm.Start'})\\n      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\\n      g.type='text/javascript'; g.async=true; g.src='https://{$MATOMO_URL}/js/container_{$CONTAINER}.js'; s.parentNode.insertBefore(g,s);\\n    </script>\\n    <End Matomo Tag Manager.>\\n\\n#### Declare the data layer\\n\\nHow is the data inserted into the data layer? Because once the data layer is created it is (almost) empty from the beginning. To get the full benefit\\\\~\\\\~and fun\\\\~\\\\~to have data to be added. Imagine that you now fill your empty bucket with balls, which of course have all kinds of information printed on them.\\\\\\\\\\n\\nThere are two ways to do this:\\n\\n1.  Deploy the Matomo Data Layer before the Matomo Tag Manager Code\\n2.  by “pushing” of information by means of a **\\\\_mtm.push**\\n\\n##### Declare the data layer – Deploy the Matomo data layer before the Matomo Tag Manager code\\n\\nIn my opinion, the first method belongs on every website. So that you can get them tracked properly. To do this, insert **the data layer before the Tag Manager Code**. Based on values provided by the CMS, the Tag Manager can then be enriched with this information. Via the Tag Manager settings (variables) they can then be captured when the page is called up and forwarded to Matomo Tracking. This way you can provide for example product data, page ID (some of you know it from WordPress) or, if a user is already logged in, the user ID. Standard Tracking cannot collect or know such information. So we help with this and organize what is recorded and tracked. And since these values already exist when the Tag Manager is loaded, it can also use them for custom dimensions or event tags.\\n\\nIt could look like this:\\n\\n    <Static data layer.>\\n    <script>var_mtm = _mtm|| [];\\n    _mtm.push({\\n    'pageValue': '0.5',\\n    'pageTitle': document.title\\n    });\\n    </script>\\n    <Static Data Layer End -->\\n\\n\\n    <Matomo Tag Manager.>\\n    <script type=\\\"text/javascript\\\">\\n    var _mtm = _mtm [];\\n    _mtm.push({'mtm.startTime': (new Date().getTime()), 'event': 'mtm.Start'})\\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src='https://your.domain.de/js/container_12345.js'; s.parentNode.insertBefore(g,s);</script>\\n    <Matomo Tag Manager.>\\n\\n##### \\\\_mtm.push\\n\\nThe following method is used to fill the data layer with additional information. Push commands are used to enrich the data layer, the array, with additional attributes. The Tag Manager can then record these events and send them to Matomo Tracking.\\n\\n**Here are a few examples.**\\n\\n*Write a variable to the data layer, make it available:*\\n\\n    var _mtm = _mtm [];\\n    window._mtm.push({\\n      \\\"productColor\\\": \\\"black\\n    });\\n\\n*Write a specific event to the data layer:*\\n\\n    var _mtm = _mtm [];\\n    window._mtm.push({\\n      'event': 'purchase'\\n    });\\n\\n*A site visitor has added a product to the shopping cart:*\\n\\n    var _mtm = _mtm [];\\n    window._mtm.push({\\n      'event': 'addToCard',\\n      'productID': 'A1B2C3',\\n      productPrice: '123\\n    });\\n\\n**Note:** It is not absolutely necessary to use **window\\\\.\\\\_mtm**. But it has already proven to be helpful with one or the other website.\\n\\n### How does the Matomo Tag Manager use this information – What do I do with it?\\n\\nThe Matomo Tag Manager can do two things with it.\\n\\n1.  It can read certain values assigned to a variable.\\\\\\\\\\n2.  With the event information, he can listen for these and then fire certain tags via a trigger (also known as impulse).\\n\\n#### Reading variables\\n\\nNow let’s assume your website has different categories. A blog, contact, home page and maybe even a product overview and product detail page. Matomo cannot know where the visitor of the site is at the moment. If you want to record all actions and events, by category or page type, you must provide additional information. You can provide it via the data layer of the Matomo Tag Manager. For this purpose, a static data layer must be provided before the container Snipped.\\n\\n*It could look like this:*\\n\\n    <head>\\n    <script> var _mtm = _mtm [];\\n    _mtm.push ({\\n    'pageCategory': 'Blog'\\n    });\\n    </script>\\n    <script>\\n    <Matomo Tag Manager.>\\n    <! -- ....abcs.js... -->\\n    <End Matomo Tag Manager.>\\n    </script>\\n    </head>\\n\\nNow Matomo can read out the stored value from the data layer right at loading and you can add it, for example, to a custom dimension. This would make it possible to group all page categories such as the blog, product overview pages or the detail pages and compare their performance.\\n\\n\\\\*[Here a nice example from the Matomo Demo.](https://demo.matomo.org/index.php?module=CoreHome\\\\&action=index\\\\&idSite=62\\\\&period=day\\\\&date=yesterday#?idSite=62\\\\&period=day\\\\&date=yesterday\\\\&segment=\\\\&category=General_Actions\\\\&subcategory=customdimension5)\\\\*\\\\*\\\\*\\n\\n\\\\*\\\\****Another example based on a user who is logged in to the website via his account:***\\\\*\\\\*A user is logged in via the backend of the page and has already received the value ‘Internal’ (by a previous data layer push) when visiting the page. When the page is called up (Pageview Event in the Tag Manager) it already has a defined userType. The userType is a variable from the data layer of the Tag Manager, which the page owner has created there.\\n\\n##### The Matomo Tag Manager Data Layer\\n\\n![user-logged-in](https://www.trackingninja.de/wp-content/uploads/2020/09/user-logged-in.png)\\n\\nuser-logged-in\\n\\n![user_internal_matomo - Variables](https://www.trackingninja.de/wp-content/uploads/2020/09/user_internal_matomo-Variables.png)\\n\\nuser_internal_matomo - Variables\\n\\nWhen logging off, the variable is updated via a data layer push. This happens, for example, via a script that manages the login function.\\n\\n    _mtm.push({\\n      'event': 'mtEvent',\\n      'userType': 'undefined'\\n      });\\n\\n![user-undefined](https://www.trackingninja.de/wp-content/uploads/2020/09/user-undefined-tempsnip.png)\\n\\nuser-undefined\\n\\nWhat happened here? The *data layer push event* sent an event with the name *mtEvent* to the data layer. In addition, the variable \\\\*userType \\\\*was rewritten with a value of \\\\*undefined \\\\*(as string).Since the user is no longer logged in, he will be marked as “undefined” on each subsequent visit to the site.\\n\\n##### The comparison with the sticker\\n\\nYou can imagine it as if you can enter a house through two doors. I f you take the left door you get a blue sticker, if you go through the right door you get a red sticker. This attribute is valid until you remove the sticker. But now you can change, remove or update these attributes. This would give you more stickers, remove or exchange them. And through this one could then make certain classifications. No matter which room you enter in the house, those present there could see which attributes you possess via the stickers.\\n\\n*Attention:* It is always the last set value of the same variable that is considered current. The update overwrites the previous value! A new data layer must be created for each page. A good example for a better understanding is: When switching from the start page to the contact form, the data layer is not transferred. This also makes sense, since the attributes can change.\\n\\n##### Intercept values from variables\\n\\nLet’s follow the example with the variable userType. In the Matomo Tag Manager you can catch the value of the variable userType with the help of a variable. This variable must be available first. To do this, a variable must be created in the Tag Manager, under Variables. To do this, simply call up this area in the Tag Manager and select *CREATE NEW VARIBLE.*\\n\\n![Tag Manager - Variables](https://www.trackingninja.de/wp-content/uploads/2020/09/Tag-Manager-Variablen.png)\\n\\nTag Manager - Variables\\n\\n![user_internal_matomo_variable_overview](https://www.trackingninja.de/wp-content/uploads/2020/09/user_internal_matomo_variable_overview.png)\\n\\nuser_internal_matomo_variable_overview\\n\\n![Matomo - Variable](https://www.trackingninja.de/wp-content/uploads/2020/09/Matomo-Variable.png)\\n\\nMatomo - Variable\\n\\nBy this you add an additional variable to the Matomo Tag Manager Data Layer. This can then be used.\\n\\nI hope that this example makes it a little bit more understandable what the Matomo Data Layer is and how to use the Data Layer. A variable was created for this purpose and a new value was assigned to it as an example. Where does that leave us? Based on events, tags and the variables, you can create a tailor-made tracking based on the necessary requirements. This could then enable the following interaction. An event can act as a trigger, then a tag is fired, e.g. a download event, which should be recorded in Matomo. This tag for contains a custom dimension, which gets its value from an existing variable.\\n\\n### Summary:\\n\\nThis was certainly not so easy now (and the contribution will grow a little bit with time).Since the use of variables and tags has not yet been explained in detail.\\n\\nMatomo Tag Manager Data Layer is an important part of Matomo Tracking. Event tracking can thus be made more dynamic, a new tag does not need to be created for all page interactions. So it allows us to capture interactions (using them as triggers) and retrieve additional data about the interaction or the page content (using the variables of the data layer).I am aware that at the beginning it is difficult to internalize and apply this concept. Even more so because this article ~~still~~ does not represent everything that is possible. Try it out!\\n\\nFeel free to leave a comment on the page or[ contact me if you have any questions.](https://www.trackingninja.de/en/contact/?lang=en)\\n\",\"timestamp\":1633611254,\"title\":\"Understanding the Matomo Tag Manager Data Layer - Ultimate Guide — Mirror\"},\"digest\":\"5DxGWlf4s7kAE9lDkP6eNJeKbzFTQwFEgYqEMd1V5Uc\",\"authorship\":{\"contributor\":\"0x74454c6E1C9b8edF7A62Ff52a5f8c253dB02537C\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"3CZ3aWIJoZ668gFK_BOXbTPxCICm6RmmHh0nrQjGXXQ\\\",\\\"y\\\":\\\"znzcMrgB5fpmriOTB42ZO1i2kVNhcnzorGWF-M3g7sI\\\"}\",\"signature\":\"R_xwhoXcVcMWHZK--npnkQ1pWJGbxwadepymt2KHB51By1u3wsKvNICynPuHFB08_iHBuUD2PaIlCX82V_WLMQ\",\"signingKeySignature\":\"0x8d76737459d19e62960e3e4f4777dc2bf12d5a91223dbfe9c291c7588bafdae57cae7c4edbac6a8a6ffc0374c4ab08e71bd7e3f57c88d30b7defbbd9b81334d31b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"3CZ3aWIJoZ668gFK_BOXbTPxCICm6RmmHh0nrQjGXXQ\\\",\\\"y\\\":\\\"znzcMrgB5fpmriOTB42ZO1i2kVNhcnzorGWF-M3g7sI\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"5DxGWlf4s7kAE9lDkP6eNJeKbzFTQwFEgYqEMd1V5Uc\"}"