"{\"content\":{\"body\":\"```\\npragma solidity ^0.4.19;\\n\\nimport \\\"./zombiefactory.sol\\\";\\n\\ncontract KittyInterface {\\n  function getKitty(uint256 _id) external view returns (\\n    bool isGestating,\\n    bool isReady,\\n    uint256 cooldownIndex,\\n    uint256 nextActionAt,\\n    uint256 siringWithId,\\n    uint256 birthTime,\\n    uint256 matronId,\\n    uint256 sireId,\\n    uint256 generation,\\n    uint256 genes\\n  );\\n}\\n\\ncontract ZombieFeeding is ZombieFactory {\\n\\n  address ckAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n  KittyInterface kittyContract = KittyInterface(ckAddress);\\n\\n  // 这里修改函数定义\\n  function feedAndMultiply(uint _zombieId, uint _targetDna) public {\\n    require(msg.sender == zombieToOwner[_zombieId]);\\n    Zombie storage myZombie = zombies[_zombieId];\\n    _targetDna = _targetDna % dnaModulus;\\n    uint newDna = (myZombie.dna + _targetDna) / 2;\\n    // 这里增加一个 if 语句\\n    _createZombie(\\\"NoName\\\", newDna);\\n  }\\n\\n  function feedOnKitty(uint _zombieId, uint _kittyId) public {\\n    uint kittyDna;\\n    (,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);\\n    // 并修改函数调用\\n    feedAndMultiply(_zombieId, kittyDna);\\n  }\\n\\n}\\n```\\n\\nzombieFactory.sol  \\n\\n```\\npragma solidity ^0.4.19;\\r\\n\\r\\ncontract ZombieFactory {\\r\\n\\r\\n    event NewZombie(uint zombieId, string name, uint dna);\\r\\n\\r\\n    uint dnaDigits = 16;\\r\\n    uint dnaModulus = 10 ** dnaDigits;\\r\\n\\r\\n    struct Zombie {\\r\\n        string name;\\r\\n        uint dna;\\r\\n    }\\r\\n\\r\\n    Zombie[] public zombies;\\r\\n\\r\\n    mapping (uint => address) public zombieToOwner;\\r\\n    mapping (address => uint) ownerZombieCount;\\r\\n\\r\\n    function _createZombie(string _name, uint _dna) internal {\\r\\n        uint id = zombies.push(Zombie(_name, _dna)) - 1;\\r\\n        zombieToOwner[id] = msg.sender;\\r\\n        ownerZombieCount[msg.sender]++;\\r\\n        NewZombie(id, _name, _dna);\\r\\n    }\\r\\n\\r\\n    function _generateRandomDna(string _str) private view returns (uint) {\\r\\n        uint rand = uint(keccak256(_str));\\r\\n        return rand % dnaModulus;\\r\\n    }\\r\\n\\r\\n    function createRandomZombie(string _name) public {\\r\\n        require(ownerZombieCount[msg.sender] == 0);\\r\\n        uint randDna = _generateRandomDna(_name);\\r\\n        randDna = randDna - randDna % 100;\\r\\n        _createZombie(_name, randDna);\\r\\n    }\\r\\n\\r\\n}\\r\\n```\",\"timestamp\":1640076838,\"title\":\"Solidity 学习笔记（一）\"},\"digest\":\"fO8nLCMuMI9aylrKOK-JfZLeJAZAiziCrT3UfQr749Q\",\"authorship\":{\"contributor\":\"0x320AA6E53AA01fb85DB1dA75C92aD93eAb98419b\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Itk-x_MoWYf1SwzEvJv1qIsMIagv5k8QFMTvZdhKbJw\\\",\\\"y\\\":\\\"59VcVnDH8vOKfQKCTpYcotL-WfjWaGPDRhRtxKeCx0w\\\"}\",\"signature\":\"exeF9eKMNdWc984KJV5OuFyAU8Vxpl5qhFRCkaatd4zuScE2UYiEED_Npypo_EsDbOR7X5867f_S2jRDOA2Riw\",\"signingKeySignature\":\"0x0796e03f46219307fe6227b1115463b46d6451d6be28da791335e23bb1cb5054642002a7b58ae3dc5ce7a3d0d5418873f8f57a0b398980809eee079e799f9a751b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Itk-x_MoWYf1SwzEvJv1qIsMIagv5k8QFMTvZdhKbJw\\\",\\\"y\\\":\\\"59VcVnDH8vOKfQKCTpYcotL-WfjWaGPDRhRtxKeCx0w\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"fO8nLCMuMI9aylrKOK-JfZLeJAZAiziCrT3UfQr749Q\"}"