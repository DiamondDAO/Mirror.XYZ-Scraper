"{\"content\":{\"body\":\"Last time I blogged, I had completed the CryptoZombies tutorial which involved building a Zombie-themed battle game, and in the process learned a lot about the finer points of the Solidity language, the quirks of smart contract development in general, and web3.js. There were still some loose ends around the role of Truffle in the toolchain, how local development/testing works, and how the deployment process works. So, I sought to fill those gaps by completing the tutorial on the truffle website [here](https://www.trufflesuite.com/tutorial%5D) and deploying the application all the way through to a test network.\\n\\nThe main learnings from this exercise were:\\n\\n* The general workflow with Truffle:\\n  * `truffle test` runs the tests.\\n  * `truffle compile` compiles the smart contracts and puts the JSON-RPC artifacts in the `build/contracts` folder. The JSON-RPC artifacts basically specify the inputs and outputs of the various methods in the smart contract. These artifacts are loaded by the frontend code to create the smart contract clients.\\n  * `truffle migrate` deploys the smart contract code to the blockchain, and also seems to migrate the JSON RPC artifact so that the frontend code knows the address of the smart contract.\\n* How to host my frontend code which talks to the smart contract. Answer: IPFS! I followed the relevant steps in [this tutorial](https://medium.com/ethereum-developers/the-ultimate-end-to-end-tutorial-to-create-and-deploy-a-fully-descentralized-dapp-in-ethereum-18f0cf6d7e0e) and ended up executing the following commands:\\n  * `ipfs daemon`\\n  * `ipfs swarm peers`\\n  * `ipfs add -r <directory containing frontend assets>`\\n  * `ipfs name publish <last hash from previous step>`\\n    * This will publish all contents of the directory to IPFS say “Published to …”\\n    * You can then go to `gateway.ipfs.io/ipns/<hash where assets where published>`\\n\\nIf you go to this URL <https://gateway.ipfs.io/ipns/k51qzi5uqu5dl9di247nt83haq7094zqux9dqzy9xcry8k8tb7lnbwjjq4226h/> and connect to the Rinkeby test network, you can see my working Dapp! The full code for the repo is available at this Git repo:\\n\\n[https://github.com/deepsports1/truffle-petshop-tutorial](https://github.com/deepsports1/truffle-petshop-tutorial)\\n\\nOverall this felt like a solid step forward in my web3 journey. I have the gist of the Solidity language, I have a rough idea of how frontends can interact with my smart contract, I have now worked with a handful of tools to facilitate local development (Ganache) as well as deployment (Truffle, IPFS). All in all, this feels like a solid lap around the track.\\n\\nFrom here, I’m considering a number of options.\\n\\nI’m not terribly keen on just going through a bunch of tutorials and learning the constantly changing landscape of Dapp developer tools (apparently Truffle is already out of date and now Hardhat is in vogue). But I still do feel very much like a beginner even in a nascent space. So learning to build increasingly complex Dapps is one route.\\n\\nAnother route is deepening my understanding of Oracles which seem to be an advanced but often cited topic in web3 development. Getting external data on chain and into dapps, which is my rough understanding of what oracles do, seems like it’ll be required for blockchains to have the impact they are promising, so that good be a good place to spend some time.\\n\\nAnother route is picking a core project and going really deep on it. Maybe learn how level 2 scaling works (e.g, Polygon), or going into the weeds on how IPFS works and the various ways to use it, or deconstructing the smart contract and architecture behind a popular service such as Uniswap.\\n\\nFinally, I’m considering joining one of these trendy DAOs like buildspace and just hacking on a bunch of projects in a community of people. That is probably the option I’d normally be least inclined to do but might be the best way to fully understand the broader development landscape - understanding the communities and types of projects out there rather than just the tools.\\n\\nI’m going to think this over a bit because the question of *what* to learn, especially in a fast moving space like web3, is a much more leveraged question than how to learn or even how quickly you learn. But for now, it feels good to have met the milestone of fully deploying a test dapp.\",\"timestamp\":1638671328,\"title\":\"Web3: Truffle, Local Development, and Deployment\"},\"digest\":\"DqNvQCucmgA0RMATzRC-ZGVp3fCWFJJTOHZaOQBTqMY\",\"authorship\":{\"contributor\":\"0x5f512428FfF13c20DbBf1F41b0F4058b6c0e0Bdd\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"NAm3JQ672dy9N5Nqb6AcwDwRO1nbRCep1BMdNU0WeSc\\\",\\\"y\\\":\\\"le7d7fMKn8TTtgGwpx0YLGV3sjFzf8Q5_2J5KKfYNP4\\\"}\",\"signature\":\"eZ46x3ffRiIRJZhkX6eXLkRHDyzgZ8Yc_g5AAeO83D3PzmcMWZWpnwavUp4Q8UBarXAiWYWrxlwbLAU4iHSt9A\",\"signingKeySignature\":\"0x0106469bf02f4da9c9b93d296eb286a428e9465554f637362ecd0b8ab8fa71527b70d92e862c1c1f0ec7258ba8a7b29870b9159fec6f314857d8fe23ae851a611c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"NAm3JQ672dy9N5Nqb6AcwDwRO1nbRCep1BMdNU0WeSc\\\",\\\"y\\\":\\\"le7d7fMKn8TTtgGwpx0YLGV3sjFzf8Q5_2J5KKfYNP4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"sE00YFXnzBiIeKKlamBpxNwAHToPbMt7HLUT9sQhWxI\"}"