"{\"content\":{\"body\":\"I’m writing this article solely with hope that one day it ends up high in web searches for this specific problem & it saves lives of devs like me.\\n\\nOr at least I will be sending that to friends starting out with building web3 apps 😄 \\n\\n## Why should I use Web3Modal?\\n\\nWeb3Modal allows you to connect your app to many wallet providers in a unified way. It’s a real blessing if you’re a dev trying to develop a web3 mvp really fast, but don’t want to compromise on wallet diversity.\\n\\nHere is their Github repo\\n\\n[https://github.com/Web3Modal/web3modal](https://github.com/Web3Modal/web3modal)\\n\\n## How to use Web3Modal to connect to wallets?\\n\\nIt’s very simple! First, let’s start with an empty component\\n\\n```\\nexport default function Home(props) {\\n\\n  return <button onClick={}>Connect</button>\\n}\\n```\\n\\nand paste the setup code from [the readme](https://github.com/Web3Modal/web3modal#using-in-vanilla-javascript).\\n\\n```\\nimport Web3Modal from 'web3modal'\\nimport WalletConnectProvider from '@walletconnect/web3-provider'\\n\\nimport { useState, useEffect } from 'react';\\n\\nexport default function Home(props) {\\n\\n  const [web3Modal, setWeb3Modal] = useState(null)\\n\\n  useEffect(() => {\\n    const providerOptions = {\\n      walletconnect: {\\n        package: WalletConnectProvider,\\n        options: {\\n          infuraId: YOUR_INFURA_KEY,\\n        }\\n      },\\n    };\\n\\n    const newWeb3Modal = new Web3Modal({\\n      cacheProvider: true, // very important\\n      network: \\\"mainnet\\\",\\n      providerOptions,\\n    });\\n\\n    setWeb3Modal(newWeb3Modal)\\n  }, [])\\n\\n  return <button onClick={}>Connect</button>\\n}\\n```\\n\\nOk, config done. Now it’s time for the actual connection logic!\\n\\n```\\nimport Web3Modal from 'web3modal'\\nimport WalletConnectProvider from '@walletconnect/web3-provider'\\n\\nimport { useState, useEffect } from 'react';\\n\\nexport default function Home(props) {\\n\\n  const [web3Modal, setWeb3Modal] = useState(null)\\n\\n  useEffect(() => {\\n    // initiate web3modal\\n    const providerOptions = {\\n      walletconnect: {\\n        package: WalletConnectProvider,\\n        options: {\\n          infuraId: YOUR_INFURA_KEY,\\n        }\\n      },\\n    };\\n\\n    const newWeb3Modal = new Web3Modal({\\n      cacheProvider: true, // very important\\n      network: \\\"mainnet\\\",\\n      providerOptions,\\n    });\\n\\n    setWeb3Modal(newWeb3Modal)\\n  }, [])\\n\\n  async function connectWallet() {\\n    const provider = await web3Modal.connect();\\n  }\\n\\n  return <button onClick={connectWallet}>Connect wallet</button>\\n}\\n```\\n\\nPerfect! Now we have a “Connect wallet” button, which will display the web3 modal after clicking. Once the user connects their wallet, we can read their data & prompt them to perform transactions or signatures.\\n\\n## Integration with ethers.js (vs web3.js)\\n\\nI’m not picking wars here and web3.js is a great library, but the concept of providers & signers works much better in my head so for any custom on chain interaction I’m using ethers.js\\n\\nWeb3Modal is not *directly* compatible with ethers, but you can wrap the Web3Modal provider into an ethers provider just like that:\\n\\n```\\nimport { ethers, providers } from \\\"ethers\\\";\\nimport Web3Modal from 'web3modal'\\nimport WalletConnectProvider from '@walletconnect/web3-provider'\\n\\nimport { useState, useEffect } from 'react';\\n\\nexport default function Home(props) {\\n\\n  const [web3Modal, setWeb3Modal] = useState(null)\\n  const [address, setAddress] = useState(\\\"\\\")\\n\\n  useEffect(() => {\\n    // initiate web3modal\\n    ...\\n  }, [])\\n\\n  async function connectWallet() {\\n    const provider = await web3Modal.connect();\\n    const ethersProvider = new providers.Web3Provider(provider)\\n    const userAddress = await ethersProvider.getSigner().getAddress()\\n    setAddress(userAddress)\\n  }\\n\\n  return (\\n    <div>\\n      <button onClick={connectWallet}>Connect wallet</button>\\n      <p>{address}</p>\\n    </div>\\n  )\\n}\\n```\\n\\n## Connecting from cache & disconnecting\\n\\nWhen I coded my first web3 experiments I googled this phrase a 1000 times:\\n\\n> ethers how to check if wallet already connected\\n\\nIt wasn’t really helpful as there is no standard way of doing this. Fortunately, if you enable the option `cacheProvider: true` in Web3Modal config, you will be able to automatically connect, without displaying the modal.\\n\\nExample below!\\n\\n```\\n// imports\\n\\nexport default function Home(props) {\\n\\n  const [web3Modal, setWeb3Modal] = useState(null)\\n  const [address, setAddress] = useState(\\\"\\\")\\n\\n  useEffect(() => {\\n    // initiate web3modal\\n    ...\\n  }, [])\\n\\n  useEffect(() => {\\n    // connect automatically and without a popup if user is already connected\\n    if(web3Modal && web3Modal.cachedProvider){\\n      connectWallet()\\n    }\\n  }, [web3Modal])\\n\\n  async function connectWallet() {\\n    ...\\n  }\\n\\n  return (\\n    <div>\\n      <button onClick={connectWallet}>Connect wallet</button>\\n      <p>{address}</p>\\n    </div>\\n  )\\n}\\n```\\n\\n## Listeners\\n\\nWith Web3Modal we have an easy way to subscribe to wallet events like network or account changes. I recommend doing that over playing with ethers provider, since the latter option was very messy for me.\\n\\nWeb3Modal listeners obey [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193) standard and you can easily integrate them like in the function `addListeners`\\n\\n```\\n// imports\\n\\nexport default function Home(props) {\\n\\n  const [web3Modal, setWeb3Modal] = useState(null)\\n  const [address, setAddress] = useState(\\\"\\\")\\n\\n  useEffect(() => {\\n    // initiate web3modal\\n    ...\\n  }, [])\\n\\n  useEffect(() => {\\n    // connect automatically and without a popup if user is already connected\\n    if(web3Modal && web3Modal.cachedProvider){\\n      connectWallet()\\n    }\\n  }, [web3Modal])\\n\\n  async function connectWallet() {\\n    const provider = await web3Modal.connect();\\n    \\n    addListeners(provider);\\n\\n    const ethersProvider = new providers.Web3Provider(provider)\\n    const userAddress = await ethersProvider.getSigner().getAddress()\\n    setAddress(userAddress)\\n  }\\n\\n  async function addListeners(web3ModalProvider) => {\\n\\n    provider.on(\\\"accountsChanged\\\", (accounts) => {\\n      window.location.reload()\\n    });\\n    \\n    // Subscribe to chainId change\\n    provider.on(\\\"chainChanged\\\", (chainId) => {\\n      window.location.reload()\\n    });\\n  }\\n\\n\\n  return (\\n    <div>\\n      <button onClick={connectWallet}>Connect wallet</button>\\n      <p>{address}</p>\\n    </div>\\n  )\\n}\\n```\\n\\nNow the app will automatically reload on a network or an account change. Of course you should customize it to you needs.\\n\\n## Summary\\n\\nHopefully this helped you with a problem or gave you a better mindset for building this integration!\\n\\nIf so, you should [follow me on twitter](https://twitter.com/wojtekwtf) or check out some cool stuff that we’re building at [Mazury](https://mazurylabs.com/).\",\"timestamp\":1634320031,\"title\":\"Connecting to web3 with Web3Modal, react & ethers.js \"},\"digest\":\"I8AEQG1phb676CbmwGSVsFFgOfrQ_vHDhN6xvf60lS4\",\"authorship\":{\"contributor\":\"0xF417ACe7b13c0ef4fcb5548390a450A4B75D3eB3\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"YMNjCKZsTuz23XGwVPbvrbiAQtaK6WBsTUzMpq390xc\\\",\\\"y\\\":\\\"WK5X3j0geAfHyM_u5q6Y68801_yrlq_GG2XHLO5q3ZM\\\"}\",\"signature\":\"e9-vhppO36XtSGm1J0Y-AQeWiLCkcp1LNyEFevRFNEuj6fYVAgT9fuWwgqbT-oIkt9-b99YM3OpxxdTKNYCu3w\",\"signingKeySignature\":\"0xacbae0f02c46f2677d9bb4318b640355172fbc501cb63c1a6ab2e40b5270e4077ad8d9155c4b928d24acef88679e27e40341f8c26e2b4b6b7976171bd08350c71b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"YMNjCKZsTuz23XGwVPbvrbiAQtaK6WBsTUzMpq390xc\\\",\\\"y\\\":\\\"WK5X3j0geAfHyM_u5q6Y68801_yrlq_GG2XHLO5q3ZM\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"bFdyI5_3f0MoKSRIQ0piYdSOFJWQqbo-r8oTqjSQ9hI\"}"