"{\"content\":{\"body\":\"## [](#introduction)Introduction\\n\\nIn this article we will be learning how we can integrate AWS Amplify with-in a Nuxt app. We will be going over from setting up an AWS account (but not covered, will give you a link instead) and until we can create and fetch all Todos. The app that we will be building for this tutorial is just a basic Todo app, since the scope of this tutorial is to teach you how you will be able to use AWS Amplify with Nuxt.\\n\\nI prefer to use TypeScript in this article, but you can still use just plain JavaScript whichever you prefer still results to same Todo app we will be building. But before we continue, let us understand what is Serverless? What does it actually mean?\\n\\nServerless does not mean there are no servers. There are still servers that run on the cloud but we don't manage them, meaning we don't have to deal with deploying web servers using Nginx or Apache2, we don't have to provision AWS EC2 instances or GCP Compute Engine instances, we only have to worry about directly to the business logic of the application. Isn't that cool?\\n\\nFor more explanation I will quote a definition from Cloudflare:\\n\\n> Serverless computing is a method of providing backend services on an as-used basis. A serverless provider allows users to write and deploy code without the hassle of worrying about the underlying infrastructure. A company that gets backend services from a serverless vendor is charged based on their computation and do not have to reserve and pay for a fixed amount of bandwidth or number of servers, as the service is auto-scaling. Note that despite the name serverless, physical servers are still used but developers do not need to be aware of them.\\n\\nTaken from [source](https://www.cloudflare.com/learning/serverless/what-is-serverless/)\\n\\n## [](#setting-up-an-aws-account)Setting up an AWS Account\\n\\nYou can skip this step if you already have setup an AWS account. Otherwise go to this URL <https://aws.amazon.com/console/> and proceed to creating your AWS account! And click on the button that says \\\"Create a Free Account\\\". You will need a credit card to setup your AWS account otherwise you can't create one.\\n\\n[![image.png](https://res.cloudinary.com/practicaldev/image/fetch/s--irXu7BlR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616983401420/zmGuyQAGx.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--irXu7BlR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616983401420/zmGuyQAGx.png)\\n\\nI am not going to go over how to setup an AWS account in here since it is an out of scope for this tutorial. But I will give you some links for my recommendation.\\n\\n*   <https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/>\\n*   <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html>\\n\\nAlso make sure to create an IAM user since AWS best practices for security is to not use the root user, instead create an IAM user and give it admin privileges and this is the only account you will be using from now on. You will only use the root user to create an admin user for your AWS account.\\n\\n## [](#installing-aws-amplify-cli)Installing AWS Amplify CLI\\n\\nOnce you are done with setting up your AWS account, let us then proceed to installing the AWS Amplify CLI! We will be using NPM and install to globally on your system, don't forget to add `sudo` otherwise you will experience permissions error.\\\\\\n\\n\\n    $ npm install -g @aws-amplify/cli\\n\\n\\n\\nwith `sudo`,\\\\\\n\\n\\n    $ sudo npm install -g @aws-amplify/cli\\n\\n\\n\\nJust to make everything clear, just in case.\\n\\nOnce you are done installing aws-amplify globally on your machine, let's then proceed to setting up configuration details so you can integrate this with-in your AWS account as it will ask you to sign in to AWS Console.\\n\\nFurther steps should be continued from the [official docs](https://docs.amplify.aws/cli) as they provide you the complete steps in setting up your account.\\n\\n## [](#installing-nuxt)Installing Nuxt\\n\\nOpen up your terminal and navigate into your projects directory or any directory that you prefer to install the Nuxt app. For me I prefer it to be placed under \\\"tutorials\\\" directory since I am creating a tutorial on how to setup Nuxt with AWS Amplify.\\\\\\n\\n\\n    $ cd ~/tutorials\\n\\n\\n\\nThen proceed to execute the command to start the installation process.\\\\\\n\\n\\n    # Where <project_name> is the name of the Nuxt project\\n    # In this case I will name it as \\\"nuxt-aws-amplify-todo-app\\\"\\n\\n    $ npx create-nuxt-app <project_name>\\n\\n\\n\\nIn selecting the installation options, for the programming language I select TypeScript since it is my preferred choice and my \\\"go-to\\\" language. Package manager would just be NPM. And the UI library I select \\\"Vuetify.js\\\" I prefer this one since it provides a lot of Material design components out of the box, but you can select any UI library whichever you prefer. For the Nuxt modules, these are optional and you can select anything. For now I will select neither of these modules. Just hit ENTER key to continue without selection.\\n\\n[![image.png](https://res.cloudinary.com/practicaldev/image/fetch/s--\\\\_bGo3moI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616984483595/KpY08JQA2.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--\\\\_bGo3moI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616984483595/KpY08JQA2.png)\\n\\nSame applies to Linting tools and Testing framework just nothing.\\n\\n[![image.png](https://res.cloudinary.com/practicaldev/image/fetch/s--jvcHn7SE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616984726555/2zLTOkBgd.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--jvcHn7SE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616984726555/2zLTOkBgd.png)\\n\\nWe will select rendering mode to be a Single Page Application, and deployment target would be Static since we do not need anything server side rendered. And for the development tools, if you select TypeScript you don't have to choose `jsconfig.json` otherwise you can. For the other options I will not select any of them for now.\\n\\n[![image.png](https://res.cloudinary.com/practicaldev/image/fetch/s--2HSq2zc9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616984824157/-TztF6NpN.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--2HSq2zc9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616984824157/-TztF6NpN.png)\\n\\nNow to sum it all up regarding our installation selection, this is what we have.\\n\\n[![image.png](https://res.cloudinary.com/practicaldev/image/fetch/s--edDL-bo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616984859286/Wd\\\\_\\\\__YVM11.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--edDL-bo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616984859286/Wd\\\\_\\\\__YVM11.png)\\n\\nProceed to opening the new generated Nuxt project in your IDE (Visual Studio Code), do it via\\\\\\n\\n\\n    $ cd nuxt-aws-amplify-todo-app && code .\\n\\n\\n\\nThis will then open up Visual Studio Code.\\n\\n## [](#optional-installing-nuxt-dependencies)(Optional) Installing Nuxt Dependencies\\n\\nThese are optional but you can follow as well. I will be installing the following:\\n\\n*   `@nuxtjs/composition-api`: This module is not recommended for production but soon it will be once Nuxt 3 comes out. When you are using this package, there will be bugs so keep that in mind in case you might get stuck then you can create an issue from the repository on Github and that counts as your contribution to the package.\\n\\nNote: I will not cover how to setup this module but you can refer on the [official docs](https://composition-api.nuxtjs.org/getting-started/setup) instead.\\n\\n*   `@nuxtjs/google-fonts`: I want to use \\\"Sora\\\" font just because FeedHive was using this and I think it's a cool font.\\n\\nNote: I will not cover how to setup this module but you can refer on the [official docs](https://github.com/nuxt-community/google-fonts-module) instead.\\n\\nWe'll also want to customize some of the default SCSS variables for Vuetify.js on some components and to apply \\\"Sora\\\" font-family as the main font to be used globally.\\n\\nTo customize, head on over to `nuxt.config.js` and on to the `vuetify` property, just add `treeShake` property with value of `true`, make sure to have `treeShake` set to `true` otherwise overriding SCSS variables for Vuetify will not work.\\n\\nAlso to verify you can reference on the code below on how I setup my `nuxt.config.js` file for these changes.\\\\\\n\\n\\n    export default {\\n       // ... other properties\\n       buildModules: [\\n          // ... \\n\\n          '@nuxtjs/composition-api',\\n          '@nuxtjs/google-fonts'\\n       ],\\n\\n       vuetify: {\\n          customVariables: [\\\"~/assets/variables.scss\\\"],\\n          treeShake: true\\n       },\\n\\n       googleFonts: {\\n          families: {\\n             Sora: true\\n          }\\n       }\\n    }\\n\\n\\n\\nThen edit the `variables.scss` file and setup the following SCSS variables.\\\\\\n\\n\\n    $body-font-family: \\\"Sora\\\", sans-serif;\\n    $btn-letter-spacing: 0px !default;\\n    $btn-text-transform: none;\\n\\n\\n\\nAnd that's all we have for customizing the look for our Todo application we can then proceed with integrating AWS Amplify into our project.\\n\\n## [](#integrating-aws-amplify-in-the-nuxt-project)Integrating AWS Amplify in the Nuxt project\\n\\nBefore we start, install the library so we'll have access to its core.\\\\\\n\\n\\n    $ npm i aws-amplify\\n\\n\\n\\nNow let us setup our backend using AWS Amplify. Given that you already have opened your Nuxt project right after installation then proceed to opening a new terminal instance under your IDE (Visual Studio Code) or if you prefer it in a different window that's fine as well but be sure you are in the root directory of your project.\\n\\nThen execute this command to initialize or create a new AWS Amplify project.\\\\\\n\\n\\n    $ amplify init\\n\\n\\n\\nWhen presented with the questions, I have selected the default settings and modified only the \\\"Source Directory Path\\\" to `.` and for the \\\"Build Command\\\" is set to `npm run build && npm run generate` since we are going for a Nuxt Static SPA, and lastly the \\\"Start Command\\\" which is `npm run start`. I believe these build and start commands will be used if you prefer to host it on AWS ecosystem (S3 Bucket)\\n\\n[![image.png](https://res.cloudinary.com/practicaldev/image/fetch/s--fRgKtEiP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616986687789/XyZFGsvAu.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--fRgKtEiP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616986687789/XyZFGsvAu.png)\\n\\nOnce the initialization process is done, it should look similar to this by now.\\n\\n[![image.png](https://res.cloudinary.com/practicaldev/image/fetch/s--LxkRtygb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616986856661/1SYE6MNXX.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--LxkRtygb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616986856661/1SYE6MNXX.png)\\n\\nNext and very important step, you must setup the `aws-exports.js` plugin. Create a file under `plugins` directory and name it as `aws-amplify.js` then copy the following code and paste on to it\\\\\\n\\n\\n    import Amplify from \\\"aws-amplify\\\";\\n    import aws_exports from \\\"~/aws-exports\\\";\\n\\n    Amplify.configure(aws_exports);\\n\\n\\n\\nThen go to `nuxt.config.js` and add the following into the `plugins` array\\\\\\n\\n\\n    export default {\\n       // ...\\n\\n       plugins: [\\\"~/plugins/aws-amplify\\\"]\\n    }\\n\\n\\n\\nSince we are building a Todo app, then we will need a place to store our data. AWS Amplify can provide us a data store using DynamoDB. So let us continue setting up and add a backend API with the following command.\\\\\\n\\n\\n    $ amplify add api\\n\\n\\n\\nYou can follow with my selection:\\n\\n[![image.png](https://res.cloudinary.com/practicaldev/image/fetch/s--DrjjRQNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616987267374/aO21QSkCIc.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--DrjjRQNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616987267374/aO21QSkCIc.png)\\n\\nAWS Amplify already have an existing example for a Todo App so we'll use that one.\\n\\nAnd once everything is set up correctly and is done, there are files generated for you with the GraphQL schema, resolvers, all those good stuff. So your project folder would look something like this by now.\\n\\n[![image.png](https://res.cloudinary.com/practicaldev/image/fetch/s--6Zsz_lFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616987374966/rXt3-qP04.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--6Zsz_lFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616987374966/rXt3-qP04.png)\\n\\nDon't worry about the other files the were generated, you don't have to bother with them those are just the configurations files so that AWS Amplify will understand which server instance we are talking to behind the scenes. At least that's how I understand it.\\n\\nWe can take a look at our GraphQL schema that was auto generated by AWS Amplify for us.\\n\\n[![image.png](https://res.cloudinary.com/practicaldev/image/fetch/s--dZ21tJNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616987398745/ciYR6KVsI.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--dZ21tJNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616987398745/ciYR6KVsI.png)\\n\\nThen let us proceed to deploying these into AWS. Let us execute the following command below so we can start making requests to the server via GraphQL.\\\\\\n\\n\\n    $ amplify push\\n\\n\\n\\nYou will be then asked some questions to select from by the CLI.\\n\\n[![image.png](https://res.cloudinary.com/practicaldev/image/fetch/s--s9latpk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616988225520/BrcURL-ud.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--s9latpk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616988225520/BrcURL-ud.png)\\n\\nTo break it down for you, we tell CLI we want to auto generate GraphQL code, we select TypeScript as the output of the generated code, the filename pattern will reside in a `graphql` directory, we want AWS Amplify CLI to auto generate us all the possible operations/queries/resolvers that we might use for our Todo App, and the file name of the generated code will reside under `api` directory with file name as `index.ts`\\n\\nRight after the installation process you will then be presented the GraphQL endpoint and the GraphQL API KEY which I don't want to expose it in here.\\n\\nNow that it's all set up we can then proceed to building the UI of our app.\\n\\n## [](#user-interface)User Interface\\n\\nI am just going to make it simple but of course feel free to build the UI in any form you want. For the UI we will have a form and a list that will list out the todos. Before we start building out the UI, open a server for the Nuxt app. In your terminal execute the command.\\\\\\n\\n\\n    npm run serve\\n\\n\\n\\nThat will then provide you a URL for the app, typically it is `http://localhost:3000` so open it up in your browser.\\n\\nOnce that is done, I made some modifications the following are:\\n\\n*   I have deleted two files under `components` directory those are `Logo.vue` and `VuetifyLogo.vue`\\n*   I have deleted all the code for the app layout which can be found under `layouts` directory with file name of `default.vue`.\\n\\n<!---->\\n\\n    <template>\\n        <v-app app>\\n           <Nuxt />\\n        </v-app>\\n    </template>\\n\\n\\n\\n*   I have also deleted `inspire.vue` under `pages` directory.\\n*   And removed all code for `index.vue` under `pages` directory and replaced it with the following:\\n\\n<!---->\\n\\n    <template>\\n      <div></div>\\n    </template>\\n\\n    <script lang=\\\"ts\\\">\\n    import { defineComponent } from \\\"@vue/composition-api\\\";\\n\\n    export default defineComponent({\\n      setup() {}\\n    });\\n    </script>\\n\\n\\n\\nIt will be a grid layout, on the left side will be the form and on the right side will be the list.\\\\\\n\\n\\n    <template>\\n      <div>\\n        <v-row>\\n          <v-col cols=\\\"12\\\" xs=\\\"12\\\" sm=\\\"12\\\" md=\\\"4\\\" lg=\\\"4\\\" xl=\\\"4\\\">\\n            <v-form></v-form>\\n          </v-col>\\n          <v-col cols=\\\"12\\\" xs=\\\"12\\\" sm=\\\"12\\\" md=\\\"8\\\" lg=\\\"8\\\" xl=\\\"8\\\">\\n            <v-list>\\n              <v-list-item></v-list-item>\\n            </v-list>\\n          </v-col>\\n        </v-row>\\n      </div>\\n    </template>\\n\\n\\n\\n## [](#creating-a-todo)Creating a Todo\\n\\nThen we proceed to writing out the code to create our first Todo! Take a look at the code under.\\n\\nHTML template,\\\\\\n\\n\\n    <template>\\n      <div>\\n        <v-row>\\n          <v-col cols=\\\"12\\\" xs=\\\"12\\\" sm=\\\"12\\\" md=\\\"6\\\" lg=\\\"6\\\" xl=\\\"6\\\">\\n            <v-form ref=\\\"formRef\\\" @submit.prevent=\\\"submit\\\">\\n              <v-text-field\\n                label=\\\"Name\\\"\\n                v-model=\\\"formData.name\\\"\\n                :rules=\\\"requiredRule\\\"\\n              ></v-text-field>\\n              <v-textarea\\n                label=\\\"Description\\\"\\n                v-model=\\\"formData.description\\\"\\n              ></v-textarea>\\n              <v-btn color=\\\"primary\\\" class=\\\"my-5\\\" large depressed type=\\\"submit\\\">\\n                Submit\\n              </v-btn>\\n            </v-form>\\n          </v-col>\\n          <v-col cols=\\\"12\\\" xs=\\\"12\\\" sm=\\\"12\\\" md=\\\"6\\\" lg=\\\"6\\\" xl=\\\"6\\\">\\n            <v-list>\\n              <v-list-item v-for=\\\"(item, index) in todos\\\" :key=\\\"index\\\">\\n                <v-list-item-content>\\n                  <v-list-item-title>{{ index }}</v-list-item-title>\\n                  <v-list-item-subtitle>Description</v-list-item-subtitle>\\n                </v-list-item-content>\\n                <v-list-item-action>\\n                  <v-btn color=\\\"transparent\\\" depressed fab>\\n                    <v-icon>mdi-delete-outline</v-icon>\\n                  </v-btn>\\n                </v-list-item-action>\\n              </v-list-item>\\n            </v-list>\\n          </v-col>\\n        </v-row>\\n      </div>\\n    </template>\\n\\n\\n\\nTypeScript code,\\\\\\n\\n\\n    import { defineComponent, computed, ref } from \\\"@vue/composition-api\\\";\\n    import { createTodo } from \\\"~/graphql/mutations\\\";\\n    import { API } from \\\"aws-amplify\\\";\\n\\n    type Todo = {\\n      name: string;\\n      description?: string;\\n    };\\n\\n    const createTodoDtoDefaults: Todo = Object.freeze({\\n      name: \\\"\\\",\\n      description: \\\"\\\"\\n    });\\n\\n    export default defineComponent({\\n      setup() {\\n        const formData = ref<Todo>({\\n          ...createTodoDtoDefaults\\n        });\\n        const todos = ref<Todo[]>([]);\\n\\n        const formRef = ref();\\n\\n        const requiredRule = computed(() => [\\n          (v: string) => !!v || \\\"This field is required\\\"\\n        ]);\\n\\n        async function submit() {\\n          if (formRef.value.validate()) {\\n            await API.graphql({\\n              query: createTodo,\\n              variables: {\\n                input: formData.value\\n              }\\n            });\\n\\n            // reset the `formData` values\\n            formData.value = {\\n              ...createTodoDtoDefaults\\n            };\\n          }\\n        }\\n\\n        return {\\n          todos,\\n          formData,\\n          formRef,\\n          submit,\\n          requiredRule\\n        };\\n      }\\n    });\\n\\n\\n\\nBy now we already have our form setup and it is using validation from one of the built-in feature of Vuetify's VForm component which is pretty convenient. A user can write a Todo now by typing in to the form, but whenever a user clicks the Submit button when the title field is empty, then it should not continue and therefore the app will not dispatch a call to the GraphQL API to create a new todo. Otherwise the Todo will be created!\\n\\nCurrently this is how the app looks from my end,\\n\\n[![image.png](https://res.cloudinary.com/practicaldev/image/fetch/s--70GI9IMx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616991313890/EZKvTsNr7.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--70GI9IMx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616991313890/EZKvTsNr7.png)\\n\\n## [](#fetching-all-todo)Fetching all Todo\\n\\nWhen you tried to create a Todo by now, and sure there wasn't any data returned yet. So let us proceed to fetching all Todos from the API.\\\\\\n\\n\\n    export default defineComponent({\\n      setup() {\\n        // ...\\n\\n        const todos = ref<Todo[]>([]);\\n\\n        // ...\\n\\n        async function fetchAllTodo() {\\n          const response = await API.graphql({\\n            query: listTodos\\n          });\\n          // @ts-ignore\\n          todos.value = response.data.listTodos.items as Todo[];\\n        }\\n\\n        async function submit() {\\n          if (formRef.value.validate()) {\\n            await API.graphql({\\n              query: createTodo,\\n              variables: {\\n                input: formData.value\\n              }\\n            });\\n\\n            // reset the `formData` values\\n            formData.value = {\\n              ...createTodoDtoDefaults\\n            };\\n            fetchAllTodo();\\n          }\\n        }\\n\\n        onMounted(() => {\\n          fetchAllTodo();\\n        });\\n\\n        // ...\\n      }\\n    });\\n\\n\\n\\nSo we defined `fetchAllTodo()` method that handles to fetch all Todos from the API by making a request to GraphQL using the query that was auto-generated for us! We will call this method in two places, under `submit()` method is when user's form input is valid and a Todo will be created then we should re-fetch the data to show the created Todo on the list. And the other place is from the `onMounted` life cycle, we are using composition functions so we call it from `onMounted(() => {})` as that will handle calling to the API for fetching the Todos that are stored every time a User opens the app the first time.\\n\\nSo for the last time, this is the entire code for this Todo App.\\\\\\n\\n\\n    <template>\\n      <div>\\n        <v-row>\\n          <v-col cols=\\\"12\\\" xs=\\\"12\\\" sm=\\\"12\\\" md=\\\"6\\\" lg=\\\"6\\\" xl=\\\"6\\\">\\n            <v-form ref=\\\"formRef\\\" @submit.prevent=\\\"submit\\\">\\n              <v-text-field\\n                label=\\\"Name\\\"\\n                v-model=\\\"formData.name\\\"\\n                :rules=\\\"requiredRule\\\"\\n              ></v-text-field>\\n              <v-textarea\\n                label=\\\"Description\\\"\\n                v-model=\\\"formData.description\\\"\\n              ></v-textarea>\\n              <v-btn color=\\\"primary\\\" class=\\\"my-5\\\" large depressed type=\\\"submit\\\">\\n                Submit\\n              </v-btn>\\n            </v-form>\\n          </v-col>\\n          <v-col cols=\\\"12\\\" xs=\\\"12\\\" sm=\\\"12\\\" md=\\\"6\\\" lg=\\\"6\\\" xl=\\\"6\\\">\\n            <v-list>\\n              <v-list-item v-for=\\\"(item, index) in todos\\\" :key=\\\"index\\\">\\n                <v-list-item-content>\\n                  <v-list-item-title>{{ item.name }}</v-list-item-title>\\n                  <v-list-item-subtitle>\\n                    {{ item.description }}\\n                  </v-list-item-subtitle>\\n                </v-list-item-content>\\n              </v-list-item>\\n            </v-list>\\n          </v-col>\\n        </v-row>\\n      </div>\\n    </template>\\n\\n    <script lang=\\\"ts\\\">\\n    import {\\n      defineComponent,\\n      computed,\\n      ref,\\n      onMounted\\n    } from \\\"@vue/composition-api\\\";\\n    import { createTodo } from \\\"~/graphql/mutations\\\";\\n    import { API } from \\\"aws-amplify\\\";\\n    import { listTodos } from \\\"~/graphql/queries\\\";\\n\\n    type Todo = {\\n      name: string;\\n      description?: string;\\n    };\\n\\n    const createTodoDtoDefaults: Todo = Object.freeze({\\n      name: \\\"\\\",\\n      description: \\\"\\\"\\n    });\\n\\n    export default defineComponent({\\n      setup() {\\n        const formData = ref<Todo>({\\n          ...createTodoDtoDefaults\\n        });\\n        const todos = ref<Todo[]>([]);\\n\\n        const formRef = ref();\\n\\n        const requiredRule = computed(() => [\\n          (v: string) => !!v || \\\"This field is required\\\"\\n        ]);\\n\\n        async function fetchAllTodo() {\\n          const response = await API.graphql({\\n            query: listTodos\\n          });\\n          // @ts-ignore\\n          todos.value = response.data.listTodos.items as Todo[];\\n        }\\n\\n        async function submit() {\\n          if (formRef.value.validate()) {\\n            await API.graphql({\\n              query: createTodo,\\n              variables: {\\n                input: formData.value\\n              }\\n            });\\n\\n            // reset the `formData` values\\n            formData.value = {\\n              ...createTodoDtoDefaults\\n            };\\n            fetchAllTodo();\\n          }\\n        }\\n\\n        onMounted(() => {\\n          fetchAllTodo();\\n        });\\n\\n        return {\\n          todos,\\n          formData,\\n          formRef,\\n          submit,\\n          requiredRule\\n        };\\n      }\\n    });\\n    </script>\\n\\n\\n\\n## [](#conclusion)Conclusion\\n\\nSo we learned how to setup AWS Amplify for our Nuxt app with Composition API and TypeScript. If you have been planning to use AWS Amplify with Nuxt, then I hope this tutorial was helpful for you. However I might have only covered fetching and creating a Todo but as you see it the article has been very long, so I chose not to include those functionalities but you can explore more about AWS Amplify from the official documentation.\\n\\nThank you for taking the time to read and if you liked this be sure to like the post as well and if ever you want any future Nuxt tutorials like this let me know!\\n\\nFull source code can be found from the [repository](https://github.com/carlomigueldy/nuxt-aws-amplify-todo-app) for your reference\\n\",\"timestamp\":1636676715,\"title\":\"Going Serverless with Nuxt (Composition API) + AWS Amplify + TypeScript\"},\"digest\":\"mTrNg7_mmWGbeZiALASCPONe9XuavZdaoyx34P2jSbQ\",\"authorship\":{\"contributor\":\"0x3E8c686F499C877D8f4aFB1215b6f0935796b986\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XNAfCibxrmGjSr-VHADLIVoKcpjQ6AvgUiRVqATl37k\\\",\\\"y\\\":\\\"3RuY7Uw61mZNEnJyyzr7ObM928gt-QoWvGAdLDb2gy4\\\"}\",\"signature\":\"zavVtEaKILYbsZDQtQ5YWODQANMelhKsKGJqU5Ax17Lj0NIYmYwXlmIBeg0jf9ji9m-3EZM0c53piVw7sdurDg\",\"signingKeySignature\":\"0xc823d2ab2ee5864fc5495382efb960b4461c3fb598b3be4e5e068c6312ab60ce014c7378c1f02beed8fce37236dc1e3eb8dd28a6f911b33ec4172a1fa8b17f101b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XNAfCibxrmGjSr-VHADLIVoKcpjQ6AvgUiRVqATl37k\\\",\\\"y\\\":\\\"3RuY7Uw61mZNEnJyyzr7ObM928gt-QoWvGAdLDb2gy4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"mTrNg7_mmWGbeZiALASCPONe9XuavZdaoyx34P2jSbQ\"}"