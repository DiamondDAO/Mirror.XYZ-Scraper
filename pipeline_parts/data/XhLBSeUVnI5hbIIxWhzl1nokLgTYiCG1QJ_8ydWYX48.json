"{\"content\":{\"body\":\"In this article, it assumes you have the basic knowledge and understanding of:\\n\\n*   Vue\\n*   Nuxt js\\n*   TypeScript\\n*   Vue 3: Composition API\\n\\n## [](#installation)Installation\\n\\nOpen your terminal and run this command `npx create-nuxt-app nuxt-ts-composition-api` make sure to select TypeScript, and $axios during the selection process.\\n\\nI’m not gonna go through the installation process but you can refer to the official documentation <https://nuxtjs.org/docs/2.x/get-started/installation>\\n\\nThen install @nuxtjs/composition-api module\\\\\\n\\n\\n    npm install @nuxtjs/composition-api --save\\n\\n\\n\\nAnd add this inside your nuxt.config.js file,\\\\\\n\\n\\n    {\\n      buildModules: [\\n        '@nuxtjs/composition-api'\\n      ]\\n    }\\n\\n\\n\\nThat is all we need but for more details head over to the official docs <https://composition-api.nuxtjs.org/getting-started/setup>\\n\\n## [](#accessing-the-router-instance)Accessing the Router instance\\n\\nIn Nuxt without TypeScript and Composition API, the usual way of accessing the router instance is via this.$router and that gives us access to methods like `push()` , `back()` , `go()` and etc.\\n\\nBut since we are using the Composition API, we will access it from `useContext()` method, and it returns as the context from which we can access our Vuex store.\\n\\nTo access it, look at the code below:\\n\\n[![Alt text of image](https://res.cloudinary.com/practicaldev/image/fetch/s--jHFWI9AN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://miro.medium.com/max/2400/1%2AME5XXFjXvlYSFKqtmwn9gQ.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--jHFWI9AN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://miro.medium.com/max/2400/1%2AME5XXFjXvlYSFKqtmwn9gQ.png)\\n\\nWe have to traverse into the store property then we can access the $router instance.\\n\\n## [](#accessing-axios-instance)Accessing $axios instance\\n\\nWhat about plugins like $axios, how do we access them?\\n\\nWhen we are not using TypeScript, we can simply access it by this code `this.$axios` without the IDE screaming at us that it doesn’t recognize it. But since we want to use TypeScript, it’s going to tell you it does not recognize it.\\n\\nBut we can access it via `useContext()` method right?\\n\\n[![Alt text image](https://res.cloudinary.com/practicaldev/image/fetch/s--ytzfSzsZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://miro.medium.com/max/700/1%2AzeqoFMCo9uwVMTuXXJitVw.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ytzfSzsZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://miro.medium.com/max/700/1%2AzeqoFMCo9uwVMTuXXJitVw.png)\\n\\nUnfortunately, the Vetur VSCode extension still doesn’t recognize what is `$axios`.\\n\\nTo fix that, we create a file called `index.d.ts` and put this in a directory called `types` in the root directory of our project.\\\\\\n\\n\\n    - assets\\n    - components\\n    - layouts\\n    - middleware\\n    - pages\\n    - plugins\\n    - static\\n    - store\\n    - types\\n      - index.d.ts\\n\\n\\n\\nRight after creating the `types` directory and `index.d.ts` file, your root project should look similar above.\\n\\nNow inside the `index.d.ts` file, here we put our type declarations so that our IDE will recognize what is `$axios` and what does it return.\\n\\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--CO1xZhSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://miro.medium.com/max/533/1%2Ay7BKPZthnSmY85PAg2ijTQ.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--CO1xZhSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://miro.medium.com/max/533/1%2Ay7BKPZthnSmY85PAg2ijTQ.png)\\n\\nNow that we have added type declarations, then accessing `$axios` from `useContext()` should work now.\\n\\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--qsG1TUk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://miro.medium.com/max/700/1%2AawAXa9-EoIub52ohCBHryA.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--qsG1TUk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://miro.medium.com/max/700/1%2AawAXa9-EoIub52ohCBHryA.png)\\n\\nAnd now we can access to the following methods: `get()` , `post()` , `delete()` , `put()` , and etc to make our HTTP requests.\\n\\nFor more details regarding TypeScript type declarations, you can head over to the official docs <https://typescript.nuxtjs.org/cookbook/plugins/>\\n\\n## [](#conclusion)Conclusion\\n\\nWhen we have custom plugins in our Nuxt TypeScript app, we make sure to register it inside our type declaration file, I am referring to `index.d.ts` , so if you were new to TypeScript, files that ends with `*.d.ts` are considered as type declaration file for TypeScript.\\n\\nI hope this saved you some time and trouble. That’s all I have to share, have a great day!\\n\\nFull source code: <https://github.com/carlomigueldy/nuxt-typescript-composition-api>\\n\",\"timestamp\":1636676774,\"title\":\"Getting Started with Nuxt + Composition API + TypeScript\"},\"digest\":\"QrXUQmq6Yvltue1Fy063boEqhlonYJWuXWPpnr1vmnI\",\"authorship\":{\"contributor\":\"0x3E8c686F499C877D8f4aFB1215b6f0935796b986\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XNAfCibxrmGjSr-VHADLIVoKcpjQ6AvgUiRVqATl37k\\\",\\\"y\\\":\\\"3RuY7Uw61mZNEnJyyzr7ObM928gt-QoWvGAdLDb2gy4\\\"}\",\"signature\":\"b42ZZshLnKGZAZ3qS8omnBEJRZPmdWX67txVIe4OU6PyzFu2m6I1-nHYWoGohvdscogxQPFRYIENFPq4Ui9SiA\",\"signingKeySignature\":\"0xc823d2ab2ee5864fc5495382efb960b4461c3fb598b3be4e5e068c6312ab60ce014c7378c1f02beed8fce37236dc1e3eb8dd28a6f911b33ec4172a1fa8b17f101b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XNAfCibxrmGjSr-VHADLIVoKcpjQ6AvgUiRVqATl37k\\\",\\\"y\\\":\\\"3RuY7Uw61mZNEnJyyzr7ObM928gt-QoWvGAdLDb2gy4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"QrXUQmq6Yvltue1Fy063boEqhlonYJWuXWPpnr1vmnI\"}"