"{\"content\":{\"body\":\"## Why?\\n\\nNFTs are a trend right now and most part of them is seeking a way to store data without the need of centralized servers. Imagine you pay 200k on a BAYC and in one day, their servers goes off and your ape simply lose all itâ€™s value, thatâ€™s kinda awful, right?.\\n\\n## Background\\n\\nLeaded by a small group of devs that created great projects such as [Anonymice](https://opensea.io/collection/anonymice), [The ChainRunners](https://opensea.io/collection/chain-runners-nft), [Ether Orcs](https://opensea.io/collection/ether-orcs) and more, the on-chain generation revolution has is slowly becoming the standard, so I want to share with you some of my ideas and examples to implement it on your next project.\\n\\n## Examples and Ideas\\n\\n### 1. Blockchain stored images\\n\\n**Pros:**\\n\\n* Can be extended easily by uploading more assets.\\n* Assets can not be removed or lost.\\n* Less need for coding.\\n\\n**Cons:**\\n\\n* Costs a lot of gas to deploy.\\n\\nIn order to implement this, you would need to do some functions to input the data and store it on a mapping or array. [Wolf Game](https://wolf.game) used it and I guess it worked very well ðŸ˜€ but hereâ€™s another way to do it.\\n\\n```\\n// Define the input format.\\nstruct Trait {\\n\\tstring value;\\n        string png;\\n}\\n\\n/* Create an array where they will be stored and\\nimplement the function that will store the inputs */\\nTrait[] public backgrounds;\\n\\nfunction _addBackground(PixelCityLibrary.Trait calldata _background) internal {\\n\\tbackgrounds.push(_background);\\n}\\n```\\n\\n### 2. Algorithmic generated images\\n\\n**Pros:**\\n\\n* Can generate pretty unique outputs.\\n* Wonâ€™t cost you extra gas.\\n\\n**Cons:**\\n\\n* Requires great coding skills.\\n* May require external tools for encoding, compression or generate different structures.\\n\\nThis option is by far the most hard and I, personally, donâ€™t think itâ€™s a good idea. You must create a unique algorithm that decodes bytes into a an image, pixel by pixel.\\n\\nIâ€™ve never tried it but you can read about it very well explained on the [Nouns DAO docs](https://nouns.notion.site/Noun-Protocol-32e4f0bf74fe433e927e2ea35e52a507#7a76d4f87dcf4174bb39472bd31a46c5) or via the [Chain Runners contract](https://etherscan.io/address/0xfdac77881ff861ff76a83cc43a1be3c317c6a1cc#code).\\n\\n### 3. â€œHardhcodedâ€œ assets\\n\\nThe last one is very simple and we can see itâ€™s implementation on the [Ether Orcs contract](https://etherscan.io/address/0x164b9511af29baf9095dc1deeb767e28aca78f0c#code). All assets are pre written in separate contracts (to avoid exceeding size limit) and retrieved on every call, then put together as layers of an SVG, pretty like the first option I presented to you.\\n\\n```\\n// This code was extracted from the original Ether Orcs' Invetory Manager smart contract.\\nmapping(uint8 => address) public bodies;\\nmapping(uint8 => address) public helms;\\nmapping(uint8 => address) public mainhands;\\nmapping(uint8 => address) public offhands;\\nmapping(uint8 => address) public uniques;\\n\\nfunction call(address source, bytes memory sig) internal view returns (string memory svg) {\\n        (bool succ, bytes memory ret)  = source.staticcall(sig);\\n        require(succ, \\\"failed to get data\\\");\\n        svg = abi.decode(ret, (string));\\n}\\n\\nfunction get(Part part, uint8 id) internal view returns (string memory data_) {\\n        address source = \\n            part == Part.body     ? bodies[id]    :\\n            part == Part.helm     ? helms[id]     :\\n            part == Part.mainhand ? mainhands[id] :\\n            part == Part.offhand  ? offhands[id]  : uniques[id];\\n\\n        data_ = wrapTag(call(source, getData(part, id)));\\n}\\n    \\nfunction wrapTag(string memory uri) internal pure returns (string memory) {\\n        return string(abi.encodePacked('<image x=\\\"1\\\" y=\\\"1\\\" width=\\\"60\\\" height=\\\"60\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,', uri, '\\\"/>'));\\n}\\n```\\n\\nThe **uniques contract** looks like this:\\n\\n```\\ncontract Uniques {\\n  string public constant unique52 = 'iVBORw0KGgoAAAANSUhEUgAAADwAAAA8CAMAAAANIilAAAABSlBMVEUAAAD///8AAAABAQEAAAABAQEAAAABAQFUAAAAAAABAQEAAAAAAB6RkZEAAAD+2toAAAAAAAAAAAAAAAAAAACTk5MWEyQWFCQlIzIlJDPrlZUmJDMmJDIlIzIAAAAPDw8UFBQZGRkkJCQmJDMXFCUAAABLS0uamprSYmDn5Nv///+ZmZn29O3/zc0mJDN4eHjtl5dsLzLVoyT/GwFSITM2NjalQ0Gurq7/3NyicgCNIiCZBABjY2P/XQH/mjqOjo6NjY3g3tUaGhri39bm49r/wJ2BMTCLi4vi39cBAwKPj4/b2dGRkZH/4U/k4dnk4tkGBgY0NDQODg7/9cT8+fMYFSUFBQUgICDS0tJXV1eQkJDc2tLd2tPf3NTl4toBAAEUFBQVFRV6enqVlpaWlpaYmJh+fn7g3dVHR0cWEyQlIjD/7ZQlTUqsq6nl3NlIAAAAJHRSTlMAAAEBAgIDAwMEBAYICw0OECAmMUBw7O7z9fb9/f3+/v7+/v4EklekAAADWklEQVR4Xu3UV4/bVhCGYVFrp9lO707PzJxGUtrai2sv6b33/v9v883waJcmqYWMXOTGr4gFJOHRDAmcHRX/of8FP8QP8fiR8Wh85ulnnnv+2dHoAfG5Sz98+Ob3b19657O33l86M1oYM3NRfHDny8MLh9cv3Lp1/cdPnxwx80KYE+J/vvrt68s3vrl48fLtXxLrZ7wA5jStqpTCjXvvXfn2StBSqqpqCr0gDrkHxG98/uog3m01BzOuF6ZTxW09nU5349Wr+/v7q6tzMUfVKXXxT2l39eDgwOTdle0+NjuZqGbu4t1VpBINY1jD4ADJWDrCjfxrZeVEPDbMH0Phb8ZGDQ9Oho3Q/An6s7v2ykc60/hcDM2lCN0MDFNNVfIRtqUV0xDe3NyMHKC/M2Ox3TlwXlqxoyGMFAmbyjZPtmz4doA+EUNdu2Y6YzC7Y8VhLk4ibDbGRqd00+45e8VCwzglAWgFLMA2Vl/bwK6L/+A4USy2dxuLA86BugFMnCYTw6pTy0oAxt0aDUOYJGD0RHFZlpJmwZalYdDtEE07oftxCJwarLr8dVaJgCH39jhoDvXw7xwNoxjLMoQv8DsxKtB9Of7MTm0PE4yOZiIXcsDtHEcmuGGcmCdsO0QDTlx2GO+ccMTe2KiLbbAIJ8UNcU5EnPHmMZHuXWqdB5bXUQwNYEoUGscsyThGYNg+3uPmnRjOTsRsoVjm4KqqgIlUi2mX7ZoGzJGdOKwN28ZmSfbEeypobW251cx6fWIeOwGfGsQ7niiI6rYVJ+y97l1VTrrnmYCR98BBEETO4T2GeSISEcyAHcbNYG05W0DXYO8ry710to9Bd/wO6TPCle91OT/2Fq57/wAprw0cYA2DLysuTdMO8idgfA0cDCPFBFwGdDy57mHBXNLJ0fDfhuHJ6dFqYfKvdTB0U54sBKicCmjDs7Vr7+sOthjnnRpbQJudnRSXJ9OLr/utegDbgRZYMW3WtEYWc7F03p/v41OP4ysSax0mW/1ItTA3J+d0vfVKD59+oliCUbquzmzWKB8sgJexd2/tRwGI1jWDHaza8Ls9bJnsaXJNQg2uBzH5yuerhcn7DXt5YlTXc3C1sdFcGy1ct+MK1Y8tiutYt\\n  ...\\n}\\n```\\n\\n## Outro\\n\\nWhat encouraged me to write this was an experimental project I am still developing this week. Itâ€™s called Pixel City and the artwork is very simple but generated totally on-chain.\\n\\nYou can claim one for free on the [Rinkeby](https://faucet.rinkeby.io) testnet on the website and help me funding the mainnet contract:\\n\\n[https://pixelcity-ten.vercel.app/](https://pixelcity-ten.vercel.app/)\\n\\n**Address for donations**: [0x9E5d22a7Be252c01Eebd4a4568e2D644ac1ee5c6](https://etherscan.io/address/0x9E5d22a7Be252c01Eebd4a4568e2D644ac1ee5c6)\\n\\nIf I reach the amount needed to deploy the contract on mainnet (\\\\~2.5 ETH), I am gonna create a Multisig and invite the biggest donator(s) to deploy the NFTs.\",\"timestamp\":1638191850,\"title\":\"3 different ways to make on-chain generated NFTs\"},\"digest\":\"aTrWyPTRHMc5fwyuY72EsJSSlPEBa31yUqE6ClOt2HE\",\"authorship\":{\"contributor\":\"0x9E5d22a7Be252c01Eebd4a4568e2D644ac1ee5c6\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"mlD8-CTBHiDMFN-c8GRKV56Fk-ri7BvdVpmnI9WmEI4\\\",\\\"y\\\":\\\"UM6p1kHyURKjIgBvbAGLq9RZM49gFsEtA8XtwMJQ0Nw\\\"}\",\"signature\":\"9Q8Jo7K--4rIcq1bV0LGT4yxX0Tud5cdcZUlYmqBSrB-v9ZymPYL-UfSVM6IFnaB3GmEOJgHf0x6V73cK9hi8Q\",\"signingKeySignature\":\"0x4a47b99d12ec6fb6713a0a7d6a0224324b279eddaf6ab4f270d0ab25345aca781d2a695a6dc953c2849c7804b85e5137abf531a294aa3880c4b859ef638eaa611b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"mlD8-CTBHiDMFN-c8GRKV56Fk-ri7BvdVpmnI9WmEI4\\\",\\\"y\\\":\\\"UM6p1kHyURKjIgBvbAGLq9RZM49gFsEtA8XtwMJQ0Nw\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"gh_2cBYCTJd7PKW0gBqyY69f_2qHFOjCxWBR_XGwkW4\"}"