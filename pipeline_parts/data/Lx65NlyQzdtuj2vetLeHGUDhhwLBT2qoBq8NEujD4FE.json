"{\"content\":{\"body\":\"[![shashank Jain](https://miro.medium.com/fit/c/56/56/0\\\\*LDQ09-SqOVkZS4Tk.)](https://medium.com/@jain.sm?source=post_page-----939fc44de52e-----------------------------------)\\n\\nIn the previous blog <https://medium.com/@jain.sm/virtualization-part-2-memory-virtualization-79b1c804e160> we talked of memory virtualization. In this blog we touch upon CPU virtualization\\n\\nBefore we take a peek at CPU virtualization it would be interesting to understand how the protection rings are built into x86 architecture. These rings allow the cpu to protect memory and control privileges as to what code executes at what privilege level.\\n\\nThe x86 architecture has a concept of protection rings. The Kernel runs in the most privileged mode AKA Ring 0 and the userspace used for running processes run in Ring 3.\\n\\nThe hardware enforces that all privileged instructions get executed in Ring 0. If any attempt is made to run a privileged instruction in Ring 0 the CPU generates a fault.\\n\\nAt a high level this is controlled by code segment register via CPL bit. All calls from Ring 3 are gated to Ring 0. So as an example a system call can be made by an instruction like syscall which in turn sets the right CPL level and executes the kernel code with a higher privilege level. Any attempt to directly call high privilege code from upper rings lead to a hardware fault.\\n\\nThe same concept applies for virtualized OS. In this case the guest is de-privileged and is run in Ring 1 and Process of Guest in Ring 3. The VMM itself runs in Ring 0. In case of fully virtualized guest this means that any privileged instruction has to be trapped and emulated. VMM emulates the trapped instruction. Over and above the privileged instructions the sensitive instructions also need to be trapped and emulated by VMM.\\n\\nHistory of x86 is that it was not virtualizable. What this means is that not all sensitive instructions are privileged. Instructions like SGDT,SIDT and more can be executed in Ring 1 without being trapped. This can be harmful for running a guest OS as this gives a peek to host kernel data structures to the guest.\\n\\nThe above problem can be addressed by\\n\\n1\\\\. Binary Translation in case of Full Virtualization\\n\\n2\\\\. Paravirtualization as in case of XEN with hypercalls\\n\\nX86 in 2005 finally became virtualizable. They introduced one more ring called Ring -1 which is also called VMX root mode. The VMM runs in VMX root mode and the guests run in non-root mode.\\n\\nThis means that the guests continue to run in Ring 0 and for majority of the instructions there is no trap. For some privileged/Sensitive instructions the VMM is executed in root mode via the trap. We call this switches as VM Entries and VM Exits.\\n\\nOver this the hardware manages a data structure called VMCS (VM control structure). This has the state of the VM and registers. The hardware uses this during the VM Entries and exits. The VMCS structure is similar to the task_struct data structure used to represent a process. One VMCS ptr points to the currently active VMCS.\\n\\nWhen a trap to VMM happens, VMCS provides the state of all guest registers, reason of exit etc.\\n\\nAdvantages of hardware assisted virtualization\\n\\n1\\\\. No binary translation\\n\\n2\\\\. No OS modification\\n\\nProblem is the VM Entry and Exits are still heavy calls involving lot of CPU cycles as the complete VM state has to be saved and restored. Considerable work has gone in to reduce the cycles of these exits.\\n\\nIn next blog I intend to touch upon a bit on IO Virtualization (<https://medium.com/@jain.sm/io-virtualization-731f6b1744ac>)and different techniques involved.\\n\\n*Disclaimer : The views expressed above are personal and not of the company I work for.*\\n\",\"timestamp\":1639356602,\"title\":\"Virtualization Part 3 -CPU Virtualization - shashank Jain - Medium\"},\"digest\":\"HbNumCi7qTISrM8TwqUYo81LsNi5zPfRkuETwsi0rX0\",\"authorship\":{\"contributor\":\"0x0853186C1Bfbc0889b9c76AC83f5A304BeaFDbAe\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"O59csme3y4woqOU4OHokg9Ppi2HRjmj_7IcOGnhGvvU\\\",\\\"y\\\":\\\"pdQ8oYtzRjKwdy4ylUzJZHIfR0YhnO7VC-_wIpRCih4\\\"}\",\"signature\":\"SA7Y3qV1oVjFbHVXlHbmULVvF9WdMv0QsiXE0NdHRWhBvDcs-r58CHKVasgQa4sZ449ClhWqipwnG6IqexyUuQ\",\"signingKeySignature\":\"0x4d4b774155b7b39132402af4f62f9dfdb23c39f23ec89055936a5b6bb75a476210a07461db84059bfdfb928f7e0b66d2bfcb6d193697b85ea49a7fabd1b5fc4f1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"O59csme3y4woqOU4OHokg9Ppi2HRjmj_7IcOGnhGvvU\\\",\\\"y\\\":\\\"pdQ8oYtzRjKwdy4ylUzJZHIfR0YhnO7VC-_wIpRCih4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"HbNumCi7qTISrM8TwqUYo81LsNi5zPfRkuETwsi0rX0\"}"