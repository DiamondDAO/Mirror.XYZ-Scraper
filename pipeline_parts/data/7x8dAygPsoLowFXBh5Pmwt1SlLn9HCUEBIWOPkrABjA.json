"{\"content\":{\"body\":\"## 前情提要\\n\\n> 关于符号化，我想iOS开发的相关人员并不陌生，也在日常的开发中也经常打交道，网上关于符号化的文章可以说是漫天飞舞，但并没有一篇文章可以说的很全面，于是便有了这篇文章的诞生，当然这也是笔者在工作中的一些总结学习,如果对文章有任何的问题请联系`venn221@gmail.com`.\\n\\n*以下文章中的符号化均是针对iOS下的，例子也是iOS下的Project*\\n\\n## 符号化是什么\\n\\n关于符号化\\n\\n符号化从通俗意义上讲就是把一些机器语言可以转化成人类可读的符号，而在这里的环境下就是指iOS或者Mac OS下的一些异常信息（十六进制符号表示）通过某些手段转化成开发人员可读的高级代码片段，从而进一步定位异常的来源，迅速修复\\n\\n### 符号化的程度\\n\\n完全符号化\\n\\n```\\nThread 0 name:  Dispatch queue: com.apple.main-thread\\nThread 0 Crashed:\\n0   libswiftCore.dylib                0x00000001bd38da70 specialized _fatalErrorMessage+ 2378352 (_:_:file:line:flags:) + 384\\n1   libswiftCore.dylib                0x00000001bd38da70 specialized _fatalErrorMessage+ 2378352 (_:_:file:line:flags:) + 384\\n2   libswiftCore.dylib                0x00000001bd15958c _ArrayBuffer._checkInoutAndNativeTypeCheckedBounds+ 66956 (_:wasNativeTypeChecked:) + 200\\n3   libswiftCore.dylib                0x00000001bd15c814 Array.subscript.getter + 88\\n4   TouchCanvas                       0x00000001022cbfa8 Line.updateRectForExistingPoint(_:) (in TouchCanvas) + 656\\n5   TouchCanvas                       0x00000001022c90b0 Line.updateWithTouch(_:) (in TouchCanvas) + 464\\n6   TouchCanvas                       0x00000001022e7374 CanvasView.updateEstimatedPropertiesForTouches(_:) (in TouchCanvas) + 708\\n7   TouchCanvas                       0x00000001022df754 ViewController.touchesEstimatedPropertiesUpdated(_:) (in TouchCanvas) + 304\\n8   TouchCanvas                       0x00000001022df7e8 @objc ViewController.touchesEstimatedPropertiesUpdated(_:) (in TouchCanvas) + 120\\n9   UIKitCore                         0x00000001b3da6230 forwardMethod1 + 136\\n10  UIKitCore                         0x00000001b3da6230 forwardMethod1 + 136\\n11  UIKitCore                         0x00000001b3e01e24 -[_UIEstimatedTouchRecord dispatchUpdateWithPressure:stillEstimated:] + 340\\n```\\n\\n部分符号化\\n\\n```\\nThread 0 name:  Dispatch queue: com.apple.main-thread\\nThread 0 Crashed:\\n0   libswiftCore.dylib                0x00000001bd38da70 specialized _fatalErrorMessage+ 2378352 (_:_:file:line:flags:) + 384\\n1   libswiftCore.dylib                0x00000001bd38da70 specialized _fatalErrorMessage+ 2378352 (_:_:file:line:flags:) + 384\\n2   libswiftCore.dylib                0x00000001bd15958c _ArrayBuffer._checkInoutAndNativeTypeCheckedBounds+ 66956 (_:wasNativeTypeChecked:) + 200\\n3   libswiftCore.dylib                0x00000001bd15c814 Array.subscript.getter + 88\\n4   TouchCanvas                       0x00000001022cbfa8 0x1022c0000 + 49064\\n5   TouchCanvas                       0x00000001022c90b0 0x1022c0000 + 37040\\n6   TouchCanvas                       0x00000001022e7374 0x1022c0000 + 160628\\n7   TouchCanvas                       0x00000001022df754 0x1022c0000 + 128852\\n8   TouchCanvas                       0x00000001022df7e8 0x1022c0000 + 129000\\n9   UIKitCore                         0x00000001b3da6230 forwardMethod1 + 136\\n10  UIKitCore                         0x00000001b3da6230 forwardMethod1 + 136\\n11  UIKitCore                         0x00000001b3e01e24 -[_UIEstimatedTouchRecord dispatchUpdateWithPressure:stillEstimated:] + 340\\n```\\n\\n未符号化\\n\\n```\\nThread 0 name:  Dispatch queue: com.apple.main-thread\\nThread 0 Crashed:\\n0   libswiftCore.dylib                0x00000001bd38da70 0x1bd149000 + 2378352\\n1   libswiftCore.dylib                0x00000001bd38da70 0x1bd149000 + 2378352\\n2   libswiftCore.dylib                0x00000001bd15958c 0x1bd149000 + 66956\\n3   libswiftCore.dylib                0x00000001bd15c814 0x1bd149000 + 79892\\n4   TouchCanvas                       0x00000001022cbfa8 0x1022c0000 + 49064\\n5   TouchCanvas                       0x00000001022c90b0 0x1022c0000 + 37040\\n6   TouchCanvas                       0x00000001022e7374 0x1022c0000 + 160628\\n7   TouchCanvas                       0x00000001022df754 0x1022c0000 + 128852\\n8   TouchCanvas                       0x00000001022df7e8 0x1022c0000 + 129000\\n9   UIKitCore                         0x00000001b3da6230 0x1b3348000 + 10871344\\n10  UIKitCore                         0x00000001b3da6230 0x1b3348000 + 10871344\\n11  UIKitCore                         0x00000001b3e01e24 0x1b3348000 + 11247140\\n```\\n\\n## 为什么要符号化\\n\\n通过上一个问题可以得知，为了让开发人员可以快速找到异常堆栈，从而定位问题，解决问题，保证程序的良好运行\\n\\n## 崩溃文件解析\\n\\n工具善其事，必先利其器。你想解决某件事，你首先得清楚这件事是如何构成的，以及每个部分代表什么，接下来我们来聊一聊崩溃日志文件中的各个字段的含义\\n\\n下面是某个项目中的一段原始崩溃日志截取\\n\\n```\\nIncident Identifier: xxxxx-xxxx-xxxx-xxxx-89D2A9086DFE\\nCrashReporter Key:   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nHardware Model:      iPhone10,3\\nProcess:             bdnews [22785]\\nPath:                /private/var/containers/Bundle/Application/7FFC365D-8DBE-4B2E-9E6B-372047CA2A7A/bdnews.app/bdnews\\nIdentifier:          com.bd.newspaper.inhouse\\nVersion:             224.1 (6.6.20)\\nCode Type:           ARM-64 (Native)\\nRole:                Foreground\\nParent Process:      launchd [1]\\nCoalition:           com.bd.newspaper.inhouse [2953]\\n\\n\\nDate/Time:           2021-07-08 08:04:46.6235 +0800\\nLaunch Time:         2021-07-08 07:12:05.1466 +0800\\nOS Version:          iPhone OS 14.1 (18A8395)\\nRelease Type:        User\\nBaseband Version:    6.02.01\\nReport Version:      104\\n\\nException Type:  EXC_CRASH (SIGKILL)\\nException Codes: 0x0000000000000000, 0x0000000000000000\\nException Note:  EXC_CORPSE_NOTIFY\\nTermination Reason: Namespace SPRINGBOARD, Code 0x8badf00d\\nTermination Description: SPRINGBOARD, <RBSTerminateContext| domain:10 code:0x8BADF00D explanation:scene-update watchdog transgression: application<com.bd.newspaper.inhouse>:22785 exhausted real (wall clock) time allowance of 10.00 seconds | ProcessVisibility: Foreground | ProcessState: Running | WatchdogEvent: scene-update | WatchdogVisibility: Background | WatchdogCPUStatistics: ( | \\\"Elapsed total CPU time (seconds): 6.730 (user 6.730, system 0.000), 11% CPU\\\", | \\\"Elapsed application CPU time (seconds): 0.448, 1% CPU\\\" | ) reportType:CrashLog maxTerminationResistance:Interactive>\\nTriggered by Thread:  0\\n\\nThread 0 name:  Dispatch queue: com.apple.main-thread\\nThread 0 Crashed:\\n0   libsystem_kernel.dylib        \\t0x00000001b8d48900 semaphore_wait_trap + 8\\n1   libdispatch.dylib             \\t0x000000018de4ec3c _dispatch_sema4_wait$VARIANT$armv81 + 24\\n2   libdispatch.dylib             \\t0x000000018de4f28c _dispatch_semaphore_wait_slow + 128\\n3   CFNetwork                     \\t0x000000018e89fddc CFURLConnectionSendSynchronousRequest + 352\\n4   CFNetwork                     \\t0x000000018e81d9cc 0x18e81a000 + 14796\\n5   Foundation                    \\t0x000000018f4008a0 -[NSData+ 247968 (NSData) initWithContentsOfURL:] + 228\\n6   ImageIO                       \\t0x000000018f6ff110 IIOImageSource::IIOImageSource+ 655632 (__CFURL const*, IIODictionary*) + 608\\n7   ImageIO                      0x000000018f703f98 CGImageSourceCreateWithURL + 196\\n8   bdunews                      \\t0x0000000104a2d620 0x10412c000 + 9442848\\n9   bdnews                      \\t0x0000000104a2d43c 0x10412c000 + 9442364\\n10  bdnews                      \\t0x0000000105511c68 0x10412c000 + 20864104\\n11  bdnews                      \\t0x00000001055109cc 0x10412c000 + 20859340\\n12  bdnews                      \\t0x0000000104442d50 0x10412c000 + 3239248\\n13  bdnews                      \\t0x0000000104b6a3ac 0x10412c000 + 10740652\\n14  bdnews                      \\t0x0000000104b6c658 0x10412c000 + 10749528\\n15  bdnews                      \\t0x0000000104b669fc 0x10412c000 + 10725884\\n16  bdnews                      \\t0x0000000104be62bc 0x10412c000 + 11248316\\n17  bdnews                      \\t0x0000000104be4980 0x10412c000 + 11241856\\n18  bdnews                      \\t0x0000000105acfd44 0x10412c000 + 26885444\\n19  bdnews                      \\t0x0000000105aea2dc 0x10412c000 + 26993372\\n20  libdispatch.dylib             \\t0x000000018de7d298 _dispatch_call_block_and_release + 24\\n21  libdispatch.dylib             \\t0x000000018de7e280 _dispatch_client_callout + 16\\n22  libdispatch.dylib             \\t0x000000018de60608 _dispatch_main_queue_callback_4CF$VARIANT$armv81 + 936\\n23  CoreFoundation                \\t0x000000018e1c4c30 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 12\\n24  CoreFoundation                \\t0x000000018e1bf0e8 __CFRunLoopRun + 2480\\n25  CoreFoundation                \\t0x000000018e1be200 CFRunLoopRunSpecific + 572\\n26  GraphicsServices              \\t0x00000001a433b598 GSEventRunModal + 160\\n27  UIKitCore                     \\t0x0000000190a87bcc -[UIApplication _run] + 1052\\n28  UIKitCore                     \\t0x0000000190a8d1a0 UIApplicationMain + 164\\n29  bdnews                      \\t0x0000000105310464 0x10412c000 + 18760804\\n30  libdyld.dylib                 \\t0x000000018de9d588 start + 4\\n\\n...\\n\\nBinary Images:\\n0x10412c000 - 0x106f0ffff sohunews arm64  <255d5329b68c378a834d829abcfdbd42> /var/containers/Bundle/Application/7FFC365D-8DBE-4B2E-9E6B-372047CA2A7A/sohunews.app/sohunews\\n0x109c60000 - 0x109c6bfff libobjc-trampolines.dylib arm64  <b6698616837a37cf85d2ed2d2d868269> /usr/lib/libobjc-trampolines.dylib\\n0x109cc8000 - 0x109d33fff dyld arm64  <90ec9373b0653c5b986074202c172829> /usr/lib/dyld\\n0x109db4000 - 0x109e1ffff RevealServer arm64  <aececcc618bf3b508d470d26907c12bf> /var/containers/Bundle/Application/7FFC365D-8DBE-4B2E-9E6B-372047CA2A7A/sohunews.app/Frameworks/RevealServer.framework/RevealServer\\n\\n...\\n```\\n\\n### Crash日志各部分分析\\n\\nCrash日志信息头\\n\\n* Incident Identifier:崩溃日志的唯一标识符，两份报告从来不会相同\\n* CrashReporter Key:崩溃日志的关键字\\n* Hardware Model: 设备类型，iPhone10,3\\n* Process:进程名称，通常是ipa中可执行文件的名称，对应Xcode项目中的\\\"product name\\\"\\n* Path:设备存储中应用可执行文件的路径\\n* Identifier: 应用的bundle id\\n* Version: 应用的Build (Version)，也就是CFBundleVersion\\n* Code Type: 可执行文件对应的CPU架构类型，这里是ARM64处理器\\n* Role:在应用终止的时分配给该进程的任务角色，对于分析报告来说，这个字段没有用\\n* Parent Process: 父进程，通常是launch id之类的，如果是连接xcode调试则可能是debug process之类的\\n* Coalition：包含该应用程序的进程的联盟的名称\\n* Date/Time: 崩溃的时间\\n* OS Version: 设备操作系统版本\\n* Report Version: Crash report的版本，不同版本crash信息格式有些差别\\n* Exception Type:异常类型，`EXC_CRASH (SIGKILL)`，这段代码解读为，在`mach`内核环境下发生`exc_crash`的异常，然后被`unix`系统下的`sigkill`信号捕获\\n* Exception Codes: 关于异常的处理器特定信息，编码为一个或多个64位十六进制数字。通常情况下，这个字段不会出现，因为操作系统在本部分的其他字段中把信息作为可读的信息\\n* Exception Subtype: 异常代码的可读部分\\n* Exception Message: 从异常代码中提取的可读信息\\n* Exception Note: 不是特定于一种异常类型的附加信息。如果这个字段中包含了`EXC_CORPSE_NOTIFY `，那么这个崩溃并不是来自于硬件陷阱([Trap](https://en.wikipedia.org/wiki/Trap_(computing)))，要么是因为进程被操作系统终止，要么是进程调用了`abort()`，如果这个字段包含了`SIMULATED `这不是一个崩溃，进程没有崩溃，但是操作系统随后可能要求终止该进程，如果这个字段包含`NON-FATAL CONDITION`，这也不是一个崩溃，进程没有终止，因为产生崩溃报告得到的问题并不是致命的。\\n* Termination Reason: 当操作系统终止一个进程时指定退出的原因信息。关键的操作系统组件，包括进程内部和外部，在遇到致命错误时终止进程，并在这个字段中记录原因。你可以在这个字段中找到相关信息，比如一个无效的代码签名，一个缺失的依赖库，或者在没有相关字符串的情况下访问隐私信息等\\n* Triggered by Thread or Crashed Thread: 发生异常的线程\\n\\n崩溃栈 (从左到右)\\n\\n![Image0](https://media.discordapp.net/attachments/569722032137437191/869906412971642920/unknown.png?width=991&height=111)\\n\\n* 0.调用栈序号\\n* 1.对应二进制的镜像(image)名称，包含应用的可执行文件，系统动态库，framework中的二进制文件等\\n* 2.调用函数在相应镜像文件中的地址，这里也包含三部分（从左到右）\\n  * 2.0.调用函数的地址，十六进制数字组成\\n  * 2.1.可执行指令部分相对镜像文件中的起始加载地址，十六进制数字组成\\n  * 2.2.函数的地址地相对于加载地址的偏移量，由十进制组成，其实这的关系就是这部分的地址+第二部分地址等于第一部分地址\\n\\n镜像文件信息，分为六个部分 (从左到右)\\n\\n![Image1](https://media.discordapp.net/attachments/569722032137437191/870136337234276362/unknown.png?width=991&height=96)\\n\\n* 二进制图像在进程中的地址范围。该地址是二进制的加载地址\\n* 这个地址是和上一个地址组成了二进制图像的进程地址范围\\n* 镜像文件的名称\\n* CPU架构类型，跟信息头的Code Type表示一样\\n* 镜像文件的UUID，这个是镜像文件的唯一标识，同时也是对应的符号文件的UUID，可以用来判断符号文件是否正确\\n* 镜像文件在设备中的路径\\n\\n## 符号化流程\\n\\n### 符号化所需文件\\n\\n**符号化需要崩溃日志文件，dSYM文件以及符号化工具，这3个元素缺一不可，你需要提前准备好，任何第三方的工具也都需要这些元素，只是表现形式不同而已**\\n\\n崩溃文件\\n\\n* 文件表现形式：通常崩溃文件都是以`xxx.crash`结尾的文件呈现\\n* 获取方式：获取的方式分调试开发以及线上进行不同的方式获取，首先如果是开发测试阶段，可以通过`Xcode`编译工具从测试手机导出，当然你也可以先自行在目标手机上看是否存在你需要的崩溃，查看方式就是`设置-隐私-分析与改进-分析数据`这个文件下就是你整部手机的一些异常信息，也是Jetsam机制产生的(有兴趣可以继续深入了解下Jetsam机制，这个与本文无关，暂且忽略哈)\\n  * 开发测试导出\\n\\n    `Xcode-Window-Devices and simulators-View Device Logs`(左侧工具栏选中你要导出的目的设备)\\n\\n![Image2](https://media.discordapp.net/attachments/569722032137437191/862892041138208778/unknown.png)\\n\\n* * 线上获取导出\\n\\n    如果是线上问题出现了，比如一些可以被信号量捕获的问题，就可以在`Xcode`以相同的方式导出，但是还有一些不能捕获的崩溃就需要我们从代码层面进行控制，然后存储上报，具体方式根据自己的业务进行制定即可。\\n* 关于`dSYM`文件\\n\\n  `dSYM`是一个调试符号文件(`debug symbols file`)，它是在你的项目中构建设置中启用`Strip Debug Symbols`开启时生成的。\\n\\n  生成流程\\n\\n  当这个设置`Strip Debug Symbols`开启时，你的对象的符号名称会从编译后的二进制文件中删除，这个是为了防止黑客对你的代码进行逆向工程而采取的措施之一，该文件每次编译时都会发生变化，因为时间戳不同，与项目设置无关\\n\\n  作用\\n\\n  崩溃文件只是告诉你了内存的虚拟地址和加载地址，dSYM文件则辅助的定位到了对象的调用堆栈，并允许开发者可读\\n\\n  如何获取dSYM,分为`Bitcode Enabled`和`Bitcode disabled`\\n* Bitcode Enabled\\\\`\\n  * 你首先要连接��`App Store Connect `\\n  * 打开App详情页面\\n  * 点击活动\\n  * 从 \\\"所有构建 \\\"列表中，选择一个与崩溃相匹配的版本\\n  * 点击dSYM的下载链接\\n* `Bitcode disabled`\\n  * 打开Xcode\\n  * 点击Window > Organizer\\n  * 从 \\\"所有构建 \\\"列表中，选择一个与崩溃相匹配的版本\\n  * 右击并点击`Show in Finder`\\n  * 在`.xcarchive`右击文件并点击`显示包内容`\\n  * 发现`<app_name>.app.dSYM`在`dSYM`文件下发现该文件\\n\\n### 符号化工具\\n\\n#### symbolicatecrash\\n\\nsymbolicatecrash工具的查找\\n\\n> 该工具是`Apple`提供的一个命令行工具，你通过以下的方式找到它\\n\\n*备注：以下所有*`xxx`代表工程名字\\n\\n```\\n// find symbolicatecrash for Applications\\n$ sudo find /Applications -name symbolicatecrash\\n\\n/**\\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/iOSSupport/Library/PrivateFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash\\n/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/Library/PrivateFrameworks/DVTFoundation.framework/symbolicatecrash\\n/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/Library/PrivateFrameworks/DVTFoundation.framework/symbolicatecrash\\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/PrivateFrameworks/DVTFoundation.framework/symbolicatecrash\\n/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash\\n*/\\n\\n// find the path which contains DVTFoundation.framework and copy the path to the clipboard\\n\\n// Set the DEVELOPER_DIR environment variable. Write this command\\n$ export DEVELOPER_DIR=”/Applications/Xcode.app/Contents/Developer”\\n\\n// The last step process\\n// This tool takes two arguments. The first argument is the path to your crash file. The second argument is the path to the dSYM file. So, the final command may look like \\n\\n// run the tool\\n$symbolicatecrash -d <path_to_dsym> -o <path_for_symbolicated_crash> <path_to_crash_report>\\n\\n\\n\\n$/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash xxx.crash xxxApp.dSYM > Custom.crash\\n```\\n\\n符号解析无效果\\n\\n> 如果在符号化过程中没有效果或者无法符号化，那就要比较你当前的dSYM的`uuid`是否和崩溃文件中镜像文件部分列出的构建`uuid`相匹配\\n\\n```\\n // find uuid for dSYM\\n $ dwarfdump –uuid xxxApp.dSYM/Contents/Resources/DWARF/xxxApp\\n /**\\n // It looks that\\n UUID: 1A36EBE0-AE8D-3A2F-8D76-2B786C707305 (armv7) xxx.app.dSYM/Contents/Resources/DWARF/xxx\\n UUID: 9B8D679D-C302-31DA-9573-A8D5A6588627 (arm64) xxx.app.dSYM/Contents/Resources/DWARF/xxx\\n */\\n \\n// find uuid for Binary Images \\n $ dwarfdump --uuid <PathToBinary>\\n $ dwarfdump --uuid /usr/lib/libobjc-trampolines.dylib\\n  \\n /**\\n // It looks that\\n UUID: 1BFE69F2-6C6C-3E82-A8CA-781EE7C87C4B (x86_64) /usr/lib/libobjc-trampolines.dylib\\n UUID: 361143B8-E66E-3402-85B5-C20893AAB9C9 (x86_64h) /usr/lib/libobjc-trampolines.dylib\\n UUID: 3358BF92-85AC-3174-9344-C99A5EA74E6B (arm64e) /usr/lib/libobjc-trampolines.dylib\\n  \\n  // The resulf of run all platoms for uuid,then check someone platom of crash log and dSYM's uuid\\n */\\n```\\n\\n#### atos\\n\\n关于atos\\n\\n* atos命令将十六进制地址转换为源代码中可识别的函数名称和行号\\n* 命令格式\\n\\n```\\natos -arch <Binary Architecture> -o <Path to dSYM file>/Contents/Resources/DWARF/<binary image name> -l <load address> <address to symbolicate>\\n\\n// explain parameters\\nload adress:可执行指令部分相对镜像文件中的起始加载地址\\naddress to symbolicate：调用函数的地址\\n\\n\\natos -o xxx.app.dSYM/Contents/Resources/DWARF/xxx -l 0x00000001c4fe7000 -arch arm64\\n\\natos -arch arm64 -o  xxx.app.dSYM/Contents/Resources/DWARF/xxx -l 0x00000001c4fe7000 0x00000001a2d6e29c\\n\\n// extension about xcrun\\n// xcrun can accept address to symbolicate on the way in command line.\\n\\nxcrun atos -o xxx.app.dSYM/Contents/Resources/DWARF/xxx -l 0x1040dc000 -arch arm64\\n0x1052c0464\\n__63-[GCDAsyncUdpSocket asyncResolveHost:port:withCompletionBlock:]_block_invoke.118 (in xxx) (GCDAsyncUdpSocket.m:1209)\\n0x104ba9094\\n-[BDAboutController tapButton:atIndex:] (in xxx) (BDAboutController.m:251)\\n```\\n\\n## 扩伸延展\\n\\n关于一些第三方的APM(Application Performance Management），即应用性能管理\\n\\n* 目前的一些APM都是基于以上原理进行符号解析，但是由于这样或者那样的原因导致某些解析是有出入，所以需要你二次确认，这需要你在日常工作中有敏锐的观察力，毕竟工具是人写的不可能不出错，在这里就不列举了，在用的小伙伴可以自行校验\\n* 关于第三方解析工具\\n  * 目前暂无推荐，可以自己搜索关键词进行尝试，目前笔者是使用了自己编写脚本语言进行符号化，参考资料也已给出\\n\\n## 结束语\\n\\n这是第一用`Web3`下的`Mirror`，以后会逐步转移到这里进行发文\\n\\n2022，未来可期….\",\"timestamp\":1641309511,\"title\":\"你真的了解符号化么？\"},\"digest\":\"I69UZ22k1uV7Xb35olRYr18oKfIKFQMftt8CPMGC-Ow\",\"authorship\":{\"contributor\":\"0x1965Fbd6134FBc13DD99d982472b4B6f71714405\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"nrXXaKxhgzYqaKe_xSLQsycYMU5XhzZFMf2ryg5VYkU\\\",\\\"y\\\":\\\"g4XSsUhTg8v26RonE_3PBFxmOsGpT6E-XKuWeno-ZOM\\\"}\",\"signature\":\"M4bm8yMcmRZnLKaOULAweJwhqvILcev1WFaHm9nJT7RFTuEj-G8JKkBxm36fNpUuFLm2sDPNtySEUlYJQByPqg\",\"signingKeySignature\":\"0xc976f61cf812e639e432955368ea59389e91f7d846a45ea9414bf57be7818a961e92ca251b5526cabbc9bfa384ac34c97cb8d2f9641ddf3aa4bc5c42b2e114af1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"nrXXaKxhgzYqaKe_xSLQsycYMU5XhzZFMf2ryg5VYkU\\\",\\\"y\\\":\\\"g4XSsUhTg8v26RonE_3PBFxmOsGpT6E-XKuWeno-ZOM\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"tA_x18D9KsVDeIvLd-TGszkssdQc2VkcAejoPCmitaY\"}"