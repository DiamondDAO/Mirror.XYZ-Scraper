"{\"content\":{\"body\":\"## [](#introduction)Introduction\\n\\nIn this article I will show you how you can build an application using Flutter with Supabase as a backend. Supabase is a Firebase alternative which uses Postgres, so that's something different and that's even amazing. Postgres is also a relational database which is also open source and a powerful tool.\\n\\nWe will learn and build a simple grocery application using Flutter with Supabase.\\n\\nI am not going to go over setting up Flutter step by step since how I built it uses the Stacked architecture which follows an MVVM style so I will just show you how to write Supabase code in Dart with-in a Flutter application instead.\\n\\nYou can learn more about Stacked architecture at [FilledStacks](https://www.filledstacks.com/) :D\\n\\nMy repository for SupaGrocery will be shared at the end of this tutorial. So you can go ahead and download it.\\n\\n## [](#demo)Demo\\n\\n[![SupaGrocery Demo](https://res.cloudinary.com/practicaldev/image/fetch/s--\\\\_-u8-GYz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://img.youtube.com/vi/MEVGRYElPnU/0.jpg)](https://www.youtube.com/watch?v=MEVGRYElPnU)\\n\\n## [](#database-design)Database Design\\n\\nBut before we start everything else, we'll take a look at our database design. See attached image below.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s---XG-zVbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suilro2gdbj4vei269l4.png)](https://res.cloudinary.com/practicaldev/image/fetch/s---XG-zVbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suilro2gdbj4vei269l4.png)\\n\\nFor our simple grocery app, we'll only require 4 of these tables.\\n\\n*   `app_users`: This is the table where we will store our users, it will have the same primary ID with the supabase auth users. I was not able to use just the `users` table since it cannot be read publicly so I had to create this table.\\n*   `groceries`: All the grocery list of each user will be stored in this table.\\n*   `products`: All of the products created by the user will be stored in this table.\\n*   `grocery_products`: This is where we sort of link the products with a grocery. This is what we call a pivot table.\\n\\n## [](#relationships)Relationships\\n\\nIn relation databases, table relationships are very common thing and is what I love the most about in relational databases.\\n\\nThese two are the most common relationships:\\n\\n*   One to One\\n*   One to Many\\n*   Many to Many (Pivot table)\\n\\nOur `app_users` table has a One to Many relationship with the two tables we created namely `products` and `groceries` since a user can have many grocery listing and can also have many products in that grocery listing.\\n\\nThen for our `groceries` table we have the `created_by` column as a foreign key so that will link to the `app_users` table which will then identify it as part of the user's grocery listing in our application.\\n\\nThe same goes for `products` table with the `created_by` column as a foreign key as well.\\n\\nThen for our pivot table which is a Many to Many relationship, because a grocery listing can have many products and a product can belong to many grocery listing.\\n\\n## [](#supabase-setup)Supabase setup\\n\\nCreate your first Supabase account! Head over to <https://supabase.io/> that is their official website.\\n\\nShould take you to this wonderful dark themed site :D\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--FxKvqXJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsrt633tm7dqj2878mvi.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--FxKvqXJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsrt633tm7dqj2878mvi.png)\\n\\nNow go ahead and click that button \\\"Start your project\\\"\\n\\nIt will show you this auth0 page, so just continue with GitHub to get you registered in no time!\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--sYbUNvsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m917xywuq7m45lri4vv5.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--sYbUNvsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m917xywuq7m45lri4vv5.png)\\n\\nThen just sign in with your GitHub credentials.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--fTTVNWTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqwv19ap6xfdzky7vo2v.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--fTTVNWTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqwv19ap6xfdzky7vo2v.png)\\n\\nOnce you are done with creating your first account, you might already be in your dashboard which will have a listing of all your projects created in Supabase.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--0Sysg1mg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wa1awioz8bot83cw6g7.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--0Sysg1mg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wa1awioz8bot83cw6g7.png)\\n\\nNow click on \\\"New Project\\\" and select any organization as you wish. I'll just select \\\"Personal\\\" which I modified.\\n\\nWhen taken to this page, just fill in the following fields:\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--Ov\\\\_1xZW3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5l4r6pcnznit2hsu629.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--Ov\\\\_1xZW3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5l4r6pcnznit2hsu629.png)\\n\\nName: \\\"Grocery App\\\"\\\\\\nDatabase Password: \\\"s0m3Str0ng_PassWord!@#\\\" (You should use your own password)\\\\\\nRegion: (Select anything that is near you)\\n\\nWhen that is done click on \\\"Create new project\\\"!\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--PeMu6JOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfkmmplom3ot92utnf16.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--PeMu6JOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfkmmplom3ot92utnf16.png)\\n\\nIt will then redirect you to this page.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--ers1q5ea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9roq7vfbt7k4kewubjrf.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ers1q5ea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9roq7vfbt7k4kewubjrf.png)\\n\\nIt will take a few minutes, so please wait :)\\n\\n## [](#creating-tables)Creating Tables\\n\\nWhen the Supabase is setup and you have created a new project. It shall take you up into this page.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--ts5QRlAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5h2msxc3hbylpw7nbyz.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ts5QRlAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5h2msxc3hbylpw7nbyz.png)\\n\\nNow let's click on \\\"Create a new table\\\"\\n\\nWe'll put up all the details on what we have from our database design so this setup should be pretty quick.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--rR5VWS82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ucww2iareby5na636vp.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--rR5VWS82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ucww2iareby5na636vp.png)\\n\\nWhat I would suggest is to uncheck \\\"Include primary key\\\" and just add a primary key later on when the table is created. There is some sort of bug which I cannot have a default value for the `uuid` key to just generate a `uuid` when a new record is created.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--EEi_TlwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8h06rakmolnkciu5jab.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--EEi_TlwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8h06rakmolnkciu5jab.png)\\n\\nThen just click on \\\"Save\\\" at the upper right corner to finally create the table.\\n\\nWhen that table is created, we can proceed to add our primary key which is a `uuid`. Click ahead on that plus icon to add a new column for the table.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--OGMgMoNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxor6o90gzw1020uqyg9.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--OGMgMoNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxor6o90gzw1020uqyg9.png)\\n\\nThen name the column as `id` and it will be a primary key and a type of `uuid` then have the default value \\\"Automatically generate UUID\\\" and click \\\"Save\\\" once that is done.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--KAnthn0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vbl4lcdy5sdaon5y58e9.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--KAnthn0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vbl4lcdy5sdaon5y58e9.png)\\n\\nOnce that is done, we can proceed to create more of those columns that we defined from our database design.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--P6UOgyJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqskongwnjc47rrfbknj.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--P6UOgyJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqskongwnjc47rrfbknj.png)\\n\\nNext is we will create a table for `products` and we'll have a foreign key setup with this table since a product belongs to a user. So we'll learn how to do that quickly.\\n\\nSo given that you already created a primary key `id` and its corresponding column `name` as a varchar, let's create one last field which is `created_by` and setup this as a foreign key that links up with the `app_users` table.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--LioXBEc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxc641voxkq1wzp8b94p.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--LioXBEc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxc641voxkq1wzp8b94p.png)\\n\\nNow click on \\\"Add foreign key relation\\\" button at the bottom\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--tbC8KZeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkmv58z0g31yowj8na59.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--tbC8KZeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkmv58z0g31yowj8na59.png)\\n\\nThen select the table `app_users` and the `id` field, when that is done click \\\"Save\\\"\\n\\nShould then show you it is now linked up with the `app_users` table, so that is pretty amazing.\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--30n6T3D7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4z6nwx60x0m867kf4oof.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--30n6T3D7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4z6nwx60x0m867kf4oof.png)\\n\\nThat is all you need to know for setting up foreign keys. Now the rest of the tables is up to you now. You got this!\\n\\n## [](#flutter-datamodels)Flutter Datamodels\\n\\nWe will be setting up our data models using `freezed` package with `json_serializable` and make sure to have a `builder_runner` setup in your project.\\n\\nThe following is our application datamodels\\\\\\n\\n\\n    import 'package:freezed_annotation/freezed_annotation.dart';\\n\\n    part 'application_models.freezed.dart';\\n    part 'application_models.g.dart';\\n\\n    @freezed\\n    class AppUser with _$AppUser {\\n      const factory AppUser({\\n        required String id,\\n        required String name,\\n        required String email,\\n      }) = _AppUser;\\n\\n      factory AppUser.fromJson(Map<String, dynamic> json) =>\\n          _$AppUserFromJson(json);\\n    }\\n\\n    @freezed\\n    class Grocery with _$Grocery {\\n      const Grocery._();\\n      const factory Grocery({\\n        required String id,\\n        required String name,\\n        @JsonKey(name: 'created_by')\\n            required String createdBy,\\n        @Default([])\\n        @JsonKey(\\n          name: 'grocery_products',\\n          fromJson: Grocery._productsFromJson,\\n          toJson: Grocery._productsToJson,\\n        )\\n            List<GroceryProduct>? groceryProducts,\\n      }) = _Grocery;\\n\\n      bool get hasGroceryProducts => groceryProducts!.length > 0;\\n\\n      List<Product?>? get products {\\n        if (!hasGroceryProducts) return [];\\n\\n        return groceryProducts!.map((e) => e.product).toList();\\n      }\\n\\n      factory Grocery.fromJson(Map<String, dynamic> json) =>\\n          _$GroceryFromJson(json);\\n\\n      static List<GroceryProduct>? _productsFromJson(List<dynamic>? list) {\\n        if (list == null) {\\n          return [];\\n        }\\n\\n        return list.map((e) => GroceryProduct.fromJson(e)).toList();\\n      }\\n\\n      static List<Map<String, dynamic>>? _productsToJson(\\n          List<GroceryProduct>? list) {\\n        if (list == null) {\\n          return [];\\n        }\\n\\n        return list.map((e) => e.toJson()).toList();\\n      }\\n    }\\n\\n    @freezed\\n    class GroceryDto with _$GroceryDto {\\n      const factory GroceryDto({\\n        required String name,\\n        @JsonKey(name: 'created_by') required String createdBy,\\n      }) = _GroceryDto;\\n\\n      factory GroceryDto.fromJson(Map<String, dynamic> json) =>\\n          _$GroceryDtoFromJson(json);\\n    }\\n\\n    @freezed\\n    class Product with _$Product {\\n      const factory Product({\\n        required String id,\\n        required String name,\\n        @JsonKey(name: 'created_by') required String createdBy,\\n      }) = _Product;\\n\\n      factory Product.fromJson(Map<String, dynamic> json) =>\\n          _$ProductFromJson(json);\\n    }\\n\\n    @freezed\\n    class ProductDto with _$ProductDto {\\n      const factory ProductDto({\\n        required String name,\\n        @JsonKey(name: 'created_by') required String createdBy,\\n      }) = _ProductDto;\\n\\n      factory ProductDto.fromJson(Map<String, dynamic> json) =>\\n          _$ProductDtoFromJson(json);\\n    }\\n\\n    @freezed\\n    class GroceryProduct with _$GroceryProduct {\\n      const factory GroceryProduct({\\n        required String id,\\n        @JsonKey(name: 'grocery_id') required String groceryId,\\n        @JsonKey(name: 'product_id') required String productId,\\n        required int quantity,\\n        @JsonKey(name: 'products') Product? product,\\n        @Default('') String? unit,\\n      }) = _GroceryProduct;\\n\\n      factory GroceryProduct.fromJson(Map<String, dynamic> json) =>\\n          _$GroceryProductFromJson(json);\\n    }\\n\\n    @freezed\\n    class GroceryProductDto with _$GroceryProductDto {\\n      const factory GroceryProductDto({\\n        @JsonKey(name: 'grocery_id') required String groceryId,\\n        @JsonKey(name: 'product_id') required String productId,\\n        @Default(1) int quantity,\\n        String? unit,\\n      }) = _GroceryProductDto;\\n\\n      factory GroceryProductDto.fromJson(Map<String, dynamic> json) =>\\n          _$GroceryProductDtoFromJson(json);\\n    }\\n\\n    @freezed\\n    class AuthDto with _$AuthDto {\\n      const factory AuthDto({\\n        required String email,\\n        required String password,\\n        String? name,\\n      }) = _AuthDto;\\n\\n      factory AuthDto.fromJson(Map<String, dynamic> json) =>\\n          _$AuthDtoFromJson(json);\\n    }\\n\\n\\n\\nThe code above will generate us the following files\\n\\n*   [application_models.freezed.dart](https://github.com/carlomigueldy/supagrocery/blob/main/lib/datamodels/application_models.freezed.dart)\\n*   [application_models.g.dart](https://github.com/carlomigueldy/supagrocery/blob/main/lib/datamodels/application_models.g.dart)\\n\\nWe don't have to write everything we just let it auto generate using `build_runner`\\n\\nTo break it down for you regarding our data models, we see we have our primary tables for our grocery application\\n\\n*   AppUser\\n*   Grocery\\n*   Product\\n*   GroceryProduct\\n\\nDTOs\\n\\n*   GroceryDto\\n*   ProductDto\\n*   GroceryProductDto\\n*   AuthDto\\n\\nBut what are those datamodels with \\\"Dto\\\" name on them?\\n\\nDTO simply means Data Transfer Object, I like to use DTOs in any API request that I make.\\n\\n> A Data Transfer Object is an object that is used to encapsulate data, and send it from one subsystem of an application to another. DTOs are most commonly used by the Services layer in an N-Tier application to transfer data between itself and the UI layer.\\n\\n## [](#flutter-setup)Flutter Setup\\n\\nInstall a Flutter application and set it up. Then have the following dependencies to setup Supabase with it.\\n\\npackages:\\n\\n*   [supabase](https://pub.dev/packages/supabase)\\n*   [postgrest](https://pub.dev/packages/postgrest)\\n\\nI added `postgrest` since I want to take all typings from the package and Supabase is using those.\\n\\nWhen that is done, you can proceed to setting up your Supabase client\\\\\\n\\n\\n    import 'package:supabase/supabase.dart';\\n\\n    // use your own SUPABASE_URL\\n    const String SUPABASE_URL = 'https://borayzhhitkyveigfijz.supabase.co';\\n\\n    // use your own SUPABASE_SECRET key\\n    const String SUPABASE_SECRET =\\n        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYxOTMwODI5MCwiZXhwIjoxOTM0ODg0MjkwfQ.Kk1ckyjzCB98aWyBPtJsoWuTsbq2wyYfiUxG7fH4yAg';\\n\\n    final SupabaseClient supabase = SupabaseClient(SUPABASE_URL, SUPABASE_SECRET);\\n\\n\\n\\nThese can be found from your project settings in API tab. To get the SUPABASE_URL\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--k3kHAgSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nskj0ggfwmb6l56n5c7.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--k3kHAgSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nskj0ggfwmb6l56n5c7.png)\\n\\nAnd the SUPABASE_SECRET\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--0yZi7VYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzytkzgiwiqcviwk80yd.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--0yZi7VYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzytkzgiwiqcviwk80yd.png)\\n\\nThen we can make queries when this is already setup!\\n\\n## [](#supabase-queries)Supabase Queries\\n\\nIf you know SQL or familiar with it, it should feel very similar.\\n\\nBut these will be auto generated from Supabase itself, so don't worry in case you don't know how to construct a Supabase query. Just check on the project API which will be dynamically generated for you whenever you update table or change any columns.\\n\\nTo compare it, this is a RAW SQL query.\\\\\\n\\n\\n    SELECT * FROM products\\n\\n\\n\\nAnd this is how you write queries with Supabase in Dart\\\\\\n\\n\\n    supabase.from(\\\"products\\\").select().execute();\\n\\n\\n\\nMake sure you always have the `execute` at the last part otherwise it will not get all data from `products` table.\\n\\nWhat about querying for a single record?\\n\\nIn SQL we have,\\\\\\n\\n\\n    SELECT * FROM products WHERE id = \\\"uuid-string\\\";\\n\\n\\n\\nIn Supabase Dart we have,\\\\\\n\\n\\n    supabase.from(\\\"products\\\").select().eq(\\\"id\\\", \\\"uuid-string\\\").single().execute();\\n\\n\\n\\nThere are more queries to show from your Supabase project, so be sure to check it out here\\n\\n[![image](https://res.cloudinary.com/practicaldev/image/fetch/s--T6XfTl_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv7e4x6k7xs1pd65nf7t.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--T6XfTl_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw\\\\_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv7e4x6k7xs1pd65nf7t.png)\\n\\n## [](#authentication)Authentication\\n\\nIn every application, one thing you can secure your user's data is to have an authentication system. So with Supabase it is very easy to get started with authentication right away as they provide a very simple and intuitive API!\\\\\\n\\n\\n    class AuthenticationService {\\n      final _logger = Logger();\\n      final _localStorageService = locator<LocalStorageService>();\\n\\n      AppUser? _user = null;\\n      AppUser? get user => _user;\\n      bool get hasUser => _user != null;\\n\\n      Future<void> initialize() async {}\\n\\n      Future<AppUser?> signIn({required AuthDto payload}) async {}\\n\\n      Future<AppUser?> signUp({required AuthDto payload}) async {}\\n\\n      Future<void> signOut() async {}\\n\\n      Future<AppUser?> fetchUser({required String id}) async {}\\n\\n      Future<PostgrestResponse> _createUser(User user, AuthDto payload) {}\\n    }\\n\\n\\n\\nTo the code above, to break it down. This is dependent with the local storage service (Shared Preferences) which is where we will store out JWT auth token / refresh token and the Logger which can be useful for debugging. So I like to have a Logger with me.\\n\\nWe have a private propery `_user` which is where we store our user with its own getter and a boolean getter to check if the user is logged in if the `_user` property is not null.\\n\\nInside the `initialize()` method is where we will perform auto login. So if the user has a refresh token stored in their local storage, we will proceed to login this user and get user data and store it in `_user` property so the `hasUser` boolean getter will be true.\\\\\\n\\n\\n    Future<void> initialize() async {\\n        final accessToken = await _localStorageService.getItem('token');\\n        _logger.i(accessToken);\\n\\n        if (accessToken == null) {\\n          return;\\n        }\\n\\n        final response = await supabase.auth.api.getUser(accessToken);\\n\\n        if (response.error != null) {\\n          return;\\n        }\\n\\n        final user = response.data!;\\n        _logger.i(user.toJson());\\n        await fetchUser(id: user.id);\\n      }\\n\\n\\n\\nNext is the `signIn` method which has an argument of `AuthDto` that contains `email` and `password` field. When a user provided correct and existing email, we will take their access token and store it in local storage.\\\\\\n\\n\\n    Future<AppUser?> signIn({required AuthDto payload}) async {\\n        final response = await supabase.auth.signIn(\\n          email: payload.email,\\n          password: payload.password,\\n        );\\n\\n        if (response.error != null) {\\n          _logger.e(response.error!.message);\\n          return null;\\n        }\\n        _logger.i(response.data);\\n        await _localStorageService.setItem('token', response.data!.accessToken);\\n        return await fetchUser(id: response.data!.user!.id);\\n      }\\n\\n\\n\\nWe use the `signUp` method whenever we have a new user that wants to use our app. When a new user is created, we take the access token and save it to local storage. We will also proceed to creating a new user record in the `app_users` table but it will be in a different method called `_createUser`\\\\\\n\\n\\n    Future<AppUser?> signUp({required AuthDto payload}) async {\\n        final response =\\n            await supabase.auth.signUp(payload.email, payload.password);\\n\\n        if (response.error != null) {\\n          _logger.e(response.error!.message);\\n          return null;\\n        }\\n\\n        final user = response.data!.user!;\\n        _logger.i(user.toJson());\\n        await _createUser(user, payload);\\n        await _localStorageService.setItem('token', response.data!.accessToken);\\n        return await fetchUser(id: user.id);\\n      }\\n\\n\\n\\n`_createdUser` will create a new user record inside `app_users` table.\\\\\\n\\n\\n    Future<PostgrestResponse> _createUser(User user, AuthDto payload) {\\n        return supabase\\n            .from(\\\"app_users\\\")\\n            .insert(\\n              AppUser(\\n                id: user.id,\\n                name: payload.name!,\\n                email: user.email,\\n              ),\\n            )\\n            .execute();\\n      }\\n\\n\\n\\nThen the `signOut` which is already self explanatory. Here we just remove the access token from the local storage when user decides to `signOut`\\\\\\n\\n\\n    Future<void> signOut() async {\\n        final response = await supabase.auth.signOut();\\n\\n        if (response.error != null) {\\n          _logger.e(response.error!.message);\\n          return;\\n        }\\n        _logger.i(response.rawData);\\n        await _localStorageService.removeItem('token');\\n        return;\\n      }\\n\\n\\n\\nAnd lastly we have the `fetchUser` method, that will fetch the user record that is currently authenticated so we'll have their information across the entire application whenever we need it.\\\\\\n\\n\\n    Future<AppUser?> fetchUser({required String id}) async {\\n        final response = await supabase\\n            .from(\\\"app_users\\\")\\n            .select()\\n            .eq('id', id)\\n            .single()\\n            .execute();\\n\\n        _logger.i(\\n          'Count: ${response.count}, Status: ${response.status}, Data: ${response.data}',\\n        );\\n\\n        if (response.error != null) {\\n          _logger.e(response.error!.message);\\n          return null;\\n        }\\n\\n        _logger.i(response.data);\\n        final data = AppUser.fromJson(response.data);\\n        _user = data;\\n\\n        return data;\\n      }\\n\\n\\n\\n## [](#supabase-service)Supabase Service\\n\\nWe finished handling our data models and authentication, then we can create and handle read write operations for our application. Thanks to the concept of abstraction, we don't have to write up a lot of code for the same functionality, we will be writing less code and have this functionality extended to other service that requires it.\\n\\nThe following will be the abstract class that handles CRUD operations (Cread, Read, Update, Delete)\\\\\\n\\n\\n    import 'package:logger/logger.dart';\\n    import 'package:postgrest/postgrest.dart';\\n    import 'package:supagrocery/app/app.locator.dart';\\n    import 'package:supagrocery/app/supabase_api.dart';\\n    import 'package:supagrocery/services/authentication_service.dart';\\n\\n    abstract class SupabaseService<T> {\\n      final _authService = locator<AuthenticationService>();\\n      final _logger = Logger();\\n\\n      String tableName() {\\n        return \\\"\\\";\\n      }\\n\\n      Future<PostgrestResponse> all() async {\\n        _logger.i(tableName());\\n        final response = await supabase\\n            .from(tableName())\\n            .select()\\n            .eq('created_by', _authService.user!.id)\\n            .execute();\\n        _logger.i(response.toJson());\\n        return response;\\n      }\\n\\n      Future<PostgrestResponse> find(String id) async {\\n        _logger.i(tableName() + ' ' + id);\\n        final response = await supabase\\n            .from(tableName())\\n            .select()\\n            .eq('id', id)\\n            .single()\\n            .execute();\\n        _logger.i(response.toJson());\\n        return response;\\n      }\\n\\n      Future<PostgrestResponse> create(Map<String, dynamic> json) async {\\n        _logger.i(tableName() + ' ' + json.toString());\\n        final response = await supabase.from(tableName()).insert(json).execute();\\n        _logger.i(response.toJson());\\n        return response;\\n      }\\n\\n      Future<PostgrestResponse> update({\\n        required String id,\\n        required Map<String, dynamic> json,\\n      }) async {\\n        _logger.i(tableName() + ' ' + json.toString());\\n        final response =\\n            await supabase.from(tableName()).update(json).eq('id', id).execute();\\n        _logger.i(response.toJson());\\n        return response;\\n      }\\n\\n      Future<PostgrestResponse> delete(String id) async {\\n        _logger.i(tableName() + ' ' + id);\\n        final response =\\n            await supabase.from(tableName()).delete().eq('id', id).execute();\\n        _logger.i(response.toJson());\\n        return response;\\n      }\\n    }\\n\\n\\n\\nThis abstract class has a dependency on the `AuthenticationService` that we just created so we'll be able to attach the user's ID every time they create records in our database.\\n\\nAnd we'll have the `tableName` to override for each feature services that requires it. So when creating our `ProductService` and `GroceryService`, we simply extend this class and that override `tableName` with their corresponding table names.\\n\\nThis is an example for `ProductService`\\\\\\n\\n\\n    import 'package:postgrest/postgrest.dart';\\n    import 'package:supagrocery/app/app.locator.dart';\\n    import 'package:supagrocery/app/supabase_api.dart';\\n    import 'package:supagrocery/datamodels/application_models.dart';\\n    import 'package:supagrocery/services/authentication_service.dart';\\n    import 'package:supagrocery/services/supabase_service.dart';\\n\\n    class ProductService extends SupabaseService<Product> {\\n      final _authService = locator<AuthenticationService>();\\n\\n      @override\\n      String tableName() {\\n        return \\\"products\\\";\\n      }\\n\\n      Future<PostgrestResponse> fetchProducts() async {\\n        return await supabase\\n            .from(\\\"products\\\")\\n            .select(\\\"*\\\")\\n            .eq('created_by', _authService.user!.id)\\n            .execute();\\n      }\\n    }\\n\\n\\n\\nThis will also have the methods from `SupabaseService` abstract class that we created and won't have to rewrite anything of it, we only need to override the `tableName` and return the name of that table. With that inside the `ProductService` we can then write up any method that is relevant to the business logic.\\n\\nThen this is our `GroceryService`\\\\\\n\\n\\n    import 'package:postgrest/postgrest.dart';\\n    import 'package:supagrocery/app/app.locator.dart';\\n    import 'package:supagrocery/app/supabase_api.dart';\\n    import 'package:supagrocery/datamodels/application_models.dart';\\n    import 'package:supagrocery/services/supabase_service.dart';\\n\\n    import 'authentication_service.dart';\\n\\n    class GroceryService extends SupabaseService<Grocery> {\\n      final _authService = locator<AuthenticationService>();\\n\\n      @override\\n      String tableName() {\\n        return \\\"groceries\\\";\\n      }\\n\\n      Future<PostgrestResponse> fetchGroceryList({required String id}) async {\\n        return await supabase\\n            .from(\\\"groceries\\\")\\n            .select(\\\"*, grocery_products(*, products(*) )\\\")\\n            .eq('id', id)\\n            .eq('created_by', _authService.user!.id)\\n            .single()\\n            .execute();\\n      }\\n\\n      Future<PostgrestResponse> addProductsToList({\\n        required String id,\\n        required List<Product?> products,\\n      }) async {\\n        return await supabase\\n            .from(\\\"grocery_products\\\")\\n            .insert(\\n              products.map((e) {\\n                return GroceryProductDto(\\n                  groceryId: id,\\n                  productId: e!.id,\\n                ).toJson();\\n              }).toList(),\\n            )\\n            .execute();\\n      }\\n\\n      Future<PostgrestResponse> markProductChecked(\\n          {required GroceryProduct payload}) async {\\n        return await supabase\\n            .from(\\\"grocery_products\\\")\\n            .update(payload.toJson())\\n            .eq('id', payload.id)\\n            .execute();\\n      }\\n\\n      Future<PostgrestResponse> removeProduct({required String id}) async {\\n        return await supabase\\n            .from(\\\"grocery_products\\\")\\n            .delete()\\n            .eq('id', id)\\n            .execute();\\n      }\\n    }\\n\\n\\n\\n## [](#summary)Summary\\n\\nWe covered database design, setting up Supabase, implementing an authentication system with Supabase API, and using abstraction to easily implement new features.\\n\\nI hope this gave you an idea and was useful in any sort of way.\\n\\nThanks for reading and hope you enjoyed!\\n\\n[Link to Repository](https://github.com/carlomigueldy/supagrocery)\\n\",\"timestamp\":1636676641,\"title\":\"Building a simple Grocery App in Flutter with Supabase\"},\"digest\":\"4eu5OlKhb3XGQs_WlhHhWirIzrADhQxnDejGIpQN7-g\",\"authorship\":{\"contributor\":\"0x3E8c686F499C877D8f4aFB1215b6f0935796b986\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XNAfCibxrmGjSr-VHADLIVoKcpjQ6AvgUiRVqATl37k\\\",\\\"y\\\":\\\"3RuY7Uw61mZNEnJyyzr7ObM928gt-QoWvGAdLDb2gy4\\\"}\",\"signature\":\"lek58g8_ioEz4pTGNQ5IgvQQRaWIKRACCfdIe3oITfmdiQEfrWLUtOz2K4HuTsqTBCBxD6Y1XjQwqBvCeuSi0g\",\"signingKeySignature\":\"0xc823d2ab2ee5864fc5495382efb960b4461c3fb598b3be4e5e068c6312ab60ce014c7378c1f02beed8fce37236dc1e3eb8dd28a6f911b33ec4172a1fa8b17f101b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XNAfCibxrmGjSr-VHADLIVoKcpjQ6AvgUiRVqATl37k\\\",\\\"y\\\":\\\"3RuY7Uw61mZNEnJyyzr7ObM928gt-QoWvGAdLDb2gy4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"4eu5OlKhb3XGQs_WlhHhWirIzrADhQxnDejGIpQN7-g\"}"