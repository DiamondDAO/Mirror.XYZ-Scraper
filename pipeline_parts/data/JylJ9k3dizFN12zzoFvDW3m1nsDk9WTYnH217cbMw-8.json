"{\"content\":{\"body\":\"An awesome part of using a dApp is the fact that you can connect your wallet and and be logged in or signed up for the application right away. The problem that this may bring is that wallets are this large string of alphanumeric characters and don't make the best usernames. See example below:\\n\\n`0xd2f8ed343386FB042178c7e133A837CB8043d0dc`\\n\\nEw right? This isn't the greatest way of displaying a username. You could do something like create a form and ask for a preferred username *or* we could leverage the decentralized web and look at using existing ENS usernames in our applications.\\n\\nLet's take a look at how we can do this using React and the Ethers library.\\n\\nI started off by scaffolding out a react application using:\\n\\n`npx create-react-app`\\n\\nThen I installed a dependency I need using yarn. (You can use npm instead if you prefer).\\n\\n`yarn add ethers`\\n\\nAfterwards I went into App.js and got rid of everything inside the div and then imported the ethers library and useState from React to keep track of the username of the signed in person. If you want to code along with this blog then here is what my App.js looked like:\\\\\\\\\\n\\n```\\nimport './App.css';\\nimport { useState } from 'react';\\nimport { ethers } from 'ethers';\\n\\nfunction App() {\\n  const [name, setName] = useState(\\\"\\\");\\n  return (\\n    <div className=\\\"App\\\">\\n      <h1>{name}</h1>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n```\\n\\nNot too much going on just yet. Let's add a button inside of our app div and give it a function that can execute on click.\\\\\\\\\\n\\n```\\n<div className=\\\"App\\\">\\n      <button className =\\\"button\\\" onClick={() => handleWalletConnect()}>connect</button>\\n      <h1>{name}</h1>\\n    </div>\\n```\\n\\nSo this handleWalletConnect function is going to accomplish a couple of things. We want to make sure we get access to the users wallet as well as their ens username if they have one. Here is the function which I'll break down line by line:\\\\\\\\\\n\\n```\\nconst [name, setName] = useState(\\\"\\\");\\n  const handleWalletConnect = async () => {\\n    const { ethereum } = window;\\n    if(ethereum) {\\n      const provider = new ethers.providers.Web3Provider(ethereum)\\n      await provider.send(\\\"eth_requestAccounts\\\", []);\\n      const signer = provider.getSigner()\\n      const address = await signer.getAddress()\\n      const ens = await provider.lookupAddress(address);\\n      if (ens !== null) {\\n        setName(ens)\\n      } else {\\n        setName(address)\\n      }\\n    } else {\\n      alert('no wallet detected!')\\n    }\\n  }\\n```\\n\\nThe first thing we're doing is destructuring the Ethereum object from the Window:\\n\\n`const { ethereum } = window`\\n\\nThis is something that is injected into the window from a wallet like Metamask. As long as it exists we will continue on with the rest of our code, otherwise we want to alert the user that we aren't detecting any wallets in their browser.\\n\\nNext up is creating a provider that will give us access to a lot of methods that makes our life easier.\\n\\n`const provider = new ethers.providers.Web3Provider(ethereum)`\\n\\nA provider is a nice little abstraction of the connection to the Ethereum network. We're leveraging the work that the nice folks at Ethers have already done for us instead of reinventing the wheel.\\n\\nThe first thing we want to do with our provider is ask for permission to connect to the users wallet which is taken care of with this line:\\n\\n`await provider.send(\\\"eth_requestAccounts\\\", [])`\\n\\nThis sends a request over to the wallet asking the user to allow connection with our dApp.\\n\\nNext we want to get information about the user. We do this by creating a signer object:\\n\\n`const signer = provider.getSigner()`\\n\\nThis gives us access to more methods like this handy one for getting the signer's address:\\n\\n`const address = await signer.getAddress()`\\n\\nNow in theory we have everything we need to start building out our dApp. We have the address but we want to make things a little more human readable. Our provider has a nice little method of doing a reverse lookup to see if the Ethereum address is linked to an ENS username and that's done in the line below:\\n\\n`const ens = await provider.lookupAddress(address)`\\n\\nThis will return the ens username if it exists otherwise we will get back null. Now we can either set the name to be the username or just fall back to the address if they do not have an ens username.\\n\\nNow that we can access our user's decentralized identity we can allow for a greater user experience instead of forcing our users to fill out yet another form on profile details for a new service.\\n\\nThe final code for this can all be found on this repository:\\n\\n[https://github.com/Rahat-ch/reactensusernames](https://github.com/Rahat-ch/reactensusernames)\\n\\nYou can also watch a quick video of this tutorial below:\\n\\n[https://youtu.be/qQBJBJGv_ZA](https://youtu.be/qQBJBJGv_ZA)\\n\\n\",\"timestamp\":1640101373,\"title\":\"Resolving ENS Usernames in React\"},\"digest\":\"NDiKaw6jPMHnkwuQd2kaEdS-I_a662Xkl-CI6GbufLw\",\"authorship\":{\"contributor\":\"0x322Af0da66D00be980C7aa006377FCaaEee3BDFD\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"dYyaUwbATQD54Xc_tL93bl1bkk3wVB0OSCXORdSXJ-M\\\",\\\"y\\\":\\\"9_GbSev53SGQpWqHBMwi0oX9vdfSoIthLyILQCczV2g\\\"}\",\"signature\":\"1hdKM1HYOc89jd20DFMqWKgomrl9DSH1jLBqUo2Qn3hCEKrbfwSvOwBmmVpqIsX7pqoOjBegVplTA7jzqBLKOg\",\"signingKeySignature\":\"0x2e023d7b6e95ca0d5b6fd1398d82fc04ee742b2313e40af24f00aa7d202c2927712e92e6c3c88b1f097df5c5bada6bc935575824553d308d3fac04e8fb4af8f91b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"dYyaUwbATQD54Xc_tL93bl1bkk3wVB0OSCXORdSXJ-M\\\",\\\"y\\\":\\\"9_GbSev53SGQpWqHBMwi0oX9vdfSoIthLyILQCczV2g\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"NDiKaw6jPMHnkwuQd2kaEdS-I_a662Xkl-CI6GbufLw\"}"