"{\"content\":{\"body\":\"## Introduction\\n\\nGnosis Safe is a brilliant product, and the unanimous choice for protocol team multisigs throughout Ethereum. But without care from owners, there are a few lurking threats when it comes to MEV protection:\\n\\n1. 3rd party executor threat\\n2. Public mempool threat\\n3. Uncled block threat\\n\\nProtocols like Yearn specifically are large targets for MEV given the massive volume of swaps that happen on a daily basis (some days upwards of $1,000,000). Up until now, it has been a struggle to implement the right human-level processes to guard against these threats and stay safe from giving up MEV opportunities.\\n\\nThis post presents \\\"**Stealth Safe Guard**\\\", a newly developed guard which aims to solve all 3 of these threats which can make interactions with your safe vulnerable.\\n\\n## 3rd Party Executor Threat\\n\\n### Problem definition:\\n\\nGnosis Safe transactions can be executed by anyone that has the required signatures, which are publicly available though the official gnosis API & UI. This opens up an attack vector where a malicious actor can add custom transactions before and after the multisig tx execution and grab it's MEV.\\n\\n### Solution:\\n\\nGnosis Safe >=1.3.0 solves this by letting the safe assign a guard contract that can be set to only allow user-defined trusted addresses to execute the safe transactions. More details on why [here](https://blog.gnosis.pm/gnosis-safe-mev-how-to-mitigate-it-347e13535e34).\\n\\nIn [StealthSafeGuard](https://github.com/yearn/hardhat-monorepo/blob/main/packages/strategies-keep3r/contracts/guard/StealthSafeGuard.sol) this is the [StealthRelayer](https://github.com/yearn/hardhat-monorepo/blob/main/packages/stealth-txs/contracts/StealthRelayer.sol).\\n\\n## Public Mempool Threat\\n\\n### Problem definition:\\n\\nExecuting safe transactions through the public mempool opens up the same threat as stated above, anyone can see the tx and quickly generate a flashbots bundle that will grab the MEV from it.\\n\\n### Solution:\\n\\n[StealthSafeGuard](https://github.com/yearn/hardhat-monorepo/blob/main/packages/strategies-keep3r/contracts/guard/StealthSafeGuard.sol) requires executors to go though the [StealthRelayer](https://github.com/yearn/hardhat-monorepo/blob/main/packages/stealth-txs/contracts/StealthRelayer.sol) contract, which protects against the txs getting into the public mempool by adding a bonded reward to anyone that sees the tx and reports it's secret hash, the tx will then not execute and take the penalty away from the executor. Thanks to the Tenderly team we have a set of automatic scripts looking for these type of txs that will immediately report them and pay the miner the full executor penalty.\\n\\n## Uncled Block Threat\\n\\n### Problem definition:\\n\\nEven if all of the above is done correctly there is still a way for our tx to end up in the wrong hands. The most common way for this to happen is when our stealth tx ends up getting included ONLY into an uncled block. This allows an attacker to grab our tx from the uncled block and include it into the following block.\\n\\n### Solution:\\n\\nThere is an easy way to prevent this from happening which is requiring our tx to only succeed on a specific block number. **StealthRelayer** can be set to require the executor to send a target block number in the execution arguments. Doing this with flashbots also allows us to target the block from the bundle configuration and the smart contract to avoid reverted txs. Block protection can be disabled for networks not supported by Flashbots (such as FTM).\\n\\n## Description\\n\\n### useful links:\\n\\n* [what is gnosis safe guard?](https://help.gnosis-safe.io/en/articles/5496893-add-a-transaction-guard)\\n* [some official guard example contracts](https://github.com/gnosis/safe-contracts/tree/main/contracts/examples/guards)\\n\\n**StealthSafeGuard** is a Gnosis safe guard contract that allows multisig transactions to be safely signed on the UI without the risk of a 3rd party executing it, it also makes sure we execute using a private mempool + block protection to avoid getting sandwiched and|or uncle-bandit attacked by using [bonded-stealth-txs](https://github.com/lbertenasco/bonded-stealth-tx).\\n\\nThis is achieved by requiring that the `msg.sender` on **StealthSafeGuard** is our **StealthRelayer** and our `StealthRelayer.caller()` to exist on `StealthSafeGuard.executors()`.\\n\\n## Deployment & Setup\\n\\n### Guard\\n\\n**StealthSafeGuard** can be easily deployed by with the following script: [/guard/00-stealth-safe-guard-deploy.ts](https://github.com/yearn/hardhat-monorepo/blob/main/packages/strategies-keep3r/scripts/guard/00-stealth-safe-guard-deploy.ts)\\n\\nRemember to correctly set your `StealthRelayer` address on the [utils/contracts.ts](https://github.com/yearn/strategies-keep3r/blob/main/utils/contracts.ts#L73) file, and to correctly input your safe address which will be assigned as the `Manager` role, since the `msg.sender` will get the `Owner` role.\\n\\n### Executor\\n\\nThe account(s) you'll use to execute the safe transactions will need to perform a few transactions, including bonding some ETH into the **[StealthVault](https://github.com/yearn/hardhat-monorepo/blob/main/packages/stealth-txs/contracts/StealthVault.sol)**, to be able to properly execute through the **StealthRelayer.** Besides this, the *Governor* or *Manager* of the **StealthSafeGuard** would need to add these account(s) as executors. You can check on contract interactions how to perform this. The *Executor's* private key will also be used in the scripts below.\\n\\n### Contract interactions\\n\\n* Executor needs to call `bond(1 ether)`\\n* Used by the **StealthRelayer** to validate executor bonds and *StealthHash*\\n* Executor needs to enable `StealthRelayer` as a `StealthVault.job`\\n\\n### StealthRelayer\\n\\n* *Governor* needs to call `.addJob(GnosisSafeAddress)`\\n* *Governor* can disable block protection by calling `setForceBlockProtection(bool)`\\n  * block protection should be disabled for chains where flashbots is not supported\\n* *Executor* can then call `execute(GnosisSafeAddress, data, stealthHash, blockNumber)` using a flashbots bundle\\n  * or `executeWithoutBlockProtection(GnosisSafeAddress, data, stealthHash)` on non flashbots chains\\n\\n### GnosisSafe\\n\\n* Should be version `â‰¥1.3.0`\\n* Safe should execute on itself `setGuard(StealthSafeGuard)`\\n\\n### StealthSafeGuard\\n\\n* *Governor* should call `addExecutor(executor)`\\n* *Governor* can call `setOverrideGuardChecks(true)` to disable all guard checks in case of brick\\n\\n## Troubleshooting & Safeguards\\n\\nAdding a guard into a safe is an extremely delicate action, since it can break/brick the safe completely. (you'll get locked out of your safe and lose all the assets it holds). *We encourage new users to try this out on a brand new safe to get the hang of it.*\\n\\n**StealthSafeGuard** has a few protections in place which make sure you'll never get locked out of your safe.\\n\\n1. **StealthSafeGuard**'s owner should NOT be the same safe it's protecting\\n   1. you should instead set the safe as the manager role.\\n      1. `StealthSafeGuard.setPendingManager(safe)` as owner (second safe)\\n      2. `StealthSafeGuard.acceptManager()` as main safe\\n   2. **StealthSafeGuard**.*owner* should be a separate safe which only purpose is to salvage the main safe in case of an issue.\\n2. Both *Owner* and *Manager* can disable ALL checks (**StealthRelayer** and *Executor* requirements) by toggling a flag\\n   1. `StealthSafeGuard.setOverrideGuardChecks(true)` as owner (second safe)\\n   2. `StealthSafeGuard.setOverrideGuardChecks(false)` as owner (second safe)\\n      1. remember that the flag needs to be manually set back to false\\n3. Both *Owner* and *Manager* can change the **StealthRelayer** by calling `StealthSafeGuard.setStealthRelayer(address _newStealthRelayer)`\\n4. Both *Owner* and *Manager* can add and remove executors addresses\\n   1. `StealthSafeGuard.addExecutor(address _executor)`\\n   2. `StealthSafeGuard.removeExecutor(address _executor)`\\n\\n## Automation\\n\\nExecution can be automated by running a script that every X minutes:\\n\\n1. queries gnosis safe API for queued txs and it's confirmations\\n2. generates the safe tx\\n3. appends and encodes the signatures to the tx\\n4. generates the safe execution raw transaction\\n5. grabs gas and network details\\n6. generates stealth hash and assign target block number\\n7. signs it with the executor EOA\\n8. creates, simulates and broadcasts the bundle to flashbots\\n9. loops though 5. and 8. until the bundle is included in a block\\n\\nYou can see an example on: [scripts/guard/01-stealth-relayer-guard-get-signatures-and-execute.ts](https://github.com/yearn/hardhat-monorepo/blob/main/packages/strategies-keep3r/scripts/guard/01-stealth-safe-guard-get-signatures-and-execute.ts)\\n\\n## Manual Signing and Execution\\n\\nThe following command will prompt you to enter the *Safe address* and *safeTxHash*, then output the signed message.\\n\\n`npx hardhat run` [scripts/guard/02-stealth-relayer-guard-sign.ts](https://github.com/yearn/strategies-keep3r/blob/main/scripts/guard/02-stealth-relayer-guard-sign.ts) `--network rinkeby`\\n\\nThe signed message can be added into `offchainSignatures` on: [scripts/guard/01-stealth-relayer-guard-get-signatures-and-execute.ts](https://github.com/yearn/hardhat-monorepo/blob/main/packages/strategies-keep3r/scripts/guard/01-stealth-safe-guard-get-signatures-and-execute.ts)\\n\\nThen you can run the script to grab the first queued safe Tx, and it will grab signatures from the gnosis API and add the `offchainSignatures` to the transaction, and submit it to flashbots (if on mainnet) though the stealth relayer. `npx hardhat run scripts/guard/01-stealth-relayer-guard-get-signatures-and-execute.ts --network rinkeby`\\n\\n## Improvements\\n\\n* reduce gas usage\\n* add useful events such as success execution and hash+nonce\\n\\n## Credits\\n\\n**StealthSafeGuard** exists thanks to the efforts of the Flashbots, Gnosis and Yearn teams.\\n\\n* Gnosis team added the guard system on their [safe-contracts 1.3.0 release](https://github.com/gnosis/safe-contracts/releases/tag/v1.3.0)\\n* Flashbots team provides the basis on which stealth-tx can be safely and accurately executed\\n\\n### Interested in building similar solutions?\\n\\nðŸ’¡ [Collaborate with us at yearn!](https://yearnfinance.notion.site/)\\n\\n### Interested in having this for your multisig, but not sure how?\\n\\n\\\\*git gud. \\\\*jk, you can contact any yearn moderators via our [discord](https://discord.yearn.finance) or [telegram](https://t.me/yearnfinance) and ask to speak with our own stealth expert skeletor_spaceman or any of our other yMechanic team members on telegram, we would be happy to guide you.\",\"timestamp\":1636995026,\"title\":\"Stealth Safe Guard: MEV Protection for your Gnosis Safe\"},\"digest\":\"mK1gKxj_2b6DfTHvUgYI0QwejUT7h9_CR2SAJWrcYhE\",\"authorship\":{\"contributor\":\"0x71B1b7e60eF9d07638C1A9799F09213e7114Fee0\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"15mqldOogCpLjC-07flES4AYFGurFy-ETOmc7EeVJxE\\\",\\\"y\\\":\\\"HUoveT4N7jdX7fbH0i-T0u2SihSTUB3YxM23sNrbhwg\\\"}\",\"signature\":\"jHJXdTuSqjXPHIhNmqPl5T3y0NfDbIxkZM6JnPAHBZzgZfH_foEdz-kp06Wkvf7GGzlap4v5K7FIzNY4Lmbr8g\",\"signingKeySignature\":\"0x726367c8b4ba9522cbba3a37e64075dbe3fed26eebf57d7da9cd7150f630b0de1162b2119ebac578deedce22f967e4d9179c734131cbe8538863535db2d40b0000\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"15mqldOogCpLjC-07flES4AYFGurFy-ETOmc7EeVJxE\\\",\\\"y\\\":\\\"HUoveT4N7jdX7fbH0i-T0u2SihSTUB3YxM23sNrbhwg\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"8eLuiLP_e0JXCnvGDNJqaJNovE-Mh2EQXLf2uIiSwVE\"}"