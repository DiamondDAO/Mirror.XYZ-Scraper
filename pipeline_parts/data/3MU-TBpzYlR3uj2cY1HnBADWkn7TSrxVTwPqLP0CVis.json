"{\"content\":{\"body\":\"*This post was originally published March 17, 2019 on Medium.*\\n\\n\\n---\\n\\n*Taipei Ethereum Meetup presentation*\\n\\nVitalik recently presented his thoughts on Rollups and the problem of Data Availability as related to Layer 2 solutions in both Ethereum 1.0 and 2.0. His talk contains some fascinating constructions that will likely see further iterating from teams in the space. This a crucial area of research because trust-minimised blockchain scaling mechanisms are still sorely needed for projects looking to grow their userbase. If you have the time I recommend listening to the full talk.\\n\\n[Recorded Livestream](https://www.youtube.com/watch?v=mOm47gBMfg8)\\n\\n[Slides](https://docs.google.com/presentation/d/1EVjrZhoxw-ikzelFGGv7czxuJsIIWfl5I-CPIlnjsME/edit#slide=id.p)\\n\\n## PREVIOUS RESEARCH\\n\\nThe foundational concepts that this talk builds on first surfaced in an August 2018 post by Vitalik, crediting ‚Äú[availability engines](https://vitalik.ca/general/2018/08/26/layer_1.html)‚Äù to Justin Drake. In September 2018, an [ETHresearch post](https://vitalik.ca/general/2018/08/26/layer_1.html) expanding on the topic received significant discussion. In January 2019 a collaboration between EF researchers and Matter Labs produced a proof of concept called Ignis on the Rinkeby testnet. Here‚Äôs the [original post](https://medium.com/matter-labs/introducing-matter-testnet-502fab5a6f17) from the teams and a [Trustnodes interview / demo](https://www.trustnodes.com/2019/01/06/zksnarks-plasma-eth-scaling-solution-of-500-tx-s-launched-on-testnet).\\n\\nHere is a great talk from ETHDenver 2019 by Alex Gluchowski and Kent Barton with more details on the Rollup mechanism: [Scaling With Zero Knowledge](https://www.youtube.com/watch?time_continue=1&v=aEqhjpjoaEA). There is also a good exploration on the differences between SNARKs and STARKs.\\n\\nFinally, it looks like Matter Labs is continuing their work on scaling via snarks thanks to an EF grant ‚Äî check the [announcement here](https://medium.com/matter-labs/grant-from-the-ethereum-foundation-for-matter-labs-64338f3dd938) along with more resources.\\n\\nI‚Äôve typed up a rough transcript of Vitalik‚Äôs talk below that tries to capture the essence of each section. Hopefully people find this useful.\\n\\n## BACKGROUND / MASTERCOIN\\n\\n* Here‚Äôs a new kind of L2 construction ‚Äî not the same as L2 for scalability (plasma / state channels) ‚Äî which uses BC as a place for data storage and not computation. Computation can be done with zk-snarks.\\n\\n![](https://miro.medium.com/max/866/1\\\\*EqWnr0BfnX0u2auIExFjZQ.png)\\n\\n* Some history: think of Mastercoin as a meta protocol on top of BTC. Defines a different set of rules for interpreting tx. BTC is data store but not state execution. Special txs can be denoted by a flag.\\n* Drawbacks to Mastercoin: Not light client friendly (need BTC blockchain and Mastercoin node). Activity in MC protocol cannot influence BTC chain, which limits overall functionality\\n* Now we have ETH 1.0 and soon‚Ñ¢ we will have ETH 2.0 ‚Äî can we do something similar to Mastercoin?\\n\\n## ZK ROLLUP\\n\\n* ZK rollup (not ignis, not ignis plasma) can help with scalability by a factor of 30 today, higher in the future. How it works: Onchain contract only stores one value: the merkle root of a merkle tree\\n\\n![Merkle constructions will save us all](https://miro.medium.com/max/594/1\\\\*4SBIap20vNRisoKPm2qGhg.png)\\n\\n* Users send txs, which are gathered by a special actor called a relayer and put into a zKsnark. Publishes previous state, new state which includes transactions that were bundled together\\n* Is this similar to Plasma? (both are contracts that hold merkle roots) Difference is that Plasma needs complex exit games / withdrawal periods in order to deal with possibility of malicious operators (data availability)\\n* No data availability problem with zK Rollup because all transactions are published to chain, without signatures\\n* 13 bytes per publish X 68 gas per byte = **884 gas** versus current cost of **21k** for simple tx currently\\n* Instead of having ETH mainchain verify each signature transaction, the zKsnark proves tx validity. Computation and storage is moved offchain. Merkle root stays onchain. This avoids central operator / relayer. Because the data is published onchain, anyone can verify.\\n* This can be improved by not including nonce, removes 2 bytes (11 bytes per publish X 68 gas per byte = **748 gas**)\\n* Note: instant deposits and withdrawals. Withdrawals: Coins are moved from their merkle Branch to mainchain and then merkle root updates. A deposit would be the inverse, but additionally gives the user an account ID. There would possibly be many floating around.\\n* This construction could increase simple payments from **15 tx/s** to **500 tx/s**, relatively safely.\\n* One takeaway from Stanford 1.x workshop ([recorded livestream](https://www.youtube.com/watch?v=BpLyO8Q4ZZo)) was that data is overpriced relative to other operations. Though there are concerns with state, adding 1 kb to the blocksize will not make things much worse. Possibility that in Istanbul the gas cost of simple tx will be reduced, thus increasing throughput of ETH 1.x to over **1000 tx/sec**\\n\\n## TAKING ROLLUP FURTHER\\n\\n* Rollup should be able to support more complex state transitions, including things like Uniswap, high performance exchanges, multiple tokens, privacy preserving computation, ENS ‚Äî all using ‚ÄúSNARK + publish tree details‚Äù paradigm.\\n\\n## ZK ZK ROLLUP (Bose‚ÄìEinstein condensate üôÉ)\\n\\n* Basic idea: take ZK rollup but with mini version of zcash inside. (primer on zCash: users publish txs with SNARKs saying ‚ÄúI have a valid spend certificate for some coin hash in the state. Here is a new coin hash‚Äù\\n* zCash, continued ‚Äî user has secret S, coin hash: h(s + 1), spend certificate: h(s + 2). SNARK proves that the spend certificate belongs to an existing coin, but not which one. Verification function should also check that spend certificate has not been revealed\\n* The relayer wouldn‚Äôt be publishing txs, it would be publishing receipts (105 bytes X 68 gas = **7140 gas** per tx). Here we put a single SNARK which verifies that for every single tx included there is a SNARK attached (one level of recursion). Verifying SNARKs onchain, it would require 500k gas\\n\\n## BEACON CHAIN ‚Äî PHASE 1\\n\\n* What if we wanted to do more? Enter Beacon Chain phase 1 of ETH 2.0. Shard chains as data-only chains means **2.8 MB/sec** of data availability\\n* Each zK zK rollup is **105 bytes** / meaning **27k** privacy preserving transactions / sec if fully consuming the 2.8 MB. If we don‚Äôt care about privacy then that 27k increases by a factor of 10\\n* Get rekt scamcoins LOL VB can‚Äôt even choose which is the worst at TPS claims\\n* The barrier is that these systems rely on data and computation (albeit a tiny amount). ETH 2.0 (Phase 1) doesn‚Äôt have computation but lots of data, whereas ETH 1.0 has computation: Let‚Äôs bridge the two.\\n\\n## ETH2 IN ETH1 LIGHT CLIENT\\n\\n* ETH 2.0 research team has spent a lot of time making the 2.0 architecture light client friendly\\n* Requires **80kb** of merkle branches per 9 days when persistent committees switch (also could be amortised over 9 days), plus **500 bytes** per header\\n* Would need **BLS-12-381** precompile in ETH1 clients\\n* ETH 1 chain could be computation layer that hooks into 2.0 chain, requires that data for roll-up schemas be published on 2.0 chain\\n\\n## OTHER USES FOR SCALABLE DATA AVAILABILITY ENGINES\\n\\n* Plasma chains w/ much more frequent commitments, Dapps storing messages onchain, blockchain protocols w/ independent (‚Äúsovereign‚Äù) state transition functions piggybacking on Ethereum for Data availability\\n\\n## SPEEDING UP CROSS-SHARD TRANSACTIONS\\n\\n* Weakness of current sharded design: communication between shards has a delay (waiting for crosslinks, \\\\~6 minutes)\\n* The rough proposal to get around this latency is a mechanism that allows one shard to see the roots of another shard. This would probably work most of the time\\n\\n![good old Alice, Robert and Charles](https://miro.medium.com/max/1400/1\\\\*h9XbrDO2u6h8UHetqPqKTg.png)\\n\\n* A quick exploration for when users want to transfer tokens between shards: they can publish tx to smart contract with root ( containing an expected token transfer), along with a security deposit\\n* ‚Äúmerkle root of shard is 0x12345 and I agree to lose 100 ETH (the deposit) if this claim is wrong‚Äù\\n* In the context of the registry storing token balances, user who posted 100 ETH deposit (while waiting for x-shard transaction to come through) then has their balance updated to a conditional state: if state root claim is correct I have x + transferred amt, if not correct I only have original amount (minus forfeited ETH deposit)\\n* Think of it as quantum superposition inside of SC (storing both states / both possibilities). Only resolved once contract becomes aware of state root of original shard via crosslink\\n* This superposition can then be transferred between users without them knowing (wallets would show optimistic values until \\\\~6 minutes later and the crosslink were actually sent through)\\n\\n## GENERAL PURPOSE PRIVACY\\n\\n* ZEXE: a UTXO based system that preserves privacy\\n\\n## BENEFITS OF LAYER 2 COMPUTATION\\n\\n* Philosophically, Layer 1 does not need to be overly complex to optimise properties ‚Äî block-times, x-shard communications, x-shard synchronous messaging support, privacy, etc\\n* Theoretically ETH 2.0 Phase 3 might be sufficient forever, no need for super quadratic sharding\\n* Exception would be increasing shards or updating cryptography\\n* Other blockchains have made this claim but the reality is once you have scalable data availability and enough expressivity at least to verify zKSnarks and state transitions (minimum threshold for power and complexity)you can build all necessary L2 on top\\n* L1 might get harder and harder to change, but this is fine for computational L2 if they are on top of scalable data availability (2.8 mb / sec)\\n\\n## QUESTIONS\\n\\n**Q: Doesn‚Äôt L2 stuff preclude turing complete languages / won‚Äôt work with zKsnarks?**\\n\\nThere‚Äôs a difference between math definition of TC vs what crypto community means. Math: TC means computational lang. That are so general that you can‚Äôt tell when a computation will stop (Snark needs to know this beforehand)\\n\\nCrypto: uses TC to mean expressive enough to make applications with complex internal state (plasma, makerdao, uniswap, verification engines for these L2) BTC can‚Äôt do these things, ETH can. ZEXE is UTXO based model but can as well.\\n\\nTC is the wrong word but it is the case that you can do things that are expressive enough for constructing applications inside of zKsnarks.\\n\\n**Q: Should we be worried about the 30% hash rate loss during the bear market?**\\n\\nIt is an issue but not something really to worry about. ETC (Ethereum Classic)has been attacked but only has 3% hashrate of ETH chain. If it becomes a significant concern then Phase 0 can be used as a finality mechanism for the 1.0 chain POW clients. 51% attack would then only allow censoring blocks, not reverting blocks\\n\\n**Q: There will always be competition between degree of decentralisation between base layer and Application layer. Does data availability and SNARKs always mean centralisation? \\\\[partially inaudible\\\\]**\\n\\nThis new class of L2 is interesting - doesn‚Äôt need to solve for data availability issues. Centralisation can be reduced. Compare Plasma and Rollup: Plasma data availability problem means there needs to be an operator, who can then waste users time with 2 week coin lockup if malicious. Rollup has no data availability issue bc if a relayer disappears, another can quickly take their place. Possible harm is reduced, L2s like Rollup are part of the solution.\\n\\n**Q: Are you considering two phase commit protocol \\\\[inaudible\\\\] when doing cross-shard communication?**\\n\\nContract yanking helps to solve train and hotel problem. (interacting with 2 objects on different shards) Should the ETH chain support synchronous on L1? No, it introduces too much complexity.\\n\\nRight now, between two crosslinks you can calculate the state transitions in a shard as being a function of the data in a shard and the beacon chain. Doesn‚Äôt depend on what happens in other shards\\n\\nHaving synchronous cross-shard calls breaks this invariant, makes state calculation game much more complicated, though you could implement a L2 like Rollup that would help support synchronous cross-shard calls.\\n\\n**Q: What is the relationship between ‚Äúthird-party‚Äù L2 solutions (Celer) and other Ethereum L2 solutions?**\\n\\nCeler is a L2 that provides its own data availability solution, Plasma also does this. Rollup does computation offchain and has data availability handled onchain. Has different tradeoffs.\\n\\n\\n---\\n\\nFind me [@trent_vanepps](https://twitter.com/trent_vanepps) on twitter for discussion or corrections. ‚úå\",\"timestamp\":1632627129,\"title\":\"Transcript: Scalable blockchains as data layers\",\"publication\":\"trent\"},\"digest\":\"E5gOHgIEJe9jXVmvFxJPX7gzCRreRGuPetELtUzQWUQ\",\"authorship\":{\"contributor\":\"0x4C0a466DF0628FE8699051b3Ac6506653191cc21\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"FaggmySWmxMOpjsAfoYTethf_ADgXzieaPjX8yB3wkE\\\",\\\"y\\\":\\\"fvqw5kCn0zT3rC0oevHu8o4RDX0bca8s4EVI4INP5Yo\\\"}\",\"signature\":\"jKiIIpw5Rlil-N94smbhjgs0XBxSQS91aZSWAcgqWQi09oSBYVpX3uT0eI-RghAKJD3SjEiR4GftFhzn6Tu1zg\",\"signingKeySignature\":\"0x55ee1e3e39dbb98d83dd8af98b152438a1a67645ff93af2b0202fb2f34e7877c6a45f9b9aa25e6ecaf09bb434ee32c4b90969c17b8fc2353f68c4d8c6eebce781c\",\"signingKeyMessage\":\"I authorize the publication of articles on trent.mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"FaggmySWmxMOpjsAfoYTethf_ADgXzieaPjX8yB3wkE\\\",\\\"y\\\":\\\"fvqw5kCn0zT3rC0oevHu8o4RDX0bca8s4EVI4INP5Yo\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"2LKCh3Aek4uahv66wvpEEQfws-pUY8TKaq_tM7Xe5Qc\"}"