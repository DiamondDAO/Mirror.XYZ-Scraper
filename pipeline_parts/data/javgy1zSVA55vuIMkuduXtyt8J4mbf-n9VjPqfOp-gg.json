"{\"content\":{\"body\":\"[![shashank Jain](https://miro.medium.com/fit/c/56/56/0\\\\*LDQ09-SqOVkZS4Tk.)](https://medium.com/@jain.sm?source=post_page-----79b1c804e160-----------------------------------)\\n\\nIn the first part we covered basics around virtualization (<https://medium.com/@jain.sm/virtualization-basics-dad2f20067e6>)\\n\\nIn this blog we cover memory virtualization .\\n\\nOne of the critical challenges with virtualization is how to virtualize the memory.\\n\\nThe guest OS should have the same behaviour as the non virtualized OS.\\n\\nThis means that the OS should probably be at least made to feel so that it controls the memory.\\n\\nIn case of virtualization the direct access to the physical memory cannot be given to the guest. What this means is that the guest should not be able to manipulate the Hardware page tables as this can lead to the guest taking control of the physical system.\\n\\nBefore we delve ahead on how this is tackled a basic understanding of memory virtualization is needed even in context of normal OS and hardware interaction.\\n\\nThe OS provides its processes a virtual view of memory and any access to the physical memory is intercepted and handled by the hardware component called the Memory Management Unit. The OS sets up the cr3 register (via a privileged instruction) and the MMU uses this entry to walk the page tables to determine the actual physical mapping. The OS also takes care of changing these mappings as and when allocation and de-allocation of physical memory happens\\n\\nNow in case of virtualized guests running the behavior should be similar. The guest should not get direct access to the physical memory but should be intercepted and handled by the VMM.\\n\\nSo basically there are 3 memory abstractions involved in the case of running a guest OS\\n\\n1\\\\. Guest Virtual memory — This is what the process running on Guess OS sees\\n\\n2\\\\. Guest Physical — this is what the guest OS sees\\n\\n3\\\\. System Physical — This is what the VMM sees\\n\\nThere are two possible approaches to handle this\\n\\n1\\\\. Shadow Page tables\\n\\nIn case of shadow page tables the Guest virtual memory is mapped directly to the System Physical via the VMM. This improves performance by avoiding one additional layer of translation. But this has a drawback. As and when there is a change in the guest page tables, the shadow page tables need an update. This means there has to be a trap and emulation into the VMM to handle this. The VMM can do this by marking the guest page tables as read only and any attempt by guest OS to write to them causes a trap and VMM can update the shadow tables.\\n\\n2\\\\. Nested page tables with hardware support\\n\\nIntel and AMD provided solution of the above problem via the hardware extensions. Intel provides something called an extended page table which allows the MMU to walk 2 page tables.\\n\\nThe first walk is from guest virtual to guest physical and the second from guest physical to machine physical. Since all this translation now happens in the hardware there is no need to maintain shadow page tables. Guest page tables are maintained by Guest OS and other page table maintained by VMM.\\n\\nWith shadow page tables the TLB cache needs to be flushed on a context switch, where in case of EPT the hardware introduces a VM identifier via the address space identifier which means TLB can have mapping for different vms at the same time which is a performance boost\\n\\nI intend to cover CPU and I/O Virtualization next.\\n\\nAdded a blog on CPU Virtualization (<https://medium.com/@jain.sm/virtualization-part-3-cpu-virtualization-939fc44de52e>)\\n\\n*Disclaimer : The views expressed above are personal and not of the company I work for.*\\n\",\"timestamp\":1639356530,\"title\":\"Virtualization Part 2 — Memory Virtualization - shashank Jain - Medium\"},\"digest\":\"uCSrZB9dogS_6k5IPwqYtRDh0yx6g4fhCp-xb0F7lKw\",\"authorship\":{\"contributor\":\"0x0853186C1Bfbc0889b9c76AC83f5A304BeaFDbAe\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"O59csme3y4woqOU4OHokg9Ppi2HRjmj_7IcOGnhGvvU\\\",\\\"y\\\":\\\"pdQ8oYtzRjKwdy4ylUzJZHIfR0YhnO7VC-_wIpRCih4\\\"}\",\"signature\":\"C8B7hcLnD-qrhrzcJ_tz2yCaD91SIgWwCYPBZZ6APbWM8c9wiz70APtwaA-phqZ0bpvzR-UtalkJdIFlhIJf9g\",\"signingKeySignature\":\"0x4d4b774155b7b39132402af4f62f9dfdb23c39f23ec89055936a5b6bb75a476210a07461db84059bfdfb928f7e0b66d2bfcb6d193697b85ea49a7fabd1b5fc4f1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"O59csme3y4woqOU4OHokg9Ppi2HRjmj_7IcOGnhGvvU\\\",\\\"y\\\":\\\"pdQ8oYtzRjKwdy4ylUzJZHIfR0YhnO7VC-_wIpRCih4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"uCSrZB9dogS_6k5IPwqYtRDh0yx6g4fhCp-xb0F7lKw\"}"