"{\"content\":{\"body\":\"## Motivation\\n\\nMany games involve elements of chance such as rolling dice or drawing cards. Often times, the result of this random event is to be held secret by a participant in the game until it is time to reveal the whole thing or a partial component of it. For example, in card games you are dealt a hand and you keep it secret from the opponents until it is time to show your hand or a card of your hand. \\n\\nThere are tools for generating randomness on chain using oracles such as Chainlink VRF, but keeping the result of this randomness secret to a specific participant could be potentially challenging. In this article I will propose a method for generating random secrets that accomplish the following goals.\\n\\n* Can be effectively kept secret from other participants for any amount of time until the game mechanics require it to be revealed to continue.\\n* Is a good approximate for generating random numbers. That is, the distribution of randomness produced is uniform or follows whatever the desired distribution is.\\n* Cannot be cheated by game participants to produce favorable outcomes. \\n* Can be used by anyone regardless of cryptography knowledge as long as they have access to a web3 account and can click a button to sign a message.\\n\\nI believe the following proposal fits these criteria, but I am looking for feedback on the security and viability of this method. It is possible this contains a massive flaw, so if you are stumbling upon this at some later date, there is no guarantee of security.\\n\\n## Proposal\\n\\nImagine a game where two players, Alice and Bob, each roll a dice under a cup and keep the result secret from each other. They then take some action (wagering, bluffing, whatever game mechanics) about their two numbers. They reveal them to each other, and the round is over.\\n\\nOn the blockchain, we could program the game as such:\\n\\n* Generate a source of randomness from a random number oracle like Chainlink VRF or another secure random number oracle/generator and store this in a mapping.\\n\\n```\\nfunction generateRandomness() external {\\n  ...\\n  randomSeed[msg.sender] = randomness;\\n}    \\n```\\n\\n* Sign the randomness or hash of the randomness with the users account/private key from the browser (ethersjs psuedocode)\\n\\n```\\n...\\nplayer1RandomSeed = await contract.randomSeed(player1.address);\\nplayer1Sig = await player1.signMessage(ethers.utils.arrayify(player1RandomSeed);\\n```\\n\\n* Hash the signature to convert it to a 256 bit number and take this modulo 6 + 1 to create a dice roll number between 1 and 6.\\n\\n```\\np1RandomNum = sha256(player1Sig) % 6 + 1\\n```\\n\\n \\n When it is time to reveal the randomness, we can use Open Zeppelinâ€™s ECDSA library and the mathematics of ECC to verify the signature on chain and set the number/do whatever is necessary for our game mechanics.\\n\\n```\\nfunction revealAndVerify(bytes calldata _sig) external {\\n  bytes32 signedHash =         ECDSA.toEthSignedMessageHash(randomSeed[msg.sender]);\\n  require(ECDSA.recover(signedHash, _sig) == msg.sender);\\n  revealedNum = uint256(sha256(_sig))%6+1;\\n}\\n```\\n\\n## Implementation\\n\\nAn extremely barebones implementation of this is on my Github:\\n\\n[https://github.com/Derked/SecretRandom](https://github.com/Derked/SecretRandom)\\n\\nThanks for reading and appreciate any and all comments or feedback!\",\"timestamp\":1640748137,\"title\":\"Creating Random Secrets For Blockchain Games\"},\"digest\":\"0E74BFk2yxvcWe_hu3hcipv89SVkFvoX2EDc3J_ECDo\",\"authorship\":{\"contributor\":\"0x6fe6a50f1017D485a2750f1a69273d82b50f54C6\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ljORr_vMOniq1FwZr9WEGEX5AHpweq6voBIipmbx8R0\\\",\\\"y\\\":\\\"L7f8lkWmygSunN9PDrmX364hbL85IGL2ChlUkqzddDk\\\"}\",\"signature\":\"JdyRq5QJZ0O2DpWXHUHQH2up90XKOGZvVjwsYVSlyzpMquxfoWSdnGHcu1uLH4HxccFNCZwOYCFf7ts6hqAmNA\",\"signingKeySignature\":\"0xa34c05aee5c30d3e0b3d50462303fc34521bebabe1d9c9bba4a7506862870e797ce187bac41aa3243f5c42281d66ac1a7308741172f9db96166dfbe7626a30281c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ljORr_vMOniq1FwZr9WEGEX5AHpweq6voBIipmbx8R0\\\",\\\"y\\\":\\\"L7f8lkWmygSunN9PDrmX364hbL85IGL2ChlUkqzddDk\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"0E74BFk2yxvcWe_hu3hcipv89SVkFvoX2EDc3J_ECDo\"}"