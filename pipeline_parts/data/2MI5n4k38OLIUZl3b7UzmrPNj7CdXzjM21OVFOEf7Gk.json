"{\"content\":{\"body\":\"本文聊聊 Metric、Logging 和 Tracing 的数据采集，Profilling 暂略。\\n\\nOpenTelemetry 提供了统一的数据采集方案，鉴于 OpenTelemetry 是未来的趋势，这里先介绍下它的方案，然后再介绍我们当前采用的方案。\\n\\nOpenTelemetry 提供了一个新的组件：[Collector](https://opentelemetry.io/docs/collector/)，Collector 负责采集、处理和转发数据。\\n\\n它的架构如下：\\n\\n![Collector 架构](https://images.mirror-media.xyz/publication-images/UR-9FO_FXE8pL614EJyUH.png?height=648&width=1578)\\n\\nCollector 的设计包含三个层级，分别是 Receivers、Processors 和 Exporters。\\n\\n1. Receivers 负责采集和接收数据，同时支持 Push 和 Pull。Metric、Logging、Tracing 可以使用标准的数据格式 OTLP（OpenTelemetry Protocol） Push 数据，也可以使用 Prometheus 的抓取配置去 Pull 数据，另外还支持采集日志，[filelogreceiver](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver) 是一个采集日志的实现。\\n2. Processors 负责处理数据，支持 Batch、Filter 和 Attributes 等功能，Attributes 是指为数据增加 Key/Value 对。另外，我们可以自己实现 Processor 插件为数据增加 Resource 属性，这里有一个开源的插件：[resourcedetectionprocessor](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourcedetectionprocessor)\\n3. Exporters  \\b负责转发数据，同样支持很多种数据格式，包括 OTLP、Prometheus 和 Jaeger 等。\\n\\nCollector 具有良好的可组合性，任何一个层级都可以自己实现插件，完成需要的功能。\\n\\n另外，Collector 的部署方式有几种，可以一个 Pod 部署一个（Sidecar）、可以一个 Node 部署一个，也可以作为一个 Service 部署。\\n\\n![Collector 部署形式](https://images.mirror-media.xyz/publication-images/C0Au8P1y8VYkMrCHZ6O5e.png?height=324&width=770)\\n\\n有了 Collector 这个基础，我们看一下 OpenTelemetry 数据采集的终态架构，也就是在未来 OpenTelemetry 最终的数据采集形态。\\n\\n![OpenTelemetry 终态架构](https://images.mirror-media.xyz/publication-images/y7gq_ftecB3Ih-CBTPxIJ.png?height=862&width=1714)\\n\\n相对于传统架构 Metric、Logging、Tracing 都是单独产生并收集，OpenTelemetry 最明显的特点是统一，统一使用 OpenTelemetry SDK 生成数据（OTLP 标准格式），统一使用 Push 方式发送给 Collector。至于后端实现，对接我们的 Cortex、Loki、Tempo 即可。\\n\\n好处有：\\n\\n1. 应用使用一个 SDK 就可以解决所有的数据采集，依赖更少、资源消耗也更小。在传统架构中，Metric 使用 [Prometheus Client SDK](https://github.com/prometheus/client_golang)，Logging 的 SDK 就更多了（比如 Log4j），Tracing 中 Jaeger SDK 倒是已经使用了 [OpenTelemetry SDK](https://github.com/open-telemetry/opentelemetry-go)。\\n2. 一个采集客户端，部署和运维代价更低。传统架构中，Metric 采集需要维护 Prometheus 抓取配置，Logging 采集用 Fulentd/Fulent-bit，Tracing 采集用 Jaeger agent。\\n3. 数据模型统一，数据关联更容易。比如可以很容易的做到如下：\\n   1. 统一 Metric、Logging 和 Tracing 的元数据信息（即 Resource），比如 Node、Kubenetes 信息（Cluster、Namespace、Pod）、应用信息（Application、Component）\\n   2. Metric、Logging 和 Tracing 的时间或者时间范围更容易关联\\n   3. Metric、Logging 和 Tracing 上下文信息更容易关联，比如在 Logging 记录中打印出 Tracing 的 TraceID 和 SpanID、关联一个请求经过的不同组件的 Logging 记录\\n\\n另外这个新架构需要说明的两点：\\n\\n1. 对于 Metric 和 Tracing，OpenTelemetry 都创建了全新的 SDK，但是 Logging 没有，因为目前业界有大量成熟的 SDK，比如 Log4j，很难推动应用去修改。所以 Logging 是在业内的 SDK 上实现一层 Wrapper，并满足 Logging 的数据模型。\\n2. 因为 Tracing 我们使用 Tempo 方案，Tempo 原生支持 OpenTelemetry 数据模型，所以不需要一层 Exporter 做转换。\\n\\n但是，OpenTelemetry 的终态架构也有几个问题：\\n\\n1. \\b目前 Metric 领域事实的标准是 Prometheus，大量被使用，想打破 Prometheus Client SDK 和 Pull 的方式，难度是很高的\\n2. 终态架构中 Logging 采用的是直接 Push 的方式，本地没有日志，所以原生依赖后端平台，而且后端平台如果稳定性不好，存在丢日志的风险，在目前的软件维护方式下，采用这种方式不太现实\\n3. 目前 OpenTelemetry 还不是很成熟，比如 Logging SDK 还不是 stable 状态，详细参见[这里](https://opentelemetry.io/status/%E3%80%81)\\n\\n综上所述，我们目前 Metric 还是使用 Prometheus 方式，Logging 使用传统采集方式，而 Tracing 则使用 OpenTelemetry 标准形式。\\n\\n目前的架构如下：\\n\\n![目前的架构](https://images.mirror-media.xyz/publication-images/agiWeRwJ8yox66j6abFBO.png?height=435&width=702)\\n\\n最后，Service Mesh 的解决方案 [Istio](https://istio.io/latest/docs/tasks/observability/distributed-tracing/) 也可以用于可观测性的数据采集，还有一个神奇的内核模块 [eBPF](https://ebpf.io/) 也可以采集。\\n\\n不过 eBPF 和 Istio 不是替代关系，eBPF 不是图灵完备的，比如不支持循环，只适合用来做可观测性，有一个产品基于 eBPF 做出来了一个产品，叫做 [PIXIE](https://pixielabs.ai/)。Istio 不仅可以做可观测性，还可以做服务发现、流量路由、弹性（超时/重试/断路）、身份验证/授权等能力。\\n\\n不过，Istio 和 eBPF 都不支持通过 TraceID 查询整个调用链路，而 OpenTelemetry 支持。\",\"timestamp\":1642688992,\"title\":\"聊聊可观测性4 - 数据采集\"},\"digest\":\"G1HJIO8cVZcXTuOTvmuLenEwV8N-I04EE_0oizyjD-0\",\"authorship\":{\"contributor\":\"0xFd007bb46C47D8600C139E34Df9DfceC86F0B319\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"cA_5ftBDnUBuiAH-GuHrEiM2kPAbcgpYmr8vBMpwWsk\\\",\\\"y\\\":\\\"nOrzBQxMMeJJkeTF5e_KOLVrPQ3s9VupwUOy6Yz0SCI\\\"}\",\"signature\":\"duRDwTCenBojKsZwwp3pO_J0BcSXyRrWkVvg_XrCQcwevY5dLcnVcrN_fi_H5yzSbmI8hFXOMHfpOuUhJ5GvkA\",\"signingKeySignature\":\"0x51379cedaf70697462bbb5746bc22b003bbe7406fc11900b8bc6ad9ac0d270da47f9555c98a7112def16ee347137f39ba4c9a77ce37da3c101c2d846da7bbed91c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"cA_5ftBDnUBuiAH-GuHrEiM2kPAbcgpYmr8vBMpwWsk\\\",\\\"y\\\":\\\"nOrzBQxMMeJJkeTF5e_KOLVrPQ3s9VupwUOy6Yz0SCI\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"F5r7ymw9F0CJxzIgrExN8g-TLRMc1j9WTGwCqBt6y60\"}"