"{\"content\":{\"body\":\"In May of this year, Vitalik created a post on the Uniswap governance forum called, [“UNI should become an oracle token.”](https://gov.uniswap.org/t/uni-should-become-an-oracle-token/11988) He argues that there is a need for oracles to provide off-chain data, and that UNI is in a good position to provide an alternative to Chainlink for high-value, latency-tolerant use cases.\\n\\nWhile it’s an interesting idea, as I reflected on that post recently, I was thinking about how Uniswap *already is* an oracle protocol. It already provides a price feed from the largest DEX on Ethereum. UNI already is an oracle token, the UNI DAO just hasn’t done much with that fact, as of yet at least.\\n\\n### A history of Uniswap as an oracle\\n\\nEver since v1, Uniswap has been an oracle protocol, albeit a very crude one at the time. Uniswap v1 was a series of ETH-ERC20 pools with a simple `x * y = k` pricing mechanism. You could query for the values of the ETH and the respective ERC20 token in any pool, and viola, you have a spot price oracle.\\n\\nv1 leaves a lot to be desired as an oracle protocol, however. First, everything was priced in ETH. In order to get a non-ETH quote, say the price of BAT in terms of USDC, you would need to chain prices together (in this case, BAT-ETH and ETH-USDC).\\n\\nSecond, the price was a simple point-in-time (and more specifically and tragically, point-in-a-block) spot price. This is vulnerable to manipulation, as an “unfortunately timed” liquidity withdrawal and large trade could swing the price dramatically. I wouldn’t recommend relying on that price for a sensitive task like determining if a borrow position is underwater.\\n\\nv2 improved on the utility of Uniswap as an oracle. First, v2 allowed for any arbitrary ERC20-ERC20 pair. Second, each pool took a snapshot of the price at the beginning block before any trade or liquidity change had taken place, which made manipulation more difficult. Finally, the price value it stored (a running accumulator of the price multiplied by the seconds since the last block) allowed a user to calculate a time-weighted average price (TWAP) as opposed to a simple spot price.\\n\\nGetting a TWAP from a v2 pool did not work out of the box, however--it required integrators to store past values of the running accumulator in a separate contract for calculation.\\n\\nUniswap v3 maintains the benefits offered in v2, but also addresses the aforementioned flaw by offering the ability to store a series of accumulator values (only 1 value is stored by default, but anyone willing to pay the gas cost can expand the number of tracked values to a maximum of 65,535 observations, or \\\\~9 days of prices).\\n\\n### Oracle usage today\\n\\nUniswap v3 is already being used as an on-chain oracle in varied contexts.\\n\\n[A number of projects](https://dune.xyz/queries/278991) call Uniswap v3’s oracle function from their contracts, including:\\n\\n* [Popsicle Finance](https://popsicle.finance/) (an LP yield optimization protocol)\\n* [keep3r network](https://keep3r.network/) (a decentralized task runner protocol)\\n* [Frax](https://frax.finance/) (an algo stablecoin)\\n* [Lixir Finance](https://lixir.finance/) (an LP manager for Uniswap v3)\\n* [Rari Capital](https://rari.capital/) (creator of the [Fuse lending protocol](https://app.rari.capital/fuse))\\n* [Babylon Finance](https://www.babylon.finance/) (decentralized asset management)\\n* [Unipilot](https://unipilot.io/) (an LP yield optimization protocol)\\n* [Angle](https://www.angle.money/) (a stablecoin protocol)\\n\\n![Source: Dune Analytics](https://images.mirror-media.xyz/publication-images/LrKnSzfuy7E9kZ1ggs6Wr.png?height=466&width=767)\\n\\nThese oracle calls are made across a [wide variety of pairs](https://dune.xyz/queries/277692). We can see in the figure below that while USDC-WETH is the most commonly called pair, it only comprises 17% of oracle calls. There is a long tail of assets for which the oracle functionality is used. A number of these are directly related to the protocols mentioned above (.e.g FRAX, KP3R). More, however, are simply assets for which Uniswap is likely one of the most significant sources of liquidity (e.g. ENS and of course ELON).\\n\\n![Source: Dune Analytics](https://images.mirror-media.xyz/publication-images/GfVIe3taGc4GoALbWNYoo.png?height=499&width=766)\\n\\n### Uniswap DAO as keeper of the oracles\\n\\n![Priests who worked with the oracle at Delphi would receive her utterances and disseminate the answer to the petitioner.](https://images.mirror-media.xyz/publication-images/eqwuBSh7lgbTxL3_yKsDq.jpeg?height=774&width=1024)\\n\\nThe oracle functionality is already being used, and that’s despite a relative dearth of material on the the performance of Uniswap oracles (though I refer you to an [excellent thread](https://twitter.com/euler_mab/status/1459314402059034634?s=20) on the cost of attacking a v3 oracle by [Michael Bentley](https://twitter.com/euler_mab)).\\n\\nWhere is the incentive to improve and maintain the oracle experience, however? Oracle usage doesn’t currently benefit traders, LPs, or maintainers of the protocol.\\n\\nProtocol trading fees are already a possible source of DAO cash flows in [v2](https://github.com/Uniswap/v2-core/blob/4dd59067c76dea4a0e8e4bfdda41877a6b16dedc/contracts/UniswapV2Pair.sol#L91) and [v3](https://github.com/Uniswap/v3-core/blob/62d65bf88c4fb23671104c28f5bcae566274cb15/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L10) (though no fees have been collected to date).\\n\\nIt’s worth considering a fee to use price oracles. While this would require some protocol changes, this could be implemented as a flat fee in ETH per call or a registration of a project’s contract on an array of approved oracle callers.\\n\\nIn exchange for these fees, the Uniswap DAO could become a “keeper of the oracles.” What would that mean in practice? The DAO could:\\n\\n* act as a “liquidity provider of last resort”\\n* provide liquidity incentives to pools that are high value as price oracles\\n* provide data and research regarding oracle performance\\n* provide better documentation for best practices around oracle usage\\n\\nBy “liquidity provider of last resort,” I mean the DAO could create an automated strategy or appoint an LP manager to provide certain amount of passive liquidity to pools that are important oracles and running low on liquidity. This could dissuade attacks as well as respond to attacks spanning multiple blocks that involve withdrawing liquidity or affecting the liquidity balance of a pool.\\n\\n### The limitations of current Uniswap oracles\\n\\nThis discussion feels incomplete without acknowledging some of the limitations of the using Uniswap oracles as they exist today.\\n\\nWhile using a simple spot price (as opposed to a TWAP) from an AMM is inadvisable, a TWAP reduces the freshness of your data (it adapts more slowly to changing market conditions by definition). In choosing the length of time over which to measure the TWAP, you face a dilemma:\\n\\n* The shorter the time window, the more the TWAP is susceptible to manipulation.\\n* The longer the time window, the slower the TWAP adjusts to changing market prices.\\n\\nTake a lending protocol for example. If the price of collateral hits a sudden downtrend, and the TWAP doesn’t reflect that a position is under-collateralized until 30 minutes after the start of the downtrend, the spot price by then may be even lower, which could cause the protocol to take a loss on the now possibly underwater position.\\n\\nThat being said, the attractive part of Uniswap oracles is they work relatively autonomously. Even without the extra assurances a DAO could provide, they would continue to work well just given the incentives of market participants.\\n\\nComing full circle back to Vitalik’s post, it could be interesting to explore how the DAO could use current pool TWAP model as one ingredient in an oracle solution that adds in fresher, off-chain sources of price data. Until then, I say a bird in the hand is worth `getTWAP(birdsInBush, birdsInHand, ‘30 minutes’)` in the bush.\\n\\n### Appendix\\n\\nImage of the oracle at Delphi is ‘The Oracle’ by Camillo Miola (1880), source: [Getty](https://media.getty.edu/museum/images/web/enlarge/00070801.jpg).\\n\\nDune analytics queries:\\n\\n* [Uniswap v3 oracle calls by project, by project, past 28 days from 2021-12-04](https://dune.xyz/queries/277656)\\n* [Uniswap v3 oracle calls by pair, past 28 days from 2021-12-04](https://dune.xyz/queries/278991)\",\"timestamp\":1638809704,\"title\":\"Should Uniswap be an oracle protocol? Always has been.\"},\"digest\":\"RQD9SJ5yITndHm8n_t4aMH0A8qnMyO_wr-ImrElQfWk\",\"authorship\":{\"contributor\":\"0x7B542178633f16940a131F8F6d670ffdbBe6b2Ab\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Cd0NFRZEsCOva50wBnWIB0fdcvKoY85sPcExHrKc8_8\\\",\\\"y\\\":\\\"8eMvB738Z5Ngo_3XJhJz94rubCZfObBNRGwxjbjjhrA\\\"}\",\"signature\":\"6KLz1wiGLW6LvPSt8oejnrXb32lErk3LKB8XNS9MayYytjiAYuc3SKLykRkyohbZCoJ5iWjoJODd-5Lgaf3pGA\",\"signingKeySignature\":\"0xc370835b6081e9063f4d2074d10ee7d610dd4bf0abc777081143a783d53420165bc5d20c1d8c55f67dfac01db400d12f285c0673606e9b36b548f87c680f13eb00\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"Cd0NFRZEsCOva50wBnWIB0fdcvKoY85sPcExHrKc8_8\\\",\\\"y\\\":\\\"8eMvB738Z5Ngo_3XJhJz94rubCZfObBNRGwxjbjjhrA\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"87cOAsmHu86iDOZ0z_kqJkU6_iiBU41YBiv5h8fxLps\"}"