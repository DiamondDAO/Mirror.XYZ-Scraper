"{\"content\":{\"body\":\"![](https://miro.medium.com/max/1000/0\\\\*PLKUMHzn_F2Fbjqk.png)\\n\\nПривет, сообщество Moonbeam.\\n\\nХотел бы поделиться гайдом по установке collator node в Moonbase Network , настроить телеметрию и податься в коллаторы.\\n\\nСистемные требования:\\n\\n![](https://miro.medium.com/max/1052/1\\\\*Ur29akbKCRzC618awUCJHg.png)\\n\\n![](https://miro.medium.com/max/1400/1\\\\*kJrs1JnH4KIDH-heOdJvoQ.png)\\n\\n## Запуск ноды\\n\\nСкачиваем бинарник:\\n\\n```\\nwget https://github.com/PureStake/moonbeam/releases/download/v0.12.1/moonbeam\\n```\\n\\nПроверяем бинарник:\\n\\n```\\nsha256sum moonbeam\\n```\\n\\n![](https://miro.medium.com/max/1346/1\\\\*GLLLbS_fIo0HaAvgl4xgtg.png)\\n\\nДелаем бинарник исполняемым:\\n\\n```\\nchmod +x moonbeam\\n```\\n\\nДобавляем пользователя для запуска сервиса :\\n\\n```\\nadduser moonbase_service --system --no-create-home\\n```\\n\\nСоздаем директорию для этого бинарника:\\n\\n```\\nmkdir /var/lib/alphanet-data\\n```\\n\\nИзменяем владельца этой директории:\\n\\n```\\nchown moonbase_service /var/lib/alphanet-data\\n```\\n\\nПеремещаем бинарник в нужную нам директорию:\\n\\n```\\ncp ./moonbeam /var/lib/alphanet-data\\n```\\n\\nСоздаем сервисный файл:\\n\\n```\\nnano /etc/systemd/system/moonbeam.service\\n```\\n\\nДобавляем данные в сервисный файл:\\n\\n```\\n[Unit]\\nDescription=\\\"Moonbasystemctl --user start minase Alpha systemd service\\\"\\nAfter=network.target\\nStartLimitIntervalSec=0[Service]\\nType=simple\\nRestart=on-failure\\nRestartSec=10\\nUser=moonbase_service\\nSyslogIdentifier=moonbase\\nSyslogFacility=local7\\nKillSignal=SIGHUP\\nExecStart=/var/lib/alphanet-data/moonbeam \\\\\\n     --validator \\\\\\n     --port 30333 \\\\\\n     --rpc-port 9933 \\\\\\n     --ws-port 9944 \\\\\\n     --pruning=archive \\\\\\n     --state-cache-size 1 \\\\\\n     --base-path /var/lib/alphanet-data \\\\\\n     --chain alphanet \\\\\\n     --name \\\"YOUR-NODE-NAME\\\" \\\\\\n     -- \\\\\\n     --port 30334 \\\\\\n     --rpc-port 9934 \\\\\\n     --ws-port 9945 \\\\ \\n     --execution wasm \\\\\\n     --wasm-execution compiled \\\\\\n     --state-cache-size 1 \\\\\\n     --pruning=archive \\\\\\n     --name=\\\"YOUR-NODE-NAME (Embedded Relay)\\\"[Install]\\nWantedBy=multi-user.target\\\"YOUR-NODE-NAME\\\" - имя вашей ноды\\n```\\n\\nДелаем нашу сервисную службу загружаемой после запуска:\\n\\n```\\nsystemctl enable moonbeam.service\\n```\\n\\nСтартуем сервис:\\n\\n```\\nsystemctl start moonbeam.service\\n```\\n\\nПроверяем статус:\\n\\n```\\nsystemctl status moonbeam.service\\n```\\n\\nПроверяем логи:\\n\\n```\\njournalctl -f -u moonbeam.service\\n```\\n\\nТеперь наша нода работает и мы можем перейти к настройке телеметрии.\\n\\n![](https://miro.medium.com/max/1400/0\\\\*pIRC7ASQ5fSoHq5n.png)\\n\\n## Настройка телеметрии\\n\\nСоздаем аккаунт в [https://app.gantree.io](https://app.gantree.io/) и получаем свой API-ключ\\n\\n![](https://miro.medium.com/max/1400/0\\\\*NDk8AEjq_m8NbZIN)\\n\\nСкачиваем бинарник:\\n\\n```\\nwget https://github.com/gantree-io/gantree-node-watchdog/releases/download/v1.1.0rc1/gantree-node-watchdog-v1.1.0rc1-linux.tar.gz\\n```\\n\\nРаспаковываем его:\\n\\n```\\ntar -xzf gantree-node-watchdog-v1.1.0rc1-linux.tar.gz\\n```\\n\\nПеремещаем бинарник в необходимую директорию:\\n\\n```\\nmv gantree_node_watchdog /usr/local/bin/\\n```\\n\\nСоздаем конфиг для ноды-наблюдателя релейчейнов:Создаем две директори для конфигов:\\n\\n```\\nmkdir -p /var/lib/gantree/parachain\\nmkdir -p /var/lib/gantree/relay\\n```\\n\\nСоздаем конфиг для ноды-наблюдтеля парчейнов:\\n\\n```\\nnano /var/lib/gantree/parachain/.gnw_config.json\\n```\\n\\nДобавляем данные:\\n\\n```\\n{\\n  \\\"api_key\\\": \\\"YOUR-API-KEY\\\",\\n  \\\"project_id\\\": \\\"moonbeam\\\",\\n  \\\"client_id\\\": \\\"YOUR-SERVER-NAME-parachain\\\"\\n  \\\"metrics_host\\\": \\\"http://127.0.0.1:9615\\\"\\n}\\n```\\n\\nСоздаем конфиг для ноды-наблюдателя релейчейнов:\\n\\n```\\nnano /var/lib/gantree/relay/.gnw_config.json\\n```\\n\\nДобавляем данные в конфиг:\\n\\n```\\n{\\n  \\\"api_key\\\": \\\"YOUR-API-KEY\\\",\\n  \\\"project_id\\\": \\\"moonbeam\\\",\\n  \\\"client_id\\\": \\\"YOUR-SERVER-NAME-relay\\\",\\n  \\\"metrics_host\\\": \\\"http://127.0.0.1:9616\\\"\\n}\\\"YOUR-API-KEY\\\" - ваш API ключ в Gantree\\n\\\"YOUR-SERVER-NAME-relay\\\" - имя вашей ноды-наблюдателя (у каждого наблюдателя должно быть разное имя)\\n\\\"PCK-key\\\" больше не нужен\\n```\\n\\nСоздаем сервисный файл для ноды-наблюдателя парчейнов:\\n\\n```\\nnano /etc/systemd/system/gantree-parachain.service\\n```\\n\\nДобавляем данные в него:\\n\\n```\\n[Unit]\\nDescription=Gantree Node Watchdog Parachain\\nAfter=network.target[Service]\\nWorkingDirectory=/var/lib/gantree/parachain\\nType=simple\\nRestart=always\\nExecStart=/usr/local/bin/gantree_node_watchdog[Install]\\nWantedBy=multi-user.target\\n```\\n\\nСоздаем сервисный файл для ноды-наблюдателя релейчейнов:\\n\\n```\\nnano /etc/systemd/system/gantree-relay.service\\n```\\n\\nДобавляем данные в него:\\n\\n```\\n[Unit]\\nDescription=Gantree Node Watchdog Relay\\nAfter=network.target[Service]\\nWorkingDirectory=/var/lib/gantree/relay\\nType=simple\\nRestart=always\\nExecStart=/usr/local/bin/gantree_node_watchdoggantree-relay[Install]\\nWantedBy=multi-user.target\\n```\\n\\nДелаем сервисную службу загружаемой после запуска:\\n\\n```\\nsudo systemctl enable gantree-parachain\\n```\\n\\nЗапускаем сервис gantree-parachain и проверяем логи:\\n\\n```\\nsudo systemctl start gantree-parachain && journalctl -f -u gantree-parachain\\n```\\n\\n![](https://miro.medium.com/max/1400/0\\\\*Ja9rghweTtPDLXSB)\\n\\nДелаем нашу сервисную службу загружаемой после запуска:\\n\\n```\\nsudo systemctl enable gantree-relay\\n```\\n\\nЗапускаем сервис gantree-relay и проверяем логи:\\n\\n```\\nsudo systemctl start gantree-relay && journalctl -f -u gantree-relay\\n```\\n\\n![](https://miro.medium.com/max/1400/0\\\\*_I6SbenKl_oV1I7b)\\n\\nДалее нам необходимо стать кандидатом в коллаторы\\n\\n## **Стать коллатором**\\n\\nСоздаем аккаунт в <https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fwss.testnet.moonbeam.network#/accounts>\\n\\nУзнаем размер пула кандидатов\\n\\n1. Переходим во вкладку “Developer”\\n2. Выбираем раздел “JavaScript”\\n3. Копируем текст в окно\\n4. Сохраняем\\n5. Запускаем код\\n6. Копируем данные\\n\\n<!---->\\n\\n```\\n// Simple script to get candidate pool size\\nconst candidatePool = await api.query.parachainStaking.candidatePool();\\nconsole.log(`Candidate pool size is: ${candidatePool.length}`);\\n```\\n\\n![](https://miro.medium.com/max/1400/0\\\\*WYtqRLf21UbuZj9f.png)\\n\\nТеперь мы можем подать свою кандидатуру в коллаторы\\n\\n1. Заходим в раздел “Developers” во вкладку “Extrinsics”\\n2. Выбираем свой аккаунт с токенами для коллации\\n3. Подтверждаем что аккаунт имеет необходимое количество токенов\\n4. Выбираем `parachainStaking` в меню “extrinsics\\\"\\n5. Далее выбираем функцию`joinCandidates()`\\n6. Выбираем количество токенов которое хотим забондить\\n7. Указываем количество кандидатов в пуле (мы узнали это ранее)\\n8. Подтверждаем транзакцию\\n\\n![](https://miro.medium.com/max/1400/0\\\\*HPYJDyhM43jUPabn.png)\\n\\nДалее необходимо получить session key ноды и привязать его к нашему кандидату\\n\\nДля этого используем данную команду на нашей ноде\\n\\n```\\ncurl http://127.0.0.1:9933 -H \\\\\\n\\\"Content-Type:application/json;charset=utf-8\\\" -d \\\\\\n  '{\\n    \\\"jsonrpc\\\":\\\"2.0\\\",\\n    \\\"id\\\":1,\\n    \\\"method\\\":\\\"author_rotateKeys\\\",\\n    \\\"params\\\": []\\n  }'\\n```\\n\\nСохраняем полученные данные\\n\\n![](https://miro.medium.com/max/1400/0\\\\*qIJizvhEE-HWGFHy.png)\\n\\nТеперь возвращаемся в кошелёк\\n\\n1. Заходим во вкладку “Developer”\\n2. Выбираем опцию “Extrinsics”\\n3. Выбираем свой аккаунт\\n4. Выбираем`authorMapping`\\n5. Выбираем `addAssociation()`\\n6. Вводим наш `(sesion key из предыдущего раздела)`\\n7. Выбираем “Submit Transaction”\\n\\n![](https://miro.medium.com/max/1400/0\\\\*oq0CJqyPBrg64qcu.png)\\n\\nПроверяем\\n\\n1. Заходим во вкладку “Developer”\\n2. Выбираем опцию “Chain state”\\n3. Выбираем `authorMapping`\\n4. Выбираем `mappingWithDeposit` метод\\n5. Указываем author ID\\n6. Нажимем “+” button для отправки RPC call\\n\\n![](https://miro.medium.com/max/1400/0\\\\*mIJpmCUpaFcAFf0j.png)\\n\\nПроверить валидатора в списке ожидания:\\n\\n[https://moonbase.subscan.io/waiting](https://moonbase.subscan.io/waiting)\\n\\nПосмореть author ID если забыли:\\n\\n[https://moonbase.subscan.io/extrinsic?module=authormapping&call=update_association](https://moonbase.subscan.io/extrinsic?module=authormapping&call=update_association)\\n\\nОфициальная документация:\\n\\n[https://docs.moonbeam.network/node-operators/networks/full-node/](https://docs.moonbeam.network/node-operators/networks/full-node/)\\n\\nДокументация по Gantree:\\n\\n[https://www.notion.so/Gantree-Dashboard-v3-Docs-3e2b87789cf440a7915a5791eee92780](https://www.notion.so/Gantree-Dashboard-v3-Docs-3e2b87789cf440a7915a5791eee92780)\\n\\nЗабондить дополнительный стейк:\\n\\n1. Заходим во вкладку “Developer”\\n2. Выбираем опцию “Extrinsics”\\n3. Выбираем свой аккаунт\\n4. Выбираем`parachainStaking`\\n5. Выбираем функцию candidateBondMore`(more)`\\n6. Указываем количество\\n7. Выбираем “Submit unsigned”\\n\\n![](https://miro.medium.com/max/1400/1\\\\*0XH_K04ZUjyGwijmyfpQpg.png)\\n\\nНоминировать стейк (для номинаторов):\\n\\nЗабондить дополнительный стейк:\\n\\n1. Заходим во вкладку “Developer”\\n2. Выбираем опцию “Extrinsics”\\n3. Выбираем свой аккаунт\\n4. Выбираем`parachainStaking`\\n5. Выбираем функцию тщьштфну`(colator,amount)`\\n6. Выбираем коллатора\\n7. Указываем collator_nominator_count (32)\\n8. Количество nomination_count (32)\\n9. “Submit Transaction”\\n\\n![](https://miro.medium.com/max/1400/1\\\\*K3y_vDWjAR8fjexjkrT7NA.png)\\n\\nЕсли хотите заделегерировать мне:\\n\\nМой валидатор: <https://moonbase.subscan.io/validator/0xa3D563203b7a46a545E5e1C812B54405DcD62680>\\n\\nDiscord Moonbeam:\\n\\n[https://discord.gg/aCNA78Zg](https://discord.gg/aCNA78Zg)\\n\\nПодать заявку на приглашение в коллаторы:\\n\\n[https://moonbeam.network/contact/](https://moonbeam.network/contact/)\\n\\n![](https://miro.medium.com/max/1146/1\\\\*SGY2sZ0Z4P3XXAmmXnWqVg.png)\\n\\n![](https://miro.medium.com/max/1400/0\\\\*rpajMWALNBe9x_0q.png)\\n\\n\",\"timestamp\":1633814358,\"title\":\"Установка collator node в Moonbeam - cyberG - Medium\"},\"digest\":\"hMu50k3tcP21VPR_rzSkZQw4grOR53F78rb_NbToTxQ\",\"authorship\":{\"contributor\":\"0x8847EBaaf29A18396e49191602f8d8D141b98aa7\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"AZBRZ_wPjpi-9K78NetGb-Vf9D9GFFnsamvaeW6UNys\\\",\\\"y\\\":\\\"Jtbd0pz6BhNuiBP1s_oyZcTnrf2rOudPCpmGvSH8m_c\\\"}\",\"signature\":\"ZZczYv8KH_kcW3WJxy1axEQdBPuDwChJeqnoQci-GOdkcUBq0o9Kf_ZuJITzstA4fCmWOAe1uEZALRsdp7X4Cw\",\"signingKeySignature\":\"0xa9b95d21294e4162dc127ff6507710f470f0e70fd692e3a685133d8e40e854c665207cf44ee3669acfebd0ddf5ee50225ad5b94e07a95910237e702415c5b5731c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"AZBRZ_wPjpi-9K78NetGb-Vf9D9GFFnsamvaeW6UNys\\\",\\\"y\\\":\\\"Jtbd0pz6BhNuiBP1s_oyZcTnrf2rOudPCpmGvSH8m_c\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"hMu50k3tcP21VPR_rzSkZQw4grOR53F78rb_NbToTxQ\"}"