"{\"content\":{\"body\":\"### About access()\\n\\nThe *access()* system call checks the accessibility of the file specified in *pathname* based on a process’s real user and group IDs (and supplementary group IDs).\\n\\n```\\n#include <unistd.h>\\nint access(const char *pathname, int mode);\\n```\\n\\nIf *pathname* is a symbolic link, *access()* dereferences it. If all of the permissions specified in *mode* are granted on *pathname*, then *access()* returns 0; if at least one of the requested per- missions is not available (or an error occurred), then *access()* returns –1.\\n\\n### The Issue\\n\\nThe time gap between a call to *access()* and a subsequent operation on a file means that there is no guarantee that the information returned by *access()* will still be true at the time of the later operation (no matter how brief the interval). This situation could lead to security holes in some application designs.\\n\\n### Example\\n\\nSuppose, for example, that we have a set-user-ID-*root* program that uses *access()* to check that a file is accessible to the real user ID of the program, and, if so, per- forms an operation on the file (e.g., *open()* or *exec()*).\\n\\nThe problem is that if the pathname given to *access()* is a symbolic link, and a malicious user manages to change the link so that it refers to a different file before the second step, then the set-user-ID-*root* may end up operating on a file for which the real user ID does not have permission. (This is an example of the type of time-of-check, time-of-use race condition described in Section 38.6.) For this reason, recommended practice is to avoid the use of *access()*  all together(see, for example, \\\\[Borisov, 2005\\\\]). In the example just given, we can achieve this by temporarily changing the effective (or file system) user ID of the set-user-ID process, attempting the desired operation (e.g., *open()* or *exec()*), and then checking the return value and *error-no (errno)* to determine whether the operation failed because of permission issue.\",\"timestamp\":1637144284,\"title\":\"Exploit access() with Symlinks\"},\"digest\":\"HeTWxEZ6EUkQHwb8JALSHnNwXGZUVAE5FtPjM5_q5jU\",\"authorship\":{\"contributor\":\"0x512e8a35C72F08caD58c50352f567971df8294f7\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"IMWH8uq0YGSEy8rAxIT2h6A_fSjRRs912r-TUkl0X-k\\\",\\\"y\\\":\\\"XaY5LIwJnyf34nzwOGtLr6OHiybggaU2xpPwQrY6dXY\\\"}\",\"signature\":\"jCagnqR8Xxmxd6QWEv6fo8FLnfuE6syoApRpBnHybmXVBlO5-GA9k_8BA9VqCT28HNz4Snez6sIbLnPaId6QuQ\",\"signingKeySignature\":\"0x07c38f1299c6ae7718fea651cb5ffbbe013b64beefe9609de4cee98177604e340d2fab21b095942c95da0b6a070058063909fdb7eecdc67dad7ddc5ecc9fae841c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"IMWH8uq0YGSEy8rAxIT2h6A_fSjRRs912r-TUkl0X-k\\\",\\\"y\\\":\\\"XaY5LIwJnyf34nzwOGtLr6OHiybggaU2xpPwQrY6dXY\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"HeTWxEZ6EUkQHwb8JALSHnNwXGZUVAE5FtPjM5_q5jU\"}"