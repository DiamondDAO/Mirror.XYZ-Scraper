"{\"content\":{\"body\":\"## 基本优化\\n\\n\\n● png 转 webp。打包统一压缩图片\\n● 资源转 url 下发（图片，so，以及其他资源），启动时预加载\\n● 重复资源扫描 md5\\n● git hook 提交前检查资源大小（raw/assets/drawable/mipmap)，检查重复资源 md5\\n● 第三方lib 的整合和依赖约束\\n\\n## arsc 优化 \\n\\n### 混淆 \\n\\nAndResGuard\\n\\n### 无用资源删除\\n\\n简单来说，arsc 就是一个资源索引表，配置 R 文件从这个索引表找到对应的资源。\\narsc 文件的解析：<https://github.com/google/android-arscblamer>\\n存在的问题：配置 shrinkResouces true 之后没有完全删除无用的资源\\n\\n![](https://images.mirror-media.xyz/publication-images/zqYwWNkjdbtAGQVdMfCjs.png?height=348&width=1606)\\n\\n1. 一些无用的 Sring、id、attr、dimen 资源实际还存在于 .arsc 文件\\n2. 无用的 Drawable、layout 资源，仅仅被替换成了一个空文件\\n\\n优化思路：\\n● drawable layout 直接把空文件删掉，同时删除对应 arsc 值\\n● 插桩代码记录所有用过的资源，再和 arsc 的资源比对，删掉没用的\\n\\n实际测试：没有用到的 String: app_name2 仍然存在，2 个空的 layout activity_main2 和 activity_main3 分为存在一个空的 xml 文件\\n\\n打包时会把 String anim drawable 等资源打包进 arsc 做映射。\\n\\n解压一个 apk 可以看到有一个 resource.arsc。可以看到有很多类型，而这些就是我们熟悉的 R.array  R.attr R.bool  等等，其实 R.jar 存储就是 arsc 中的资源索引。\\n\\n我们回顾一下 Android 打包的流程：\\n\\narsc 文件被 appt（The Android Asset Packaing Tool） 处理生成。这个过程同时也会生成 R.jar。\\n\\nResourceTypes.h 定义了 arsc 的结构。\\n\\naapt 打包对应的 `task: processDebugResources`，在这个 task 结束时对 arsc 文件操作 在 `build/intermediates/processedres/debug/out` 目录下会成一个后缀为 .ap_ 的文件，这个文件解压后变成：\\n\\n里面由 `Manifest.xml`，`res`，和生成的 `arsc` 组成。\\n\\n查找重复的资源\\n遍历 zip 的 entries 以 crc 分组，如果组内的 size 大于 1 就是重复了。 crc 是一个文件的唯一值。\\nCRC 全称：Cyclic redundancy check（冗余校验码）\\n\\nR文件 内联\\nbooster R inline :booster/booster-transform-r-inline/\\n\\n每个 module 都会生成一个 R 文件。\\nagp 4.1.0 已经做了 自动内联（Android agp 对 R 文件内联支持），4.1.0 里面删除了 默认对 R 的 keep 规则。在 minifyReleaseWithR8  task 中处理。\\n\\n无用的 asset 资源\\n\\nDex 优化\\n● 去除 DebugItem: 支付宝 App 构建优化解析：Android 包大小极致压缩\\n\\nagp 4.2 新增 android.enableResourceOptimizations=true\\n\\nandroid.enableResourceOptimizations=true\\nSmaller APKs with resource optimization\\n\\nReference\\n\\n\\n\\\\#SmallerAPK\\n\\\\#SmallerAPK, Part 1: Anatomy of an APK\\n\\\\#SmallerAPK, Part 2: Minifying code\\n\\\\#SmallerAPK, Part 3: Removing unused resources\\n\\\\#SmallerAPK, Part 4: Multi-APK through ABI and density splits\\n\\\\#SmallerAPK, Part 5: Multi-APK through product flavors\\n\\\\#SmallerAPK, Part 6: Image optimization, Zopfli & WebP\\n\\\\#SmallerAPK, Part 7: Image optimization, Shape and VectorDrawables\\n\\\\#SmallerAPK, Part 8: Native libraries, open from APK\\n\\n23 | 包体积优化（下）：资源优化的进阶实践\\n深入探索 Android 包体积优化（匠心制作-上）\\nAndroid App包瘦身优化实践\",\"timestamp\":1639486414,\"title\":\"Andorid 性能优化-包体积优化\"},\"digest\":\"0dVuPeRv3GgHYcRZRg8gL2Jk_vBx3CHnKBjch9GXND0\",\"authorship\":{\"contributor\":\"0x87AA0FBF311ea1E2f7F8A5Be878EbC84780A3956\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"3RvyqfJJGOHm9C6prNTgs0nSMPZ1aWNlpOBBBQZy-5A\\\",\\\"y\\\":\\\"B3IGqdYMZ1t5A39nS5Jfu7mCJCytcWFAuV31HplA2zE\\\"}\",\"signature\":\"c928j-9JjPp-zjjNJluMq1_1YCVxn4O9TIhFrSKWHP7WGOaN_bJh3JVSL5h916Tp0snzM9p7BpOQwVwzovsfow\",\"signingKeySignature\":\"0x354aae6599044164e85f9cd6518f46497eb7b60649319e0d457a8e9dc995a94f2b3ccb0925cc765c3976283df5f4ded10fd4ac466be12e3e5d9fadd5338b3bba1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"3RvyqfJJGOHm9C6prNTgs0nSMPZ1aWNlpOBBBQZy-5A\\\",\\\"y\\\":\\\"B3IGqdYMZ1t5A39nS5Jfu7mCJCytcWFAuV31HplA2zE\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"0dVuPeRv3GgHYcRZRg8gL2Jk_vBx3CHnKBjch9GXND0\"}"