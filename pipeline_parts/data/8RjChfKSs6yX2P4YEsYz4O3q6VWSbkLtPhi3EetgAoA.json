"{\"content\":{\"body\":\"今天不太舒服，在家请假了一天。突然想起最近因为一些小问题，看了下关于容器中 UID 的东西。所以简单来聊聊这方面的东西。算个新手向的文章\\n\\n## 开篇\\n\\n最近帮 FrostMing 把他的 [tokei-pie-cooker](https://github.com/frostming/tokei-pie-cooker) 部署到我的 K8S 上做成一个 SaaS 服务。Frost 最开始给我了一个镜像地址。然后我啪的一下复制粘贴了一个 Deployment 出来\\n\\n```yaml\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: tokei-pie\\n  namespace: tokei-pie\\n  labels:\\n    app: tokei-pie\\nspec:\\n  replicas: 12\\n  selector:\\n    matchLabels:\\n      app: tokei-pie\\n  template:\\n    metadata:\\n      labels:\\n        app: tokei-pie\\n    spec:\\n      containers:\\n      - name: tokei-pie\\n        image: frostming/tokei-pie-cooker:latest\\n        imagePullPolicy: Always\\n        resources:\\n          limits:\\n            cpu: \\\"1\\\"\\n            memory: \\\"2Gi\\\"\\n            ephemeral-storage: \\\"3Gi\\\"\\n          requests:\\n            cpu: \\\"500m\\\"\\n            memory: \\\"500Mi\\\"\\n            ephemeral-storage: \\\"1Gi\\\"\\n        securityContext:\\n          allowPrivilegeEscalation: false\\n          runAsNonRoot: true\\n```\\n\\n啪的一下，很快嘛，很简单对吧，限制下 Storage 用量，限制一下 NonRoot ，以免我被人打穿。Fine，`kubectl apply -f` 一下。Ops，\\n\\n```text\\nError: container has runAsNonRoot and image has non-numeric user (tokei), cannot verify user is non-root (pod: \\\"tokei-pie-6c6fd5cb84-s4bz7_tokei-pie(239057ea-fe47-40a9-8041-966c65344a44)\\\", container: tokei-pie)\\n```\\n\\n噢，被 K8$ 拦截了，拦截点在 `pkg/kubelet/kuberruntime/security_context_others.go` 中。\\n\\n```go\\nfunc verifyRunAsNonRoot(pod *v1.Pod, container *v1.Container, uid *int64, username string) error {\\n\\teffectiveSc := securitycontext.DetermineEffectiveSecurityContext(pod, container)\\n\\t// If the option is not set, or if running as root is allowed, return nil.\\n\\tif effectiveSc == nil || effectiveSc.RunAsNonRoot == nil || !*effectiveSc.RunAsNonRoot {\\n\\t\\treturn nil\\n\\t}\\n\\n\\tif effectiveSc.RunAsUser != nil {\\n\\t\\tif *effectiveSc.RunAsUser == 0 {\\n\\t\\t\\treturn fmt.Errorf(\\\"container's runAsUser breaks non-root policy (pod: %q, container: %s)\\\", format.Pod(pod), container.Name)\\n\\t\\t}\\n\\t\\treturn nil\\n\\t}\\n\\n\\tswitch {\\n\\tcase uid != nil && *uid == 0:\\n\\t\\treturn fmt.Errorf(\\\"container has runAsNonRoot and image will run as root (pod: %q, container: %s)\\\", format.Pod(pod), container.Name)\\n\\tcase uid == nil && len(username) > 0:\\n\\t\\treturn fmt.Errorf(\\\"container has runAsNonRoot and image has non-numeric user (%s), cannot verify user is non-root (pod: %q, container: %s)\\\", username, format.Pod(pod), container.Name)\\n\\tdefault:\\n\\t\\treturn nil\\n\\t}\\n}\\n```\\n\\n简而言之，K8$ 先会从镜像的 manifact 中拿镜像的 Runing Username. 如果你镜像里有设置 Runing Username 且你设置了 runAsNoneRoot ，同时你没设置 Run uid，那么会报错。Make Sense，如果你指定的用户名的 uid 是0，那么实际上还是打穿了 SecurityContext 的限制\\n\\n找 Frost 要了下他的 Dockerfile，如下\\n\\n```Dockerfile\\nFROM python:3.10-slim\\n\\nRUN useradd -m tokei\\nUSER tokei\\n\\nWORKDIR /app\\nCOPY requirements.txt .\\nRUN pip install -r requirements.txt\\n\\nCOPY templates /app/templates\\nCOPY app.py .\\nCOPY gunicorn_config.py .\\n\\nENV PATH=\\\"/home/tokei/.local/bin:$PATH\\\"\\nEXPOSE 8000\\nCMD [\\\"gunicorn\\\", \\\"-c\\\", \\\"gunicorn_config.py\\\"]\\n```\\n\\nOK, 平平淡淡，没有异常。OK，那我啪的一下改了 Deployment，新版如下\\n\\n```yaml\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: tokei-pie\\n  namespace: tokei-pie\\n  labels:\\n    app: tokei-pie\\nspec:\\n  replicas: 12\\n  selector:\\n    matchLabels:\\n      app: tokei-pie\\n  template:\\n    metadata:\\n      labels:\\n        app: tokei-pie\\n    spec:\\n      containers:\\n      - name: tokei-pie\\n        image: frostming/tokei-pie-cooker:latest\\n        imagePullPolicy: Always\\n        resources:\\n          limits:\\n            cpu: \\\"1\\\"\\n            memory: \\\"2Gi\\\"\\n            ephemeral-storage: \\\"3Gi\\\"\\n          requests:\\n            cpu: \\\"500m\\\"\\n            memory: \\\"500Mi\\\"\\n            ephemeral-storage: \\\"1Gi\\\"\\n        securityContext:\\n          allowPrivilegeEscalation: false\\n          runAsNonRoot: true\\n          runAsUser: 10086\\n```\\n\\n这里选了我自己的 Magic Number， 10086，这下总没问题了吧，我又 duang 的一下执行了 `kubectl apply -f`。Oooops，船新的报错\\n\\n```text\\n/usr/local/bin/python: can't open file '/home/tokei/.local/bin/gunicorn': [Errno 13] Permission denied\\n```\\n\\nOK，那我抛弃我的 Magic Number，换成传说中的数字，1000 来看一下。OK，Works！\\n\\n那么这一切到底是为什么呢？那么接下来小编会来告诉你（XD\\n\\n## 简单的介绍，完整的快乐\\n\\n### 容器中的 UID\\n\\n首先讲一点前置的知识。首先在 Linux 中的 UID 分配规律。首先在一个 Linux UserNamespace 中，UID 默认的范围是从 0 - 60000。其中 UID 0 是 Root 的保留 UID。从理论上来讲，用户 UID/GID 的创建的范围是从 1 到 60000\\n\\n但是实际上可能会更复杂一些，通常各发行版的内置的一些服务，可能会自带一些特殊的用户，比如经典的 www-data （之前没事喜欢搭博客的同学对这个肯定不陌生）。所以实践中，一个 User Namespace 内，一个 UID 的起始，通常是 500 或者 1000。具体的设置，取决于一个特殊文件的设置，[login.defs](https://man7.org/linux/man-pages/man5/login.defs.5.html)，路径是 `/etc/login.defs`\\n\\n官方文档中描述如下：\\n\\n> Range of user IDs used for the creation of regular users by useradd or newusers. The default value for UID_MIN (resp.  UID_MAX) is 1000 (resp. 60000).\\n\\n在我们调用 `useradd` 来在构建 Dockerfile 时添加用户。这个时候，在相关操作执行完毕后，会在 `/etc/passwd` 这个特殊文件中添加对应的用户信息。以 Frost 的 Dockerfile 为例，最终的 passwd 文件内容如下\\n\\n```text\\nroot:x:0:0:root:/root:/bin/bash\\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\\nsync:x:4:65534:sync:/bin:/bin/sync\\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\\n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\\ntokei:x:1000:1000::/home/tokei:/bin/sh\\n```\\n\\n那么构建文件结束后，我们来看一下我们常见的容器运行时之一的 Docker 对此相关的处理。\\n\\n这里还要科普一点前置的知识，现在 Docker 实际上只能算一个 Daemon+CLI，它核心的功能是调用其背后的 containerd。而 containerd 最终通过 runc 来创建相关的容器\\n\\n那我们这里看一下 runc 对此相关的处理\\n\\n在 runc 创建容器的时候，会调用 `runc/libcontainer/init_linux.go.finalizeNamespace` 这个函数完成一些设置，而在这个函数中，会调用 `runc/libcontainer/init_linux.go.setupUser` 这个函数来完成 Exec User 的设置，我们来看下源码\\n\\n```go\\nfunc setupUser(config *initConfig) error {\\n\\t// Set up defaults.\\n\\tdefaultExecUser := user.ExecUser{\\n\\t\\tUid:  0,\\n\\t\\tGid:  0,\\n\\t\\tHome: \\\"/\\\",\\n\\t}\\n\\n\\tpasswdPath, err := user.GetPasswdPath()\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\tgroupPath, err := user.GetGroupPath()\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\texecUser, err := user.GetExecUserPath(config.User, &defaultExecUser, passwdPath, groupPath)\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\tvar addGroups []int\\n\\tif len(config.AdditionalGroups) > 0 {\\n\\t\\taddGroups, err = user.GetAdditionalGroupsPath(config.AdditionalGroups, groupPath)\\n\\t\\tif err != nil {\\n\\t\\t\\treturn err\\n\\t\\t}\\n\\t}\\n\\n\\t// Rather than just erroring out later in setuid(2) and setgid(2), check\\n\\t// that the user is mapped here.\\n\\tif _, err := config.Config.HostUID(execUser.Uid); err != nil {\\n\\t\\treturn errors.New(\\\"cannot set uid to unmapped user in user namespace\\\")\\n\\t}\\n\\tif _, err := config.Config.HostGID(execUser.Gid); err != nil {\\n\\t\\treturn errors.New(\\\"cannot set gid to unmapped user in user namespace\\\")\\n\\t}\\n\\n\\tif config.RootlessEUID {\\n\\t\\t// We cannot set any additional groups in a rootless container and thus\\n\\t\\t// we bail if the user asked us to do so. TODO: We currently can't do\\n\\t\\t// this check earlier, but if libcontainer.Process.User was typesafe\\n\\t\\t// this might work.\\n\\t\\tif len(addGroups) > 0 {\\n\\t\\t\\treturn errors.New(\\\"cannot set any additional groups in a rootless container\\\")\\n\\t\\t}\\n\\t}\\n\\n\\t// Before we change to the container's user make sure that the processes\\n\\t// STDIO is correctly owned by the user that we are switching to.\\n\\tif err := fixStdioPermissions(config, execUser); err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\tsetgroups, err := ioutil.ReadFile(\\\"/proc/self/setgroups\\\")\\n\\tif err != nil && !os.IsNotExist(err) {\\n\\t\\treturn err\\n\\t}\\n\\n\\t// This isn't allowed in an unprivileged user namespace since Linux 3.19.\\n\\t// There's nothing we can do about /etc/group entries, so we silently\\n\\t// ignore setting groups here (since the user didn't explicitly ask us to\\n\\t// set the group).\\n\\tallowSupGroups := !config.RootlessEUID && string(bytes.TrimSpace(setgroups)) != \\\"deny\\\"\\n\\n\\tif allowSupGroups {\\n\\t\\tsuppGroups := append(execUser.Sgids, addGroups...)\\n\\t\\tif err := unix.Setgroups(suppGroups); err != nil {\\n\\t\\t\\treturn err\\n\\t\\t}\\n\\t}\\n\\n\\tif err := system.Setgid(execUser.Gid); err != nil {\\n\\t\\treturn err\\n\\t}\\n\\tif err := system.Setuid(execUser.Uid); err != nil {\\n\\t\\treturn err\\n\\t}\\n\\n\\t// if we didn't get HOME already, set it based on the user's HOME\\n\\tif envHome := os.Getenv(\\\"HOME\\\"); envHome == \\\"\\\" {\\n\\t\\tif err := os.Setenv(\\\"HOME\\\", execUser.Home); err != nil {\\n\\t\\t\\treturn err\\n\\t\\t}\\n\\t}\\n\\treturn nil\\n}\\n```\\n\\n大家看注释应该差不多能理解这段代码在干啥，在这段代码将会调用 `runc/libcontainer/user/user.go.GetExecUserPath` 和 `runc/libcontainer/user/user.go.GetExecUser` 来获取 exec 时的 UID，我们来看一下这块的实现（下面代码我精简了一部（\\n\\n```go\\nfunc GetExecUser(userSpec string, defaults *ExecUser, passwd, group io.Reader) (*ExecUser, error) {\\n\\tif defaults == nil {\\n\\t\\tdefaults = new(ExecUser)\\n\\t}\\n\\n\\t// Copy over defaults.\\n\\tuser := &ExecUser{\\n\\t\\tUid:   defaults.Uid,\\n\\t\\tGid:   defaults.Gid,\\n\\t\\tSgids: defaults.Sgids,\\n\\t\\tHome:  defaults.Home,\\n\\t}\\n\\n\\t// Sgids slice *cannot* be nil.\\n\\tif user.Sgids == nil {\\n\\t\\tuser.Sgids = []int{}\\n\\t}\\n\\n\\t// Allow for userArg to have either \\\"user\\\" syntax, or optionally \\\"user:group\\\" syntax\\n\\tvar userArg, groupArg string\\n\\tparseLine([]byte(userSpec), &userArg, &groupArg)\\n\\n\\t// Convert userArg and groupArg to be numeric, so we don't have to execute\\n\\t// Atoi *twice* for each iteration over lines.\\n\\tuidArg, uidErr := strconv.Atoi(userArg)\\n\\tgidArg, gidErr := strconv.Atoi(groupArg)\\n\\n\\t// Find the matching user.\\n\\tusers, err := ParsePasswdFilter(passwd, func(u User) bool {\\n\\t\\tif userArg == \\\"\\\" {\\n\\t\\t\\t// Default to current state of the user.\\n\\t\\t\\treturn u.Uid == user.Uid\\n\\t\\t}\\n\\n\\t\\tif uidErr == nil {\\n\\t\\t\\t// If the userArg is numeric, always treat it as a UID.\\n\\t\\t\\treturn uidArg == u.Uid\\n\\t\\t}\\n\\n\\t\\treturn u.Name == userArg\\n\\t})\\n\\n    if err != nil && passwd != nil {\\n\\t\\tif userArg == \\\"\\\" {\\n\\t\\t\\tuserArg = strconv.Itoa(user.Uid)\\n\\t\\t}\\n\\t\\treturn nil, fmt.Errorf(\\\"unable to find user %s: %v\\\", userArg, err)\\n\\t}\\n\\n\\tvar matchedUserName string\\n\\tif len(users) > 0 {\\n\\t\\t// First match wins, even if there's more than one matching entry.\\n\\t\\tmatchedUserName = users[0].Name\\n\\t\\tuser.Uid = users[0].Uid\\n\\t\\tuser.Gid = users[0].Gid\\n\\t\\tuser.Home = users[0].Home\\n\\t} else if userArg != \\\"\\\" {\\n\\t\\t// If we can't find a user with the given username, the only other valid\\n\\t\\t// option is if it's a numeric username with no associated entry in passwd.\\n\\n\\t\\tif uidErr != nil {\\n\\t\\t\\t// Not numeric.\\n\\t\\t\\treturn nil, fmt.Errorf(\\\"unable to find user %s: %v\\\", userArg, ErrNoPasswdEntries)\\n\\t\\t}\\n\\t\\tuser.Uid = uidArg\\n\\n\\t\\t// Must be inside valid uid range.\\n\\t\\tif user.Uid < minID || user.Uid > maxID {\\n\\t\\t\\treturn nil, ErrRange\\n\\t\\t}\\n\\n\\t\\t// Okay, so it's numeric. We can just roll with this.\\n\\t}\\n}\\n```\\n\\n这里看着很复杂，实际上总结下来就这样\\n\\n1. 首先从 `/etc/passwd` 读取已知的所有的用户\\n2. 如果用户启动时传入的是用户名，那么判断是否有用户名和启动参数传入的相等，没有则启动失败\\n3. 如果用户启动传入的是 UID，那么如果在已知用户中有对应的用户，那么设置为该用户。如果没有，则将进程的 UID 设置为传入的 UID\\n4. 如果用户什么都没传入，那么以 `/etc/passwd` 中第一个用户来作为 exec 用户。默认情况下第一个用户通常是指 UID 为 0 的 root 用户。\\n\\nOK 那么回到我们的 Deployment 中，那我们不难得出如下的结论\\n\\n1. 如果我们没有设置 runAsUser ，且镜像里也没指定启动用户，那么我们容器中的进程将以当前 user namespace 中 uid 为 0 的 root 用户启动\\n2. 如果在 Dockerfile 中设定了启动时的用户，且没有设置 runAsUser，那么将以我们在 Dockerfile 中的用户启动\\n3. 如果我们设置了 runAsUser 且 Dockerfile 中也指定了相关的用户，那么将以 runAsUser 所指定的 UID 启动进程\\n\\nOK 那么，到这里看似问题解决了。但是这里有个新的疑问。通常来说，我们创建文件之类的操作，默认的权限都是 `755` ，即对于非当前用户，也非当前用户组内的成员，有可读可执行权限。按道理说不应该出现前文所说的 `[Errno 13] Permission denied` 情况。\\n\\n我进容器看了下报错的文件，的确也和我估计的一样，是 755 权限\\n\\n![gunicorn.py](https://user-images.githubusercontent.com/7054676/144605351-630025e7-33a7-421e-b471-cb4cc5a217fe.png)\\n\\n那么问题出在哪呢？问题出在 `~/.local/` 这个文件夹，\\n\\n![\\\\~/.local](https://user-images.githubusercontent.com/7054676/144605509-1caf1ac5-85a9-406d-8a7c-5f6714dca6f3.png)\\n\\n是的没错，这里的 `.local` 是 700 权限，即对于非当前用户，也非当前用户组内的成员，没有对当前目录的可执行权限。这里大家可能有点迷惑，目录的可执行权限是什么？这里引用下官方文档 [Understanding Linux File Permissions](https://www.linux.com/training-tutorials/understanding-linux-file-permissions/) 中的描述\\n\\n> execute – The Execute permission affects a user’s capability to execute a file or view the contents of a directory.\\n\\nOK，好吧，如果没有对应的目录的可执行权限，那么我们也没法执行该目录里的文件，即便我们有文件的可执行权限。\\n\\n而我这里翻了一下 pip 的源码。发现 pip 在用户态安装的时候，如果不存在 .local 目录，那么会创建 .local 目录并将权限设置为 700。\\n\\nOK 到这里我们的整个问题的因果链就已经完全建立了\\n\\n> 在 dockerfile 中创建并设置用户 tokei，uid 1000 -> pip 创建了 700 的 .local， .local 归属 UID 1000 的用户-> 我们 runAsUser 设置为 非 1000 的数字 -> 无 .local 的可执行权限 -> 报错\\n\\n说实话，我能理解 pip 为什么这么设计，但是我觉得这样的设计是有一点 broke 了一些约定俗成的规矩的，其合理性有待商榷\\n\\n## 总结\\n\\n这个问题其实不算难查，但是发生的位置是我有点没有想到的，从我的角度来看，归根结底还是在与 pip 不遵守基本法造成的23333\\n\\n这里留个题目大家有兴趣可以思考下。我们都知道 Docker 有个命令是 `docker cp` 是从宿主机往运行的容器中拷贝文件/从容器中往宿主机中拷贝文件。有个参数是 `-a` ，即保留原文件的 UID/GID，那么如果我们用这个参数从宿主机/容器往容器/宿主机中拷贝文件，那么我们 ls -lh 时，可以看到怎样的 User/UserGroup 信息。\\n\\nOK，这篇水文就先写到这里，写水文真快乐。周末要是有时间的话，可以再写个水文简单聊聊一个关于最近遇到的一个很有趣的根据特征封锁 SSL 流量的手法分析\\n\\n好了，溜了溜了\",\"timestamp\":1641619227,\"title\":\"简单聊聊容器中的 UID 中的一点小坑\"},\"digest\":\"7KdqhGqpmM36b_xhz9F75mxCYsmmI8yB3S52oH8Cx4Q\",\"authorship\":{\"contributor\":\"0xF8bb167a08eB169EC0ac41B6981a295219f2668A\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"BViYi3J7tpXf26ST0vRK6orG40BCPkKYQGMGts69p-o\\\",\\\"y\\\":\\\"Smfknz83LRZ_SRuApZu-IG9e7WaDjoV3XuKJ8rQ-WWE\\\"}\",\"signature\":\"oDMiGglwpUKvwZjPqAni7NiN1T2SmFVGt0FWBgcPEBVXdBuId6XBmFoVQt2duWxhFWek2MUVEIvANAKSeYm5MA\",\"signingKeySignature\":\"0xb162da4876261d8da0556cdcbb4be942e71a8a0838b9d96f50c54f3ef4d391ab74b4440618b83249df02362730266392567fd78852ecb1726b93c1ed56ffe7ed1b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"BViYi3J7tpXf26ST0vRK6orG40BCPkKYQGMGts69p-o\\\",\\\"y\\\":\\\"Smfknz83LRZ_SRuApZu-IG9e7WaDjoV3XuKJ8rQ-WWE\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"7KdqhGqpmM36b_xhz9F75mxCYsmmI8yB3S52oH8Cx4Q\"}"