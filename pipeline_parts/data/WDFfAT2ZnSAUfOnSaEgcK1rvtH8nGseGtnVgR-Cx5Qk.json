"{\"content\":{\"body\":\"In this post, I’d like to touch a little on the [ERC-721 protocol standard](https://eips.ethereum.org/EIPS/eip-721), which is the basis for many “Non-Fungible Tokens” (NFTs) that we see on Ethereum and other blockchains. This will be a fairly technical post, and I’ll assume you’ve already read my previous post [on the distributed ledger](https://mirror.xyz/0x32262672C6D1B814019f4Ca4e2fc53285a919704/_c0jvn6Iaxzm384afvy2V3E5S0WJ6N6iDYVm198WLUU) to better understand the groundwork for some of these ideas.\\n\\n### Fungibility\\n\\nIn the last post, we talked about how *tokens* can carry value in these networks, such as Alice paying Bob 2.5 tokens. These tokens are also used to pay transaction fees in the network, to ensure a transaction is accepted into the blockchain. These tokens are *fungible*: interchangeable and replaceable with one another, much like fiat money. You and your friend can swap each other’s $10 bills, and you’ll still end up with the same value. This is different than a *non-fungible* object, which is an exceedingly fancy way of saying that each object is *unique*, and not interchangeable. For example, imagine you and your friend have tickets to a concert, but one ticket is seated much closer to the stage than the other!\\n\\nThis is the basic idea of NFTs: they describe tokens that are in some ways unique, and not interchangeable with another.\\n\\n### Scarcity & Distributed Consensus\\n\\nAn interesting property of blockchains is that they enable a form of cryptographic scarcity within the network while *also* maintaining aspects of decentralization. Imagine concert tickets: these must be maintained by a central authority’s private ledger, to ensure that two tickets cannot share the same code.\\n\\nIn a decentralized system that supports smart contracts and state, we can define an imaginary “Golden Ticket” that can only be held by one wallet address at a time:\\n\\n```\\ncontract GoldenTicket {\\n  // Current owner of the unique ticket\\n  public address _owner;\\n\\n  // Allow current owner to transfer ticket to another user\\n  public transfer (address _to) {\\n    if (sender == _owner) {\\n      _owner = _to;\\n    }\\n  }\\n}\\n```\\n\\nNotice that the contract itself *is* a non-fungible token. Once deployed, this contract will be associated with a unique addressable hash, such as:\\n\\n`0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb`\\n\\nAnybody could duplicate the above contract and attempt to replicate it, but the new contract will have a different hash, and therefore be considered a *different token*. This makes the original ticket extremely difficult to forge within the system, as long as those within the network continue to come to a consensus about the original hash. As the system and its history is public and verifiable, it is trivial to trace the provenance back to the original contract hash, rather than be fooled by a look-alike contract with a different hash.\\n\\nThe addressable hash above (0xb47..) is that of the [Crypto Punks contract](https://etherscan.io/address/0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb#code), which can be seen as a proto-ERC721 NFT.\\n\\n### Protocol Standards\\n\\nSomething worth recognizing is that ERC-721 (and similar standards, like [ERC-1155](https://eips.ethereum.org/EIPS/eip-1155)) are like rough blueprints for developers to build upon. A standard might define method signatures (names, parameters, attributes, and return values), behaviour, intended functionality, and other aspects related to a particular idea or improvement.\\n\\nThis is somewhat similar to the way the web works: the W3C is a “standards body” that publishes specifications and interfaces, and then developers can begin to implement these interfaces in their applications, hopefully as closely to spec as possible. An example of this is [PointerEvents](https://www.w3.org/TR/2022/WD-pointerevents3-20220105/), a spec that was designed to unify mouse, touch, stylus, and other input devices in the browser with a simpler JavaScript API. The W3C defined the methods, names, events, and so on, and various browser teams began to implement and develop these features so that web developers could use a single API that would work the same across all devices.\\n\\nEthereum aims to be a decentralized network, so there is no singular “standards body” that defines EIPs; instead, these are open to anybody to propose, discuss, and potentially implement if there is enough interest and agreement. Standards proposals also exist in Tezos (known as TZIPs) and other blockchains, but in smaller networks it often is the case that the blockchain developers themselves are the ones mostly publishing and defining these specs.\\n\\n### ERC-721\\n\\nThis brings us to ERC-721, which is not even specific to Ethereum, but can work across any EVM-compatible blockchain, such as [Celo](https://celo.org/). Similar standards have begun to appear on various non-EVM blockchains, such as [TZIP-12](https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-12/tzip-12.md) (FA2 Token) that defines a spec for these kinds of NFT contracts on Tezos.\\n\\nThere are various functions and events in the spec, but the two important functions look like this:\\n\\n```\\ntransferFrom (address _from, address _to, uint256 token_id);\\nownerOf (uint256 token_id);\\n```\\n\\nUnlike our `GoldenTicket` contract, ERC-721 assumes that a single contract may wish to define and distribute many tokens (or “tickets”). Each unique ticket is associated with a `token_id` that defines its uniqueness, and we can use the `ownerOf` method to query which address currently owns each token.\\n\\nNote that there is no scarcity limits defined in the spec—tokens can be unlimited—nor is there any mention of what kind of content these contracts must describe, or even any requirement for the content to be defined within the contract itself. These are up to developers to implement, allowing the contract to be used across a variety of applications (property, deeds, collectibles, rewards, art, loans).\\n\\nThe popular [Crypto Punks](https://etherscan.io/address/0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb#code) contract (created some time before ERC-721) does not include additional metadata on-chain, but does define on-chain a `sha256` image hash, allowing anybody with access to the full-sized PNG texture to verify the traits of each numbered token (gender, accessories, hair style, etc).\\n\\n### Metadata & Token URIs\\n\\nUnfortunately, as these blockchains are highly constrained environments, it is not feasible or realistic to “upload” an entire image onto the ledger (it would cost thousands of dollars in transaction fees). This kind of data must be defined and maintained off-chain.\\n\\nIn an attempt to unify different types of NFT-like contracts and the metadata associated with each token, the protocol defines an *optional* extension that allows you to query the metadata URI of each `token_id`. \\n\\n```\\ntokenURI(uint256 token_id) returns (string);\\n```\\n\\nThis way, each token can be associated with a unique URI that defines its unique properties: perhaps a high-resolution JPEG and its thumbnail, or the unique traits of a procedurally created avatar, or the seat number in a concert stadium.\\n\\nTypically, the URI will point to a JSON file that adheres to the “ERC721 Metadata JSON Schema” (defined in the same spec). This allows for NFT wallets, OpenSea marketplaces, and other applications to know how to fetch thumbnails, high-resolution images, title, description, and other details.\\n\\n```\\n{\\n  \\\"title\\\": \\\"Golden Ticket – Seat 32B\\\",\\n  ...\\n}\\n```\\n\\n### IPFS Hash\\n\\nThe last piece of the puzzle is in the media hosting itself. Rather than pointing to a URL on a HTTPS server, that might be shut down one day or could be changed to any arbitrary data at the will of the server host, NFTs tend to rely on distributed hosting systems like [IPFS](https://ipfs.io/). For example, `token_id` #466 might return the following `tokenURI` string:\\n\\n`ipfs://QmXJ98cXwjxvnL57uKm1AzBJMaCw4ykYejUt3JoKrZgnNc`\\n\\nThis is a content-addressable hash to a JSON file that describes an artwork of mine distributed on the [Tezos Hic Et Nunc marketplace](https://mattdesl.substack.com/p/hicetnunc-and-the-merits-of-web3). If you have an IPFS node running, you can view and host this file in a peer-to-peer manner, much like BitTorrent. I have a copy of this file on my own local disk, and a cloud server for redundancy, and various others within the community (platform operators, art collectors) are also helping to pin and maintain these files.\\n\\nIf you don’t have an IPFS node running, you can view this via a CDN gateway such as [the one provided by Cloudflare](https://cloudflare-ipfs.com/ipfs/QmXJ98cXwjxvnL57uKm1AzBJMaCw4ykYejUt3JoKrZgnNc). The [full-resolution media file](https://cloudflare-ipfs.com/ipfs/QmZC9TJLaGrEQVmRUUEDGjB5Ntru4aWUtwfEkxT1M9p2bV) described in this JSON file is also using IPFS for distribution and hosting. Unlike a typical URL, the content is fixed to this hash, and so altering the content will create an entirely new string of characters. However, like a URL on a web server, it is also susceptible to link rot if the file happens to be lost forever—such as if all hosts stop pinning (seeding), and the original files are no longer accessible on *any* hard drives or other cloud hosting services.\\n\\n### On-Chain Metadata\\n\\nSome projects, such as [Autoglyphs](https://larvalabs.com/autoglyphs#:\\\\~:text=Autoglyphs%20are%20an%20experiment%20in,chosen%20charity%2C%20350.org.), [ArtBlocks](https://artblocks.io/), and the audio-visual work of [Deafbeef](https://www.deafbeef.com/) will deploy contracts that in some way hold the entire metadata and media within them. These typically need to be procedural and algorithm, to fit within affordable byte constraints of smart contract deployment. This is one reason that generative art and demoscene-like media has found a natural fit within these protocols, as they can be published and stored onto the distributed ledger in a rather immutable and relatively permanent manner.\\n\\n### Crypto Art\\n\\nSo far, I’ve mostly talked about the technical underpinnings of ERC-721 and NFT protocols, attempting to break down their basic components to help illustrate what lies beneath these rather complex subjects.\\n\\nPerhaps my next post will be less technical, focusing more generally on what kinds of problems “crypto art” can solve for digital artists. For example: distribution, revenue, royalties, collaborative splits, self-hosted markets and auctions, digital ownership, and other concepts.\",\"timestamp\":1642075833,\"title\":\"ERC-721\"},\"digest\":\"YDqOMp4NmIZJES1cdqoupRVpGmmaQfh5i8o6qzR3fBU\",\"authorship\":{\"contributor\":\"0x32262672C6D1B814019f4Ca4e2fc53285a919704\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ux_5y6HwUol6LVbT0Bi5eb9mof0rLaApHP8jSDkcNlk\\\",\\\"y\\\":\\\"afqTIFi4cRUc2iyomqgJ7AfLTmfcubKd8JybGDsbI28\\\"}\",\"signature\":\"CoNZAE3dDxFnlrb12bOj3ZC-qqADcTOf-I4ycGqVn2DUK1M1xLNXQJVKaHvOUnMlSCfR-aQNi-1L3vFu0ArdoQ\",\"signingKeySignature\":\"0xe8566d06870a7ec6ea6ec2d217b6df0e0abe1e10b1412a398cbbcb50921b9e816c8a04f734d25640164046f6b7fafca4cbcfd049c8566ded882e922c8675fe2b1c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"ux_5y6HwUol6LVbT0Bi5eb9mof0rLaApHP8jSDkcNlk\\\",\\\"y\\\":\\\"afqTIFi4cRUc2iyomqgJ7AfLTmfcubKd8JybGDsbI28\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"YDqOMp4NmIZJES1cdqoupRVpGmmaQfh5i8o6qzR3fBU\"}"