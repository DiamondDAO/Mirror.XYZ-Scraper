"{\"content\":{\"body\":\"## Binary search\\n\\nGiven an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\\n\\nIf target is not found in the array, return \\\\[-1, -1\\\\].\\n\\nYou must write an algorithm with O(log n) runtime complexity.\\n\\nExample 1:\\n\\nInput: nums = \\\\[5,7,7,8,8,10\\\\], target = 8\\nOutput: \\\\[3,4\\\\]\\nExample 2:\\n\\nInput: nums = \\\\[5,7,7,8,8,10\\\\], target = 6\\nOutput: \\\\[-1,-1\\\\]\\nExample 3:\\n\\nInput: nums = \\\\[\\\\], target = 0\\nOutput: \\\\[-1,-1\\\\]\\n\\nConstraints:\\n\\n0 <= nums.length <= 105\\n\\\\-109 <= nums\\\\[i\\\\] <= 109\\nnums is a non-decreasing array.\\n\\\\-109 <= target <= 109\\n\\n来源：力扣（LeetCode）\\n链接：<https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array>\\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\\n\\n```\\nclass Solution {\\n    public int[] searchRange(int[] nums, int target) {\\n        // int left =0;\\n        // int right=nums.length-1;\\n\\n        // while(){\\n        //     int[] res=new int[2];\\n        //     int mid=left+((right-left)/2);\\n            \\n        //     //target 值超出左右边界\\n        //     if(nums[0]>target || nums[nums.length-1]<target){\\n        //         return new int[2] {-1,-1};\\n        //     }\\n        //     //target 值在范围内但是不存在nums中\\n        //     if()\\n        // }\\n        // if(nums.length==1&&nums[0]==target){\\n        //     return new int[] {0,0};\\n        // }\\n        int[] res=new int[2];\\n        res[0]=Solution.getLeftBorder(nums,target);\\n        res[1]=Solution.getRightBorder(nums,target);\\n        return res;\\n\\n\\n\\n    }\\n\\n    private static int getLeftBorder(int[] nums, int target){\\n        int left =0;\\n        int right=nums.length-1;\\n        while(left<=right){\\n            int mid=left+((right-left)/2);\\n            if(nums[0]==target){\\n                return 0;\\n            }\\n            if(nums[mid]==target &&nums[mid-1]!=target){\\n                return mid;\\n            }\\n            if(nums[mid]<target){\\n                left=mid+1;\\n            }else if(nums[mid]>target){\\n                right=mid-1;\\n            }\\n            if(nums[mid]==target&&nums[mid-1]==target){\\n                right--;\\n            }\\n        }\\n        return -1;\\n    }\\n\\n    private static int getRightBorder(int[] nums, int target){\\n        int left =0;\\n        int right=nums.length-1;\\n        while(left<=right){\\n            int mid=left+((right-left)/2);\\n            if(nums[nums.length-1]==target){\\n                return nums.length-1;\\n            }\\n            if(nums[mid]==target &&nums[mid+1]!=target){\\n                return mid;\\n            }\\n            if(nums[mid]<target){\\n                left=mid+1;\\n            }else if(nums[mid]>target){\\n                right=mid-1;\\n            }\\n            if(nums[mid]==target&&nums[mid+1]==target){\\n                right++;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```\",\"timestamp\":1641033464,\"title\":\"34. Find First and Last Position of Element in Sorted Array\"},\"digest\":\"aFCpcx8JPZE1jtEioxHRoIdfbzIM7oVdFZ2LYW0cukY\",\"authorship\":{\"contributor\":\"0x4f9f53DBfFEEc13D69fD842D7E9107607f624234\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"KTAmiCGmYB_EiAzbAHgdkQpra8eWpTbr9NKELRE9Wbw\\\",\\\"y\\\":\\\"RaKxxQq_1VZ0Z1AnjYV-zkXndDggaofjpKpQO-NUTPw\\\"}\",\"signature\":\"YRNkIPg4X2fYcK4M3r_6lGFgZLTuDmFOmUXaveoG5vL-M6PqX5qmeWIgLJB_Dkn8I5C40i2a8iU3SCz88Z56Mg\",\"signingKeySignature\":\"0x73e270afa129e1a9d98fc967d6f7fe46e02f03631c65ee42670d5fba7ce67f1b5072aaa4785875e08d7fc18dcad73a60f3aac5413fa6d559bb5db9078677f85d1c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"KTAmiCGmYB_EiAzbAHgdkQpra8eWpTbr9NKELRE9Wbw\\\",\\\"y\\\":\\\"RaKxxQq_1VZ0Z1AnjYV-zkXndDggaofjpKpQO-NUTPw\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"aFCpcx8JPZE1jtEioxHRoIdfbzIM7oVdFZ2LYW0cukY\"}"