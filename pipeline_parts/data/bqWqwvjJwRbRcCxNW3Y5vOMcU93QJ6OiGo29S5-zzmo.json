"{\"content\":{\"body\":\"### 五层协议的体系结构\\n\\n1. 应用层\\n   应用层(application-layer）的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统 DNS，支持万维网应用的 HTTP 协议，支持电子邮件的 SMTP 协议等等。我们把应用层交互的数据单元称为报文。\\n2. 运输层\\n   运输层(transport layer)的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。由于一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。\\n3. 网络层\\n   网络层(network layer)负责为分组交换网上的不同主机提供通信服务。 在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 IP 协议，因此分组也叫 IP 数据报 ，简称 数据报。\\n   这里要注意：**不要把运输层的“用户数据报 UDP ”和网络层的“ IP 数据报”弄混**。另外，无论是哪一层的数据单元，都可笼统地用“分组”来表示。\\n   网络层的另一个任务就是选择合适的路由，使源主机运输层所传下来的分株，能通过网络层中的路由器找到目的主机。\\n   这里强调指出，网络层中的“网络”二字已经不是我们通常谈到的具体网络，而是指计算机网络体系结构模型中第三层的名称.\\n   互联网是由大量的异构（heterogeneous）网络通过路由器（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Intert Prococol）和许多路由选择协议，因此互联网的网络层也叫做网际层或IP层。\\n4. 数据链路层\\n   数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。 在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装程帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。\\n   在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。\\n   控制信息还使接收端能够检测到所收到的帧中有误差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。如果需要改正数据在链路层传输时出现差错（这就是说，数据链路层不仅要检错，而且还要纠错），那么就要采用可靠性传输协议来纠正出现的差错。这种方法会使链路层的协议复杂些。\\n5. \\n\\n### TCP三次握手和四次挥手\\n\\n1. 为什么要三次握手？\\n   第一次握手，发送方发送一个带`SYN=j`的数据包\\n   第二次握手，接收方发送一个`ACK=j+1,SYN=k`的数据包\\n   第三次握手，发送方发送一个`ACK=k+1`的数据包，就这样建立起来了连接\\n   因为发送方和接收方都需要确认双方都能正常接收和发送：\\n   第一次握手：Client 什么都不能确认；Server 确认了对方发送正常\\n   第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己接收正常，对方发送正常\\n   第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送接收正常\\n   所以三次握手就能确认双发收发功能都正常，缺一不可。\\n2. 为什么要四次挥手？\\n   任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了TCP连接。\\n   举个例子：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”，A 回答“知道了”，这样通话才算结束。\\n\\n### 停止等待协议\\n\\n1. 无差错情况，发送方发送分组，接收方在规定时间内收到，并且回复确认，发送方再次发送\\n2. 出现差错情况（超时重传），停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 自动重传请求 ARQ 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。连续 ARQ 协议 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。\\n3. 确认丢失和确认迟到\\n   a. 确认丢失：确认消息在传输过程中丢失\\n   当A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：\\n   1）丢弃这个重复的M1消息，不向上层交付。\\n   2）向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。\\n   b. 确认迟到：确认消息在传输过程中迟到\\n   A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：\\n   1）A收到重复的确认后，直接丢弃。\\n   2）B收到重复的M1后，也直接丢弃重复的M1。\\n\\n### 自动重传请求 ARQ 协议\\n\\n停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求ARQ。\\n优点： 简单\\n缺点： 信道利用率低\\n\\n### 连续ARQ协议\\n\\n连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。\\n优点： 信道利用率高，容易实现，即使确认丢失，也不必重传。\\n缺点： 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。\\n\\n### 滑动窗口\\n\\nTCP 利用滑动窗口实现流量控制的机制。\\n滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同���发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。\\nTCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小\\n\\n### 流量控制\\n\\nTCP 利用滑动窗口实现流量控制。\\n流量控制是为了控制发送方发送速率，保证接收方来得及接收。\\n接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。\\n\\n### 拥塞控制\\n\\n在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。**拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。**\\n为了进行拥塞控制，TCP 发送方要维持一个 **拥塞窗口(cwnd)** 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。\\nTCP的拥塞控制采用了四种算法，即\\\\*\\\\*慢开始、拥塞避免、快重传和快恢复。\\\\*\\\\*在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。\\n\\n1. 慢开始： 慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍。\\n2. 拥塞避免： 拥塞避免算法的思路是让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送放的cwnd加1.\\n3. 快重传与快恢复：\\n   在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。  当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。\\n\\n### HTTP长连接、短连接\\n\\nHTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。\\n`Connection:keep-alive`\\n\\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。\\n\\n### IP数据报格式\\n\\n**版本** : 有 4（IPv4）和 6（IPv6）两个值；\\n**首部长度** : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为首部固定长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。\\n**区分服务** : 用来获得更好的服务，一般情况下不使用。\\n**总长度** : 包括首部长度和数据部分长度。\\n**生存时间** ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。\\n**协议** ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。\\n**首部检验和** ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。\\n**标识** : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。\\n**片偏移** : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节\\n\\n### IP地址分为哪几类？简单说一下各个分类\\n\\n![image](https://user-images.githubusercontent.com/61953384/111017958-5c126b00-83f1-11eb-9c08-afe1d2aaf2d1.png)\\n\\n### ARP是地址解析协议，简单语言解释一下工作原理\\n\\n![image](https://user-images.githubusercontent.com/61953384/111017991-7a786680-83f1-11eb-9eb2-bf14e2edbbf8.png)\\n\\n### TCP了解吗，说一下滑动窗口\\n\\n窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。\\n\\n发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。\\n\\n接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。\\n\\n### 慢启动与拥塞避免\\n\\n慢启动：\\n不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。\\n拥塞避免：\\n拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍，这样拥塞窗口按线性规律缓慢增长。\\n发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 ...\\n\\n注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd >= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。\\n\\n如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。\\n\\n### 快重传与快恢复\\n\\n快重传：\\n快重传要求接收方在收到一个 失序的报文段 后就立即发出 重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。\\n快恢复：\\n快重传配合使用的还有快恢复算法，当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半，但是接下去并不执行慢开始算法：因为如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。\\n在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报��段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。\\n\\n在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。\\n\\n在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。\\n\\n慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。\\n\\n### 讲讲TCP握手的三次流程\\n\\n![image](https://user-images.githubusercontent.com/61953384/111018026-a4ca2400-83f1-11eb-87f7-7d2baf451061.png)\\n\\n最初两端的TCP进程都处于CLOSE(关闭)状态。\\n上图中A主动打开连接，B被动打开连接。\\nB打开连接后处于LISTEN(监听状态)，等待客户的连接请求。\\nA向B发送请求报文，SYN=1,ACK=0,选择一个初始序号seq=x。\\nB 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为ack= x+1，同时也选择一个初始的序号 seq=y。\\nA 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为ack= y+1，序号为 seq=x+1。\\nB 收到 A 的确认后，连接建立。\\n\\n### 讲讲TCP的四次挥手过程\\n\\n![image](https://user-images.githubusercontent.com/61953384/111018032-af84b900-83f1-11eb-83ec-09e56edaf01e.png)\\n\\n### TCP四次挥手的原因\\n\\n四次挥手的原因\\n\\nCLOSE-WAIT\\n\\n客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。\\n\\nTIME-WAIT\\n\\n客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。\\n\\n为什么A在TIME-WAIT状态必须等待2MSL的时间呢？\\n\\n这么做有两个理由：\\n\\n为了保证A发送的最后一个ACK报文段能够到达B。\\nA发送的这个ACK报文段有可能丢失，如果 B 没收到 A 发送来的确认报文，那么A就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。\\n防止“已经失效的连接请求报文段”出现在本链接中。\\nA在发送完最后一个ACK报文段后，再经过时间2MSL，就可以使本连接的时间内所产生的所有报文段都从网络中消失。这样下一个新的连接中就不会出现这种旧的连接请求报文段。\\n\\n### 为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？\\n\\n这是因为服务端的LISTEN状态下的SOCKET当收到SYN报文的连接请求后，它可以把ACK和SYN(ACK起应答作用，而SYN起同步作用)放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可能未必会马上会关闭SOCKET,也即你可能还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了，所以它这里的ACK报文和FIN报文多数情况下都是分开发送的。\\n\\n### HTTP和HTTPS的区别\\n\\nHttp协议运行在TCP之上，明文传输，客户端与服务器端都无法验证对方的身份；Https是身披SSL(Secure Socket Layer)外壳的Http，运行于SSL()上，SSL运行于TCP之上，是添加了加密和认证机制的HTTP。二者之间存在如下不同：\\n\\n端口不同：Http与Http使用不同的连接方式，用的端口也不一样，前者是80，后者是443；\\n资源消耗：和HTTP通信相比，Https通信会由于加减密处理消耗更多的CPU和内存资源；\\n开销：Https通信需要证书，而证书一般需要向认证机构购买；\\nHttps的加密机制是一种共享密钥加密和公开密钥加密并用的混合加密机制。\\n\\n### DNS域名系统，简单描述其工作原理。\\n\\n当DNS客户机需要在程序中使用名称时，它会查询DNS服务器来解析该名称。客户机发送的每条查询信息包括三条信息：指定的DNS域名，指定的查询类型，DNS域名的指定类别。基于UDP服务，端口53. 该应用一般不直接为用户使用，而是为其他应用服务，如HTTP，SMTP等在其中需要完成主机名到IP地址的转换。\\n\\n客户机向其本地域名服务器发出DNS请求报文\\n本地域名服务器收到请求后，查询本地缓存，假设没有该记录，则以DNS客户的身份向根域名服务器发出解析请求\\n根域名服务器收到请求后，判断该域名所属域，将对应的顶级域名服务器的IP地址返回给本地域名服务器\\n本地域名服务器向顶级域名服务器发出解析请求报文\\n顶级域名服务器收到请求后，将所对应的授权域名服务器的IP地址返回给本地域名服务器\\n本地域名服务器向授权域名服务器发起解析请求报文\\n授权域名服务器收到请求后，将查询结果返回给本地域名服务器\\n本地域名服务器将查询结果保存到本地缓存，同时返回给客户机\\n\\n#### 补充：分为递归和迭代，递归就是递归查找，迭代就是迭代查找\\n\\n## TCP连接状态图（补充\\n\\n![image](https://user-images.githubusercontent.com/61953384/112709085-491f9080-8ef1-11eb-9492-a57cade3eeb0.png)\\n\\n## TCP套接字编程（补充\\n\\n![image](https://user-images.githubusercontent.com/61953384/125579608-d1a12a7c-c9fd-4593-a5ac-a01f0d5d62ce.png)\\n\\n\",\"timestamp\":1639139873,\"title\":\"计算机网络面试常见题（理解最重要\"},\"digest\":\"qwiFQsYakoycorUaP-i0Iw3_IVQgO-j08Um9ZgkoNlQ\",\"authorship\":{\"contributor\":\"0x3bb53E81D7B9BD6369AD84d7289B2B42FB486120\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"2E_iBw2u_9uCpoN4iRFCEzk8nX8l_PBvYpUFagX9CpM\\\",\\\"y\\\":\\\"1wy9tJoR7kdNKt_ZLRjOEmxsOyEvUTD186LnAZ3qKL8\\\"}\",\"signature\":\"SSwrtB5zaG8UoTKRaY1RO-YYLm55CneIG22jRFSC3MLTzePGjJWgIYQZzwl__lH7fwiE8Rik84wg0OYEHs3vAA\",\"signingKeySignature\":\"0x688a4c18e9f3be526a4eea78762dd76aff8a17cd33034b7e9a9b9d34c19d011335b6772910ad5e15c106758f16bff449c197a8c15b7bf876e70238adcd38816a1c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"2E_iBw2u_9uCpoN4iRFCEzk8nX8l_PBvYpUFagX9CpM\\\",\\\"y\\\":\\\"1wy9tJoR7kdNKt_ZLRjOEmxsOyEvUTD186LnAZ3qKL8\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"qwiFQsYakoycorUaP-i0Iw3_IVQgO-j08Um9ZgkoNlQ\"}"