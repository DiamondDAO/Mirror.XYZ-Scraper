"{\"content\":{\"body\":\"# Querying events from unverified contracts\\n\\nSo you want to write a Dune query for some quick and dirty analysis, but the contract isn‚Äôt verified on Dune! \\\\*starts sobbing uncontrollably üò≠üò≠\\\\*\\n\\nBut degens aren‚Äôt deterred! With a little understanding of Ethereum events and a little effort, you can be on your way to querying.\\n\\nIn this post we‚Äôll walk through analyzing some data from a contract that is yet to be verified on Dune--Juicebox‚Äôs [Terminal V1 contract](https://etherscan.io/address/0xd569d3cce55b71a8a3f3c418c329a66e5f714431#code) that is being used by [Constitution DAO](https://www.constitutiondao.com/).\\n\\nI realized partway through writing this tutorial that Richard Chen already used the methodology I‚Äôm discussing to create a query for summing the amount given by each contributor to ConstitutionDAO, so to give due credit to the Gandalf of Dune wizards, I‚Äôll be breaking down the steps to get to [his result](https://dune.xyz/queries/244441/456924).\\n\\n### Ethereum events\\n\\nEvents (also known as logs) on Ethereum are a way of storing historical information that is significantly cheaper than contract storage. While this data can‚Äôt be accessed by contracts, they can be easily queried from an application.\\n\\nThey are typically used as records of pertinent information from a transaction, so they are also great for analysis.\\n\\nIn this example, we‚Äôll look at `Pay` events from the Terminal V1 contract, which have information on who paid into the DAO and how much. I pasted an example of one of these events below [from Etherscan](https://etherscan.io/tx/0xd0f984134f92d81e243a83af1305afc9e827bec1606e681aaa61b695bb6e98b4#eventlog).\\n\\n![An example Pay event from tx 0xd0f...8b4](https://images.mirror-media.xyz/publication-images/Ik82ImwfK2jV1Q32sMVSm.png?height=373&width=873)\\n\\n### Getting the events we want\\n\\nDune Analytics has a table of all the events that take place on Ethereum--`ethereum.logs`. But how do we get the events we want?\\n\\nEvents have up to 4 indexed parameters to make querying from a node easier and faster. Dune stores these in `ethereum.logs` as `topic1`, `topic2`...\\n\\nThe first topic is almost always the ‚Äúevent signature,‚Äù an identifier for the event.\\n\\nThere are two ways to get this:\\n\\n1. Grab it from an example event on a block explorer\\n2. Compute it yourself using the event information\\n\\nFor the first method, if you have an example transaction and the contract is verified on Etherscan, you can grab the first topic from the event log. In our on-chain example, you can see that the signature is \\\\`0x3deb3bb81c337489381f7685daa204d30e6a265dac443a718949c258e3e17317\\\\`.\\n\\n![Event signature as the first topic.](https://images.mirror-media.xyz/publication-images/NMj_Lp8m8YrloZBbG1jlP.png?height=362&width=863)\\n\\nSay you don‚Äôt have an example transaction handy or the contract isn‚Äôt verified on Etherscan, doesn‚Äôt matter if you‚Äôre a degen! If you know the event name and parameter types, you can compute the signature yourself!\\n\\nThe signature is the keccak256 hash of the event name and argument types:\\n\\n`keccak256('eventName(arg1 type,arg2 type‚Ä¶)')`\\n\\nFor the `Pay` event, it‚Äôs:\\n\\n`keccak256('Pay(uint256,uint256,address,uint256,string,address)')`\\n\\nUsing node and [\\\\`ethers\\\\`](https://www.npmjs.com/package/ethers), we can run:\\n\\n```\\nconst ethers = require('ethers');\\n\\nethers.utils.keccak256(ethers.utils.toUtf8Bytes('Pay(uint256,uint256,address,uint256,string,address)'));\\n```\\n\\nWe get the same result:\\n\\n![Using ethers to compute to the event signature.](https://images.mirror-media.xyz/publication-images/6rPOCFf_dSetUVfHYa11-.png?height=97&width=1065)\\n\\nFinally, we can use the event signature and contract address to fetch these events [in Dune](https://dune.xyz/queries/247743):\\n\\n![Using the event signature and contract address to grab the events we want.](https://images.mirror-media.xyz/publication-images/-DmD8h71bqM8HWD9YgI3r.png?height=526&width=867)\\n\\n### Using the event data\\n\\nNow that we have the event data, we can start to look at some numbers.\\n\\nLooking back at our sample event, let‚Äôs look at what information we have:\\n\\n![Event parameters.](https://images.mirror-media.xyz/publication-images/5cLUg9ViSQJ1GE4HcoJV0.png?height=359&width=862)\\n\\nWe want to see the contributions to ConstitutionDAO by contributor. You can see there is a `projectId` field on which we‚Äôll want to filter, a `beneficiary` field showing who contributed (and therefore should be the beneficiary of DAO tokens), and an `amount` that we‚Äôll want to sum.\\n\\n`ethereum.logs` has 4 columns (topic1-topic4) for each of the (up to) 4 indexed fields. `projectId` will be in `topic3` and `beneficiary` will be in `topic4`. `amount` is concatenated with the other non-indexed parameters in the `data` field.\\n\\nYou‚Äôll notice that the data fields (`topic*` and `data`) are not nice decoded values. Rather, everything is a bytes data type.\\n\\nFor addresses, we want to the hex string anyway, so all we want to do is effectively cut out the leading zeros in the bytes with the `substring` function like so:\\n\\n`SUBSTRING(topic4 FROM 13 FOR 20) AS address_from_topic4`\\n\\nFor `projectId`, we want to get a numeric value. We can use the `bytea2numeric` function to convert the raw bytes to a decimal number like so:\\n\\n`BYTEA2NUMERIC(topic3) AS project_id_from_topic3`\\n\\nLast but not least, we need to combine the previous two functions to get the `amount` parameter. Since `amount` is one of the non-indexed parameters, it is concatenated with the other non-indexed parameters (`note` and `called`). Since `amount` is the first parameter and it‚Äôs 32 bytes long, we can clean it up like so:\\n\\n`BYTEA2NUMERIC(SUBSTRING(data FROM 1 FOR 32)) AS amount_wei_from_data`\\n\\nYou‚Äôll notice that this is a large number, because it is the amount of ether specified in its smallest denomination--wei. We need to divide it by 10^18 to get the amount in ether:\\n\\n`BYTEA2NUMERIC(SUBSTRING(data FROM 1 FOR 32)) / 1e18 AS amount_ether_from_data`\\n\\nWe can check all these parameters are correct by comparing [our query](https://dune.xyz/queries/247747) with our sample event.\\n\\n![Spring data cleaning.](https://images.mirror-media.xyz/publication-images/9IakG-FYzPMOmlbtgrARo.png?height=509&width=1843&size=large)\\n\\n![The sample event.](https://images.mirror-media.xyz/publication-images/SMqBoIqM74NdFR9pWpXvv.png?height=367&width=868)\\n\\nLooks great!\\n\\nIf we apply everything discussed herein, we end up with [Richard Chen‚Äôs query](https://dune.xyz/queries/244441/456924) for the largest contributors:\\n\\n![The final query.](https://images.mirror-media.xyz/publication-images/77F0hpsB73mWrTSo3XU0y.png?height=534&width=981)\\n\\nGo forth and query, my fellow degen wizards.\\n\\n## Appendix\\n\\nOne thing to watch out for when doing this is are parameters that aren‚Äôt a fixed width in bytes. For example, in the `Pay` event, there is a `note` field of type `string`. The `string` type can be an arbitrary length, so if you‚Äôre querying in the data field for a parameter after it (like `caller`), it takes some extra tricks. I‚Äôll leave that to you to figure out :)\",\"timestamp\":1637098539,\"title\":\"How to use Dune Analytics like a degen\"},\"digest\":\"0C3EQBtFqAK4k2TAGPZhg0JMY-upfTAxuTD-o91vBPc\",\"authorship\":{\"contributor\":\"0x7B542178633f16940a131F8F6d670ffdbBe6b2Ab\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XzcLQfYQvleskKqT_aga9AZa_6IIFK9pGGRWPZWoDCs\\\",\\\"y\\\":\\\"AQ_aCUGRefLAo_7t1lMXg0ckaAROAQuGu7LJSWDvDbE\\\"}\",\"signature\":\"ceJku0NSe8oU222dmtd_1qNq8LV0KOWF0Lr5na_YCy51y22_Yo5rW8n5p6wonSOWp_0LAEzQL7UC4DauoHTivA\",\"signingKeySignature\":\"0xdbbcd1daf2823ffde07ecab97d4cde97c71eabd0bad9a9d02cd0f51e0467765549e2149193ceacaf6871cf925e68d58d7bdd4acf3c8d88159a1f1ea9053a066101\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XzcLQfYQvleskKqT_aga9AZa_6IIFK9pGGRWPZWoDCs\\\",\\\"y\\\":\\\"AQ_aCUGRefLAo_7t1lMXg0ckaAROAQuGu7LJSWDvDbE\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"0C3EQBtFqAK4k2TAGPZhg0JMY-upfTAxuTD-o91vBPc\"}"