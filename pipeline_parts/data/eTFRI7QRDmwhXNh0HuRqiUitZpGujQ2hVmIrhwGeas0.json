"{\"content\":{\"body\":\"Aim at gathering the findings I made along the way while integrating Mango Market.\\n\\nMango is a permission-less DEX with leverage and perpetuals.\\n\\n[https://mango.markets/](https://mango.markets/)\\n\\n\\n_____\\n\\n## Localnet dev environment with --clone\\n\\nI want to iterate quickly, it’s much more comfortable for development and testing.\\n\\nMango is currently accessible on `devnet` and `main-net` clusters, but my anchor workspace contains several projects, that I modify often, so I don’t feel like using `devnet`.\\n\\nI want to be able to have my usual `anchor test` speed, not sure what happen behind the curtain but the deployments to `localnet` don’t event appear in the prompt, making it ideal for speed.\\n\\nIn order to use Mango on `localnet` I found this neat option for `solana-test-validator` (the program running `localnet` coming with the Solana cli) :\\n\\n`--clone <account>`  (credits to dvcrn#7961 on the Anchor Discord)\\n\\nIt copies accounts from another cluster into the starting `localnet` instance, and note that once you run the `solana-local-validator` once, it create a `test-ledger` folder that store its state. So `--clone` only have effect when this `test-ledger` is not there, of if you use `--reset` to start fresh.\\n\\nThis is how I use it :\\n\\n```\\n#!/bin/bash\\n\\n# Reset then configure the local validator to mimic the mango accounts on devnet\\nsolana-test-validator \\\\\\n --url https://mango.devnet.rpcpool.com                 `: # Cluster from which the below program will be cloned` \\\\\\n --clone TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA    `: # token program` \\\\\\n --clone 8mFQbdXsFXt3R3cu3oSNS3bDZRwJRP18vyzd9J278J9z   `: # cache `\\\\\\n --clone ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL   `: # assoc token program` \\\\\\n --clone aca3VWxwBeu8FTZowJ9hfSKGzntjX68EXh1N9xpE1PC    `: # Acam wallet` \\\\\\n --clone 9KBGW5bbfdLA4zKAXPETwjR5Ub7BR2Zh9gKHsPnrUkUg   `: ## BTC assoc token acc` \\\\\\n --clone 7CZfVDqqYueBujgvqxwDp7Y29eoe5zcgdcqvsUW5bcqP   `: ## USDC assoc token acc` \\\\\\n --clone 4uv1EwgZNa91tnBbr49KrQmpb29mp95e9ATh77tgxr6B   `: ## WSOL assoc token acc` \\\\\\n --clone Eyh77zP5b7arPtPgpnCT8vsGmq9p5Z9HHnBSeQLnAFQi   `: # Test user wallet` \\\\\\n --clone C2CmwB1DBgaKUKHUNi9Ua55wKSH12W95wJEe8yMbSzCN   `: ## BTC assoc token acc` \\\\\\n --clone gq25cMCGNb9VNquJsqTYNpipUjZbVB6FktQiENvnq7q    `: ## USDC assoc token acc` \\\\\\n --clone 92jBUBivpzTu5EEtdVgKXXwmEhfqFMsg91z2RRYyobFQ   `: ## WSOL assoc token acc` \\\\\\n --clone 54PcMYTAZd8uRaYyb3Cwgctcfc1LchGMaqVrmxgr3yVs   `: # mango fees vault` \\\\\\n --clone 8FRFC6MoGGkMFQwngccyu69VnYbzykGeez7ignHVAFSN   `: # USDC mango test TOKEN MINT followed by mango root/node` \\\\\\n --clone HUBX4iwWEUK5VrXXXcB7uhuKrfT4fpu2T9iZbg712JrN \\\\\\n --clone J2Lmnc1e4frMnBEJARPoHtfpcohLfN67HdK1inXjTFSM \\\\\\n --clone 3UNBZ6o52WTWwjac2kPUb4FyodhU1vFkRJheu1Sh2TvU   `: # BTC TOKEN MINT followed by mango root/node`\\\\\\n --clone BeEoyDq1v2DYJCoXDQAJKfmrsoRRvfmV856f2ijkXbtp \\\\\\n --clone 4X3nP921qyh6BKJSAohKGNCykSXahFFwg1LxtC993Fai \\\\\\n --clone Bb9bsTQa1bGEtQ5KagGkvSHyuLqDWumFUcRqFusFNJWC   `: # Mango TOKEN MINT followed by mango root/node` \\\\\\n --clone CY4nMV9huW5KCYFxWChrmoLwGCsZiXoiREeo2PMrBm5o \\\\\\n --clone 6rkPNJTXF37X6Pf5ct5Y6E91PozpZpZNNU1AGATomKjD \\\\\\n --clone So11111111111111111111111111111111111111112    `: # WSOL TOKEN MINT followed by mango root/node` \\\\\\n --clone 8GC81raaLjhTx3yedctxCJW46qdmmSRybH2s1eFYFFxT \\\\\\n --clone 7mYqCavd1K24fnL3oKTpX3YM66W5gfikmVHJWM3nrWKe \\\\\\n --clone Cu84KB3tDL6SbFgToHMLYVDJJXdJjenNzSKikeAvzmkA   `: # ETH TOKEN MINT followed by mango root/node` \\\\\\n --clone AxwY5sgwSq5Uh8GD6A6ZtSzGd5fqvW2hwgGLLgZ4v2eW \\\\\\n --clone 3FPjawEtvrwvwtAetaURTbkkucu9BJofxWZUNPGHJtHg \\\\\\n --clone AvtB6w9xboLwA145E221vhof5TddhqsChYcx7Fy3xVMH   `: # SRM TOKEN MINT followed by mango root/node` \\\\\\n --clone 73W29LAZog2zSyE1uNYivBW8SMZQX3WBX4qfTMrMJxW2 \\\\\\n --clone 9wkpWmkSUSn9fitLhVh12cLbiDa5Bbhf6ZBGmPtcdMqN \\\\\\n --clone 3YFQ7UYJ7sNGpXTKBxM3bYLVxKpzVudXAe4gLExh5b3n   `: # RAY TOKEN MINT followed by mango root/node` \\\\\\n --clone 49S76N83tSBBozugLtNYrMojFqDb3VvYq4wBB6bcAhfV \\\\\\n --clone JBHBTED3ttzk5u3U24txdjBFadm4Dnohb7g2pwcxU4rx \\\\\\n --clone DAwBSXe6w9g37wdE2tCrFbho3QHKZi4PjuBytQCULap2   `: # USDT TOKEN MINT followed by mango root/node` \\\\\\n --clone 7JTHE8C1kvB4h67RVvhdHjDqHXsWkSeoKcBsHV7wVhu \\\\\\n --clone ERkKh9yUKzJ3kkHWhMNd3xGaync11TpzQiDFukEatHEQ \\\\\\n --clone Ec2enZyoC4nGpEfu2sUNAa2nUGJHWxoUWYSEJ2hNTWTA   `: # MANGO starts - devnet.2 cluster `\\\\\\n --clone 4skJ85cdxQAFVKbcGgfun8iZPL7BadVYXG3kGEGkufqA   `: # mangoProgramId `\\\\\\n --clone 79Rz9FwjTYSGMbpPBbQMT6kEmqhuGvhqpCPEoALJGmsb   `: # vault? `\\\\\\n --clone ARXGB9mirFMC5capL5vkYULf4BEzSfbjdCUDJWaCyqA    `: # vault? `\\\\\\n --clone 6eadH6vSsEk5bPiXWPYRq5KRSjohfYd6Ug5HjGbxaWce \\\\\\n --clone DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY   `: # serumProgramId`\\\\\\n --clone AvKzLiE8ezzp6kLVw49nq8drycE89NS1RQaBWjBNeUoF \\\\\\n --clone 8k7F9Xb36oFJsjpCKpsXvg4cgBRoZtwNTc3EzG5Ttd2o   `: # ??? these account were needed but idk wtf mango devnet use them for` \\\\\\n --clone 4GqTjGm686yihQ1m1YdTsSvfm4mNfadv6xskzgCYWNC5   `: # oracle xau pyth?` \\\\\\n --clone 8PugCXTAHLM9kfLSQWe2njE5pzAgUdpPk3Nx5zSm7BD3   `: # ? luna pyth?` \\\\\\n --clone 4L6YhY8VvUgmqG5MvJkUJATtzB2rFqdrJwQCmFLv4Jzy   `: # ? doge pyth?` \\\\\\n --clone BLArYBCUYhdWiY8PCUTpvFE21iaJq85dvxLk9bYMobcU   `: # ? btc pyth?` \\\\\\n --clone 6vivTRs5ZPeeXbjo7dfburfaYDWoXjBtdtuYgQRuGfu    `: # ? ftt pyth?` \\\\\\n --clone 3m1y5h2uv7EQL3KaJZehvAJa4yDNvgc5yAdL9KPMKwvk   `: #  BTC/USD Pyth Account`\\\\\\n --clone HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J   `: #: BTC/USD Pyth Price Account`\\\\\\n --clone 3Mnn2fX6rQyUsyELYms1sBJyChWofzSNRoqYzvgMVz5E   `: #: SOL/USD Pyth Account`\\\\\\n --clone J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix   `: #: SOL/USD Pyth Price Account`\\\\\\n --clone EssaQC37YW2LVXTsEVjijNte3FTUw21MJBkZYHDdyakc   `: #: mngo/USD Pyth Account`\\\\\\n --clone DCNw5mwZgjfTcoNsSZWUiXqU61ushNvr3JRQJRi1Nf95   `: #: mngo/USD Pyth Price Account`\\\\\\n --clone 2ciUuGZiee5macAMeQ7bHGTJtwcYTgnt6jdmQnnKZrfu   `: #: eth/USD Pyth Account`\\\\\\n --clone EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw   `: #: eth/USD Pyth Price Account`\\\\\\n --clone 6NpdXrQEpmDZ3jZKmM2rhdmkd3H6QAk23j2x8bkXcHKA   `: #: usdc/USD Pyth Account`\\\\\\n --clone 5SSkXsEKQepHHAewytPVwdej4epN1nxgLVM84L4KXgy7   `: #: usdc/USD Pyth Price Account`\\\\\\n --clone 6MEwdxe4g1NeAF9u6KDG14anJpFsVEa2cvr5H6iriFZ8   `: #: srm/USD Pyth Account`\\\\\\n --clone 992moaMQKs32GKZ9dxi8keyM2bUmbrwBZpK4p2K6X5Vs   `: #: srm/USD Pyth Price Account`\\\\\\n --clone 3BtxtRxitVDcsd7pPUWUnFm9KvmNDy9usS4gE6pUFhpH   `: #: ray/USD Pyth Account`\\\\\\n --clone EhgAdTrgxi4ZoVZLQx1n93vULucPpiFi2BQtz9RJr1y6   `: #: ray/USD Pyth Price Account`\\\\\\n --clone C5wDxND9E61RZ1wZhaSTWkoA8udumaHnoQY6BBsiaVpn   `: #: usdt/USD Pyth Account`\\\\\\n --clone 38xoQ4oeJCBrcVvca2cGk7iV1dAfrmTR1kmhSCJQ8Jto   `: #: usdt/USD Pyth Price Account`\\\\\\n --clone FHQtNjRHA9U5ahrH7mWky3gamouhesyQ5QvpeGKrTh2z   `: # BTC Perp market `\\\\\\n --clone F1Dcnq6F8NXR3gXADdsYqrXYBUUwoT7pfCtRuQWSyQFd   `: ## bidsKey `\\\\\\n --clone BFEBZsLYmEhj4quWDRKbyMKhW1Q9c7gu3LqsnipNGTVn   `: ## asksKey `\\\\\\n --clone Bu17U2YdBM9gRrqQ1zD6MpngQBb71RRAAn8dbxoFDSkU   `: ## eventsKey `\\\\\\n --clone 58vac8i9QXStG1hpaa4ouwE1X7ngeDjY9oY7R15hcbKJ   `: # SOL Perp market `\\\\\\n --clone 7HRgm8iXEDx2TmSETo3Lq9SXkF954HMVKNiq8t5sKvQS   `: ## bidsKey `\\\\\\n --clone 4oNxXQv1Rx3h7aNWjhTs3PWBoXdoPZjCaikSThV4yGb8   `: ## asksKey `\\\\\\n --clone CZ5MCRvkN38d5pnZDDEEyMiED3drgDUVpEUjkuJq31Kf   `: ## eventsKey `\\\\\\n --clone 8W8Hrj16TZhM4RrFzHBuyWGbh396ig3hJtLPJRGmxPVG   `: # MNGO/USDC Spot market `\\\\\\n --clone Diynh714TQsx3qP2bsUuKZk8P31UtKWS9xU6jAZ7A97q   `: ## bidsKey `\\\\\\n --clone EhgGeUyv42vZkfWTi2Bxk53cUEW9WWDWrt3qURo8Jfzm   `: ## asksKey `\\\\\\n --clone 5vE1a72aw1Hi6JR8sK6ny9mRetWExkryYVxPFQ7zNGY2   `: ## eventsKey `\\\\\\n --clone DW83EpHFywBxCHmyARxwj3nzxJd7MUdSeznmrdzZKNZB   `: # BTC/USDC Spot market `\\\\\\n --clone PuDcnQDEpoR3WwVAi8PqnHJxHbVEwiusM4PnyHEykFT   `: ## bidsKey `\\\\\\n --clone 998DHpQmViDq67vMFKYYXgaHs3CJ5YHEBQSoiwxCjsCW   `: ## asksKey `\\\\\\n --clone CQxwLPMoqAwi5wcfkULzF6Fwh7cf4Aiz8tR6DY4NNCN1   `: ## eventsKey `\\\\\\n --clone BkAraCyL9TTLbeMY3L1VWrPcv32DvSi5QDDQjik1J6Ac   `: # ETH/USDC Spot market `\\\\\\n --clone ETf3PZi9VaBsfpMU5e3SAn4SMjkaM6tyrn2Td9N2kSRx   `: ## bidsKey `\\\\\\n --clone 3pfYeG2GKSh8SSZJEEwjYqgaHwYkq5vvSDET2M33nQAf   `: ## asksKey `\\\\\\n --clone F43gimmdvBPQoGA4eDxt2N2ooiYWHvQ8pEATrtsArKuC   `: ## eventsKey `\\\\\\n --clone 5xWpt56U1NCuHoAEtpLeUrQcxDkEpNfScjfLFaRzLPgR   `: # SOL/USDC Spot market `\\\\\\n --clone 8ezpneRznTJNZWFSLeQvtPCagpsUVWA7djLSzqp3Hx4p   `: ## bidsKey `\\\\\\n --clone 8gJhxSwbLJkDQbqgzbJ6mDvJYnEVWB6NHWEN9oZZkwz7   `: ## asksKey `\\\\\\n --clone 48be6VKEq86awgUjfvbKDmEzXr4WNR7hzDxfF6ZPptmd   `: ## eventsKey `\\\\\\n --clone 249LDNPLLL29nRq8kjBTg9hKdXMcZf4vK2UvxszZYcuZ   `: # SRM/USDC Spot market `\\\\\\n --clone 5p39nxjdx9RXDVjSwTaej9oUgiLHeV8tfUn7PJoJRLgu   `: ## bidsKey `\\\\\\n --clone 2sxkmiwvaMNtuh7eFQPMycJHrwrcJixDASXQFJx79y6C   `: ## asksKey `\\\\\\n --clone F66CSYP3TgxGjVongBJ7Cjbiq9j267Keos7cUUUbBZx7   `: ## eventsKey `\\\\\\n --clone 5xhm43GzigfEh8XAo5PwgoKK3gFkRr2PUgzWAmLzUTv2   `: # RAY/USDC Spot market `\\\\\\n --clone BVDy8YmnbVtfidu8N5YJBDoHXf7vn5B6xnsV6ZLFnFdD   `: ## bidsKey `\\\\\\n --clone 4QpxvtDNetYt4pbC8Ng66i6BZdkJEEtSux8HVdGKZbxh   `: ## asksKey `\\\\\\n --clone DgojAawYqQqp4Wn9RwahP6yXMNGXsAtBfnoLNqNaWeLy   `: ## eventsKey `\\\\\\n --clone E7ch7T7v4DTHcc2YF6ioQow4UPfubbSdpgYqyxoEhiMu   `: # USDT/USDC Spot market `\\\\\\n --clone ELwx9pggHdz9CKDpnyCg6L1b8U67WPGsQ4TTbNsLjZJc   `: ## bidsKey `\\\\\\n --clone Gr9rsX5uGCTDbhSPzCfrzufSt1mTCggSJAgPfwhBBX1r   `: ## asksKey `\\\\\\n --clone H1gJZngRXUtj7N91xnnydC39XqmbU8d2jQZxwqSf21jX   `: ## eventsKey ` \\\\\\n --reset                                                `: # Reset the test-ledger -- Put it at the end to ensure there is no silent error above`\\n```\\n\\nI run that script once to configure my `localnet`, or to reset it.\\n\\nYou can then start you `solana-local-validator` the usual way, or run the above script each time if you want to have the same environment than devnet.\\n\\nAnd then call `anchor test --skip-local-validator` to run your tests against it (at first I though Anchor would pick up the local `test-ledger` but it doesn’t).\\n\\nAll the accounts come from the mango `ids.rs`, plus some other things that were required along the way. The idea is to clone everything that’s needed, from the mints to all the mango accounts.\\n\\n[https://github.com/blockworks-foundation/mango-client-v3/blob/main/src/ids.json](https://github.com/blockworks-foundation/mango-client-v3/blob/main/src/ids.json)\\n\\n\\n______\\n\\nOne neat thing that you might have caught in the above script, is that to also copy my users accounts and their associated token accounts from the devnet in order to have the right tokens and balances, mints and identities without bothering with mocking :\\n\\n```\\n// ...\\n--clone aca3VWxwBeu8FTZowJ9hfSKGzntjX68EXh1N9xpE1PC    `: # Acam wallet` \\\\\\n --clone 9KBGW5bbfdLA4zKAXPETwjR5Ub7BR2Zh9gKHsPnrUkUg   `: ## BTC assoc token acc` \\\\\\n --clone 7CZfVDqqYueBujgvqxwDp7Y29eoe5zcgdcqvsUW5bcqP   `: ## USDC assoc token acc` \\\\\\n --clone 4uv1EwgZNa91tnBbr49KrQmpb29mp95e9ATh77tgxr6B   `: ## WSOL assoc token acc` \\\\\\n --clone Eyh77zP5b7arPtPgpnCT8vsGmq9p5Z9HHnBSeQLnAFQi   `: # Test user wallet` \\\\\\n --clone C2CmwB1DBgaKUKHUNi9Ua55wKSH12W95wJEe8yMbSzCN   `: ## BTC assoc token acc` \\\\\\n --clone gq25cMCGNb9VNquJsqTYNpipUjZbVB6FktQiENvnq7q    `: ## USDC assoc token acc` \\\\\\n --clone 92jBUBivpzTu5EEtdVgKXXwmEhfqFMsg91z2RRYyobFQ   `: ## WSOL assoc token acc` \\\\\\n// ...\\n```\\n\\nYou can easily follow Mango tutorial to get Devnet tokens, then go trade these on the devnet Mango for other Sol, BTC and the like (That’s a good way to avoid the devnet sol airdrop limitation 🤫)\\n\\n[https://docs.mango.markets/tutorials/how-to-receive-dev-net-tokens](https://docs.mango.markets/tutorials/how-to-receive-dev-net-tokens)\\n\\nAll in all, this allows me to send Mango instructions like `InitMangoAccount` successfully.\\n\\nOne last thing that I loose using `anchor test --skip-local-validator` compared to just running `anchor test` is that the deployment does prompt now, not as fast. Will look into that later to understand what’s the diff.\\n\\n\\n__________\\n\\n## Anchor and CPI to Mango\\n\\nMango is not idiomatic Anchor friendly, the project is large, and has been started from before Anchor. Also they probably don’t want to rely on a framework that still in development?\\n\\nMost of the “issues” here, are not really issues… Just sugar and QoL stuff, subjective.\\n\\nOne thing for instance is that you cannot use the `Program<‘info, Mango>` as there is no `declare_id` call as required by Anchor.\\n\\nThen you cannot do idiomatic CPI and pass typed accounts without wrapping some classes as Anchor did for the Token Program. But is that really needed? Most of the time you’r just forwarding mango accounts adresses to the mango programs anyway.\\n\\nSo not that problematic after all.\\n\\nDid a small PR about the `Program` thing :\\n\\n[https://github.com/blockworks-foundation/mango-v3/pull/67](https://github.com/blockworks-foundation/mango-v3/pull/67)\\n\\n\\n_____\\n\\n### Creating and initialising the MangoAccount\\n\\nThe next thing is that the `mango::state::MangoAccount` has a span of 28912 bytes if I’m not mistaken, preventing you to use the Anchor IDL account creation :\\n\\n```\\n    #[account(\\n        init,\\n        seeds = [MANGO_SEED, mint.key().as_ref()],\\n        bump,\\n        payer = authority,\\n        owner = mango::mango_program::Mango::id(), // This is my custom stuff added with the PR above\\n        space = MANGO_ACCOUNT_SPAN, // 28912\\n    )]\\n    pub mango_account: AccountInfo<'info>,\\n```\\n\\nResults in this error :\\n`Account data size realloc limited to 10240 in inner instructions`\\n\\nSo I fall back on the associated instruction init as follows :\\n\\n```\\n// ... In the Solana program\\n// signer cause it's required later for the CPI initialization \\n#[account(mut, signer)]\\npub mango_account: AccountInfo<'info>,\\n// ...\\n```\\n\\nand in the typescript code\\n\\n```\\n// ...\\n   const mangoAccount = new Keypair(); \\n   const createMangoAccountIx = SystemProgram.createAccount({\\n      programId: MANGO_PROGRAM_ID,\\n      space: MangoAccountLayout.span,\\n      lamports: await getRentExemption(MangoAccountLayout.span),\\n      fromPubkey: admin.wallet.publicKey,\\n      newAccountPubkey: mangoAccount.publicKey, \\n    });\\n    // Then call your program instruction and don't forget the IX + the mangoAccount.secretKey in the signers.\\n    // instructions: [createMangoAccountIx],\\n    // signers: [mangoAccount.secretKey],\\n// ...\\n```\\n\\n\\n_____\\n\\n### Mint-erlude 🥂\\n\\nFor the next “Mango related” part, I will have to stop testing with my locally crafted mints, and start using the actual `devnet` token mints, so that the cloned accounts from the mango program can find their babies.\\n\\nHere I go on `devnet` , I create a new wallet, fund it with some of the required tokens.\\n\\n![r i c h](https://images.mirror-media.xyz/publication-images/C7r_Z4yLnUpTe4oVh9cB3.png?height=352&width=1978)\\n\\nNext step is to go in the script that setup the local environment for `localnet` and add this new account to the cloning.\\n\\n```\\n// ...\\n--clone Eyh77zP5b7arPtPgpnCT8vsGmq9p5Z9HHnBSeQLnAFQi   `: # Test user wallet` \\\\\\n// ...\\n```\\n\\nFinal step, is to go in the program and create the `Keypair` associated to these thanks to the exported Private Key. (We need keypair to sign stuff)\\n\\n```\\n// ...\\n// aca3VWxwBeu8FTZowJ9hfSKGzntjX68EXh1N9xpE1PC\\nconst aca3VWSeed = Uint8Array.from([\\n  197, 246, ... 146, 223,\\n]);\\n// Eyh77zP5b7arPtPgpnCT8vsGmq9p5Z9HHnBSeQLnAFQi\\nconst Eyh77Seed = Uint8Array.from([\\n  219, 139, ... 212, 175,\\n]);\\n\\n// Identities - both of these are wallets that exists on devnet, we clone them in the localnet env\\naca3VWxwBeu8FTZowJ9hfSKGzntjX68EXh1N9xpE1PC\\nexport let admin = Keypair.fromSecretKey(aca3VWSeed);\\nexport let user = Keypair.fromSecretKey(Eyh77Seed);\\n// ...\\n```\\n\\nNow I have my test identities that are funded with the tokens I need, and ready to be used in my tests.\\n\\n\\n_____\\n\\n### Depositing to the Mango Account\\n\\nOk this is where I though I would stop this article, it all started to come together and then… this hard check got me:\\n\\n`self.last_update >= now_ts - (mango_group.valid_interval * 2),`\\n\\n[https://github.com/blockworks-foundation/mango-v3/blob/main/program/src/state.rs#L612](https://github.com/blockworks-foundation/mango-v3/blob/main/program/src/state.rs#L612)\\n\\nTurn out mango have a thing called `Keeper` (?) that run updates on cached data, and there is a date limit for Mango program to consider it valid, which is logical.\\n\\nOn `devnet`/`mainnet` I think that keeper is ran as a side effet of other IX or through some other mechanism, but on this `localnet` version we need to run it ourselves.\\n\\n```\\n// ... In my test utils/mango helper file  \\nasync createUpdateRootBankTx(): Promise<Transaction> {\\n    const rootBanks = await this.group.loadRootBanks(this.client.connection);\\n\\n    const updateRootBankTransaction = new Transaction();\\n    this.FIXED_IDS.forEach((token, i) => {\\n      if (rootBanks[i]) {\\n        updateRootBankTransaction.add(\\n          makeUpdateRootBankInstruction(\\n            MANGO_PROGRAM_ID,\\n            this.group.publicKey,\\n            this.group.mangoCache,\\n            rootBanks[i]!.publicKey,\\n            rootBanks[i]!.nodeBanks.filter((n) => !n.equals(zeroKey))\\n          )\\n        );\\n      }\\n    });\\n    return updateRootBankTransaction;\\n  }\\n```\\n\\nThis is then ran before calling my function depositing money :\\n\\n```\\n// ...\\nconst updateRootBanksTx = await utils.mango.createUpdateRootBankTx();\\nawait sendAndConfirmTransaction(connection, updateRootBanksTx, [admin.payer], TXN_OPTS);\\n// ...\\n```\\n\\nwith the [FIXED_IDS](https://github.com/blockworks-foundation/mango-client-v3/blob/ce76884d7899c5502e50d05d5bba513dd28bdd6b/test/TestGroup.ts#L30) that map devnet adresses (that we cloned on `localnet`).\\n\\n![feelsgood.jpg](https://images.mirror-media.xyz/publication-images/TgDl_Ylp5M_iq6FYPe22a.png?height=92&width=262)\\n\\nAbout the actual deposit, most of the complexity is in finding the account to pass to the mango CPI :\\n\\n```\\n// ... In my typescript code    \\nconst mangoCacheAccount = await utils.mango.getMangoCache();\\n    const mangoRootBankAccount = await utils.mango.getRootBankForToken(depositedTokenIndex);\\n    const mangoNodeBankAccount = await utils.mango.getNodeBankFor(depositedTokenIndex);\\n    const mangoDepositedVaultAccount = utils.mango.getVaultFor(depositedTokenIndex);\\n    console.log(`* token mint ${depositedTokenMint}`);\\n    console.log(`* mango group ${utils.mango.group.publicKey}`);\\n    console.log(`* mango acc ${depositoryBTC.mangoAccount.publicKey}`);\\n    console.log(`* mango cache ${mangoCacheAccount}`);\\n    console.log(`* rootbank ${mangoRootBankAccount}`);\\n    console.log(`* nodebank ${mangoNodeBankAccount}`);\\n    console.log(`* nodeBank vault ${mangoDepositedVaultAccount}`);\\n// ...\\n```\\n\\nAnd the little helpers to get all this in my mango utils\\n\\n```\\n// ... mango.ts , the little wrapper with utils for tests\\n async setupMangoGroup() {\\n    this.group = await this.client.getMangoGroup(this.mangoGroupKey);\\n    this.group.rootBankAccounts = await this.group.loadRootBanks(this.client.connection);\\n    this.group.mangoCache = (await this.group.loadCache(this.client.connection)).publicKey;\\n  }\\n\\n  getTokenIndex(tokenMint: PublicKey): number {\\n    // look up token index by mint public key\\n    return this.group.getTokenIndex(tokenMint);\\n  }\\n\\n  getTokenConfig(tokenIndex: number): TokenConfig {\\n    return this.groupConfig.tokens.find((_config, index) => {\\n      return index == tokenIndex;\\n    });\\n  }\\n\\n  getRootBankForToken(tokenIndex: number): PublicKey {\\n    const rootBank = this.group.rootBankAccounts[tokenIndex];\\n    if (!rootBank) {\\n      throw new Error(\\\"vault is undefined\\\");\\n    }\\n    return rootBank.publicKey;\\n  }\\n\\n  getNodeBankFor(tokenIndex: number): PublicKey {\\n    const tokenConfig = this.getTokenConfig(tokenIndex);\\n    const nodeBank = this.group.rootBankAccounts[tokenIndex].nodeBankAccounts.find((node, _index) => {\\n      if (!node) {\\n        return false;\\n      }\\n      return node.publicKey.toBase58 == tokenConfig.rootKey.toBase58;\\n    });\\n    if (!nodeBank) {\\n      throw new Error(\\\"nodeBank is undefined\\\");\\n    }\\n    return nodeBank.publicKey;\\n  }\\n\\n  getVaultFor(tokenIndex: number): PublicKey {\\n    const vault = this.group.rootBankAccounts[tokenIndex].nodeBankAccounts[0].vault;\\n    if (!vault) {\\n      throw new Error(\\\"vault is undefined\\\");\\n    }\\n    return vault;\\n  }\\n\\n  getMangoCache(): PublicKey {\\n    return this.group.mangoCache;\\n  }\\n// ...\\n```\\n\\nWith this in place, the deposit is working, doing CPI from my program.\\n\\n```\\n// ... inside the Solana program doing the CPI call       \\nlet instruction = solana_program::instruction::Instruction {\\n            program_id: ctx.accounts.mango_program.key(),\\n            data: mango::instruction::MangoInstruction::Deposit {\\n                quantity: coin_amount,\\n            }\\n            .pack(),\\n            accounts: vec![\\n                AccountMeta::new_readonly(ctx.accounts.mango_group.key(), false),\\n                AccountMeta::new(ctx.accounts.mango_account.key(), false),\\n                AccountMeta::new_readonly(ctx.accounts.depository_record.key(), true),\\n                AccountMeta::new_readonly(ctx.accounts.mango_cache.key(), false),\\n                AccountMeta::new_readonly(ctx.accounts.mango_root_bank.key(), false),\\n                AccountMeta::new(ctx.accounts.mango_node_bank.key(), false),\\n                AccountMeta::new(ctx.accounts.mango_vault.key(), false),\\n                AccountMeta::new_readonly(ctx.accounts.token_program.key(), false),\\n                AccountMeta::new(ctx.accounts.user_deposited_coin.key(), false),\\n            ],\\n        };\\n\\n        let account_infos = [\\n            ctx.accounts.mango_program.to_account_info(),\\n            ctx.accounts.mango_group.to_account_info(),\\n            ctx.accounts.mango_account.to_account_info(),\\n            ctx.accounts.depository_record.to_account_info(),\\n            ctx.accounts.mango_cache.to_account_info(),\\n            ctx.accounts.mango_root_bank.to_account_info(),\\n            ctx.accounts.mango_node_bank.to_account_info(),\\n            ctx.accounts.mango_vault.to_account_info(),\\n            ctx.accounts.token_program.to_account_info(),\\n            ctx.accounts.user_deposited_coin.to_account_info(),\\n        ];\\n\\n        solana_program::program::invoke_signed(\\n            &instruction,\\n            &account_infos,\\n            pda_signer_seed,\\n        )?;\\n```\\n\\n \\n _____\\n\\n## 360\\n\\nOk so, as I advanced in the mango integration, the complications increased.\\n\\nDepositing is working, but then opening a Perp position necessitate more than the `RootBanks` to be updated, it needs the `cache` with the prices from oracles, the `fundingRate` etc.\\n\\nThat started to be a lot of things to add to the account copy, and I was still having issues with inconsistencies. Not scalable in that case to use **local-net cloning**.\\n\\nI want to insist on the in that case. Mango is a complicated system, with too many moving pieces to emulate the whole thing in local, that’s why I will use devnet for it. But for other project, hell yeah I’ll use localnet cloning from now on. \\n\\nIt allows me to :\\n\\n* use existing mints\\n* use the same users each time\\n* reset the same states from my wallets with the minting and token accounts creation out of the way\\n* sharing that with other developper if you include the seeds of these devnet test identities in the code\\n* access to things like Pyth easily (but with the static value I think, havn’t checked. Maybe if you copy the whole Pyth programs stack it will also track, idk out of scope for my current task)\\n\\nI’ve seen Pyth handling by moking the accounts with the `local pyth client` and fake values in Jet protocol code, and I think the solution described above remove some boiler. It’s less configurable though, as you cannot choose the value. So yes, depending of your need, keep the clone tool in mind. \\n  \\n ______\\n\\n## Back to Devnet, with the same test though!\\n\\nI’m surprised I cannot run :\\n\\n\\\\`anchor test --provider.cluster <https://api.devnet.solana.com> --skip-local-validator\\\\`\\n\\nEven by setting the provider to `devnet` in the `Anchor.toml` and having my env setup with\\n\\n\\\\`solana config set --url <https://api.devnet.solana.com>\\\\` \\n  \\n So I use this script instead, that allow me to run the testing suit on devnet.\\n\\n```\\n#!/bin/bash\\n\\n### This SHOULD be the same as putting \\\"devnet\\\" as provider in the Anchor.toml\\n### and running `anchor test --provider.cluster https://api.devnet.solana.com --skip-local-validator`\\n### But idk why it doesn't work. Seems anchor test is hardcoded somewhere for localnet. \\n### So use this script meanwhile.\\n\\n\\necho \\\"== [ Starts $0 ] ==\\\"\\n\\nSOLANA_DEVNET=\\\"https://api.devnet.solana.com\\\"\\n\\necho \\\"== [ Exporting Anchor env variables ] ===================================\\\"\\nexport ANCHOR_PROVIDER_URL=$SOLANA_DEVNET\\nexport ANCHOR_WALLET=~/.config/solana/id.json\\n\\necho \\\"== [ Set local Solana env to Devnet ] ===================================\\\"\\nsolana config set --url $SOLANA_DEVNET\\n\\necho \\\"== [ Building... ] ======================================================\\\"\\nanchor build\\n\\necho \\\"== [ Deploy... ] ========================================================\\\"\\nanchor --provider.cluster $ANCHOR_PROVIDER_URL deploy\\n\\necho \\\"== [ Run test suit against Devnet ] =====================================\\\"\\nTEST_SUIT=tests/test_*.ts\\nTEST_TIMEOUT=100000\\n\\nyarn ts-mocha -p ./tsconfig.json -t $TEST_TIMEOUT $TEST_SUIT\\n\\necho \\\"== [ $0 completed ] ==\\\"\\n```\\n\\nI think I’ll stop here for now, the mango integration seems straightforward and all the blockers taken out of the way.\\n\\nIf I run into complications I’ll update this article. If you find mistakes or improvements please ping me on twitter too. \\n  \\n If you run into issues that are related to the above example, ping on tweeter!\\n\\n@Alexand23684236\",\"timestamp\":1634715569,\"title\":\"Mango integration, localnet testing and Anchor CPI to non Anchor programs\"},\"digest\":\"brtarSTPOECAhYf1EMhmJCySQWnJ8pT_-msJYKiuj7Y\",\"authorship\":{\"contributor\":\"0x9fEcc73Da3f8bd2aC436547a72f8Dd32326D90dc\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"HQpc6cr_wO6ZJUUn7LGOZOxDRpLH9v-NAZv2XrK8l5c\\\",\\\"y\\\":\\\"U68BcmwUO82Vc9LlAElRF0NNFpvjFv2BYxZ95bBzZWc\\\"}\",\"signature\":\"b1neQxhpP9wnUrh086yq2XLG6VAfrnX41HGkOrV7hH3DHevqF7R-Fcr1uW08UQpW-KpTagvyIXhfM5rEsU3nOQ\",\"signingKeySignature\":\"0x9b50f510baa6a60bd0e4375cb0e2184df3409d2356250380a1f7907fb34f3d96578218d3043a45a235ef283863f218d142f8ac090191411bcfb1333043f980a41b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"HQpc6cr_wO6ZJUUn7LGOZOxDRpLH9v-NAZv2XrK8l5c\\\",\\\"y\\\":\\\"U68BcmwUO82Vc9LlAElRF0NNFpvjFv2BYxZ95bBzZWc\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"u05KU4oE4tnlI4Z5Yj-TAQSq8bgZuu4Mv2s3wblpkTs\"}"