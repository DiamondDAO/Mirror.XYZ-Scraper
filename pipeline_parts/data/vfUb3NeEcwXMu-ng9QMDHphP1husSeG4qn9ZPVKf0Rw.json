"{\"content\":{\"body\":\"## **区块链 101**\\n\\n> 本期的区块链 101 将继续上期的内容，理论部分我们就上期中的共识机制展开来谈谈；实践部分我们鼓励大家跟着教程去写出自己的第一个区块链智能合约项目，相信我，这是个有趣而又令人兴奋的过程！\\n\\n### **区块链理论：共识机制**\\n\\n![](https://pic3.zhimg.com/v2-bcabd290c3fcc0a98ffab6284e511f6e_b.jpg)\\n\\n### **为什么需要共识机制**\\n\\n在传统的中心化银行体系中，用户之间的交易可以通过查账来消除疑虑，大家都相信银行这个中央机构不会造假，但在去中心化的区块链世界中，不存在中心化角色，各个节点是分散且平行的，如何维护区块链的正常运作？各个区块应该选择什么版本？挖矿奖励应该分配给谁？如何避开造假的恶意账本？解决这一系列问题的方法与过程就是共识机制。\\n\\n提到区块链共识机制，不得不提经典的拜占庭将军问题与拜占庭容错算法，在阅读下面介绍各类区块链共识机制的内容前，我推荐你先了解一下拜占庭容错：*[Wikipedia](https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E6%258B%259C%25E5%258D%25A0%25E5%25BA%25AD%25E5%25B0%2586%25E5%2586%259B%25E9%2597%25AE%25E9%25A2%2598)* | *[Bianance Academy](https://link.zhihu.com/?target=https%3A//academy.binance.com/zh/articles/byzantine-fault-tolerance-explained)*\\n\\n### **⛓️ 区块链主流共识机制：**\\n\\n### **工作量证明 (Proof of Work)**\\n\\n代表代币：BTC、ETH 1.0\\n\\n在第一期中介绍的区块链就是采用 POW 机制的区块链，在竞赛中，最先算出哈希签名并通过全网验证的矿工获得代币奖励\\n\\n优点：\\n\\n*   最安全的公有链共识机制\\n*   机制简单、容易实行，攻击成本高（51%算力）\\n*   挖矿机制相对公平，投入的算力越多，获取打包权的概率越高\\n\\n缺点：\\n\\n*   消耗大量能源（电力），算力是通过能源消耗创造出来的\\n*   区块确认时间长，交易速度慢\\n\\n关联阅读：*[What is Proof of Work](https://link.zhihu.com/?target=https%3A//academy.binance.com/en/articles/proof-of-work-explained)*\\n\\n### **权益证明 (Proof of Stake)**\\n\\n代表代币：ETH 2.0\\n\\n与 POW 的高算力高收益不同，在 POS 机制下，打包用户的角色从“矿工“变成了”锻工“，拥有越多代币（权益）的用户越容易得到当前区块的写入权，因此 POS 机制又叫“伪选举机制”。参与 POS 竞争不需要高算力。POS 奖励打包用户的形式多种多样，有锁仓挖矿，又有锁仓获取收益+锦鲤抽签的形式。部分区块链会在早期采取 POW，产生一定量代币后转换到 POS 机制，ETH 就是一个例子。\\n\\n优点：\\n\\n*   不需要矿工持续挖矿产生区块记录、节省能源\\n*   竞争打包权的矿工必须先持有代币，理论上，为避免币蒸发，矿工更愿意保护系统正常运作\\n\\n缺点：\\n\\n*   为了更容易获取打包权，可能会造成囤币情况，降低货币流通量\\n*   获取到打包权的矿工能够轻易地改写出另一条假链，可能导致 Double Spending 攻击成功\\n*   执行与运作比 POW 机制复杂\\n\\n关联阅读：*[Proof of Stake Explained](https://link.zhihu.com/?target=https%3A//academy.binance.com/zh/articles/proof-of-stake-explained)*\\n\\n### **代理权益证明（Delegated Proof of Stake）**\\n\\n![](https://pic4.zhimg.com/v2-0fb3386d29d6cf5f093dc95d8e51522f_b.jpg)\\n\\n代表代币：EOS\\n\\nDPOS 可以理解为 POS + POW，参与者将打包工作委托给一小群数量固定的验证者，参与者通过投票选出验证者代表，投票采用 POS 机制，被选出的验证者之间存在密钥计算竞赛，采取 POW 机制来决定谁负责打包。在 DPOS 机制下，被委托的验证人会和他们的支持者共享获得的奖励的\\n\\n优点：\\n\\n*   减少参与验证工作的节点数量，打包效率得到提高\\n*   维护区块链的成本低，更节省能源\\n\\n缺点：\\n\\n*   执行与运作更复杂，容易产生安全漏洞\\n*   权利容易被少数掌握，存在演变为“部分中心化”风险\\n\\n关联阅读：*[What is Delegated Proof of Stake?](https://link.zhihu.com/?target=https%3A//hackernoon.com/what-is-delegated-proof-of-stake-897a2f0558f9)*\\n\\n### **区块链开发：第一个智能合约项目**\\n\\n学完了 Solidity 的基础，你是否迫不及的的想写出自己的第一个智能合约呢？\\n\\n现在你可以阅读 OpenZeppelin 的智能合约开发教程，从零开始，一步一步地完成自己的第一个 Smart Contract Project 。\\n\\n通过阅读 *[Developing Smart Contracts Tutorial](https://link.zhihu.com/?target=https%3A//docs.openzeppelin.com/learn/developing-smart-contracts)*，你将会学习到：\\n\\n*   Truffle 和 Hardhat 基础使用\\n*   智能合约的编写、编译\\n*   智能合约的本地部署与测试\\n*   将智能合约部署到公开的测试网络\\n*   升级智能合约\\n\\n在编写智能合约的过程中，你将会使用 *[OpenZeppelin](https://link.zhihu.com/?target=https%3A//openzeppelin.com/contracts/)* 库，它提供一系列经过实践测试的 API 来协助你开发安全可靠的智能合约，减少被攻击的风险。\\n\\n### **区块链工具分享：开发框架**\\n\\n> 从 0 开始编写区块链智能合约是困难的，但借助开发框架，我们可以更轻松的写出高质量的代码，更好地完成开发工作\\n\\n*   *[Hardhat](https://link.zhihu.com/?target=https%3A//hardhat.org/)*: 基于 JS，灵活可拓展的以太坊专业开发环境，容易上手，与 OpenZeppelin 的可升级智能合约插件直接集成\\n*   *[Truffle](https://link.zhihu.com/?target=https%3A//www.trufflesuite.com/truffle)*：基于 JS，近几年以太坊智能合约的默认开发框架，功能与 Hardhat 类似；它是 Truffle Suite 中的一员，能够与姊妹工具 Drizzle 和 Ganache 很好的配合完成各项开发工作\\n*   *[Brownie](https://link.zhihu.com/?target=https%3A//github.com/eth-brownie/brownie)*：基于 Python，简洁干净的智能合约开发框架，没有 JS 带来的各种麻烦，适合讨厌 JS 的开发者\\n*   *[EmBark](https://link.zhihu.com/?target=https%3A//framework.embarklabs.io/)*：基于JS，区块链 DApp 全栈框架，功能强大，自带 UI，可以通过 CLI 进行合约交互测试；模块化设计开发构建，可以选择想集成的功能、插件与工具；EmBark 有一定的上手难度\\n\\n关于 TypeScript 和 JavaScript：虽然目前的主流框架基于 JavaScript，但在实际开发中开发者更倾向于采用 TypeScript 来编写 Deploy 脚本与测试用例，JS 这玩意儿真的是一言难尽...\\n\",\"timestamp\":1633782003,\"title\":\"共识机制\"},\"digest\":\"z0mX9HfhLn34aSmk7VvbN87F3B2nXEmj59-cAzMzYic\",\"authorship\":{\"contributor\":\"0x7B076d7BcdE88Ec322B2D01AA1ADc1997b7724f6\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"-uhmdAZYxFgq_x4xq-zXdui7hRToWKgI3gCLaeRwzfE\\\",\\\"y\\\":\\\"e_jae50XeRHkDjBd1dCU7xTq7o4HjO4Idn3X9qLgXmA\\\"}\",\"signature\":\"R9TfvXODsq5U0_n-EzgZDplVK2KVEQ1fkU41F25oirDoOcndgOwQzSvdTVBGAdNpOuW6D-YfVb2MAGzmK881IQ\",\"signingKeySignature\":\"0x0475273f3894cbe534b5ebf3dc9005f7b109c905b95b05fd0afb3d0dd6c056984938a186d9c56832d588e27230d06074bb752d52c6fbbffe3ddc0a71e38362d11c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"-uhmdAZYxFgq_x4xq-zXdui7hRToWKgI3gCLaeRwzfE\\\",\\\"y\\\":\\\"e_jae50XeRHkDjBd1dCU7xTq7o4HjO4Idn3X9qLgXmA\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"z0mX9HfhLn34aSmk7VvbN87F3B2nXEmj59-cAzMzYic\"}"