"{\"content\":{\"body\":\"### Introduction\\n\\nIn this article we will learn how we can seamlessly generate fake data in Flutter that we can use with-in our test suites, or just for some placeholder data in our app when the backend is not completely setup yet or any other scenario that we just need a fake data in general. You will also learn how to create a Flutter package and use that package with-in your application, it can be used both in `lib` and `test` folder. And lastly you will learn how to setup a basic monorepo for your future projects, however I am not going to tackle about monorepos in this post on what are its pros and cons.\\n\\nHowever, if you don't really need the monorepo setup, just skip over to the actual implementation of the Factory Pattern.\\n\\n### Packages\\n\\nWe will only require the following packages for us to seamlessly generate fake data.\\n\\n* [faker](https://www.notion.so/Generating-Fake-Data-in-Flutter-using-the-Factory-Pattern-a420815e30e14b8b882c76b0b4410943): Will handle generating of random data of any data type.\\n* [uuid](https://www.notion.so/Generating-Fake-Data-in-Flutter-using-the-Factory-Pattern-a420815e30e14b8b882c76b0b4410943): Will generate a random uuid for us.\\n* [build_runner](https://pub.dev/packages/build_runner): Responsible for auto-generating us some boilerplate code.\\n* [freezed](https://pub.dev/packages/freezed): Is where we create our data models.\\n  * [freezed_annotation](https://pub.dev/packages/freezed_annotation)\\n  * [json_annotation](https://pub.dev/packages/json_annotation)\\n  * [json_serializable](https://pub.dev/packages/json_serializable)\\n\\n### Setup\\n\\nTo follow along, we'll start to setup a monorepo, first create your terminal and navigate into that directory on where you put up all your projects. I prefer to have mine under `/dev/personal-projects` so I'll `cd` into it.\\n\\nNext up is create a directory and call it \\\"flutter-fake-data-factory-pattern\\\" via `mkdir` terminal command.\\\\\\\\\\n\\n```\\nmkdir flutter-fake-data-factory-pattern\\n```\\n\\nThen next is to initialize Git in this directory so we can start up to track changes. Or maybe upload this into your repository or not. Whichever you prefer.\\\\\\\\\\n\\n```\\ncd flutter-fake-data-factory-pattern && git init\\n```\\n\\nCreate a new directory called `packages` and create a Flutter package inside that directory and call it `app_core`\\n\\n```\\nmkdir packages\\n\\ncd packages\\n\\nflutter create --template=package app_core\\n```\\n\\nOnce that is done you can proceed with installing the dependencies mentioned above.\\n\\nHave the following in your dependencies `pubspec.yaml` file\\\\\\\\\\n\\n```\\n# Add this so our local package will not be published to pub.dev\\npublish_to: \\\"none\\\"\\n\\ndependencies:\\n    freezed_annotation: ^0.14.2\\n    json_annotation: ^4.0.1\\n    faker: ^2.0.0\\n    uuid: ^3.0.4\\n\\ndev_dependencies:\\n    build_runner: ^2.0.5\\n    freezed: ^0.14.2\\n    json_serializable: ^4.1.3\\n```\\n\\nInstall the dependencies afterwards.\\\\\\\\\\n\\n```\\ncd app_core && flutter pub get\\n```\\n\\nNext is to create a Flutter project is where our Flutter app lives. Now go up 2 directories via\\\\\\\\\\n\\n```\\ncd ../..\\n```\\n\\nThen create another directory and call it \\\"apps\\\", it is where we will house our Flutter apps.\\\\\\\\\\n\\n```\\nmkdir apps\\n\\nflutter create client_app\\n```\\n\\nThen finally, just import the local package in \\\"client_app\\\" `pubspec.yaml`\\n\\n```\\napp_core:\\n    path: ../../packages/app_core\\n```\\n\\nNow that it is all setup and done we can proceed with the implementation of the Factory Pattern.\\n\\nKeep in mind that since we have this kind of setup, all of our data models will be coming from the local package that we created `app_core`\\n\\n### Creating the ModelFactory abstract\\n\\nWe'll want to create an abstract class for our factory classes so that they will be aligned with the actual implementation, then we'll just have a generic type argument to pass down to differ its results when other classes implements the abstract.\\\\\\\\\\n\\n```\\nimport 'package:faker/faker.dart';\\nimport 'package:uuid/uuid.dart';\\n\\nabstract class ModelFactory<T> {\\n  Faker get faker => Faker();\\n\\n  /// Creates a fake uuid.\\n  String createFakeUuid() {\\n    return Uuid().v4();\\n  }\\n\\n    /// Generate a single fake model.\\n  T generateFake();\\n\\n  /// Generate fake list based on provided length.\\n  List<T> generateFakeList({required int length});\\n}\\n```\\n\\nWe are only keeping it simple, we just want a single item and a List of items of a particular data model.\\n\\n* The getter `faker` is the `Faker` instance that got instantiated, it is where we grab all random data of any type.\\n* Next is the `createFakeUuid` method which is responsible for generating us a fake uuid out of the fly. Typically uuids are used when you have a data provider like Firestore or NoSQL databases like MongoDB, or a relational database that has a primary key type of uuid. But you can switch this up any however you want it to be.\\n* The `generateFake` is responsible for creating a single data model that requires implementation details; We'll have the implementation details for this in the factory class that extends this abstract class.\\n* Lastly, the `generateFakeList` will return a list, implementation details are not concerned here as well and it is being handled in the factory class the implements this abstract. It will just simply return a list of what is returned from `generateFake` method.\\n\\n### Defining our data models\\n\\nWe'll just have it simple, we'll want two for now a `User` and a `Tweet` data model.\\\\\\\\\\n\\n```\\nimport 'package:freezed_annotation/freezed_annotation.dart';\\n\\npart 'user.g.dart';\\npart 'user.freezed.dart';\\n\\n@freezed\\nclass User with _$User {\\n  factory User({\\n    required String id,\\n    required String name,\\n    required String email,\\n    int? age,\\n    @Default(false) bool suspended,\\n  }) = _User;\\n\\n  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);\\n}\\n\\n\\n\\nimport 'package:freezed_annotation/freezed_annotation.dart';\\n\\npart 'tweet.g.dart';\\npart 'tweet.freezed.dart';\\n\\n@freezed\\nclass Tweet with _$Tweet {\\n  factory Tweet({\\n    required String id,\\n    required String content,\\n    @Default([]) List<String> replies,\\n    @Default(0) int likes,\\n    @Default(0) int retweets,\\n  }) = _Tweet;\\n\\n  factory Tweet.fromJson(Map<String, dynamic> json) => _$TweetFromJson(json);\\n}\\n```\\n\\nDon't forget to run `build_runner` to let it generated the boilerplate code for us. Run it via this terminal command (You have to be in `app_core` directory otherwise this won't run):\\\\\\\\\\n\\n```\\nflutter pub run build_runner build --delete-conflicting-outputs\\n```\\n\\nIf you want to learn more about data modeling with `freezed` package, read more about it from this [tutorial that I wrote](https://dev.to/carlomigueldy/data-modeling-with-flutter-using-freezed-package-4p69).\\n\\n### Creating a factory class\\n\\nNow to implement the abstract class `ModelFactory`\\n\\n```\\nimport 'package:app_core/app_core.dart';\\n\\nclass UserFactory extends ModelFactory<User> {\\n  @override\\n  User generateFake() {\\n    return User(\\n      id: createFakeUuid(),\\n      email: faker.internet.email(),\\n      name: '${faker.person.firstName()} ${faker.person.lastName()}'.trim(),\\n      age: faker.randomGenerator.integer(25),\\n      suspended: faker.randomGenerator.boolean(),\\n    );\\n  }\\n\\n  @override\\n  List<User> generateFakeList({required int length}) {\\n    return List.generate(length, (index) => generateFake());\\n  }\\n}\\n\\n\\n\\nimport 'package:app_core/app_core.dart';\\n\\nclass TweetFactory extends ModelFactory<Tweet> {\\n  @override\\n  Tweet generateFake() {\\n    return Tweet(\\n      id: createFakeUuid(),\\n      content: faker.lorem.words(99).join(' '),\\n      likes: faker.randomGenerator.integer(5000),\\n      retweets: faker.randomGenerator.integer(2500),\\n      replies: List.generate(\\n        faker.randomGenerator.integer(105),\\n        (index) => faker.lorem.words(120).join(' '),\\n      ),\\n    );\\n  }\\n\\n  @override\\n  List<Tweet> generateFakeList({required int length}) {\\n    return List.generate(length, (index) => generateFake());\\n  }\\n}\\n```\\n\\n### Sample usage for generating fake data from the factory class\\n\\nIt's so easy and straight forward just like what you are thinking right now on how we can use these factory classes to generate us some fake data.\\\\\\\\\\n\\n```\\n/// A new instance of [UserFactory]\\nfinal userFactory = UserFactory();\\n\\n/// Generates a [User] data model\\nfinal fakeUser = userFactory.generateFake();\\n\\n/// Will generate a [List] of 10 [User] data model\\nfinal fakeUsers = userFactory.generateFakeList(10);\\n```\\n\\nWe can just basically import it anywhere and we don't have to manually set up the values for each property a User data model has.\\n\\n### Conclusion\\n\\nWe learned how to use `Faker` package and applied abstraction to avoid writing up the same code again and again for other data models to generate fake data. This would come quite so handy when we write a lot of unit tests with mocking as we don't have to create a data model instance and define each properties for each test case. And lastly we can also make use of this in the UI for placeholder data when the API is not yet ready to integrate with the frontend app.\\n\\nFull source code can be found from the repository\\n\\n[https://github.com/carlomigueldy/flutter-fake-data-factory-pattern](https://github.com/carlomigueldy/flutter-fake-data-factory-pattern)\\n\\n\",\"timestamp\":1636676522,\"title\":\"Generating Fake Data in Flutter using the Factory Pattern for Unit Testing\"},\"digest\":\"wIZiwP0808pu6SMO4jTZh5c3TZZAXfxuyjDowWCMWL8\",\"authorship\":{\"contributor\":\"0x3E8c686F499C877D8f4aFB1215b6f0935796b986\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XNAfCibxrmGjSr-VHADLIVoKcpjQ6AvgUiRVqATl37k\\\",\\\"y\\\":\\\"3RuY7Uw61mZNEnJyyzr7ObM928gt-QoWvGAdLDb2gy4\\\"}\",\"signature\":\"xEfl9sDWxdc0KeDolWCD0IHwzgbXCdZ73TkK3lXuzo1xNvy1NW10rMhCnyN-qE1dIkpmfR3rT1lPIp-wzlzpwg\",\"signingKeySignature\":\"0xc823d2ab2ee5864fc5495382efb960b4461c3fb598b3be4e5e068c6312ab60ce014c7378c1f02beed8fce37236dc1e3eb8dd28a6f911b33ec4172a1fa8b17f101b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"XNAfCibxrmGjSr-VHADLIVoKcpjQ6AvgUiRVqATl37k\\\",\\\"y\\\":\\\"3RuY7Uw61mZNEnJyyzr7ObM928gt-QoWvGAdLDb2gy4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"wIZiwP0808pu6SMO4jTZh5c3TZZAXfxuyjDowWCMWL8\"}"