"{\"content\":{\"body\":\"/ zero knowledge proofs\\n\\n* prove you know something w/o having to reveal what that something is\\n* applications:\\n  * private transactions, anonymous voting\\n\\n![](https://images.mirror-media.xyz/publication-images/yxF8E-t60_qX0VcCo-LIK.png?height=538&width=964)\\n\\n* proof systems\\n  * prover and a verifier\\n  * prover gives verifier a proof\\n  * define R(): a relation fun\\n    * takes a public set of parameters, called x, and a solution/witness called w\\n    * solution is private\\n    * the parameters are public (x)\\n    * proof system needs to satisfy properties:\\n      * 1 - complete\\n        * i.e. if w is valid solution, R = 1\\n        * verifier needs to accept the proof\\n        * (completeness: if r is valid, verifier accepts the proof)\\n      * 2 - soundness\\n        * if w is not a valid solution, verifier should reject with high probability\\n        * ?: why high probability\\n          * in cryptography — information theoretic security\\n            * mathematically impossible to find the value\\n          * but what makes cryptography practical / performant / usable for us — we state security in terms of probabilities\\n          * it’s secure if it’s very hard for attacker to distinguish or retrieve something\\n      * 3 - knowledge soundness property\\n        * if verifier accepts the proof, that must mean the prover must know what the solution (w) actually is\\n      * 4 - optional: zero knowledge\\n        * the proof reveals nothing about w (the solution)\\n  * analogy:\\n    * R is the rules of sudoku\\n    * x is a particular puzzle instance\\n    * w is a solution for that sudoku puzzle\\n  * so: R(x,w) = 1\\n* proving knowledge of an assignment\\n  * arithmetic circuit\\n    * turning an equation into a graph\\n  * how to represent instance / problem the witness/solution is solving?\\n\\n![](https://images.mirror-media.xyz/publication-images/l1_dW-l-eYBFxrtUZWCz3.png?height=556&width=886)\\n\\n* examples of how to represent problems in this format: (arithmetic circuits)\\n  * e.g. range proof - can represent as polynomials\\n  * e.g. verifiable shuffle - prove permutations\\n* range proof in transactions\\n  * want to prove that the exchange equals out (not creating/destroying money)\\n  * need to prove that the amount is >=0\\n  * use polynomials\\n\\n![](https://images.mirror-media.xyz/publication-images/EbC5Ss0CnyYChE_Wza7jZ.png?height=456&width=742)\\n\\n* zero-knowledge interactive proofs\\n  * schnorr: basis of [schnorr signatures](https://en.wikipedia.org/wiki/Schnorr_signature)\\n  * [sigma protocol](https://en.wikipedia.org/wiki/Proof_of_knowledge#Sigma_protocols) — a set of proof of knowledge that greeks invented\\n  * i have a secret key\\n  * want to reveal that i have a secret key w/o revealing the key\\n    * show it to another person by providing a signature with the key\\n  * steps: \\\\*\\\\*\\\\*\\n    * alpha is secret key, prover want to prover they know alpha\\n    * Y = alpha \\\\* G\\n      * Y is public key\\n      * alpha is the secret key\\n    * 1 - R is commitment. R = r \\\\* G\\n      * r is random scalar in this group\\n      * G is a generator of the group\\n      * when you multiply r\\\\*G you get a public key, basically. a public commitment to that secret value\\n    * 2 - verifier generates a random scalar, c\\n    * 3 - prover computs s = r + c \\\\* a\\n    * 4 - verifier checks:\\n      * s \\\\* G = R + c \\\\* Y\\n      * if equal, then verified\\n    * “discrete logs are hard”\\n* schnorr proof of knowledge\\n  * using [fiat-shamir](https://en.wikipedia.org/wiki/Fiat%E2%80%93Shamir_heuristic)\\n  * instead of sending c (verifier sending a random number in the interaction)\\n    * uses hashes\\n    * c = hash of the transcript of the protocol\\n\\n![](https://images.mirror-media.xyz/publication-images/giwsBERwcFl6nq9TZ_8aT.png?height=494&width=922)\\n\\n* steps:\\n  * same but:\\n    * we replace verifier sending c\\n      * c <- H(Y, R)\\n      * by sending the hash instead of generating a c,\\n        * c is “basically random”\\n        * hash — you know that the person on the other side can’t choose an incorrect value\\n    * fiat shamir transform — same property\\n  * result: prover can just send everything in one message\\n    * sigma protocol: s looks like the “back and forth” lol\\n  * you just send over s because you know all the other values\\n    * you both agree on H already so you can send all the values over in one interaction\\n* fiat-shamir transform\\n  * original proof should be a public-coin proof\\n  * the random numbers being sent are public\\n* allows for interactive -> non interactive\\n* succinct NARGs -> zkSNARKS\\n  * succinct\\n  * an argument is only sound against computationally bound provers\\n  * how to make succinct?\\n    * PCP theorem + merkle trees\\n  * idea: turn everything into polynomials\\n* zkSNARKS\\n  * hard part is succinctness\\n  * 1 - turn problem into polynomials\\n  * 2 - how do we prove that two polynomials are equal?\\n* [schwartz-zippel lemma](https://zeroknowledge.fm/the-missing-explanation-of-zk-snarks-part-1/)\\n  * two polynomials that are different, are different in most places\\n    * two different polynomials of degree 1 intersect in at most 1 point\\n    * two diff polynomials of degree 2 intersect in at most 2 points\\n  * two different polynomials of degree n can intersect in at most n points\\n* how to turn a problem into a set of polynomials you can input into zksnark?\\n\\n![](https://images.mirror-media.xyz/publication-images/z031nnPinmzilMD2GWdMt.png?height=508&width=956)\\n\\n* kind of a grind lol\\n* rank 1 constraint system (R1CS) representation of circuits\\n  * an equation of matrices in this form\\n  * Quadratic Arithmetic Program (QAP) - represent arithmetic equations\\n* trusted setup: for ZKPs, some have trusted set up and some don’t\\n  * a result of doing a trusted setup, it can speed up the subsequent verifications\\n  * the fastest ZKPs today still require trusted setup\\n* zkSTARKS: don’t require trusted setup\\n  * zcash: [ceremony](https://www.wnycstudios.org/podcasts/radiolab/articles/ceremony)\\n  * downside of trusted setup: requires trusting someone to do the setup\\n    * zcash: there’s “toxic waste” — but failed to throw away something “toxic” that allowed ppl to double-spend counterfeit money\\n    * <https://electriccoin.co/blog/zcash-counterfeiting-vulnerability-successfully-remediated/>\\n  * need to generate parameter w certain properties\\n    * an intermediate of that process — that data can allow you to break the privacy guarantees of the system\\n    * should be thrown away — but if you have the intermediates, that lets you break the system\\n  * trusted setup:\\n    * 1 - five ppl do diff parts on diff computer\\n    * 2 - organized a mailing list and allowed anyone join the trusted setup, w the idea that if anyone is honest and throws away their thing, then you can’t break the system\\n  * limited set of ppl: each sets up a part of public and private key pair. everyone destroys the private keys at the end\\n    * but they kept some transcript value in the output/typo in the original paper. a lot of implementations just followed the paper\\n    * CRS: common reference string. output of the trusted setup, used in the subsequent proofs\\n  * ?: how often do u have to do this trusted setup?\\n    * depends on the proof system\\n    * some proof systems require trusted setup, per transaction\\n      * others are trusted setup but transparent (zkSTARKs) and updatable\\n        * ppl can keep adding themselves to the trusted setup?\\n* examples\\n  * constructions of zk proof systems:\\n    * e.g. zksnarks, bulletproofs, zkstarks, PLONK, halo, grof\\n  * considerations: proof size, prover work, verifier work, post-quantum, trusted setup\\n  * ?: how big of a concern / soon is quantum computing?\\n    * discrete log problem — a lot of crytpography depends on this being hard\\n    * schnorrs algorithm — a quantum computer would make it easy to solve the discrete log problem\\n    * so if we have quantum computers fast enough, all these systems would be broken\\n    * how many qubits … how powerful does a qcomp need to be for cryptographic consideration?\\n      * 100? 1000? qubits?\\n    * e.g. bulletproofs — rely on discrete log problem\\n      * very fat\\n      * but not post-quantum resistant\\n    * e.g. sha3\\n      * algorithms are not post quantum safe\\n    * some standards / working groups consider it when choosing a standard paik? algorithm\\n    * depends on the problem … the nature/scale … security assumptions, if the trade off is worth the extra complexity for post quantum resistance\\n* e.g. penumbra\\n\\n![](https://images.mirror-media.xyz/publication-images/KEWf8O1rsj6stU-KyTVBF.png?height=488&width=854)\\n\\n![](https://images.mirror-media.xyz/publication-images/qZiswMS_2GWVaZbJynIr4.png?height=458&width=738)\\n\\n* [PLONK](https://vitalik.ca/general/2019/09/22/plonk.html)\\n  * stark-ish\\n    * PLONK uses “Kate commitments”\",\"timestamp\":1635811677,\"title\":\"notes on zero knowledge proofs\"},\"digest\":\"GCRud-88ZWi11czPoYmXw3CeRQuU2LC4LqHP8sBf2uQ\",\"authorship\":{\"contributor\":\"0x5f35C9f52BeBbE83225B84972fb335FB32c3eE34\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"mcBetZ5zXT6SnqPQaZUqaq6ly8RkcerlmjNQ-60HAFE\\\",\\\"y\\\":\\\"uAuXnRMOBvYtTiIDk0ZpElZdrXaLgJ5FtoFw7R-ROi4\\\"}\",\"signature\":\"ZwXpu9gNq-XAmsZAbUA7rnzMo_kT14oEjvlLCes6-fDmtLfAat7I0jtmBzfKbBMKkmbxqOKqp1JjrH6ep1wlwg\",\"signingKeySignature\":\"0x77db2323aa52b5eebb85db838250a724aaa6b120e3e7f8ca5cace18e8a19a1914cb700e169b92b0af879608868c918dad8563bbdb9992a12a1a30e86a4fff9e01c\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"mcBetZ5zXT6SnqPQaZUqaq6ly8RkcerlmjNQ-60HAFE\\\",\\\"y\\\":\\\"uAuXnRMOBvYtTiIDk0ZpElZdrXaLgJ5FtoFw7R-ROi4\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"LmVAamtjH0VrwapyZr-dOnPlXy2Vy85By2ApifUeSGw\"}"