"{\"content\":{\"body\":\"![Cover image for Real Time React Fun on the Blockchain](https://res.cloudinary.com/practicaldev/image/fetch/s--bdgOeHfp--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8cp61yumg20wo2s3x9n.jpeg)\\n\\nEvents are great, listening for events and doing something is one of the core uses of JavaScript on the frontend. It's what allows us to see some amazing interactions happen in our web applications.\\n\\nIt's fun to listen for clicks and whenever we press a key but it's even more fun when we can listen for events that happen somewhere else completely. This allows us to create real time applications and if you're building on the blockchain it can be done with just a few lines of code!\\n\\nThe code we're going to be discussing below was built while I was taking a course all about building Smart Contracts at [BuildSpace](https://buildspace.so/). If you're interested in really diving into the things I'm going to discuss I highly recommend checking out their courses which are all cohort based and free!\\n\\nThe Project I built here was a little concept Pokemon Battle Simulator where anyone can jump in and have a Pokemon perform an action in battle against another. Almost like a crowd sourced Pokemon battle on the blockchain. A quick demo of it can be found [on this tweet](https://twitter.com/Rahatcodes/status/1430739844100198402).\\n\\nLet's start by taking a look at some Solidity code. Solidity is a language you can use to build Smart Contracts which is code that helps you interact with the Ethereum Blockchain. Here's some code from a smart contract I've written below:\\\\\\\\\\n\\n```\\nevent NewAction(\\n        address indexed from,\\n        uint256 timestamp,\\n        string message,\\n        uint256 lugiahp,\\n        uint256 zardhp\\n    );\\n\\n    struct Action {\\n        address trainer;\\n        string message;\\n        uint256 timestamp;\\n        uint256 lugiahp;\\n        uint256 zardhp;\\n    }\\n\\n    Action[] actions;\\n```\\n\\nThis isn't the full smart contract but we're just going to be focused on the parts that enable us to have real time interactions with the block chain. Now remember how I was talking about events at the start of this post? With Solidity you can actually create events to listen for. In this case I am listening for an event that I have named NewAction. That is going to be whenever and Action struct is added to the actions Array.\\n\\nIf you're coming from JavaScript you can think of this as an actions object being added to an array of actions. Now let's take a look at a function from my smart contract:\\\\\\\\\\n\\n```\\n function attack(string memory _message) public {\\n        totalDamage += charizardAttack;\\n        totalHp -= charizardAttack;\\n        charizardDamage += lugiaAttack;\\n        charizardHp -= lugiaAttack;\\n        console.log(\\\"%s has attacked the shadow Lugia!\\\", msg.sender);\\n        console.log(\\\"%s was attacked back by shadow Lugia!\\\", msg.sender);\\n        actions.push(\\n            Action(msg.sender, _message, block.timestamp, totalHp, charizardHp)\\n        );\\n        emit NewAction(\\n            msg.sender,\\n            block.timestamp,\\n            _message,\\n            totalHp,\\n            charizardHp\\n        );\\n    }\\n```\\n\\nThis function is taking care of an attack sequence between Charizard and Lugia with both dealing some damage to each other. At the end of the function you will notice I have this\\\\\\\\\\n\\n```\\nemit NewAction(\\n            msg.sender,\\n            block.timestamp,\\n            _message,\\n            totalHp,\\n            charizardHp\\n        );\\n```\\n\\nRemember I created the NewAction event earlier? Calling emit is what allows me to say ok this event is now taking place and a new action struct is being created with the information passed in and added to the array of actions.\\n\\nThat's all we need on the Solidity side of things to make sure an event is there to be listened for but how do we actually listen for this on the front end?\\n\\nDuring the time I spent building this, our awesome instructor [Farza](https://twitter.com/FarzaTV) introduced us to using [ethers js](https://docs.ethers.io/) with React to interact with the blockchain. One of the awesome things about this course that I really enjoyed is that there are some bonus concepts like events that he introduces and lets us explore for ourselves.\\n\\nSo while searching google and hunting through some documentation I was able to discover the code needed to listen for this event on the frontend. Check out this useEffect hook below from one of my components:\\\\\\\\\\n\\n```\\n\\n  const listener = (block) => {\\n    console.log(\\\"new action emited\\\")\\n    console.log(block)\\n    getAllActions()\\n  }\\n\\n  React.useEffect(() => {\\n    lugiaBattleContract.on(\\\"NewAction\\\", listener)\\n    return () => {\\n    lugiaBattleContract.off(\\\"NewAction\\\", listener)\\n    }\\n  },[])\\n```\\n\\nA little context: the getAllActions function is getting the data from the actions Array in my smart contract, sanitizing it a bit, then updating some state with that data. In my useEffect hook I am using some functionality given to us by ethers js in order to listen for an event named \\\"NewAction\\\" which if you recall I defined in my smart contract. Now anytime anyone performs an attack - everyone else will also know because the action will be updated for everyone in real time!\\n\\nA quick note: always make sure that if you're using some type of listener function in React - put it in a useEffect and return a function for cleaning it up. Otherwise you'll end up like me trying to debug why your component is re-rendering several hundred times when the event only happens once.\\n\\nHere is a quick demo below of this in action:\\n\\n![charziard attacks lugia demo](https://res.cloudinary.com/practicaldev/image/fetch/s--bPBLCx2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvthxwt5hanlu4r5ou14.gif)\\n\\nIt's a large gif ðŸ˜¬ so once it loads you'll see that Charizard is attacking in one browser but the actions logs update in both browsers!\\n\\nI've done some real time stuff before and this is just amazing to see that I can do this so easily on the Ethereum blockchain!\\n\\nIf you would like to play with the demo yourself [you can do so here.](https://focused-yonath-5cdafd.netlify.app/)\\n\\nYou will need to have the metamask chrome extension set up and you'll need some test ETH on the Rinkeby Test Network.\\n\\nI've been on a journey to learn web3 for a while now in hopes of getting into the space eventually as a developer advocate. If you want to join me on this journey give me a follow on twitter!\\n\\n[https://twitter.com/Rahatcodes](https://twitter.com/Rahatcodes)\\n\\n\",\"timestamp\":1633549597,\"title\":\"Real Time React Fun on the Blockchain\"},\"digest\":\"6Ier9H0Hasdt_bujYtHySlOiLD5YKz4pom3mhvu81nQ\",\"authorship\":{\"contributor\":\"0x322Af0da66D00be980C7aa006377FCaaEee3BDFD\",\"signingKey\":\"{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"mYZrHmMBaTDIgwY8ijZ-cDewbW_BqYKlmzcr8qr9vRk\\\",\\\"y\\\":\\\"1shDpdEWlf7jK8uy1iRkvDhps6QMzZ5j8_deQkeh1xg\\\"}\",\"signature\":\"Xy1WGyNUzINpP-2O9ZZGm7TvfFOZaHkbZaj-dhhfPOSlQ0Lo1V2MzOyUeuZo_k_wbPpufWixQqJKf_ArS3wR1Q\",\"signingKeySignature\":\"0xffd40c62009db7dba2772ce868dda4a4bbc0d76e48e97a41197824753a9021de7103eea1d0870d829f2ceb8f8e60c94fc3ce4452eb8babbcf4524d41123bfe271b\",\"signingKeyMessage\":\"I authorize publishing on mirror.xyz from this device using:\\n{\\\"crv\\\":\\\"P-256\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"verify\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"mYZrHmMBaTDIgwY8ijZ-cDewbW_BqYKlmzcr8qr9vRk\\\",\\\"y\\\":\\\"1shDpdEWlf7jK8uy1iRkvDhps6QMzZ5j8_deQkeh1xg\\\"}\",\"algorithm\":{\"name\":\"ECDSA\",\"hash\":\"SHA-256\"}},\"nft\":{},\"version\":\"12-21-2020\",\"originalDigest\":\"6Ier9H0Hasdt_bujYtHySlOiLD5YKz4pom3mhvu81nQ\"}"